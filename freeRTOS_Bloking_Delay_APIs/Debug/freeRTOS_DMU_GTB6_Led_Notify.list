
freeRTOS_DMU_GTB6_Led_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a44  08004a44  00005a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aac  08004aac  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004aac  08004aac  00005aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab4  08004ab4  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab4  08004ab4  00005ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004abc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041d4  20000060  08004b1c  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004234  08004b1c  00006234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df0e  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d2  00000000  00000000  00013f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b90  00000000  00000000  00016770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ad  00000000  00000000  00017300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239eb  00000000  00000000  00017bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1b0  00000000  00000000  0003b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd469  00000000  00000000  00049748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126bb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  00126bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00129cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004a2c 	.word	0x08004a2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08004a2c 	.word	0x08004a2c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000007c 	.word	0x2000007c
 8000530:	2000011c 	.word	0x2000011c

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b08e      	sub	sp, #56	@ 0x38
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fbfd 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f839 	bl	80005b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 8000542:	f000 fb4f 	bl	8000be4 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f92b 	bl	80007a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800054a:	f000 f8a1 	bl	8000690 <MX_ADC1_Init>
  MX_CAN1_Init();
 800054e:	f000 f8f1 	bl	8000734 <MX_CAN1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <main+0x70>)
 8000554:	f107 041c 	add.w	r4, r7, #28
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2100      	movs	r1, #0
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fc22 	bl	8002db6 <osThreadCreate>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0c      	ldr	r2, [pc, #48]	@ (80005a8 <main+0x74>)
 8000576:	6013      	str	r3, [r2, #0]
  //   xTaskCreate(StartDefaultTask," DMU OKUMA ",128, NULL, 4, &myTask01_attributes); * stack size parametresi 128



  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <main+0x78>)
 800057a:	463c      	mov	r4, r7
 800057c:	461d      	mov	r5, r3
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800058a:	463b      	mov	r3, r7
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fc11 	bl	8002db6 <osThreadCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a06      	ldr	r2, [pc, #24]	@ (80005b0 <main+0x7c>)
 8000598:	6013      	str	r3, [r2, #0]
//  xTaskCreate(StartTask02," Led yakma ", configMINIMAL_STACK_SIZE, NULL, 2, &myTask02Handle);

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059a:	f002 fc05 	bl	8002da8 <osKernelStart>
//  vTaskStartScheduler();
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	bf00      	nop
 80005a0:	e7fd      	b.n	800059e <main+0x6a>
 80005a2:	bf00      	nop
 80005a4:	08004a50 	.word	0x08004a50
 80005a8:	2000038c 	.word	0x2000038c
 80005ac:	08004a78 	.word	0x08004a78
 80005b0:	20000390 	.word	0x20000390

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	@ 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f004 f958 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a29      	ldr	r2, [pc, #164]	@ (8000688 <SystemClock_Config+0xd4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <SystemClock_Config+0xd4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4b24      	ldr	r3, [pc, #144]	@ (800068c <SystemClock_Config+0xd8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000600:	4a22      	ldr	r2, [pc, #136]	@ (800068c <SystemClock_Config+0xd8>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b20      	ldr	r3, [pc, #128]	@ (800068c <SystemClock_Config+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 800062c:	2340      	movs	r3, #64	@ 0x40
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f8e9 	bl	8002818 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800064c:	f000 f9c0 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000658:	2390      	movs	r3, #144	@ 0x90
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fdbc 	bl	80021ec <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067a:	f000 f9a9 	bl	80009d0 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000696:	463b      	mov	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006a2:	4b21      	ldr	r3, [pc, #132]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006a4:	4a21      	ldr	r2, [pc, #132]	@ (800072c <MX_ADC1_Init+0x9c>)
 80006a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006d0:	4a17      	ldr	r2, [pc, #92]	@ (8000730 <MX_ADC1_Init+0xa0>)
 80006d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006dc:	2201      	movs	r2, #1
 80006de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <MX_ADC1_Init+0x98>)
 80006f0:	f000 fb94 	bl	8000e1c <HAL_ADC_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f969 	bl	80009d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000702:	2301      	movs	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_ADC1_Init+0x98>)
 8000710:	f000 fd32 	bl	8001178 <HAL_ADC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800071a:	f000 f959 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000031c 	.word	0x2000031c
 800072c:	40012000 	.word	0x40012000
 8000730:	0f000001 	.word	0x0f000001

08000734 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000738:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_CAN1_Init+0x64>)
 800073a:	4a18      	ldr	r2, [pc, #96]	@ (800079c <MX_CAN1_Init+0x68>)
 800073c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800073e:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000740:	220c      	movs	r2, #12
 8000742:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000752:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000756:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_CAN1_Init+0x64>)
 800075a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800075e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_CAN1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_CAN1_Init+0x64>)
 8000786:	f000 ff25 	bl	80015d4 <HAL_CAN_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000790:	f000 f91e 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000364 	.word	0x20000364
 800079c:	40006400 	.word	0x40006400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4b4c      	ldr	r3, [pc, #304]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a4b      	ldr	r2, [pc, #300]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b49      	ldr	r3, [pc, #292]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b45      	ldr	r3, [pc, #276]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a44      	ldr	r2, [pc, #272]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b42      	ldr	r3, [pc, #264]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a36      	ldr	r2, [pc, #216]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <MX_GPIO_Init+0x14c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4822      	ldr	r0, [pc, #136]	@ (80008f0 <MX_GPIO_Init+0x150>)
 8000866:	f001 fca7 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2106      	movs	r1, #6
 800086e:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <MX_GPIO_Init+0x154>)
 8000870:	f001 fca2 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4818      	ldr	r0, [pc, #96]	@ (80008f0 <MX_GPIO_Init+0x150>)
 800088e:	f001 fae7 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <MX_GPIO_Init+0x154>)
 80008a8:	f001 fada 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008ac:	2306      	movs	r3, #6
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_GPIO_Init+0x154>)
 80008c4:	f001 facc 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <MX_GPIO_Init+0x158>)
 80008de:	f001 fabf 	bl	8001e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	@ 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40021000 	.word	0x40021000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8000904:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000908:	4813      	ldr	r0, [pc, #76]	@ (8000958 <StartDefaultTask+0x5c>)
 800090a:	f001 fc3d 	bl	8002188 <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <StartDefaultTask+0x60>)
 8000914:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <StartDefaultTask+0x64>)
 8000918:	f000 fac4 	bl	8000ea4 <HAL_ADC_Start>
	  if(digital_output == 0)
 800091c:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <StartDefaultTask+0x60>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d115      	bne.n	8000950 <StartDefaultTask+0x54>
	  {
		  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000924:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000928:	480d      	ldr	r0, [pc, #52]	@ (8000960 <StartDefaultTask+0x64>)
 800092a:	f000 fb8d 	bl	8001048 <HAL_ADC_PollForConversion>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10d      	bne.n	8000950 <StartDefaultTask+0x54>
		  {
			  dmu_value = HAL_ADC_GetValue(&hadc1);
 8000934:	480a      	ldr	r0, [pc, #40]	@ (8000960 <StartDefaultTask+0x64>)
 8000936:	f000 fc12 	bl	800115e <HAL_ADC_GetValue>
 800093a:	4603      	mov	r3, r0
 800093c:	4a09      	ldr	r2, [pc, #36]	@ (8000964 <StartDefaultTask+0x68>)
 800093e:	6013      	str	r3, [r2, #0]
			  osSignalSet(myTask02Handle, dmu_value);// bildirim göndermek için
 8000940:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <StartDefaultTask+0x6c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a07      	ldr	r2, [pc, #28]	@ (8000964 <StartDefaultTask+0x68>)
 8000946:	6812      	ldr	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fa94 	bl	8002e78 <osSignalSet>
			  xTaskNotify(myTask02Handle, 0x00, eIncrement); // bildirim göndermek için
		  }
		  */
	  };

    osDelay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f002 fa7c 	bl	8002e4e <osDelay>
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8000956:	e7d5      	b.n	8000904 <StartDefaultTask+0x8>
 8000958:	40021000 	.word	0x40021000
 800095c:	20000398 	.word	0x20000398
 8000960:	2000031c 	.word	0x2000031c
 8000964:	20000394 	.word	0x20000394
 8000968:	20000390 	.word	0x20000390

0800096c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t pulNotificationValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if(osSignalWait(&pulNotificationValue, 100).status == osEventSignal) // bidirim almak için
 8000978:	f107 0108 	add.w	r1, r7, #8
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2264      	movs	r2, #100	@ 0x64
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fab8 	bl	8002ef8 <osSignalWait>
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b08      	cmp	r3, #8
 800098c:	d1f4      	bne.n	8000978 <StartTask02+0xc>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2107      	movs	r1, #7
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <StartTask02+0x5c>)
 8000994:	f001 fc10 	bl	80021b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099e:	480b      	ldr	r0, [pc, #44]	@ (80009cc <StartTask02+0x60>)
 80009a0:	f001 fc0a 	bl	80021b8 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 80009a4:	2064      	movs	r0, #100	@ 0x64
 80009a6:	f002 fd57 	bl	8003458 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2107      	movs	r1, #7
 80009ae:	4806      	ldr	r0, [pc, #24]	@ (80009c8 <StartTask02+0x5c>)
 80009b0:	f001 fc02 	bl	80021b8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ba:	4804      	ldr	r0, [pc, #16]	@ (80009cc <StartTask02+0x60>)
 80009bc:	f001 fbfc 	bl	80021b8 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 80009c0:	2064      	movs	r0, #100	@ 0x64
 80009c2:	f002 fd49 	bl	8003458 <vTaskDelay>
	  if(osSignalWait(&pulNotificationValue, 100).status == osEventSignal) // bidirim almak için
 80009c6:	e7d7      	b.n	8000978 <StartTask02+0xc>
 80009c8:	40021400 	.word	0x40021400
 80009cc:	40020800 	.word	0x40020800

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <HAL_MspInit+0x54>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <HAL_MspInit+0x54>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x54>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <HAL_MspInit+0x54>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	f06f 0001 	mvn.w	r0, #1
 8000a22:	f001 f9e6 	bl	8001df2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	@ (8000ab0 <HAL_ADC_MspInit+0x7c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d127      	bne.n	8000aa6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a15      	ldr	r2, [pc, #84]	@ (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_ADC_MspInit+0x80>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a92:	2303      	movs	r3, #3
 8000a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <HAL_ADC_MspInit+0x84>)
 8000aa2:	f001 f9dd 	bl	8001e60 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	@ 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <HAL_CAN_MspInit+0x94>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d134      	bne.n	8000b48 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a14      	ldr	r2, [pc, #80]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <HAL_CAN_MspInit+0x98>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b16:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b28:	2309      	movs	r3, #9
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4809      	ldr	r0, [pc, #36]	@ (8000b58 <HAL_CAN_MspInit+0x9c>)
 8000b34:	f001 f994 	bl	8001e60 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2105      	movs	r1, #5
 8000b3c:	2014      	movs	r0, #20
 8000b3e:	f001 f958 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b42:	2014      	movs	r0, #20
 8000b44:	f001 f971 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	@ 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40006400 	.word	0x40006400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020400 	.word	0x40020400

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 f921 	bl	8000ddc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b9a:	f002 ffa3 	bl	8003ae4 <xTaskGetSchedulerState>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d001      	beq.n	8000ba8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ba4:	f003 fbe8 	bl	8004378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bb0:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <CAN1_RX0_IRQHandler+0x10>)
 8000bb2:	f000 fe0a 	bl	80017ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000364 	.word	0x20000364

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bfe:	4b34      	ldr	r3, [pc, #208]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d011      	beq.n	8000c32 <SystemCoreClockUpdate+0x4e>
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d844      	bhi.n	8000c9e <SystemCoreClockUpdate+0xba>
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <SystemCoreClockUpdate+0x3e>
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d004      	beq.n	8000c2a <SystemCoreClockUpdate+0x46>
 8000c20:	e03d      	b.n	8000c9e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c22:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <SystemCoreClockUpdate+0xf0>)
 8000c24:	4a2c      	ldr	r2, [pc, #176]	@ (8000cd8 <SystemCoreClockUpdate+0xf4>)
 8000c26:	601a      	str	r2, [r3, #0]
      break;
 8000c28:	e03d      	b.n	8000ca6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd4 <SystemCoreClockUpdate+0xf0>)
 8000c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cdc <SystemCoreClockUpdate+0xf8>)
 8000c2e:	601a      	str	r2, [r3, #0]
      break;
 8000c30:	e039      	b.n	8000ca6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c32:	4b27      	ldr	r3, [pc, #156]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	0d9b      	lsrs	r3, r3, #22
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c46:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00c      	beq.n	8000c68 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c4e:	4a23      	ldr	r2, [pc, #140]	@ (8000cdc <SystemCoreClockUpdate+0xf8>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000c58:	6852      	ldr	r2, [r2, #4]
 8000c5a:	0992      	lsrs	r2, r2, #6
 8000c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e00b      	b.n	8000c80 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <SystemCoreClockUpdate+0xf4>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c70:	4a17      	ldr	r2, [pc, #92]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000c72:	6852      	ldr	r2, [r2, #4]
 8000c74:	0992      	lsrs	r2, r2, #6
 8000c76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	0c1b      	lsrs	r3, r3, #16
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c98:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <SystemCoreClockUpdate+0xf0>)
 8000c9a:	6013      	str	r3, [r2, #0]
      break;
 8000c9c:	e003      	b.n	8000ca6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <SystemCoreClockUpdate+0xf0>)
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd8 <SystemCoreClockUpdate+0xf4>)
 8000ca2:	601a      	str	r2, [r3, #0]
      break;
 8000ca4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <SystemCoreClockUpdate+0xec>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <SystemCoreClockUpdate+0xfc>)
 8000cb2:	5cd3      	ldrb	r3, [r2, r3]
 8000cb4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <SystemCoreClockUpdate+0xf0>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <SystemCoreClockUpdate+0xf0>)
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	371c      	adds	r7, #28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	00f42400 	.word	0x00f42400
 8000cdc:	007a1200 	.word	0x007a1200
 8000ce0:	08004a9c 	.word	0x08004a9c

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce8:	f7ff ff6a 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f003 fe0f 	bl	8004934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fc0d 	bl	8000534 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d28:	08004abc 	.word	0x08004abc
  ldr r2, =_sbss
 8000d2c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d30:	20004234 	.word	0x20004234

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f001 f83b 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe36 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f001 f853 	bl	8001e46 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f001 f81b 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	2000039c 	.word	0x2000039c

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	2000039c 	.word	0x2000039c

08000e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e033      	b.n	8000e9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fdfa 	bl	8000a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e62:	f023 0302 	bic.w	r3, r3, #2
 8000e66:	f043 0202 	orr.w	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fab4 	bl	80013dc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e8a:	e001      	b.n	8000e90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Start+0x1a>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e0b2      	b.n	8001024 <HAL_ADC_Start+0x180>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d018      	beq.n	8000f06 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f042 0201 	orr.w	r2, r2, #1
 8000ee2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee4:	4b52      	ldr	r3, [pc, #328]	@ (8001030 <HAL_ADC_Start+0x18c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a52      	ldr	r2, [pc, #328]	@ (8001034 <HAL_ADC_Start+0x190>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9a      	lsrs	r2, r3, #18
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ef8:	e002      	b.n	8000f00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f9      	bne.n	8000efa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d17a      	bne.n	800100a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f3e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f52:	d106      	bne.n	8000f62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f58:	f023 0206 	bic.w	r2, r3, #6
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f70:	4b31      	ldr	r3, [pc, #196]	@ (8001038 <HAL_ADC_Start+0x194>)
 8000f72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000f7c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d12a      	bne.n	8000fe0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800103c <HAL_ADC_Start+0x198>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d015      	beq.n	8000fc0 <HAL_ADC_Start+0x11c>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a29      	ldr	r2, [pc, #164]	@ (8001040 <HAL_ADC_Start+0x19c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_Start+0x106>
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <HAL_ADC_Start+0x194>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 031f 	and.w	r3, r3, #31
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00a      	beq.n	8000fc0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <HAL_ADC_Start+0x1a0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d136      	bne.n	8001022 <HAL_ADC_Start+0x17e>
 8000fb4:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_ADC_Start+0x194>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d130      	bne.n	8001022 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d129      	bne.n	8001022 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	e020      	b.n	8001022 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a15      	ldr	r2, [pc, #84]	@ (800103c <HAL_ADC_Start+0x198>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d11b      	bne.n	8001022 <HAL_ADC_Start+0x17e>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d114      	bne.n	8001022 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e00b      	b.n	8001022 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f043 0210 	orr.w	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000000 	.word	0x20000000
 8001034:	431bde83 	.word	0x431bde83
 8001038:	40012300 	.word	0x40012300
 800103c:	40012000 	.word	0x40012000
 8001040:	40012100 	.word	0x40012100
 8001044:	40012200 	.word	0x40012200

08001048 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001064:	d113      	bne.n	800108e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001074:	d10b      	bne.n	800108e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f043 0220 	orr.w	r2, r3, #32
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e063      	b.n	8001156 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800108e:	f7ff feb9 	bl	8000e04 <HAL_GetTick>
 8001092:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001094:	e021      	b.n	80010da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d01d      	beq.n	80010da <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d007      	beq.n	80010b4 <HAL_ADC_PollForConversion+0x6c>
 80010a4:	f7ff feae 	bl	8000e04 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d212      	bcs.n	80010da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d00b      	beq.n	80010da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	f043 0204 	orr.w	r2, r3, #4
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e03d      	b.n	8001156 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d1d6      	bne.n	8001096 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f06f 0212 	mvn.w	r2, #18
 80010f0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d123      	bne.n	8001154 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001110:	2b00      	cmp	r3, #0
 8001112:	d11f      	bne.n	8001154 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800112c:	2b00      	cmp	r3, #0
 800112e:	d111      	bne.n	8001154 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d105      	bne.n	8001154 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800118c:	2b01      	cmp	r3, #1
 800118e:	d101      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x1c>
 8001190:	2302      	movs	r3, #2
 8001192:	e113      	b.n	80013bc <HAL_ADC_ConfigChannel+0x244>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b09      	cmp	r3, #9
 80011a2:	d925      	bls.n	80011f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68d9      	ldr	r1, [r3, #12]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	3b1e      	subs	r3, #30
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43da      	mvns	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	400a      	ands	r2, r1
 80011c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68d9      	ldr	r1, [r3, #12]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	4603      	mov	r3, r0
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4403      	add	r3, r0
 80011e2:	3b1e      	subs	r3, #30
 80011e4:	409a      	lsls	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	e022      	b.n	8001236 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6919      	ldr	r1, [r3, #16]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	2207      	movs	r2, #7
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	400a      	ands	r2, r1
 8001212:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6919      	ldr	r1, [r3, #16]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	b29b      	uxth	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	4603      	mov	r3, r0
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4403      	add	r3, r0
 800122c:	409a      	lsls	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b06      	cmp	r3, #6
 800123c:	d824      	bhi.n	8001288 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b05      	subs	r3, #5
 8001250:	221f      	movs	r2, #31
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b05      	subs	r3, #5
 800127a:	fa00 f203 	lsl.w	r2, r0, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34
 8001286:	e04c      	b.n	8001322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b0c      	cmp	r3, #12
 800128e:	d824      	bhi.n	80012da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	3b23      	subs	r3, #35	@ 0x23
 80012a2:	221f      	movs	r2, #31
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43da      	mvns	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	400a      	ands	r2, r1
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	3b23      	subs	r3, #35	@ 0x23
 80012cc:	fa00 f203 	lsl.w	r2, r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80012d8:	e023      	b.n	8001322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b41      	subs	r3, #65	@ 0x41
 80012ec:	221f      	movs	r2, #31
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	400a      	ands	r2, r1
 80012fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3b41      	subs	r3, #65	@ 0x41
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <HAL_ADC_ConfigChannel+0x250>)
 8001324:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a28      	ldr	r2, [pc, #160]	@ (80013cc <HAL_ADC_ConfigChannel+0x254>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10f      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1d8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d10b      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <HAL_ADC_ConfigChannel+0x254>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12b      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x23a>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <HAL_ADC_ConfigChannel+0x258>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d003      	beq.n	800136c <HAL_ADC_ConfigChannel+0x1f4>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b11      	cmp	r3, #17
 800136a:	d122      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_ADC_ConfigChannel+0x258>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d111      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_ADC_ConfigChannel+0x25c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a11      	ldr	r2, [pc, #68]	@ (80013d8 <HAL_ADC_ConfigChannel+0x260>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	0c9a      	lsrs	r2, r3, #18
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013a4:	e002      	b.n	80013ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f9      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	40012300 	.word	0x40012300
 80013cc:	40012000 	.word	0x40012000
 80013d0:	10000012 	.word	0x10000012
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83

080013dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e4:	4b79      	ldr	r3, [pc, #484]	@ (80015cc <ADC_Init+0x1f0>)
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6899      	ldr	r1, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146e:	4a58      	ldr	r2, [pc, #352]	@ (80015d0 <ADC_Init+0x1f4>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d022      	beq.n	80014ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6899      	ldr	r1, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	e00f      	b.n	80014da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0202 	bic.w	r2, r2, #2
 80014e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e1b      	ldrb	r3, [r3, #24]
 80014f4:	005a      	lsls	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01b      	beq.n	8001540 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001516:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6859      	ldr	r1, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	3b01      	subs	r3, #1
 8001534:	035a      	lsls	r2, r3, #13
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e007      	b.n	8001550 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800154e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	3b01      	subs	r3, #1
 800156c:	051a      	lsls	r2, r3, #20
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001592:	025a      	lsls	r2, r3, #9
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6899      	ldr	r1, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	029a      	lsls	r2, r3, #10
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	0f000001 	.word	0x0f000001

080015d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0ed      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff fa62 	bl	8000abc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001608:	f7ff fbfc 	bl	8000e04 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800160e:	e012      	b.n	8001636 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001610:	f7ff fbf8 	bl	8000e04 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b0a      	cmp	r3, #10
 800161c:	d90b      	bls.n	8001636 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2205      	movs	r2, #5
 800162e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0c5      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0e5      	beq.n	8001610 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0202 	bic.w	r2, r2, #2
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff fbd6 	bl	8000e04 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff fbd2 	bl	8000e04 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e09f      	b.n	80017c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e5      	bne.n	800165c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7e1b      	ldrb	r3, [r3, #24]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	e007      	b.n	80016ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e5b      	ldrb	r3, [r3, #25]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e9b      	ldrb	r3, [r3, #26]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d108      	bne.n	80016fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e007      	b.n	800170e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0220 	bic.w	r2, r2, #32
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7edb      	ldrb	r3, [r3, #27]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d108      	bne.n	8001728 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0210 	bic.w	r2, r2, #16
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	e007      	b.n	8001738 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7f1b      	ldrb	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d108      	bne.n	8001752 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0208 	orr.w	r2, r2, #8
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e007      	b.n	8001762 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0208 	bic.w	r2, r2, #8
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7f5b      	ldrb	r3, [r3, #29]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0204 	orr.w	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	e007      	b.n	800178c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	431a      	orrs	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	ea42 0103 	orr.w	r1, r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b08a      	sub	sp, #40	@ 0x28
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d07c      	beq.n	800190a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d023      	beq.n	8001862 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f983 	bl	8001b38 <HAL_CAN_TxMailbox0CompleteCallback>
 8001832:	e016      	b.n	8001862 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
 8001846:	e00c      	b.n	8001862 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d004      	beq.n	800185c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
 800185a:	e002      	b.n	8001862 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f989 	bl	8001b74 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d024      	beq.n	80018b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001874:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f963 	bl	8001b4c <HAL_CAN_TxMailbox1CompleteCallback>
 8001886:	e016      	b.n	80018b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
 800189a:	e00c      	b.n	80018b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ae:	e002      	b.n	80018b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f969 	bl	8001b88 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d024      	beq.n	800190a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f943 	bl	8001b60 <HAL_CAN_TxMailbox2CompleteCallback>
 80018da:	e016      	b.n	800190a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ee:	e00c      	b.n	800190a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
 8001902:	e002      	b.n	800190a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f949 	bl	8001b9c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00c      	beq.n	800192e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	d007      	beq.n	800192e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2210      	movs	r2, #16
 800192c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00b      	beq.n	8001950 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d006      	beq.n	8001950 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2208      	movs	r2, #8
 8001948:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 f93a 	bl	8001bc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f921 	bl	8001bb0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00c      	beq.n	8001992 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d007      	beq.n	8001992 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001988:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2210      	movs	r2, #16
 8001990:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00b      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2208      	movs	r2, #8
 80019ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f91c 	bl	8001bec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f003 0310 	and.w	r3, r3, #16
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f903 	bl	8001bd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d006      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2210      	movs	r2, #16
 80019ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f906 	bl	8001c00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d006      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2208      	movs	r2, #8
 8001a0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 f8ff 	bl	8001c14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d07b      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d072      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a78:	f043 0304 	orr.w	r3, r3, #4
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d043      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03e      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a98:	2b60      	cmp	r3, #96	@ 0x60
 8001a9a:	d02b      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x32a>
 8001a9c:	2b60      	cmp	r3, #96	@ 0x60
 8001a9e:	d82e      	bhi.n	8001afe <HAL_CAN_IRQHandler+0x334>
 8001aa0:	2b50      	cmp	r3, #80	@ 0x50
 8001aa2:	d022      	beq.n	8001aea <HAL_CAN_IRQHandler+0x320>
 8001aa4:	2b50      	cmp	r3, #80	@ 0x50
 8001aa6:	d82a      	bhi.n	8001afe <HAL_CAN_IRQHandler+0x334>
 8001aa8:	2b40      	cmp	r3, #64	@ 0x40
 8001aaa:	d019      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x316>
 8001aac:	2b40      	cmp	r3, #64	@ 0x40
 8001aae:	d826      	bhi.n	8001afe <HAL_CAN_IRQHandler+0x334>
 8001ab0:	2b30      	cmp	r3, #48	@ 0x30
 8001ab2:	d010      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x30c>
 8001ab4:	2b30      	cmp	r3, #48	@ 0x30
 8001ab6:	d822      	bhi.n	8001afe <HAL_CAN_IRQHandler+0x334>
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d002      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x2f8>
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d005      	beq.n	8001acc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ac0:	e01d      	b.n	8001afe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001aca:	e019      	b.n	8001b00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ad4:	e014      	b.n	8001b00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ade:	e00f      	b.n	8001b00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ae8:	e00a      	b.n	8001b00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001af2:	e005      	b.n	8001b00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001afc:	e000      	b.n	8001b00 <HAL_CAN_IRQHandler+0x336>
            break;
 8001afe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b0e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2204      	movs	r2, #4
 8001b16:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f87c 	bl	8001c28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	@ 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	@ (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	@ (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e165      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8154 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80ae 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <HAL_GPIO_Init+0x300>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	4a5c      	ldr	r2, [pc, #368]	@ (8002160 <HAL_GPIO_Init+0x300>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	4b5a      	ldr	r3, [pc, #360]	@ (8002160 <HAL_GPIO_Init+0x300>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002002:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <HAL_GPIO_Init+0x304>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4f      	ldr	r2, [pc, #316]	@ (8002168 <HAL_GPIO_Init+0x308>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x21a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4e      	ldr	r2, [pc, #312]	@ (800216c <HAL_GPIO_Init+0x30c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x216>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4d      	ldr	r2, [pc, #308]	@ (8002170 <HAL_GPIO_Init+0x310>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x212>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4c      	ldr	r2, [pc, #304]	@ (8002174 <HAL_GPIO_Init+0x314>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x20e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4b      	ldr	r2, [pc, #300]	@ (8002178 <HAL_GPIO_Init+0x318>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x20a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4a      	ldr	r2, [pc, #296]	@ (800217c <HAL_GPIO_Init+0x31c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x206>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a49      	ldr	r2, [pc, #292]	@ (8002180 <HAL_GPIO_Init+0x320>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x202>
 800205e:	2306      	movs	r3, #6
 8002060:	e00c      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002062:	2307      	movs	r3, #7
 8002064:	e00a      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002066:	2305      	movs	r3, #5
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800206a:	2304      	movs	r3, #4
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x21c>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x21c>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208c:	4935      	ldr	r1, [pc, #212]	@ (8002164 <HAL_GPIO_Init+0x304>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209a:	4b3a      	ldr	r3, [pc, #232]	@ (8002184 <HAL_GPIO_Init+0x324>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020be:	4a31      	ldr	r2, [pc, #196]	@ (8002184 <HAL_GPIO_Init+0x324>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <HAL_GPIO_Init+0x324>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e8:	4a26      	ldr	r2, [pc, #152]	@ (8002184 <HAL_GPIO_Init+0x324>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020ee:	4b25      	ldr	r3, [pc, #148]	@ (8002184 <HAL_GPIO_Init+0x324>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_GPIO_Init+0x324>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_GPIO_Init+0x324>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800213c:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <HAL_GPIO_Init+0x324>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f ae96 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3724      	adds	r7, #36	@ 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40021400 	.word	0x40021400
 8002180:	40021800 	.word	0x40021800
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	887b      	ldrh	r3, [r7, #2]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
 80021a4:	e001      	b.n	80021aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fd92 	bl	8000e04 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe fd8e 	bl	8000e04 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	@ (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fcf2 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08004a9c 	.word	0x08004a9c
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b0ae      	sub	sp, #184	@ 0xb8
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023de:	4bcb      	ldr	r3, [pc, #812]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	f200 8206 	bhi.w	80027f8 <HAL_RCC_GetSysClockFreq+0x440>
 80023ec:	a201      	add	r2, pc, #4	@ (adr r2, 80023f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f2:	bf00      	nop
 80023f4:	08002429 	.word	0x08002429
 80023f8:	080027f9 	.word	0x080027f9
 80023fc:	080027f9 	.word	0x080027f9
 8002400:	080027f9 	.word	0x080027f9
 8002404:	08002431 	.word	0x08002431
 8002408:	080027f9 	.word	0x080027f9
 800240c:	080027f9 	.word	0x080027f9
 8002410:	080027f9 	.word	0x080027f9
 8002414:	08002439 	.word	0x08002439
 8002418:	080027f9 	.word	0x080027f9
 800241c:	080027f9 	.word	0x080027f9
 8002420:	080027f9 	.word	0x080027f9
 8002424:	08002629 	.word	0x08002629
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4bb9      	ldr	r3, [pc, #740]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x358>)
 800242a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800242e:	e1e7      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002430:	4bb8      	ldr	r3, [pc, #736]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002432:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002436:	e1e3      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002438:	4bb4      	ldr	r3, [pc, #720]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002444:	4bb1      	ldr	r3, [pc, #708]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d071      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002450:	4bae      	ldr	r3, [pc, #696]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	2200      	movs	r2, #0
 8002458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800245c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002468:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002476:	4622      	mov	r2, r4
 8002478:	462b      	mov	r3, r5
 800247a:	f04f 0000 	mov.w	r0, #0
 800247e:	f04f 0100 	mov.w	r1, #0
 8002482:	0159      	lsls	r1, r3, #5
 8002484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002488:	0150      	lsls	r0, r2, #5
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4621      	mov	r1, r4
 8002490:	1a51      	subs	r1, r2, r1
 8002492:	6439      	str	r1, [r7, #64]	@ 0x40
 8002494:	4629      	mov	r1, r5
 8002496:	eb63 0301 	sbc.w	r3, r3, r1
 800249a:	647b      	str	r3, [r7, #68]	@ 0x44
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024a8:	4649      	mov	r1, r9
 80024aa:	018b      	lsls	r3, r1, #6
 80024ac:	4641      	mov	r1, r8
 80024ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b2:	4641      	mov	r1, r8
 80024b4:	018a      	lsls	r2, r1, #6
 80024b6:	4641      	mov	r1, r8
 80024b8:	1a51      	subs	r1, r2, r1
 80024ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024bc:	4649      	mov	r1, r9
 80024be:	eb63 0301 	sbc.w	r3, r3, r1
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024d0:	4649      	mov	r1, r9
 80024d2:	00cb      	lsls	r3, r1, #3
 80024d4:	4641      	mov	r1, r8
 80024d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024da:	4641      	mov	r1, r8
 80024dc:	00ca      	lsls	r2, r1, #3
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	4603      	mov	r3, r0
 80024e4:	4622      	mov	r2, r4
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ea:	462b      	mov	r3, r5
 80024ec:	460a      	mov	r2, r1
 80024ee:	eb42 0303 	adc.w	r3, r2, r3
 80024f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002500:	4629      	mov	r1, r5
 8002502:	024b      	lsls	r3, r1, #9
 8002504:	4621      	mov	r1, r4
 8002506:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800250a:	4621      	mov	r1, r4
 800250c:	024a      	lsls	r2, r1, #9
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800251c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002520:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002524:	f7fd fe74 	bl	8000210 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002532:	e067      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002534:	4b75      	ldr	r3, [pc, #468]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002540:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002544:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800254e:	2300      	movs	r3, #0
 8002550:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002552:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002556:	4622      	mov	r2, r4
 8002558:	462b      	mov	r3, r5
 800255a:	f04f 0000 	mov.w	r0, #0
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	0159      	lsls	r1, r3, #5
 8002564:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002568:	0150      	lsls	r0, r2, #5
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4621      	mov	r1, r4
 8002570:	1a51      	subs	r1, r2, r1
 8002572:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002574:	4629      	mov	r1, r5
 8002576:	eb63 0301 	sbc.w	r3, r3, r1
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002588:	4649      	mov	r1, r9
 800258a:	018b      	lsls	r3, r1, #6
 800258c:	4641      	mov	r1, r8
 800258e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002592:	4641      	mov	r1, r8
 8002594:	018a      	lsls	r2, r1, #6
 8002596:	4641      	mov	r1, r8
 8002598:	ebb2 0a01 	subs.w	sl, r2, r1
 800259c:	4649      	mov	r1, r9
 800259e:	eb63 0b01 	sbc.w	fp, r3, r1
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025b6:	4692      	mov	sl, r2
 80025b8:	469b      	mov	fp, r3
 80025ba:	4623      	mov	r3, r4
 80025bc:	eb1a 0303 	adds.w	r3, sl, r3
 80025c0:	623b      	str	r3, [r7, #32]
 80025c2:	462b      	mov	r3, r5
 80025c4:	eb4b 0303 	adc.w	r3, fp, r3
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025d6:	4629      	mov	r1, r5
 80025d8:	028b      	lsls	r3, r1, #10
 80025da:	4621      	mov	r1, r4
 80025dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025e0:	4621      	mov	r1, r4
 80025e2:	028a      	lsls	r2, r1, #10
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ec:	2200      	movs	r2, #0
 80025ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80025f0:	677a      	str	r2, [r7, #116]	@ 0x74
 80025f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025f6:	f7fd fe0b 	bl	8000210 <__aeabi_uldivmod>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4613      	mov	r3, r2
 8002600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002604:	4b41      	ldr	r3, [pc, #260]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	3301      	adds	r3, #1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800261a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002626:	e0eb      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b38      	ldr	r3, [pc, #224]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d06b      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002640:	4b32      	ldr	r3, [pc, #200]	@ (800270c <HAL_RCC_GetSysClockFreq+0x354>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	2200      	movs	r2, #0
 8002648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800264a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800264c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800264e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002652:	663b      	str	r3, [r7, #96]	@ 0x60
 8002654:	2300      	movs	r3, #0
 8002656:	667b      	str	r3, [r7, #100]	@ 0x64
 8002658:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800265c:	4622      	mov	r2, r4
 800265e:	462b      	mov	r3, r5
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	0159      	lsls	r1, r3, #5
 800266a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266e:	0150      	lsls	r0, r2, #5
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4621      	mov	r1, r4
 8002676:	1a51      	subs	r1, r2, r1
 8002678:	61b9      	str	r1, [r7, #24]
 800267a:	4629      	mov	r1, r5
 800267c:	eb63 0301 	sbc.w	r3, r3, r1
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800268e:	4659      	mov	r1, fp
 8002690:	018b      	lsls	r3, r1, #6
 8002692:	4651      	mov	r1, sl
 8002694:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002698:	4651      	mov	r1, sl
 800269a:	018a      	lsls	r2, r1, #6
 800269c:	4651      	mov	r1, sl
 800269e:	ebb2 0801 	subs.w	r8, r2, r1
 80026a2:	4659      	mov	r1, fp
 80026a4:	eb63 0901 	sbc.w	r9, r3, r1
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026bc:	4690      	mov	r8, r2
 80026be:	4699      	mov	r9, r3
 80026c0:	4623      	mov	r3, r4
 80026c2:	eb18 0303 	adds.w	r3, r8, r3
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	462b      	mov	r3, r5
 80026ca:	eb49 0303 	adc.w	r3, r9, r3
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026dc:	4629      	mov	r1, r5
 80026de:	024b      	lsls	r3, r1, #9
 80026e0:	4621      	mov	r1, r4
 80026e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e6:	4621      	mov	r1, r4
 80026e8:	024a      	lsls	r2, r1, #9
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026f2:	2200      	movs	r2, #0
 80026f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026f6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026fc:	f7fd fd88 	bl	8000210 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4613      	mov	r3, r2
 8002706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800270a:	e065      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x420>
 800270c:	40023800 	.word	0x40023800
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x458>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	2200      	movs	r2, #0
 8002720:	4618      	mov	r0, r3
 8002722:	4611      	mov	r1, r2
 8002724:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002728:	653b      	str	r3, [r7, #80]	@ 0x50
 800272a:	2300      	movs	r3, #0
 800272c:	657b      	str	r3, [r7, #84]	@ 0x54
 800272e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002732:	4642      	mov	r2, r8
 8002734:	464b      	mov	r3, r9
 8002736:	f04f 0000 	mov.w	r0, #0
 800273a:	f04f 0100 	mov.w	r1, #0
 800273e:	0159      	lsls	r1, r3, #5
 8002740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002744:	0150      	lsls	r0, r2, #5
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4641      	mov	r1, r8
 800274c:	1a51      	subs	r1, r2, r1
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	4649      	mov	r1, r9
 8002752:	eb63 0301 	sbc.w	r3, r3, r1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002764:	4659      	mov	r1, fp
 8002766:	018b      	lsls	r3, r1, #6
 8002768:	4651      	mov	r1, sl
 800276a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276e:	4651      	mov	r1, sl
 8002770:	018a      	lsls	r2, r1, #6
 8002772:	4651      	mov	r1, sl
 8002774:	1a54      	subs	r4, r2, r1
 8002776:	4659      	mov	r1, fp
 8002778:	eb63 0501 	sbc.w	r5, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	00eb      	lsls	r3, r5, #3
 8002786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278a:	00e2      	lsls	r2, r4, #3
 800278c:	4614      	mov	r4, r2
 800278e:	461d      	mov	r5, r3
 8002790:	4643      	mov	r3, r8
 8002792:	18e3      	adds	r3, r4, r3
 8002794:	603b      	str	r3, [r7, #0]
 8002796:	464b      	mov	r3, r9
 8002798:	eb45 0303 	adc.w	r3, r5, r3
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027aa:	4629      	mov	r1, r5
 80027ac:	028b      	lsls	r3, r1, #10
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b4:	4621      	mov	r1, r4
 80027b6:	028a      	lsls	r2, r1, #10
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027c0:	2200      	movs	r2, #0
 80027c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027ca:	f7fd fd21 	bl	8000210 <__aeabi_uldivmod>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4613      	mov	r3, r2
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x458>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0f1b      	lsrs	r3, r3, #28
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80027e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027f6:	e003      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002804:	4618      	mov	r0, r3
 8002806:	37b8      	adds	r7, #184	@ 0xb8
 8002808:	46bd      	mov	sp, r7
 800280a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	00f42400 	.word	0x00f42400

08002818 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e28d      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8083 	beq.w	800293e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002838:	4b94      	ldr	r3, [pc, #592]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d019      	beq.n	8002878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002844:	4b91      	ldr	r3, [pc, #580]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800284c:	2b08      	cmp	r3, #8
 800284e:	d106      	bne.n	800285e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002850:	4b8e      	ldr	r3, [pc, #568]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002858:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285c:	d00c      	beq.n	8002878 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002866:	2b0c      	cmp	r3, #12
 8002868:	d112      	bne.n	8002890 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800286a:	4b88      	ldr	r3, [pc, #544]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002876:	d10b      	bne.n	8002890 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	4b84      	ldr	r3, [pc, #528]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d05b      	beq.n	800293c <HAL_RCC_OscConfig+0x124>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d157      	bne.n	800293c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e25a      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d106      	bne.n	80028a8 <HAL_RCC_OscConfig+0x90>
 800289a:	4b7c      	ldr	r3, [pc, #496]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7b      	ldr	r2, [pc, #492]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e01d      	b.n	80028e4 <HAL_RCC_OscConfig+0xcc>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b0:	d10c      	bne.n	80028cc <HAL_RCC_OscConfig+0xb4>
 80028b2:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a75      	ldr	r2, [pc, #468]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	4b73      	ldr	r3, [pc, #460]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a72      	ldr	r2, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c8:	6013      	str	r3, [r2, #0]
 80028ca:	e00b      	b.n	80028e4 <HAL_RCC_OscConfig+0xcc>
 80028cc:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80028de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fa8a 	bl	8000e04 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fa86 	bl	8000e04 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e21f      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b61      	ldr	r3, [pc, #388]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0f0      	beq.n	80028f4 <HAL_RCC_OscConfig+0xdc>
 8002912:	e014      	b.n	800293e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fa76 	bl	8000e04 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291c:	f7fe fa72 	bl	8000e04 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b64      	cmp	r3, #100	@ 0x64
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e20b      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	4b57      	ldr	r3, [pc, #348]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x104>
 800293a:	e000      	b.n	800293e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800293c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d06f      	beq.n	8002a2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800294a:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b00      	cmp	r3, #0
 8002954:	d017      	beq.n	8002986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002956:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800295e:	2b08      	cmp	r3, #8
 8002960:	d105      	bne.n	800296e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002962:	4b4a      	ldr	r3, [pc, #296]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b47      	ldr	r3, [pc, #284]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002976:	2b0c      	cmp	r3, #12
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800297a:	4b44      	ldr	r3, [pc, #272]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b41      	ldr	r3, [pc, #260]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x186>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1d3      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e03a      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_RCC_OscConfig+0x278>)
 80029be:	2201      	movs	r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f7fe fa1f 	bl	8000e04 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ca:	f7fe fa1b 	bl	8000e04 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e1b4      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0f0      	beq.n	80029ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e8:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4925      	ldr	r1, [pc, #148]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	600b      	str	r3, [r1, #0]
 80029fc:	e015      	b.n	8002a2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_RCC_OscConfig+0x278>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe f9fe 	bl	8000e04 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0c:	f7fe f9fa 	bl	8000e04 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e193      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d036      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe f9de 	bl	8000e04 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4c:	f7fe f9da 	bl	8000e04 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e173      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x234>
 8002a6a:	e01b      	b.n	8002aa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6c:	4b09      	ldr	r3, [pc, #36]	@ (8002a94 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7fe f9c7 	bl	8000e04 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	e00e      	b.n	8002a98 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7a:	f7fe f9c3 	bl	8000e04 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d907      	bls.n	8002a98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e15c      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	42470000 	.word	0x42470000
 8002a94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a98:	4b8a      	ldr	r3, [pc, #552]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1ea      	bne.n	8002a7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8097 	beq.w	8002be0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b83      	ldr	r3, [pc, #524]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10f      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b79      	ldr	r3, [pc, #484]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a75      	ldr	r2, [pc, #468]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe f983 	bl	8000e04 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe f97f 	bl	8000e04 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e118      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b6c      	ldr	r3, [pc, #432]	@ (8002cc8 <HAL_RCC_OscConfig+0x4b0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x31e>
 8002b28:	4b66      	ldr	r3, [pc, #408]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	4a65      	ldr	r2, [pc, #404]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b34:	e01c      	b.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x340>
 8002b3e:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a60      	ldr	r2, [pc, #384]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4e:	4a5d      	ldr	r2, [pc, #372]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b56:	e00b      	b.n	8002b70 <HAL_RCC_OscConfig+0x358>
 8002b58:	4b5a      	ldr	r3, [pc, #360]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a59      	ldr	r2, [pc, #356]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b64:	4b57      	ldr	r3, [pc, #348]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b68:	4a56      	ldr	r2, [pc, #344]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b6a:	f023 0304 	bic.w	r3, r3, #4
 8002b6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe f944 	bl	8000e04 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7fe f940 	bl	8000e04 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0d7      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0ee      	beq.n	8002b80 <HAL_RCC_OscConfig+0x368>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f92e 	bl	8000e04 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe f92a 	bl	8000e04 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0c1      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc2:	4b40      	ldr	r3, [pc, #256]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1ee      	bne.n	8002bac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bce:	7dfb      	ldrb	r3, [r7, #23]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d105      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80ad 	beq.w	8002d44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bea:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d060      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d145      	bne.n	8002c8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfe:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe f8fe 	bl	8000e04 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe f8fa 	bl	8000e04 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e093      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1e:	4b29      	ldr	r3, [pc, #164]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	019b      	lsls	r3, r3, #6
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c40:	085b      	lsrs	r3, r3, #1
 8002c42:	3b01      	subs	r3, #1
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	071b      	lsls	r3, r3, #28
 8002c56:	491b      	ldr	r1, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe f8cf 	bl	8000e04 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe f8cb 	bl	8000e04 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e064      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x452>
 8002c88:	e05c      	b.n	8002d44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <HAL_RCC_OscConfig+0x4b4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe f8b8 	bl	8000e04 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe f8b4 	bl	8000e04 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e04d      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x480>
 8002cb6:	e045      	b.n	8002d44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e040      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <HAL_RCC_OscConfig+0x538>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d030      	beq.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d129      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d122      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d00:	4013      	ands	r3, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d119      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10f      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d66:	2b84      	cmp	r3, #132	@ 0x84
 8002d68:	d005      	beq.n	8002d76 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002d6a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4413      	add	r3, r2
 8002d72:	3303      	adds	r3, #3
 8002d74:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002d76:	68fb      	ldr	r3, [r7, #12]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d8a:	f3ef 8305 	mrs	r3, IPSR
 8002d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d90:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002dac:	f000 fb8a 	bl	80034c4 <vTaskStartScheduler>
  
  return osOK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db8:	b089      	sub	sp, #36	@ 0x24
 8002dba:	af04      	add	r7, sp, #16
 8002dbc:	6078      	str	r0, [r7, #4]
 8002dbe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <osThreadCreate+0x54>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01c      	beq.n	8002e0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685c      	ldr	r4, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691e      	ldr	r6, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ffb6 	bl	8002d54 <makeFreeRtosPriority>
 8002de8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002df2:	9202      	str	r2, [sp, #8]
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	9100      	str	r1, [sp, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4632      	mov	r2, r6
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f000 f97a 	bl	80030f8 <xTaskCreateStatic>
 8002e04:	4603      	mov	r3, r0
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e01c      	b.n	8002e44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685c      	ldr	r4, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e16:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff98 	bl	8002d54 <makeFreeRtosPriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	9200      	str	r2, [sp, #0]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	4632      	mov	r2, r6
 8002e32:	4629      	mov	r1, r5
 8002e34:	4620      	mov	r0, r4
 8002e36:	f000 f9bf 	bl	80031b8 <xTaskCreate>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d001      	beq.n	8002e44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e000      	b.n	8002e46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e44:	68fb      	ldr	r3, [r7, #12]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <osDelay+0x16>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	e000      	b.n	8002e66 <osDelay+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 faf6 	bl	8003458 <vTaskDelay>
  
  return osOK;
 8002e6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8002e8a:	f7ff ff7b 	bl	8002d84 <inHandlerMode>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01c      	beq.n	8002ece <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8002e94:	6839      	ldr	r1, [r7, #0]
 8002e96:	f107 0208 	add.w	r2, r7, #8
 8002e9a:	f107 030c 	add.w	r3, r7, #12
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 ff5d 	bl	8003d64 <xTaskGenericNotifyFromISR>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d002      	beq.n	8002eb6 <osSignalSet+0x3e>
      return 0x80000000;
 8002eb0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002eb4:	e019      	b.n	8002eea <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d015      	beq.n	8002ee8 <osSignalSet+0x70>
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <osSignalSet+0x7c>)
 8002ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	e00c      	b.n	8002ee8 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	f107 0308 	add.w	r3, r7, #8
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fe82 	bl	8003be0 <xTaskGenericNotify>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d002      	beq.n	8002ee8 <osSignalSet+0x70>
    return 0x80000000;
 8002ee2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002ee6:	e000      	b.n	8002eea <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	e000ed04 	.word	0xe000ed04

08002ef8 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b089      	sub	sp, #36	@ 0x24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d103      	bne.n	8002f1c <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e009      	b.n	8002f30 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <osSignalWait+0x38>
      ticks = 1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8002f30:	f7ff ff28 	bl	8002d84 <inHandlerMode>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8002f3a:	2382      	movs	r3, #130	@ 0x82
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	e01b      	b.n	8002f78 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	f107 0310 	add.w	r3, r7, #16
 8002f46:	1d1a      	adds	r2, r3, #4
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f000 fde8 	bl	8003b20 <xTaskNotifyWait>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d008      	beq.n	8002f68 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <osSignalWait+0x6a>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e00a      	b.n	8002f78 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8002f62:	2340      	movs	r3, #64	@ 0x40
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	e007      	b.n	8002f78 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da02      	bge.n	8002f74 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8002f6e:	2386      	movs	r3, #134	@ 0x86
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e001      	b.n	8002f78 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8002f74:	2308      	movs	r3, #8
 8002f76:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	f107 0310 	add.w	r3, r7, #16
 8002f80:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	3724      	adds	r7, #36	@ 0x24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}

08002f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f103 0208 	add.w	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f103 0208 	add.w	r2, r3, #8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f103 0208 	add.w	r2, r3, #8
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d103      	bne.n	8003052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e00c      	b.n	800306c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3308      	adds	r3, #8
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e002      	b.n	8003060 <vListInsert+0x2e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	d2f6      	bcs.n	800305a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	601a      	str	r2, [r3, #0]
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6892      	ldr	r2, [r2, #8]
 80030ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6852      	ldr	r2, [r2, #4]
 80030c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d103      	bne.n	80030d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	1e5a      	subs	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08e      	sub	sp, #56	@ 0x38
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10b      	bne.n	8003124 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10b      	bne.n	8003142 <xTaskCreateStatic+0x4a>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	61fb      	str	r3, [r7, #28]
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	e7fd      	b.n	800313e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003142:	23a0      	movs	r3, #160	@ 0xa0
 8003144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2ba0      	cmp	r3, #160	@ 0xa0
 800314a:	d00b      	beq.n	8003164 <xTaskCreateStatic+0x6c>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	61bb      	str	r3, [r7, #24]
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003164:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01e      	beq.n	80031aa <xTaskCreateStatic+0xb2>
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01b      	beq.n	80031aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	2202      	movs	r2, #2
 8003180:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003184:	2300      	movs	r3, #0
 8003186:	9303      	str	r3, [sp, #12]
 8003188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318a:	9302      	str	r3, [sp, #8]
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f851 	bl	8003244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031a4:	f000 f8ee 	bl	8003384 <prvAddNewTaskToReadyList>
 80031a8:	e001      	b.n	80031ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031ae:	697b      	ldr	r3, [r7, #20]
	}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3728      	adds	r7, #40	@ 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	@ 0x30
 80031bc:	af04      	add	r7, sp, #16
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 f965 	bl	800449c <pvPortMalloc>
 80031d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00e      	beq.n	80031f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031da:	20a0      	movs	r0, #160	@ 0xa0
 80031dc:	f001 f95e 	bl	800449c <pvPortMalloc>
 80031e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80031ee:	e005      	b.n	80031fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031f0:	6978      	ldr	r0, [r7, #20]
 80031f2:	f001 fa21 	bl	8004638 <vPortFree>
 80031f6:	e001      	b.n	80031fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d017      	beq.n	8003232 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	2300      	movs	r3, #0
 800320e:	9303      	str	r3, [sp, #12]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	9302      	str	r3, [sp, #8]
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f80f 	bl	8003244 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003226:	69f8      	ldr	r0, [r7, #28]
 8003228:	f000 f8ac 	bl	8003384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800322c:	2301      	movs	r3, #1
 800322e:	61bb      	str	r3, [r7, #24]
 8003230:	e002      	b.n	8003238 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003238:	69bb      	ldr	r3, [r7, #24]
	}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800325c:	3b01      	subs	r3, #1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	f023 0307 	bic.w	r3, r3, #7
 800326a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	617b      	str	r3, [r7, #20]
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	e7fd      	b.n	800328a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01f      	beq.n	80032d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
 8003298:	e012      	b.n	80032c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	4413      	add	r3, r2
 80032a0:	7819      	ldrb	r1, [r3, #0]
 80032a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	3334      	adds	r3, #52	@ 0x34
 80032aa:	460a      	mov	r2, r1
 80032ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d9e9      	bls.n	800329a <prvInitialiseNewTask+0x56>
 80032c6:	e000      	b.n	80032ca <prvInitialiseNewTask+0x86>
			{
				break;
 80032c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032d2:	e003      	b.n	80032dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	2b06      	cmp	r3, #6
 80032e0:	d901      	bls.n	80032e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032e2:	2306      	movs	r3, #6
 80032e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	2200      	movs	r2, #0
 80032f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	3304      	adds	r3, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fe67 	bl	8002fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003304:	3318      	adds	r3, #24
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fe62 	bl	8002fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800330c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003310:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	f1c3 0207 	rsb	r2, r3, #7
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	2200      	movs	r2, #0
 8003326:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800332a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800332c:	2200      	movs	r2, #0
 800332e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	334c      	adds	r3, #76	@ 0x4c
 8003336:	224c      	movs	r2, #76	@ 0x4c
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fa9c 	bl	8004878 <memset>
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <prvInitialiseNewTask+0x134>)
 8003344:	651a      	str	r2, [r3, #80]	@ 0x50
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	4a0c      	ldr	r2, [pc, #48]	@ (800337c <prvInitialiseNewTask+0x138>)
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	4a0c      	ldr	r2, [pc, #48]	@ (8003380 <prvInitialiseNewTask+0x13c>)
 8003350:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	68f9      	ldr	r1, [r7, #12]
 8003356:	69b8      	ldr	r0, [r7, #24]
 8003358:	f000 fe50 	bl	8003ffc <pxPortInitialiseStack>
 800335c:	4602      	mov	r2, r0
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800336e:	bf00      	nop
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	200040f4 	.word	0x200040f4
 800337c:	2000415c 	.word	0x2000415c
 8003380:	200041c4 	.word	0x200041c4

08003384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800338c:	f000 ff64 	bl	8004258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003390:	4b2a      	ldr	r3, [pc, #168]	@ (800343c <prvAddNewTaskToReadyList+0xb8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a29      	ldr	r2, [pc, #164]	@ (800343c <prvAddNewTaskToReadyList+0xb8>)
 8003398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <prvAddNewTaskToReadyList+0xbc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033a2:	4a27      	ldr	r2, [pc, #156]	@ (8003440 <prvAddNewTaskToReadyList+0xbc>)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033a8:	4b24      	ldr	r3, [pc, #144]	@ (800343c <prvAddNewTaskToReadyList+0xb8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d110      	bne.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033b0:	f000 fad4 	bl	800395c <prvInitialiseTaskLists>
 80033b4:	e00d      	b.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033b6:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <prvAddNewTaskToReadyList+0xc0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033be:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <prvAddNewTaskToReadyList+0xbc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d802      	bhi.n	80033d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003440 <prvAddNewTaskToReadyList+0xbc>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003448 <prvAddNewTaskToReadyList+0xc4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <prvAddNewTaskToReadyList+0xc4>)
 80033da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	2201      	movs	r2, #1
 80033e2:	409a      	lsls	r2, r3
 80033e4:	4b19      	ldr	r3, [pc, #100]	@ (800344c <prvAddNewTaskToReadyList+0xc8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	4a18      	ldr	r2, [pc, #96]	@ (800344c <prvAddNewTaskToReadyList+0xc8>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4a15      	ldr	r2, [pc, #84]	@ (8003450 <prvAddNewTaskToReadyList+0xcc>)
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f7ff fdf0 	bl	8002fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800340a:	f000 ff57 	bl	80042bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <prvAddNewTaskToReadyList+0xc0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003416:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <prvAddNewTaskToReadyList+0xbc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003420:	429a      	cmp	r2, r3
 8003422:	d207      	bcs.n	8003434 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <prvAddNewTaskToReadyList+0xd0>)
 8003426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003434:	bf00      	nop
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	200004a0 	.word	0x200004a0
 8003440:	200003a0 	.word	0x200003a0
 8003444:	200004ac 	.word	0x200004ac
 8003448:	200004bc 	.word	0x200004bc
 800344c:	200004a8 	.word	0x200004a8
 8003450:	200003a4 	.word	0x200003a4
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d018      	beq.n	800349c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800346a:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <vTaskDelay+0x64>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00b      	beq.n	800348a <vTaskDelay+0x32>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	60bb      	str	r3, [r7, #8]
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	e7fd      	b.n	8003486 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800348a:	f000 f885 	bl	8003598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800348e:	2100      	movs	r1, #0
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fd4d 	bl	8003f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003496:	f000 f88d 	bl	80035b4 <xTaskResumeAll>
 800349a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d107      	bne.n	80034b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80034a2:	4b07      	ldr	r3, [pc, #28]	@ (80034c0 <vTaskDelay+0x68>)
 80034a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	200004c8 	.word	0x200004c8
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08a      	sub	sp, #40	@ 0x28
 80034c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034d2:	463a      	mov	r2, r7
 80034d4:	1d39      	adds	r1, r7, #4
 80034d6:	f107 0308 	add.w	r3, r7, #8
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd f810 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	9202      	str	r2, [sp, #8]
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2300      	movs	r3, #0
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	460a      	mov	r2, r1
 80034f2:	4921      	ldr	r1, [pc, #132]	@ (8003578 <vTaskStartScheduler+0xb4>)
 80034f4:	4821      	ldr	r0, [pc, #132]	@ (800357c <vTaskStartScheduler+0xb8>)
 80034f6:	f7ff fdff 	bl	80030f8 <xTaskCreateStatic>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <vTaskStartScheduler+0xbc>)
 80034fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003500:	4b1f      	ldr	r3, [pc, #124]	@ (8003580 <vTaskStartScheduler+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003508:	2301      	movs	r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	e001      	b.n	8003512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d11b      	bne.n	8003550 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	613b      	str	r3, [r7, #16]
}
 800352a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800352c:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <vTaskStartScheduler+0xc0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	334c      	adds	r3, #76	@ 0x4c
 8003532:	4a15      	ldr	r2, [pc, #84]	@ (8003588 <vTaskStartScheduler+0xc4>)
 8003534:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <vTaskStartScheduler+0xc8>)
 8003538:	f04f 32ff 	mov.w	r2, #4294967295
 800353c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800353e:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <vTaskStartScheduler+0xcc>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <vTaskStartScheduler+0xd0>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800354a:	f000 fde1 	bl	8004110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800354e:	e00f      	b.n	8003570 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003556:	d10b      	bne.n	8003570 <vTaskStartScheduler+0xac>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	60fb      	str	r3, [r7, #12]
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <vTaskStartScheduler+0xa8>
}
 8003570:	bf00      	nop
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	08004a94 	.word	0x08004a94
 800357c:	0800392d 	.word	0x0800392d
 8003580:	200004c4 	.word	0x200004c4
 8003584:	200003a0 	.word	0x200003a0
 8003588:	20000010 	.word	0x20000010
 800358c:	200004c0 	.word	0x200004c0
 8003590:	200004ac 	.word	0x200004ac
 8003594:	200004a4 	.word	0x200004a4

08003598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <vTaskSuspendAll+0x18>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a03      	ldr	r2, [pc, #12]	@ (80035b0 <vTaskSuspendAll+0x18>)
 80035a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	200004c8 	.word	0x200004c8

080035b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035c2:	4b42      	ldr	r3, [pc, #264]	@ (80036cc <xTaskResumeAll+0x118>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	603b      	str	r3, [r7, #0]
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035e2:	f000 fe39 	bl	8004258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035e6:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <xTaskResumeAll+0x118>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <xTaskResumeAll+0x118>)
 80035ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035f0:	4b36      	ldr	r3, [pc, #216]	@ (80036cc <xTaskResumeAll+0x118>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d161      	bne.n	80036bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035f8:	4b35      	ldr	r3, [pc, #212]	@ (80036d0 <xTaskResumeAll+0x11c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d05d      	beq.n	80036bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003600:	e02e      	b.n	8003660 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003602:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <xTaskResumeAll+0x120>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3318      	adds	r3, #24
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff fd48 	bl	80030a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	3304      	adds	r3, #4
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fd43 	bl	80030a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003622:	2201      	movs	r2, #1
 8003624:	409a      	lsls	r2, r3
 8003626:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <xTaskResumeAll+0x124>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	4a2a      	ldr	r2, [pc, #168]	@ (80036d8 <xTaskResumeAll+0x124>)
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a27      	ldr	r2, [pc, #156]	@ (80036dc <xTaskResumeAll+0x128>)
 800363e:	441a      	add	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7ff fccf 	bl	8002fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003650:	4b23      	ldr	r3, [pc, #140]	@ (80036e0 <xTaskResumeAll+0x12c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800365a:	4b22      	ldr	r3, [pc, #136]	@ (80036e4 <xTaskResumeAll+0x130>)
 800365c:	2201      	movs	r2, #1
 800365e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003660:	4b1c      	ldr	r3, [pc, #112]	@ (80036d4 <xTaskResumeAll+0x120>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1cc      	bne.n	8003602 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800366e:	f000 fa19 	bl	8003aa4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003672:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <xTaskResumeAll+0x134>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d010      	beq.n	80036a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800367e:	f000 f837 	bl	80036f0 <xTaskIncrementTick>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003688:	4b16      	ldr	r3, [pc, #88]	@ (80036e4 <xTaskResumeAll+0x130>)
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3b01      	subs	r3, #1
 8003692:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f1      	bne.n	800367e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800369a:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <xTaskResumeAll+0x134>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036a0:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <xTaskResumeAll+0x130>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d009      	beq.n	80036bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036a8:	2301      	movs	r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <xTaskResumeAll+0x138>)
 80036ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036bc:	f000 fdfe 	bl	80042bc <vPortExitCritical>

	return xAlreadyYielded;
 80036c0:	68bb      	ldr	r3, [r7, #8]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200004c8 	.word	0x200004c8
 80036d0:	200004a0 	.word	0x200004a0
 80036d4:	20000460 	.word	0x20000460
 80036d8:	200004a8 	.word	0x200004a8
 80036dc:	200003a4 	.word	0x200003a4
 80036e0:	200003a0 	.word	0x200003a0
 80036e4:	200004b4 	.word	0x200004b4
 80036e8:	200004b0 	.word	0x200004b0
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003838 <xTaskIncrementTick+0x148>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 808f 	bne.w	8003822 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003704:	4b4d      	ldr	r3, [pc, #308]	@ (800383c <xTaskIncrementTick+0x14c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3301      	adds	r3, #1
 800370a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800370c:	4a4b      	ldr	r2, [pc, #300]	@ (800383c <xTaskIncrementTick+0x14c>)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d121      	bne.n	800375c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003718:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <xTaskIncrementTick+0x150>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003726:	f383 8811 	msr	BASEPRI, r3
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	f3bf 8f4f 	dsb	sy
 8003732:	603b      	str	r3, [r7, #0]
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	e7fd      	b.n	8003736 <xTaskIncrementTick+0x46>
 800373a:	4b41      	ldr	r3, [pc, #260]	@ (8003840 <xTaskIncrementTick+0x150>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	4b40      	ldr	r3, [pc, #256]	@ (8003844 <xTaskIncrementTick+0x154>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a3e      	ldr	r2, [pc, #248]	@ (8003840 <xTaskIncrementTick+0x150>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	4a3e      	ldr	r2, [pc, #248]	@ (8003844 <xTaskIncrementTick+0x154>)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b3e      	ldr	r3, [pc, #248]	@ (8003848 <xTaskIncrementTick+0x158>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a3c      	ldr	r2, [pc, #240]	@ (8003848 <xTaskIncrementTick+0x158>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	f000 f9a4 	bl	8003aa4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800375c:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <xTaskIncrementTick+0x15c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d348      	bcc.n	80037f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003766:	4b36      	ldr	r3, [pc, #216]	@ (8003840 <xTaskIncrementTick+0x150>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003770:	4b36      	ldr	r3, [pc, #216]	@ (800384c <xTaskIncrementTick+0x15c>)
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	601a      	str	r2, [r3, #0]
					break;
 8003778:	e03e      	b.n	80037f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800377a:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <xTaskIncrementTick+0x150>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d203      	bcs.n	800379a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003792:	4a2e      	ldr	r2, [pc, #184]	@ (800384c <xTaskIncrementTick+0x15c>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003798:	e02e      	b.n	80037f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fc80 	bl	80030a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d004      	beq.n	80037b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3318      	adds	r3, #24
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fc77 	bl	80030a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	2201      	movs	r2, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <xTaskIncrementTick+0x160>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	4a22      	ldr	r2, [pc, #136]	@ (8003850 <xTaskIncrementTick+0x160>)
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003854 <xTaskIncrementTick+0x164>)
 80037d6:	441a      	add	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f7ff fc03 	bl	8002fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <xTaskIncrementTick+0x168>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d3b9      	bcc.n	8003766 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80037f2:	2301      	movs	r3, #1
 80037f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f6:	e7b6      	b.n	8003766 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037f8:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <xTaskIncrementTick+0x168>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	4915      	ldr	r1, [pc, #84]	@ (8003854 <xTaskIncrementTick+0x164>)
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d901      	bls.n	8003814 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003814:	4b11      	ldr	r3, [pc, #68]	@ (800385c <xTaskIncrementTick+0x16c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e004      	b.n	800382c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003822:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <xTaskIncrementTick+0x170>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	4a0d      	ldr	r2, [pc, #52]	@ (8003860 <xTaskIncrementTick+0x170>)
 800382a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800382c:	697b      	ldr	r3, [r7, #20]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	200004c8 	.word	0x200004c8
 800383c:	200004a4 	.word	0x200004a4
 8003840:	20000458 	.word	0x20000458
 8003844:	2000045c 	.word	0x2000045c
 8003848:	200004b8 	.word	0x200004b8
 800384c:	200004c0 	.word	0x200004c0
 8003850:	200004a8 	.word	0x200004a8
 8003854:	200003a4 	.word	0x200003a4
 8003858:	200003a0 	.word	0x200003a0
 800385c:	200004b4 	.word	0x200004b4
 8003860:	200004b0 	.word	0x200004b0

08003864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800386a:	4b2a      	ldr	r3, [pc, #168]	@ (8003914 <vTaskSwitchContext+0xb0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <vTaskSwitchContext+0xb4>)
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003878:	e045      	b.n	8003906 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800387a:	4b27      	ldr	r3, [pc, #156]	@ (8003918 <vTaskSwitchContext+0xb4>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003880:	4b26      	ldr	r3, [pc, #152]	@ (800391c <vTaskSwitchContext+0xb8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	f1c3 031f 	rsb	r3, r3, #31
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	4922      	ldr	r1, [pc, #136]	@ (8003920 <vTaskSwitchContext+0xbc>)
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10b      	bne.n	80038c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	607b      	str	r3, [r7, #4]
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <vTaskSwitchContext+0x5a>
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4a14      	ldr	r2, [pc, #80]	@ (8003920 <vTaskSwitchContext+0xbc>)
 80038ce:	4413      	add	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3308      	adds	r3, #8
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d104      	bne.n	80038f2 <vTaskSwitchContext+0x8e>
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <vTaskSwitchContext+0xc0>)
 80038fa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80038fc:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <vTaskSwitchContext+0xc0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	334c      	adds	r3, #76	@ 0x4c
 8003902:	4a09      	ldr	r2, [pc, #36]	@ (8003928 <vTaskSwitchContext+0xc4>)
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	200004c8 	.word	0x200004c8
 8003918:	200004b4 	.word	0x200004b4
 800391c:	200004a8 	.word	0x200004a8
 8003920:	200003a4 	.word	0x200003a4
 8003924:	200003a0 	.word	0x200003a0
 8003928:	20000010 	.word	0x20000010

0800392c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003934:	f000 f852 	bl	80039dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <prvIdleTask+0x28>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d9f9      	bls.n	8003934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <prvIdleTask+0x2c>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003950:	e7f0      	b.n	8003934 <prvIdleTask+0x8>
 8003952:	bf00      	nop
 8003954:	200003a4 	.word	0x200003a4
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	e00c      	b.n	8003982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4a12      	ldr	r2, [pc, #72]	@ (80039bc <prvInitialiseTaskLists+0x60>)
 8003974:	4413      	add	r3, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fb0a 	bl	8002f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3301      	adds	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b06      	cmp	r3, #6
 8003986:	d9ef      	bls.n	8003968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003988:	480d      	ldr	r0, [pc, #52]	@ (80039c0 <prvInitialiseTaskLists+0x64>)
 800398a:	f7ff fb01 	bl	8002f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800398e:	480d      	ldr	r0, [pc, #52]	@ (80039c4 <prvInitialiseTaskLists+0x68>)
 8003990:	f7ff fafe 	bl	8002f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003994:	480c      	ldr	r0, [pc, #48]	@ (80039c8 <prvInitialiseTaskLists+0x6c>)
 8003996:	f7ff fafb 	bl	8002f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800399a:	480c      	ldr	r0, [pc, #48]	@ (80039cc <prvInitialiseTaskLists+0x70>)
 800399c:	f7ff faf8 	bl	8002f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039a0:	480b      	ldr	r0, [pc, #44]	@ (80039d0 <prvInitialiseTaskLists+0x74>)
 80039a2:	f7ff faf5 	bl	8002f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <prvInitialiseTaskLists+0x78>)
 80039a8:	4a05      	ldr	r2, [pc, #20]	@ (80039c0 <prvInitialiseTaskLists+0x64>)
 80039aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	@ (80039d8 <prvInitialiseTaskLists+0x7c>)
 80039ae:	4a05      	ldr	r2, [pc, #20]	@ (80039c4 <prvInitialiseTaskLists+0x68>)
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200003a4 	.word	0x200003a4
 80039c0:	20000430 	.word	0x20000430
 80039c4:	20000444 	.word	0x20000444
 80039c8:	20000460 	.word	0x20000460
 80039cc:	20000474 	.word	0x20000474
 80039d0:	2000048c 	.word	0x2000048c
 80039d4:	20000458 	.word	0x20000458
 80039d8:	2000045c 	.word	0x2000045c

080039dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039e2:	e019      	b.n	8003a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039e4:	f000 fc38 	bl	8004258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <prvCheckTasksWaitingTermination+0x50>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fb55 	bl	80030a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <prvCheckTasksWaitingTermination+0x54>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	4a0b      	ldr	r2, [pc, #44]	@ (8003a30 <prvCheckTasksWaitingTermination+0x54>)
 8003a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a04:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <prvCheckTasksWaitingTermination+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a34 <prvCheckTasksWaitingTermination+0x58>)
 8003a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a0e:	f000 fc55 	bl	80042bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f810 	bl	8003a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <prvCheckTasksWaitingTermination+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e1      	bne.n	80039e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000474 	.word	0x20000474
 8003a30:	200004a0 	.word	0x200004a0
 8003a34:	20000488 	.word	0x20000488

08003a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	334c      	adds	r3, #76	@ 0x4c
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 ff1f 	bl	8004888 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d108      	bne.n	8003a66 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fded 	bl	8004638 <vPortFree>
				vPortFree( pxTCB );
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fdea 	bl	8004638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a64:	e019      	b.n	8003a9a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d103      	bne.n	8003a78 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fde1 	bl	8004638 <vPortFree>
	}
 8003a76:	e010      	b.n	8003a9a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d00b      	beq.n	8003a9a <prvDeleteTCB+0x62>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	60fb      	str	r3, [r7, #12]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <prvDeleteTCB+0x5e>
	}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <prvResetNextTaskUnblockTime+0x38>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d104      	bne.n	8003abe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003abc:	e008      	b.n	8003ad0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abe:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <prvResetNextTaskUnblockTime+0x38>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000458 	.word	0x20000458
 8003ae0:	200004c0 	.word	0x200004c0

08003ae4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <xTaskGetSchedulerState+0x34>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003af2:	2301      	movs	r3, #1
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	e008      	b.n	8003b0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af8:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <xTaskGetSchedulerState+0x38>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b00:	2302      	movs	r3, #2
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	e001      	b.n	8003b0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b0a:	687b      	ldr	r3, [r7, #4]
	}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	200004ac 	.word	0x200004ac
 8003b1c:	200004c8 	.word	0x200004c8

08003b20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003b2e:	f000 fb93 	bl	8004258 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003b32:	4b29      	ldr	r3, [pc, #164]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d01c      	beq.n	8003b7a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	43d2      	mvns	r2, r2
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003b52:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b62:	2101      	movs	r1, #1
 8003b64:	6838      	ldr	r0, [r7, #0]
 8003b66:	f000 f9e3 	bl	8003f30 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <xTaskNotifyWait+0xbc>)
 8003b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003b7a:	f000 fb9f 	bl	80042bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8003b7e:	f000 fb6b 	bl	8004258 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003b94:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d002      	beq.n	8003ba8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e00a      	b.n	8003bbe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	43d2      	mvns	r2, r2
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bbe:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <xTaskNotifyWait+0xb8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8003bc8:	f000 fb78 	bl	80042bc <vPortExitCritical>

		return xReturn;
 8003bcc:	697b      	ldr	r3, [r7, #20]
	}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200003a0 	.word	0x200003a0
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10b      	bne.n	8003c12 <xTaskGenericNotify+0x32>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	61bb      	str	r3, [r7, #24]
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	e7fd      	b.n	8003c0e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003c16:	f000 fb1f 	bl	8004258 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8003c30:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d82e      	bhi.n	8003c9e <xTaskGenericNotify+0xbe>
 8003c40:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <xTaskGenericNotify+0x68>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003cc3 	.word	0x08003cc3
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6f 	.word	0x08003c6f
 8003c54:	08003c7f 	.word	0x08003c7f
 8003c58:	08003c89 	.word	0x08003c89
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	431a      	orrs	r2, r3
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8003c6c:	e02c      	b.n	8003cc8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8003c7c:	e024      	b.n	8003cc8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8003c86:	e01f      	b.n	8003cc8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c88:	7ffb      	ldrb	r3, [r7, #31]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d004      	beq.n	8003c98 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003c96:	e017      	b.n	8003cc8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8003c9c:	e014      	b.n	8003cc8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d00d      	beq.n	8003cc6 <xTaskGenericNotify+0xe6>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	617b      	str	r3, [r7, #20]
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	e7fd      	b.n	8003cbe <xTaskGenericNotify+0xde>
					break;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <xTaskGenericNotify+0xe8>

					break;
 8003cc6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003cc8:	7ffb      	ldrb	r3, [r7, #31]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d13a      	bne.n	8003d44 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff f9e6 	bl	80030a4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	2201      	movs	r2, #1
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d54 <xTaskGenericNotify+0x174>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d54 <xTaskGenericNotify+0x174>)
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <xTaskGenericNotify+0x178>)
 8003cf8:	441a      	add	r2, r3
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7ff f972 	bl	8002fea <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <xTaskGenericNotify+0x146>
	__asm volatile
 8003d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	613b      	str	r3, [r7, #16]
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	e7fd      	b.n	8003d22 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <xTaskGenericNotify+0x17c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d907      	bls.n	8003d44 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8003d34:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <xTaskGenericNotify+0x180>)
 8003d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003d44:	f000 faba 	bl	80042bc <vPortExitCritical>

		return xReturn;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3728      	adds	r7, #40	@ 0x28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	200004a8 	.word	0x200004a8
 8003d58:	200003a4 	.word	0x200003a4
 8003d5c:	200003a0 	.word	0x200003a0
 8003d60:	e000ed04 	.word	0xe000ed04

08003d64 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	@ 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8003d74:	2301      	movs	r3, #1
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10b      	bne.n	8003d96 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	e7fd      	b.n	8003d92 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d96:	f000 fb3f 	bl	8004418 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	623a      	str	r2, [r7, #32]
 8003db4:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003db6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d004      	beq.n	8003dca <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dcc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8003dd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d82e      	bhi.n	8003e40 <xTaskGenericNotifyFromISR+0xdc>
 8003de2:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <xTaskGenericNotifyFromISR+0x84>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e65 	.word	0x08003e65
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e0f 	.word	0x08003e0f
 8003df4:	08003e1f 	.word	0x08003e1f
 8003df8:	08003e29 	.word	0x08003e29
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8003e0c:	e02d      	b.n	8003e6a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8003e1c:	e025      	b.n	8003e6a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8003e26:	e020      	b.n	8003e6a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d004      	beq.n	8003e3a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8003e38:	e017      	b.n	8003e6a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8003e3e:	e014      	b.n	8003e6a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8003e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d00d      	beq.n	8003e68 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	61bb      	str	r3, [r7, #24]
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8003e64:	bf00      	nop
 8003e66:	e000      	b.n	8003e6a <xTaskGenericNotifyFromISR+0x106>
					break;
 8003e68:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d146      	bne.n	8003f00 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00b      	beq.n	8003e92 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	617b      	str	r3, [r7, #20]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <xTaskGenericNotifyFromISR+0x1b4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11c      	bne.n	8003ed4 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff f900 	bl	80030a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	409a      	lsls	r2, r3
 8003eac:	4b1b      	ldr	r3, [pc, #108]	@ (8003f1c <xTaskGenericNotifyFromISR+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f1c <xTaskGenericNotifyFromISR+0x1b8>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a17      	ldr	r2, [pc, #92]	@ (8003f20 <xTaskGenericNotifyFromISR+0x1bc>)
 8003ec4:	441a      	add	r2, r3
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7ff f88c 	bl	8002fea <vListInsertEnd>
 8003ed2:	e005      	b.n	8003ee0 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	3318      	adds	r3, #24
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4812      	ldr	r0, [pc, #72]	@ (8003f24 <xTaskGenericNotifyFromISR+0x1c0>)
 8003edc:	f7ff f885 	bl	8002fea <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <xTaskGenericNotifyFromISR+0x1c4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d908      	bls.n	8003f00 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8003eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8003ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8003efa:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <xTaskGenericNotifyFromISR+0x1c8>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f02:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f0a:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3738      	adds	r7, #56	@ 0x38
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200004c8 	.word	0x200004c8
 8003f1c:	200004a8 	.word	0x200004a8
 8003f20:	200003a4 	.word	0x200003a4
 8003f24:	20000460 	.word	0x20000460
 8003f28:	200003a0 	.word	0x200003a0
 8003f2c:	200004b4 	.word	0x200004b4

08003f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f3a:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f40:	4b28      	ldr	r3, [pc, #160]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f8ac 	bl	80030a4 <uxListRemove>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f52:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f58:	2201      	movs	r2, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	4b21      	ldr	r3, [pc, #132]	@ (8003fe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4013      	ands	r3, r2
 8003f66:	4a20      	ldr	r2, [pc, #128]	@ (8003fe8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d10a      	bne.n	8003f88 <prvAddCurrentTaskToDelayedList+0x58>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f78:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	4619      	mov	r1, r3
 8003f80:	481a      	ldr	r0, [pc, #104]	@ (8003fec <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f82:	f7ff f832 	bl	8002fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f86:	e026      	b.n	8003fd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f90:	4b14      	ldr	r3, [pc, #80]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d209      	bcs.n	8003fb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa0:	4b13      	ldr	r3, [pc, #76]	@ (8003ff0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7ff f840 	bl	8003032 <vListInsert>
}
 8003fb2:	e010      	b.n	8003fd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f7ff f836 	bl	8003032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d202      	bcs.n	8003fd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fd0:	4a09      	ldr	r2, [pc, #36]	@ (8003ff8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6013      	str	r3, [r2, #0]
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	200004a4 	.word	0x200004a4
 8003fe4:	200003a0 	.word	0x200003a0
 8003fe8:	200004a8 	.word	0x200004a8
 8003fec:	2000048c 	.word	0x2000048c
 8003ff0:	2000045c 	.word	0x2000045c
 8003ff4:	20000458 	.word	0x20000458
 8003ff8:	200004c0 	.word	0x200004c0

08003ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b04      	subs	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b04      	subs	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800402c:	4a0c      	ldr	r2, [pc, #48]	@ (8004060 <pxPortInitialiseStack+0x64>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b14      	subs	r3, #20
 8004036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f06f 0202 	mvn.w	r2, #2
 800404a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b20      	subs	r3, #32
 8004050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004052:	68fb      	ldr	r3, [r7, #12]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <prvTaskExitError+0x58>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d00b      	beq.n	8004090 <prvTaskExitError+0x2c>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <prvTaskExitError+0x28>
	__asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60bb      	str	r3, [r7, #8]
}
 80040a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040a4:	bf00      	nop
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0fc      	beq.n	80040a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	2000000c 	.word	0x2000000c

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	200003a0 	.word	0x200003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040e8:	4808      	ldr	r0, [pc, #32]	@ (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800410a:	bf00      	nop
 800410c:	e000ed08 	.word	0xe000ed08

08004110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004116:	4b47      	ldr	r3, [pc, #284]	@ (8004234 <xPortStartScheduler+0x124>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a47      	ldr	r2, [pc, #284]	@ (8004238 <xPortStartScheduler+0x128>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10b      	bne.n	8004138 <xPortStartScheduler+0x28>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	613b      	str	r3, [r7, #16]
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004138:	4b3e      	ldr	r3, [pc, #248]	@ (8004234 <xPortStartScheduler+0x124>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3f      	ldr	r2, [pc, #252]	@ (800423c <xPortStartScheduler+0x12c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10b      	bne.n	800415a <xPortStartScheduler+0x4a>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800415a:	4b39      	ldr	r3, [pc, #228]	@ (8004240 <xPortStartScheduler+0x130>)
 800415c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	22ff      	movs	r2, #255	@ 0xff
 800416a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800417c:	b2da      	uxtb	r2, r3
 800417e:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <xPortStartScheduler+0x134>)
 8004180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004182:	4b31      	ldr	r3, [pc, #196]	@ (8004248 <xPortStartScheduler+0x138>)
 8004184:	2207      	movs	r2, #7
 8004186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004188:	e009      	b.n	800419e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800418a:	4b2f      	ldr	r3, [pc, #188]	@ (8004248 <xPortStartScheduler+0x138>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3b01      	subs	r3, #1
 8004190:	4a2d      	ldr	r2, [pc, #180]	@ (8004248 <xPortStartScheduler+0x138>)
 8004192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a6:	2b80      	cmp	r3, #128	@ 0x80
 80041a8:	d0ef      	beq.n	800418a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041aa:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <xPortStartScheduler+0x138>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d00b      	beq.n	80041ce <xPortStartScheduler+0xbe>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60bb      	str	r3, [r7, #8]
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	e7fd      	b.n	80041ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <xPortStartScheduler+0x138>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	021b      	lsls	r3, r3, #8
 80041d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <xPortStartScheduler+0x138>)
 80041d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <xPortStartScheduler+0x138>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041e0:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <xPortStartScheduler+0x138>)
 80041e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041ec:	4b17      	ldr	r3, [pc, #92]	@ (800424c <xPortStartScheduler+0x13c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a16      	ldr	r2, [pc, #88]	@ (800424c <xPortStartScheduler+0x13c>)
 80041f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041f8:	4b14      	ldr	r3, [pc, #80]	@ (800424c <xPortStartScheduler+0x13c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a13      	ldr	r2, [pc, #76]	@ (800424c <xPortStartScheduler+0x13c>)
 80041fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004204:	f000 f8da 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004208:	4b11      	ldr	r3, [pc, #68]	@ (8004250 <xPortStartScheduler+0x140>)
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800420e:	f000 f8f9 	bl	8004404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <xPortStartScheduler+0x144>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a0f      	ldr	r2, [pc, #60]	@ (8004254 <xPortStartScheduler+0x144>)
 8004218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800421c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800421e:	f7ff ff63 	bl	80040e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004222:	f7ff fb1f 	bl	8003864 <vTaskSwitchContext>
	prvTaskExitError();
 8004226:	f7ff ff1d 	bl	8004064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	e000ed00 	.word	0xe000ed00
 8004238:	410fc271 	.word	0x410fc271
 800423c:	410fc270 	.word	0x410fc270
 8004240:	e000e400 	.word	0xe000e400
 8004244:	200004cc 	.word	0x200004cc
 8004248:	200004d0 	.word	0x200004d0
 800424c:	e000ed20 	.word	0xe000ed20
 8004250:	2000000c 	.word	0x2000000c
 8004254:	e000ef34 	.word	0xe000ef34

08004258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	607b      	str	r3, [r7, #4]
}
 8004270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004272:	4b10      	ldr	r3, [pc, #64]	@ (80042b4 <vPortEnterCritical+0x5c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a0e      	ldr	r2, [pc, #56]	@ (80042b4 <vPortEnterCritical+0x5c>)
 800427a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800427c:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <vPortEnterCritical+0x5c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d110      	bne.n	80042a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <vPortEnterCritical+0x60>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	603b      	str	r3, [r7, #0]
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	e7fd      	b.n	80042a2 <vPortEnterCritical+0x4a>
	}
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042c2:	4b12      	ldr	r3, [pc, #72]	@ (800430c <vPortExitCritical+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <vPortExitCritical+0x26>
	__asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	607b      	str	r3, [r7, #4]
}
 80042dc:	bf00      	nop
 80042de:	bf00      	nop
 80042e0:	e7fd      	b.n	80042de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	4a08      	ldr	r2, [pc, #32]	@ (800430c <vPortExitCritical+0x50>)
 80042ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042ec:	4b07      	ldr	r3, [pc, #28]	@ (800430c <vPortExitCritical+0x50>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <vPortExitCritical+0x44>
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
}
 80042fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	2000000c 	.word	0x2000000c

08004310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004310:	f3ef 8009 	mrs	r0, PSP
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <pxCurrentTCBConst>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f01e 0f10 	tst.w	lr, #16
 8004320:	bf08      	it	eq
 8004322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	6010      	str	r0, [r2, #0]
 800432c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004334:	f380 8811 	msr	BASEPRI, r0
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f7ff fa90 	bl	8003864 <vTaskSwitchContext>
 8004344:	f04f 0000 	mov.w	r0, #0
 8004348:	f380 8811 	msr	BASEPRI, r0
 800434c:	bc09      	pop	{r0, r3}
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	6808      	ldr	r0, [r1, #0]
 8004352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004356:	f01e 0f10 	tst.w	lr, #16
 800435a:	bf08      	it	eq
 800435c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004360:	f380 8809 	msr	PSP, r0
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	f3af 8000 	nop.w

08004370 <pxCurrentTCBConst>:
 8004370:	200003a0 	.word	0x200003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	607b      	str	r3, [r7, #4]
}
 8004390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004392:	f7ff f9ad 	bl	80036f0 <xTaskIncrementTick>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <xPortSysTickHandler+0x40>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f383 8811 	msr	BASEPRI, r3
}
 80043ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0b      	ldr	r3, [pc, #44]	@ (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	@ (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a09      	ldr	r2, [pc, #36]	@ (8004400 <vPortSetupTimerInterrupt+0x44>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000e010 	.word	0xe000e010
 80043f4:	e000e018 	.word	0xe000e018
 80043f8:	20000000 	.word	0x20000000
 80043fc:	10624dd3 	.word	0x10624dd3
 8004400:	e000e014 	.word	0xe000e014

08004404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004414 <vPortEnableVFP+0x10>
 8004408:	6801      	ldr	r1, [r0, #0]
 800440a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800440e:	6001      	str	r1, [r0, #0]
 8004410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004412:	bf00      	nop
 8004414:	e000ed88 	.word	0xe000ed88

08004418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800441e:	f3ef 8305 	mrs	r3, IPSR
 8004422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	d915      	bls.n	8004456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800442a:	4a18      	ldr	r2, [pc, #96]	@ (800448c <vPortValidateInterruptPriority+0x74>)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004434:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <vPortValidateInterruptPriority+0x78>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	7afa      	ldrb	r2, [r7, #11]
 800443a:	429a      	cmp	r2, r3
 800443c:	d20b      	bcs.n	8004456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	607b      	str	r3, [r7, #4]
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	e7fd      	b.n	8004452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004456:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <vPortValidateInterruptPriority+0x7c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800445e:	4b0e      	ldr	r3, [pc, #56]	@ (8004498 <vPortValidateInterruptPriority+0x80>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90b      	bls.n	800447e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	603b      	str	r3, [r7, #0]
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <vPortValidateInterruptPriority+0x62>
	}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e3f0 	.word	0xe000e3f0
 8004490:	200004cc 	.word	0x200004cc
 8004494:	e000ed0c 	.word	0xe000ed0c
 8004498:	200004d0 	.word	0x200004d0

0800449c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	@ 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044a8:	f7ff f876 	bl	8003598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004620 <pvPortMalloc+0x184>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044b4:	f000 f924 	bl	8004700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004624 <pvPortMalloc+0x188>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 8095 	bne.w	80045f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01e      	beq.n	800450a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80044cc:	2208      	movs	r2, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d015      	beq.n	800450a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f023 0307 	bic.w	r3, r3, #7
 80044e4:	3308      	adds	r3, #8
 80044e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00b      	beq.n	800450a <pvPortMalloc+0x6e>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	617b      	str	r3, [r7, #20]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d06f      	beq.n	80045f0 <pvPortMalloc+0x154>
 8004510:	4b45      	ldr	r3, [pc, #276]	@ (8004628 <pvPortMalloc+0x18c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	429a      	cmp	r2, r3
 8004518:	d86a      	bhi.n	80045f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800451a:	4b44      	ldr	r3, [pc, #272]	@ (800462c <pvPortMalloc+0x190>)
 800451c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800451e:	4b43      	ldr	r3, [pc, #268]	@ (800462c <pvPortMalloc+0x190>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004524:	e004      	b.n	8004530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d903      	bls.n	8004542 <pvPortMalloc+0xa6>
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f1      	bne.n	8004526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004542:	4b37      	ldr	r3, [pc, #220]	@ (8004620 <pvPortMalloc+0x184>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004548:	429a      	cmp	r2, r3
 800454a:	d051      	beq.n	80045f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2208      	movs	r2, #8
 8004552:	4413      	add	r3, r2
 8004554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	1ad2      	subs	r2, r2, r3
 8004566:	2308      	movs	r3, #8
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	429a      	cmp	r2, r3
 800456c:	d920      	bls.n	80045b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800456e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <pvPortMalloc+0xfc>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	1ad2      	subs	r2, r2, r3
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045aa:	69b8      	ldr	r0, [r7, #24]
 80045ac:	f000 f90a 	bl	80047c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <pvPortMalloc+0x18c>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004628 <pvPortMalloc+0x18c>)
 80045bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045be:	4b1a      	ldr	r3, [pc, #104]	@ (8004628 <pvPortMalloc+0x18c>)
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <pvPortMalloc+0x194>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d203      	bcs.n	80045d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045ca:	4b17      	ldr	r3, [pc, #92]	@ (8004628 <pvPortMalloc+0x18c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a18      	ldr	r2, [pc, #96]	@ (8004630 <pvPortMalloc+0x194>)
 80045d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	4b13      	ldr	r3, [pc, #76]	@ (8004624 <pvPortMalloc+0x188>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	431a      	orrs	r2, r3
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045e6:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <pvPortMalloc+0x198>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4a11      	ldr	r2, [pc, #68]	@ (8004634 <pvPortMalloc+0x198>)
 80045ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045f0:	f7fe ffe0 	bl	80035b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <pvPortMalloc+0x17a>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	60fb      	str	r3, [r7, #12]
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	e7fd      	b.n	8004612 <pvPortMalloc+0x176>
	return pvReturn;
 8004616:	69fb      	ldr	r3, [r7, #28]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	@ 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200040dc 	.word	0x200040dc
 8004624:	200040f0 	.word	0x200040f0
 8004628:	200040e0 	.word	0x200040e0
 800462c:	200040d4 	.word	0x200040d4
 8004630:	200040e4 	.word	0x200040e4
 8004634:	200040e8 	.word	0x200040e8

08004638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d04f      	beq.n	80046ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800464a:	2308      	movs	r3, #8
 800464c:	425b      	negs	r3, r3
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4413      	add	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b25      	ldr	r3, [pc, #148]	@ (80046f4 <vPortFree+0xbc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <vPortFree+0x46>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60fb      	str	r3, [r7, #12]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <vPortFree+0x66>
	__asm volatile
 8004686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468a:	f383 8811 	msr	BASEPRI, r3
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	60bb      	str	r3, [r7, #8]
}
 8004698:	bf00      	nop
 800469a:	bf00      	nop
 800469c:	e7fd      	b.n	800469a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <vPortFree+0xbc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01e      	beq.n	80046ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d11a      	bne.n	80046ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	4b0e      	ldr	r3, [pc, #56]	@ (80046f4 <vPortFree+0xbc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	43db      	mvns	r3, r3
 80046be:	401a      	ands	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046c4:	f7fe ff68 	bl	8003598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <vPortFree+0xc0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	4a09      	ldr	r2, [pc, #36]	@ (80046f8 <vPortFree+0xc0>)
 80046d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046d6:	6938      	ldr	r0, [r7, #16]
 80046d8:	f000 f874 	bl	80047c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <vPortFree+0xc4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3301      	adds	r3, #1
 80046e2:	4a06      	ldr	r2, [pc, #24]	@ (80046fc <vPortFree+0xc4>)
 80046e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046e6:	f7fe ff65 	bl	80035b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200040f0 	.word	0x200040f0
 80046f8:	200040e0 	.word	0x200040e0
 80046fc:	200040ec 	.word	0x200040ec

08004700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004706:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800470a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800470c:	4b27      	ldr	r3, [pc, #156]	@ (80047ac <prvHeapInit+0xac>)
 800470e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3307      	adds	r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0307 	bic.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004728:	68ba      	ldr	r2, [r7, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	4a1f      	ldr	r2, [pc, #124]	@ (80047ac <prvHeapInit+0xac>)
 8004730:	4413      	add	r3, r2
 8004732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004738:	4a1d      	ldr	r2, [pc, #116]	@ (80047b0 <prvHeapInit+0xb0>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800473e:	4b1c      	ldr	r3, [pc, #112]	@ (80047b0 <prvHeapInit+0xb0>)
 8004740:	2200      	movs	r2, #0
 8004742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4413      	add	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800474c:	2208      	movs	r2, #8
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4a15      	ldr	r2, [pc, #84]	@ (80047b4 <prvHeapInit+0xb4>)
 8004760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004762:	4b14      	ldr	r3, [pc, #80]	@ (80047b4 <prvHeapInit+0xb4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800476a:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <prvHeapInit+0xb4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004780:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <prvHeapInit+0xb4>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a0a      	ldr	r2, [pc, #40]	@ (80047b8 <prvHeapInit+0xb8>)
 800478e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <prvHeapInit+0xbc>)
 8004796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004798:	4b09      	ldr	r3, [pc, #36]	@ (80047c0 <prvHeapInit+0xc0>)
 800479a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800479e:	601a      	str	r2, [r3, #0]
}
 80047a0:	bf00      	nop
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	200004d4 	.word	0x200004d4
 80047b0:	200040d4 	.word	0x200040d4
 80047b4:	200040dc 	.word	0x200040dc
 80047b8:	200040e4 	.word	0x200040e4
 80047bc:	200040e0 	.word	0x200040e0
 80047c0:	200040f0 	.word	0x200040f0

080047c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047cc:	4b28      	ldr	r3, [pc, #160]	@ (8004870 <prvInsertBlockIntoFreeList+0xac>)
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e002      	b.n	80047d8 <prvInsertBlockIntoFreeList+0x14>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d8f7      	bhi.n	80047d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d108      	bne.n	8004806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d118      	bne.n	800484c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b15      	ldr	r3, [pc, #84]	@ (8004874 <prvInsertBlockIntoFreeList+0xb0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d00d      	beq.n	8004842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e008      	b.n	8004854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004842:	4b0c      	ldr	r3, [pc, #48]	@ (8004874 <prvInsertBlockIntoFreeList+0xb0>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	e003      	b.n	8004854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d002      	beq.n	8004862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	200040d4 	.word	0x200040d4
 8004874:	200040dc 	.word	0x200040dc

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <_reclaim_reent>:
 8004888:	4b29      	ldr	r3, [pc, #164]	@ (8004930 <_reclaim_reent+0xa8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4283      	cmp	r3, r0
 800488e:	b570      	push	{r4, r5, r6, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	d04b      	beq.n	800492c <_reclaim_reent+0xa4>
 8004894:	69c3      	ldr	r3, [r0, #28]
 8004896:	b1ab      	cbz	r3, 80048c4 <_reclaim_reent+0x3c>
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	b16b      	cbz	r3, 80048b8 <_reclaim_reent+0x30>
 800489c:	2500      	movs	r5, #0
 800489e:	69e3      	ldr	r3, [r4, #28]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	5959      	ldr	r1, [r3, r5]
 80048a4:	2900      	cmp	r1, #0
 80048a6:	d13b      	bne.n	8004920 <_reclaim_reent+0x98>
 80048a8:	3504      	adds	r5, #4
 80048aa:	2d80      	cmp	r5, #128	@ 0x80
 80048ac:	d1f7      	bne.n	800489e <_reclaim_reent+0x16>
 80048ae:	69e3      	ldr	r3, [r4, #28]
 80048b0:	4620      	mov	r0, r4
 80048b2:	68d9      	ldr	r1, [r3, #12]
 80048b4:	f000 f864 	bl	8004980 <_free_r>
 80048b8:	69e3      	ldr	r3, [r4, #28]
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	b111      	cbz	r1, 80048c4 <_reclaim_reent+0x3c>
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 f85e 	bl	8004980 <_free_r>
 80048c4:	6961      	ldr	r1, [r4, #20]
 80048c6:	b111      	cbz	r1, 80048ce <_reclaim_reent+0x46>
 80048c8:	4620      	mov	r0, r4
 80048ca:	f000 f859 	bl	8004980 <_free_r>
 80048ce:	69e1      	ldr	r1, [r4, #28]
 80048d0:	b111      	cbz	r1, 80048d8 <_reclaim_reent+0x50>
 80048d2:	4620      	mov	r0, r4
 80048d4:	f000 f854 	bl	8004980 <_free_r>
 80048d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80048da:	b111      	cbz	r1, 80048e2 <_reclaim_reent+0x5a>
 80048dc:	4620      	mov	r0, r4
 80048de:	f000 f84f 	bl	8004980 <_free_r>
 80048e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048e4:	b111      	cbz	r1, 80048ec <_reclaim_reent+0x64>
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f84a 	bl	8004980 <_free_r>
 80048ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80048ee:	b111      	cbz	r1, 80048f6 <_reclaim_reent+0x6e>
 80048f0:	4620      	mov	r0, r4
 80048f2:	f000 f845 	bl	8004980 <_free_r>
 80048f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80048f8:	b111      	cbz	r1, 8004900 <_reclaim_reent+0x78>
 80048fa:	4620      	mov	r0, r4
 80048fc:	f000 f840 	bl	8004980 <_free_r>
 8004900:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004902:	b111      	cbz	r1, 800490a <_reclaim_reent+0x82>
 8004904:	4620      	mov	r0, r4
 8004906:	f000 f83b 	bl	8004980 <_free_r>
 800490a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800490c:	b111      	cbz	r1, 8004914 <_reclaim_reent+0x8c>
 800490e:	4620      	mov	r0, r4
 8004910:	f000 f836 	bl	8004980 <_free_r>
 8004914:	6a23      	ldr	r3, [r4, #32]
 8004916:	b14b      	cbz	r3, 800492c <_reclaim_reent+0xa4>
 8004918:	4620      	mov	r0, r4
 800491a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800491e:	4718      	bx	r3
 8004920:	680e      	ldr	r6, [r1, #0]
 8004922:	4620      	mov	r0, r4
 8004924:	f000 f82c 	bl	8004980 <_free_r>
 8004928:	4631      	mov	r1, r6
 800492a:	e7bb      	b.n	80048a4 <_reclaim_reent+0x1c>
 800492c:	bd70      	pop	{r4, r5, r6, pc}
 800492e:	bf00      	nop
 8004930:	20000010 	.word	0x20000010

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	4d0d      	ldr	r5, [pc, #52]	@ (800496c <__libc_init_array+0x38>)
 8004938:	4c0d      	ldr	r4, [pc, #52]	@ (8004970 <__libc_init_array+0x3c>)
 800493a:	1b64      	subs	r4, r4, r5
 800493c:	10a4      	asrs	r4, r4, #2
 800493e:	2600      	movs	r6, #0
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	4d0b      	ldr	r5, [pc, #44]	@ (8004974 <__libc_init_array+0x40>)
 8004946:	4c0c      	ldr	r4, [pc, #48]	@ (8004978 <__libc_init_array+0x44>)
 8004948:	f000 f870 	bl	8004a2c <_init>
 800494c:	1b64      	subs	r4, r4, r5
 800494e:	10a4      	asrs	r4, r4, #2
 8004950:	2600      	movs	r6, #0
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	f855 3b04 	ldr.w	r3, [r5], #4
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	f855 3b04 	ldr.w	r3, [r5], #4
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	08004ab4 	.word	0x08004ab4
 8004970:	08004ab4 	.word	0x08004ab4
 8004974:	08004ab4 	.word	0x08004ab4
 8004978:	08004ab8 	.word	0x08004ab8

0800497c <__retarget_lock_acquire_recursive>:
 800497c:	4770      	bx	lr

0800497e <__retarget_lock_release_recursive>:
 800497e:	4770      	bx	lr

08004980 <_free_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4605      	mov	r5, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	d041      	beq.n	8004a0c <_free_r+0x8c>
 8004988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498c:	1f0c      	subs	r4, r1, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfb8      	it	lt
 8004992:	18e4      	addlt	r4, r4, r3
 8004994:	f000 f83e 	bl	8004a14 <__malloc_lock>
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <_free_r+0x90>)
 800499a:	6813      	ldr	r3, [r2, #0]
 800499c:	b933      	cbnz	r3, 80049ac <_free_r+0x2c>
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6014      	str	r4, [r2, #0]
 80049a2:	4628      	mov	r0, r5
 80049a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a8:	f000 b83a 	b.w	8004a20 <__malloc_unlock>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d908      	bls.n	80049c2 <_free_r+0x42>
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	1821      	adds	r1, r4, r0
 80049b4:	428b      	cmp	r3, r1
 80049b6:	bf01      	itttt	eq
 80049b8:	6819      	ldreq	r1, [r3, #0]
 80049ba:	685b      	ldreq	r3, [r3, #4]
 80049bc:	1809      	addeq	r1, r1, r0
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	e7ed      	b.n	800499e <_free_r+0x1e>
 80049c2:	461a      	mov	r2, r3
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	b10b      	cbz	r3, 80049cc <_free_r+0x4c>
 80049c8:	42a3      	cmp	r3, r4
 80049ca:	d9fa      	bls.n	80049c2 <_free_r+0x42>
 80049cc:	6811      	ldr	r1, [r2, #0]
 80049ce:	1850      	adds	r0, r2, r1
 80049d0:	42a0      	cmp	r0, r4
 80049d2:	d10b      	bne.n	80049ec <_free_r+0x6c>
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	4401      	add	r1, r0
 80049d8:	1850      	adds	r0, r2, r1
 80049da:	4283      	cmp	r3, r0
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	d1e0      	bne.n	80049a2 <_free_r+0x22>
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	6053      	str	r3, [r2, #4]
 80049e6:	4408      	add	r0, r1
 80049e8:	6010      	str	r0, [r2, #0]
 80049ea:	e7da      	b.n	80049a2 <_free_r+0x22>
 80049ec:	d902      	bls.n	80049f4 <_free_r+0x74>
 80049ee:	230c      	movs	r3, #12
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	e7d6      	b.n	80049a2 <_free_r+0x22>
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	1821      	adds	r1, r4, r0
 80049f8:	428b      	cmp	r3, r1
 80049fa:	bf04      	itt	eq
 80049fc:	6819      	ldreq	r1, [r3, #0]
 80049fe:	685b      	ldreq	r3, [r3, #4]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	bf04      	itt	eq
 8004a04:	1809      	addeq	r1, r1, r0
 8004a06:	6021      	streq	r1, [r4, #0]
 8004a08:	6054      	str	r4, [r2, #4]
 8004a0a:	e7ca      	b.n	80049a2 <_free_r+0x22>
 8004a0c:	bd38      	pop	{r3, r4, r5, pc}
 8004a0e:	bf00      	nop
 8004a10:	20004230 	.word	0x20004230

08004a14 <__malloc_lock>:
 8004a14:	4801      	ldr	r0, [pc, #4]	@ (8004a1c <__malloc_lock+0x8>)
 8004a16:	f7ff bfb1 	b.w	800497c <__retarget_lock_acquire_recursive>
 8004a1a:	bf00      	nop
 8004a1c:	2000422c 	.word	0x2000422c

08004a20 <__malloc_unlock>:
 8004a20:	4801      	ldr	r0, [pc, #4]	@ (8004a28 <__malloc_unlock+0x8>)
 8004a22:	f7ff bfac 	b.w	800497e <__retarget_lock_release_recursive>
 8004a26:	bf00      	nop
 8004a28:	2000422c 	.word	0x2000422c

08004a2c <_init>:
 8004a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2e:	bf00      	nop
 8004a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a32:	bc08      	pop	{r3}
 8004a34:	469e      	mov	lr, r3
 8004a36:	4770      	bx	lr

08004a38 <_fini>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr
