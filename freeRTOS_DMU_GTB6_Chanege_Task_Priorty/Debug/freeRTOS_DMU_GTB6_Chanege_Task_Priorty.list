
freeRTOS_DMU_GTB6_Chanege_Task_Priorty.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006690  08006690  00007690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006720  08006720  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006720  08006720  00007720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006728  08006728  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006728  08006728  00007728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800672c  0800672c  0000772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006730  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c58  20000060  08006790  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cb8  08006790  00008cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b142  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c8  00000000  00000000  000231d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00026aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001177  00000000  00000000  00028110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bc4  00000000  00000000  00029287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199bb  00000000  00000000  0002ce4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea05e  00000000  00000000  00046806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006264  00000000  00000000  001308a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  00136b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006678 	.word	0x08006678

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006678 	.word	0x08006678

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fcd6 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f82c 	bl	8000564 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 800050c:	f000 fc28 	bl	8000d60 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f946 	bl	80007a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000514:	f000 f892 	bl	800063c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000518:	f000 f8e2 	bl	80006e0 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f916 	bl	800074c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f003 fa2e 	bl	8003980 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 8000524:	4a09      	ldr	r2, [pc, #36]	@ (800054c <main+0x4c>)
 8000526:	2100      	movs	r1, #0
 8000528:	4809      	ldr	r0, [pc, #36]	@ (8000550 <main+0x50>)
 800052a:	f003 fa73 	bl	8003a14 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <main+0x54>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000534:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <main+0x58>)
 8000536:	2100      	movs	r1, #0
 8000538:	4808      	ldr	r0, [pc, #32]	@ (800055c <main+0x5c>)
 800053a:	f003 fa6b 	bl	8003a14 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <main+0x60>)
 8000542:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000544:	f003 fa40 	bl	80039c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <main+0x48>
 800054c:	080066c0 	.word	0x080066c0
 8000550:	080008fd 	.word	0x080008fd
 8000554:	2000013c 	.word	0x2000013c
 8000558:	080066e4 	.word	0x080066e4
 800055c:	08000935 	.word	0x08000935
 8000560:	20000140 	.word	0x20000140

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2234      	movs	r2, #52	@ 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 ff98 	bl	80064a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a28      	ldr	r2, [pc, #160]	@ (8000634 <SystemClock_Config+0xd0>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	4b23      	ldr	r3, [pc, #140]	@ (8000638 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a22      	ldr	r2, [pc, #136]	@ (8000638 <SystemClock_Config+0xd4>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	@ 0xa8
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f97f 	bl	80028f0 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f8:	f000 f9e6 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fdec 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000626:	f000 f9cf 	bl	80009c8 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b21      	ldr	r3, [pc, #132]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000650:	4a21      	ldr	r2, [pc, #132]	@ (80006d8 <MX_ADC1_Init+0x9c>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000656:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000664:	2201      	movs	r2, #1
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_ADC1_Init+0x98>)
 800067e:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <MX_ADC1_Init+0xa0>)
 8000680:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_ADC1_Init+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <MX_ADC1_Init+0x98>)
 800069e:	f000 fc4b 	bl	8000f38 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a8:	f000 f98e 	bl	80009c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_ADC1_Init+0x98>)
 80006be:	f000 fd91 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c8:	f000 f97e 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000084 	.word	0x20000084
 80006d8:	40012000 	.word	0x40012000
 80006dc:	0f000001 	.word	0x0f000001

080006e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_CAN1_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <MX_CAN1_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_CAN1_Init+0x64>)
 80006ec:	220c      	movs	r2, #12
 80006ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_CAN1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_CAN1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_CAN1_Init+0x64>)
 80006fe:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000702:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_CAN1_Init+0x64>)
 8000706:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800070a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800070c:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <MX_CAN1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_CAN1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_CAN1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_CAN1_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <MX_CAN1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_CAN1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_CAN1_Init+0x64>)
 8000732:	f000 ff85 	bl	8001640 <HAL_CAN_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 f944 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000cc 	.word	0x200000cc
 8000748:	40006400 	.word	0x40006400

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000752:	4a12      	ldr	r2, [pc, #72]	@ (800079c <MX_USART2_UART_Init+0x50>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000756:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000758:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USART2_UART_Init+0x4c>)
 8000784:	f002 fdf4 	bl	8003370 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800078e:	f000 f91b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  // USART_Cmd(USART2, ENABLE); Normalde usart bununla katif olur
  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000f4 	.word	0x200000f4
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	@ 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
 80007ba:	4b4c      	ldr	r3, [pc, #304]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a4b      	ldr	r2, [pc, #300]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b49      	ldr	r3, [pc, #292]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	4b45      	ldr	r3, [pc, #276]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a44      	ldr	r2, [pc, #272]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b42      	ldr	r3, [pc, #264]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a3d      	ldr	r2, [pc, #244]	@ (80008ec <MX_GPIO_Init+0x14c>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b3b      	ldr	r3, [pc, #236]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	4b37      	ldr	r3, [pc, #220]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a36      	ldr	r2, [pc, #216]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b34      	ldr	r3, [pc, #208]	@ (80008ec <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b30      	ldr	r3, [pc, #192]	@ (80008ec <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a2f      	ldr	r2, [pc, #188]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <MX_GPIO_Init+0x14c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000864:	4822      	ldr	r0, [pc, #136]	@ (80008f0 <MX_GPIO_Init+0x150>)
 8000866:	f001 fcad 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2106      	movs	r1, #6
 800086e:	4821      	ldr	r0, [pc, #132]	@ (80008f4 <MX_GPIO_Init+0x154>)
 8000870:	f001 fca8 	bl	80021c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4818      	ldr	r0, [pc, #96]	@ (80008f0 <MX_GPIO_Init+0x150>)
 800088e:	f001 faed 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <MX_GPIO_Init+0x154>)
 80008a8:	f001 fae0 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008ac:	2306      	movs	r3, #6
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_GPIO_Init+0x154>)
 80008c4:	f001 fad2 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4806      	ldr	r0, [pc, #24]	@ (80008f8 <MX_GPIO_Init+0x158>)
 80008de:	f001 fac5 	bl	8001e6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3730      	adds	r7, #48	@ 0x30
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020800 	.word	0x40020800
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40021000 	.word	0x40021000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  	  HAL_ADC_Start(&hadc1);  // ADC'yi başlat
 8000904:	4809      	ldr	r0, [pc, #36]	@ (800092c <StartDefaultTask+0x30>)
 8000906:	f000 fb5b 	bl	8000fc0 <HAL_ADC_Start>
  	  if(HAL_ADC_GetValue(&hadc1) == HAL_OK)
 800090a:	4808      	ldr	r0, [pc, #32]	@ (800092c <StartDefaultTask+0x30>)
 800090c:	f000 fc5d 	bl	80011ca <HAL_ADC_GetValue>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d105      	bne.n	8000922 <StartDefaultTask+0x26>
  	  {
  		  dmu_value = HAL_ADC_GetValue(&hadc1);
 8000916:	4805      	ldr	r0, [pc, #20]	@ (800092c <StartDefaultTask+0x30>)
 8000918:	f000 fc57 	bl	80011ca <HAL_ADC_GetValue>
 800091c:	4603      	mov	r3, r0
 800091e:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <StartDefaultTask+0x34>)
 8000920:	6013      	str	r3, [r2, #0]
//
//		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
////		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
//		  vTaskDelay(pdMS_TO_TICKS(1000));
  	  }
  	  HAL_ADC_Stop(&hadc1);
 8000922:	4802      	ldr	r0, [pc, #8]	@ (800092c <StartDefaultTask+0x30>)
 8000924:	f000 fc1e 	bl	8001164 <HAL_ADC_Stop>
  	  HAL_ADC_Start(&hadc1);  // ADC'yi başlat
 8000928:	e7ec      	b.n	8000904 <StartDefaultTask+0x8>
 800092a:	bf00      	nop
 800092c:	20000084 	.word	0x20000084
 8000930:	20000080 	.word	0x20000080

08000934 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
//	uint32_t pulNotificationValue = 0;
  /* Infinite loop */
  for(;;)
  {
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 800093c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000940:	4814      	ldr	r0, [pc, #80]	@ (8000994 <StartTask02+0x60>)
 8000942:	f001 fc27 	bl	8002194 <HAL_GPIO_ReadPin>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <StartTask02+0x64>)
 800094c:	601a      	str	r2, [r3, #0]
	  if (digital_output == 1)
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <StartTask02+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d1f2      	bne.n	800093c <StartTask02+0x8>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2107      	movs	r1, #7
 800095a:	4810      	ldr	r0, [pc, #64]	@ (800099c <StartTask02+0x68>)
 800095c:	f001 fc32 	bl	80021c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <StartTask02+0x6c>)
 8000968:	f001 fc2c 	bl	80021c4 <HAL_GPIO_WritePin>
		  vTaskDelay(pdMS_TO_TICKS(1000)); // milisaniyeyi tick değerine dönüştürülecek
 800096c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000970:	f004 f882 	bl	8004a78 <vTaskDelay>

		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2107      	movs	r1, #7
 8000978:	4808      	ldr	r0, [pc, #32]	@ (800099c <StartTask02+0x68>)
 800097a:	f001 fc23 	bl	80021c4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000984:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <StartTask02+0x6c>)
 8000986:	f001 fc1d 	bl	80021c4 <HAL_GPIO_WritePin>
		  vTaskDelay(pdMS_TO_TICKS(1000));
 800098a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800098e:	f004 f873 	bl	8004a78 <vTaskDelay>
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8000992:	e7d3      	b.n	800093c <StartTask02+0x8>
 8000994:	40021000 	.word	0x40021000
 8000998:	2000007c 	.word	0x2000007c
 800099c:	40021400 	.word	0x40021400
 80009a0:	40020800 	.word	0x40020800

080009a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d101      	bne.n	80009ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009b6:	f000 fa9f 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40001000 	.word	0x40001000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <Error_Handler+0x8>

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	4a11      	ldr	r2, [pc, #68]	@ (8000a28 <HAL_MspInit+0x54>)
 80009e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000a28 <HAL_MspInit+0x54>)
 8000a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	210f      	movs	r1, #15
 8000a16:	f06f 0001 	mvn.w	r0, #1
 8000a1a:	f001 f9fd 	bl	8001e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	@ 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_ADC_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d127      	bne.n	8000a9e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <HAL_ADC_MspInit+0x80>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <HAL_ADC_MspInit+0x80>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <HAL_ADC_MspInit+0x80>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a0e      	ldr	r2, [pc, #56]	@ (8000aac <HAL_ADC_MspInit+0x80>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a86:	2301      	movs	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	@ (8000ab0 <HAL_ADC_MspInit+0x84>)
 8000a9a:	f001 f9e7 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40012000 	.word	0x40012000
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020000 	.word	0x40020000

08000ab4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	@ 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b48 <HAL_CAN_MspInit+0x94>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d134      	bne.n	8000b40 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_CAN_MspInit+0x98>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a1b      	ldr	r2, [pc, #108]	@ (8000b4c <HAL_CAN_MspInit+0x98>)
 8000ae0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <HAL_CAN_MspInit+0x98>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_CAN_MspInit+0x98>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <HAL_CAN_MspInit+0x98>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_CAN_MspInit+0x98>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b20:	2309      	movs	r3, #9
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <HAL_CAN_MspInit+0x9c>)
 8000b2c:	f001 f99e 	bl	8001e6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2105      	movs	r1, #5
 8000b34:	2014      	movs	r0, #20
 8000b36:	f001 f96f 	bl	8001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b3a:	2014      	movs	r0, #20
 8000b3c:	f001 f988 	bl	8001e50 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	@ 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40006400 	.word	0x40006400
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <HAL_UART_MspInit+0x8c>)
 8000bca:	f001 f94f 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	@ 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40004400 	.word	0x40004400
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_InitTick+0xe4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	4a32      	ldr	r2, [pc, #200]	@ (8000cc8 <HAL_InitTick+0xe4>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c04:	4b30      	ldr	r3, [pc, #192]	@ (8000cc8 <HAL_InitTick+0xe4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c10:	f107 0210 	add.w	r2, r7, #16
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fc06 	bl	800242c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c2a:	f001 fbd7 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8000c2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c30:	e004      	b.n	8000c3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c32:	f001 fbd3 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8000c36:	4603      	mov	r3, r0
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c3e:	4a23      	ldr	r2, [pc, #140]	@ (8000ccc <HAL_InitTick+0xe8>)
 8000c40:	fba2 2303 	umull	r2, r3, r2, r3
 8000c44:	0c9b      	lsrs	r3, r3, #18
 8000c46:	3b01      	subs	r3, #1
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c4c:	4a21      	ldr	r2, [pc, #132]	@ (8000cd4 <HAL_InitTick+0xf0>)
 8000c4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c58:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c70:	4817      	ldr	r0, [pc, #92]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c72:	f002 f8db 	bl	8002e2c <HAL_TIM_Base_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11b      	bne.n	8000cbc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c84:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <HAL_InitTick+0xec>)
 8000c86:	f002 f92b 	bl	8002ee0 <HAL_TIM_Base_Start_IT>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d111      	bne.n	8000cbc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c98:	2036      	movs	r0, #54	@ 0x36
 8000c9a:	f001 f8d9 	bl	8001e50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d808      	bhi.n	8000cb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	2036      	movs	r0, #54	@ 0x36
 8000caa:	f001 f8b5 	bl	8001e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_InitTick+0xf4>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	e002      	b.n	8000cbc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3738      	adds	r7, #56	@ 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	431bde83 	.word	0x431bde83
 8000cd0:	20000144 	.word	0x20000144
 8000cd4:	40001000 	.word	0x40001000
 8000cd8:	20000004 	.word	0x20000004

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <CAN1_RX0_IRQHandler+0x10>)
 8000d1a:	f000 fd8c 	bl	8001836 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000cc 	.word	0x200000cc

08000d28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <TIM6_DAC_IRQHandler+0x10>)
 8000d2e:	f002 f947 	bl	8002fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000144 	.word	0x20000144

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	2302      	movs	r3, #2
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	2302      	movs	r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d7a:	4b34      	ldr	r3, [pc, #208]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d011      	beq.n	8000dae <SystemCoreClockUpdate+0x4e>
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d844      	bhi.n	8000e1a <SystemCoreClockUpdate+0xba>
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <SystemCoreClockUpdate+0x3e>
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d004      	beq.n	8000da6 <SystemCoreClockUpdate+0x46>
 8000d9c:	e03d      	b.n	8000e1a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <SystemCoreClockUpdate+0xf0>)
 8000da0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e54 <SystemCoreClockUpdate+0xf4>)
 8000da2:	601a      	str	r2, [r3, #0]
      break;
 8000da4:	e03d      	b.n	8000e22 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <SystemCoreClockUpdate+0xf0>)
 8000da8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e58 <SystemCoreClockUpdate+0xf8>)
 8000daa:	601a      	str	r2, [r3, #0]
      break;
 8000dac:	e039      	b.n	8000e22 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000dae:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	0d9b      	lsrs	r3, r3, #22
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dba:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dc2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00c      	beq.n	8000de4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dca:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <SystemCoreClockUpdate+0xf8>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000dd4:	6852      	ldr	r2, [r2, #4]
 8000dd6:	0992      	lsrs	r2, r2, #6
 8000dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	e00b      	b.n	8000dfc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000de4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <SystemCoreClockUpdate+0xf4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dec:	4a17      	ldr	r2, [pc, #92]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000dee:	6852      	ldr	r2, [r2, #4]
 8000df0:	0992      	lsrs	r2, r2, #6
 8000df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	3301      	adds	r3, #1
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e14:	4a0e      	ldr	r2, [pc, #56]	@ (8000e50 <SystemCoreClockUpdate+0xf0>)
 8000e16:	6013      	str	r3, [r2, #0]
      break;
 8000e18:	e003      	b.n	8000e22 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <SystemCoreClockUpdate+0xf0>)
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e54 <SystemCoreClockUpdate+0xf4>)
 8000e1e:	601a      	str	r2, [r3, #0]
      break;
 8000e20:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <SystemCoreClockUpdate+0xec>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	091b      	lsrs	r3, r3, #4
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <SystemCoreClockUpdate+0xfc>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000e32:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <SystemCoreClockUpdate+0xf0>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	4a04      	ldr	r2, [pc, #16]	@ (8000e50 <SystemCoreClockUpdate+0xf0>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	20000000 	.word	0x20000000
 8000e54:	00f42400 	.word	0x00f42400
 8000e58:	007a1200 	.word	0x007a1200
 8000e5c:	08006708 	.word	0x08006708

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e64:	f7ff ff6a 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f005 fb69 	bl	8006564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb35 	bl	8000500 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ea4:	08006730 	.word	0x08006730
  ldr r2, =_sbss
 8000ea8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000eac:	20004cb8 	.word	0x20004cb8

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	@ (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 ff90 	bl	8001e02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	200f      	movs	r0, #15
 8000ee4:	f7ff fe7e 	bl	8000be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fd74 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2000018c 	.word	0x2000018c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2000018c 	.word	0x2000018c

08000f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e033      	b.n	8000fb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d109      	bne.n	8000f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff fd68 	bl	8000a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d118      	bne.n	8000fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f7e:	f023 0302 	bic.w	r3, r3, #2
 8000f82:	f043 0202 	orr.w	r2, r3, #2
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 fa5c 	bl	8001448 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	f043 0201 	orr.w	r2, r3, #1
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fa6:	e001      	b.n	8000fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d101      	bne.n	8000fda <HAL_ADC_Start+0x1a>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e0b2      	b.n	8001140 <HAL_ADC_Start+0x180>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d018      	beq.n	8001022 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0201 	orr.w	r2, r2, #1
 8000ffe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001000:	4b52      	ldr	r3, [pc, #328]	@ (800114c <HAL_ADC_Start+0x18c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a52      	ldr	r2, [pc, #328]	@ (8001150 <HAL_ADC_Start+0x190>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9a      	lsrs	r2, r3, #18
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001014:	e002      	b.n	800101c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3b01      	subs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f9      	bne.n	8001016 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b01      	cmp	r3, #1
 800102e:	d17a      	bne.n	8001126 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001034:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001038:	f023 0301 	bic.w	r3, r3, #1
 800103c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800105a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800106a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800106e:	d106      	bne.n	800107e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001074:	f023 0206 	bic.w	r2, r3, #6
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	645a      	str	r2, [r3, #68]	@ 0x44
 800107c:	e002      	b.n	8001084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <HAL_ADC_Start+0x194>)
 800108e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001098:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d12a      	bne.n	80010fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001158 <HAL_ADC_Start+0x198>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d015      	beq.n	80010dc <HAL_ADC_Start+0x11c>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a29      	ldr	r2, [pc, #164]	@ (800115c <HAL_ADC_Start+0x19c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d105      	bne.n	80010c6 <HAL_ADC_Start+0x106>
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <HAL_ADC_Start+0x194>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00a      	beq.n	80010dc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a25      	ldr	r2, [pc, #148]	@ (8001160 <HAL_ADC_Start+0x1a0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d136      	bne.n	800113e <HAL_ADC_Start+0x17e>
 80010d0:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <HAL_ADC_Start+0x194>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d130      	bne.n	800113e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d129      	bne.n	800113e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	e020      	b.n	800113e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <HAL_ADC_Start+0x198>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d11b      	bne.n	800113e <HAL_ADC_Start+0x17e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d114      	bne.n	800113e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	e00b      	b.n	800113e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f043 0210 	orr.w	r2, r3, #16
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20000000 	.word	0x20000000
 8001150:	431bde83 	.word	0x431bde83
 8001154:	40012300 	.word	0x40012300
 8001158:	40012000 	.word	0x40012000
 800115c:	40012100 	.word	0x40012100
 8001160:	40012200 	.word	0x40012200

08001164 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_Stop+0x16>
 8001176:	2302      	movs	r3, #2
 8001178:	e021      	b.n	80011be <HAL_ADC_Stop+0x5a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d109      	bne.n	80011b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	f043 0201 	orr.w	r2, r3, #1
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e113      	b.n	8001428 <HAL_ADC_ConfigChannel+0x244>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d925      	bls.n	800125c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68d9      	ldr	r1, [r3, #12]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3b1e      	subs	r3, #30
 8001226:	2207      	movs	r2, #7
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68d9      	ldr	r1, [r3, #12]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	4603      	mov	r3, r0
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4403      	add	r3, r0
 800124e:	3b1e      	subs	r3, #30
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	e022      	b.n	80012a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6919      	ldr	r1, [r3, #16]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	2207      	movs	r2, #7
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	400a      	ands	r2, r1
 800127e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	4603      	mov	r3, r0
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4403      	add	r3, r0
 8001298:	409a      	lsls	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d824      	bhi.n	80012f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	3b05      	subs	r3, #5
 80012bc:	221f      	movs	r2, #31
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b05      	subs	r3, #5
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f2:	e04c      	b.n	800138e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d824      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b23      	subs	r3, #35	@ 0x23
 800130e:	221f      	movs	r2, #31
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	400a      	ands	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b23      	subs	r3, #35	@ 0x23
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
 8001344:	e023      	b.n	800138e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b41      	subs	r3, #65	@ 0x41
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	@ 0x41
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138e:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_ADC_ConfigChannel+0x250>)
 8001390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a28      	ldr	r2, [pc, #160]	@ (8001438 <HAL_ADC_ConfigChannel+0x254>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d10f      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d8>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d10b      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001438 <HAL_ADC_ConfigChannel+0x254>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d12b      	bne.n	800141e <HAL_ADC_ConfigChannel+0x23a>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <HAL_ADC_ConfigChannel+0x258>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d003      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x1f4>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b11      	cmp	r3, #17
 80013d6:	d122      	bne.n	800141e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <HAL_ADC_ConfigChannel+0x258>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d111      	bne.n	800141e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <HAL_ADC_ConfigChannel+0x25c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a11      	ldr	r2, [pc, #68]	@ (8001444 <HAL_ADC_ConfigChannel+0x260>)
 8001400:	fba2 2303 	umull	r2, r3, r2, r3
 8001404:	0c9a      	lsrs	r2, r3, #18
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	3b01      	subs	r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40012300 	.word	0x40012300
 8001438:	40012000 	.word	0x40012000
 800143c:	10000012 	.word	0x10000012
 8001440:	20000000 	.word	0x20000000
 8001444:	431bde83 	.word	0x431bde83

08001448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001450:	4b79      	ldr	r3, [pc, #484]	@ (8001638 <ADC_Init+0x1f0>)
 8001452:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	431a      	orrs	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800147c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	021a      	lsls	r2, r3, #8
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80014a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6899      	ldr	r1, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	4a58      	ldr	r2, [pc, #352]	@ (800163c <ADC_Init+0x1f4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d022      	beq.n	8001526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6899      	ldr	r1, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6899      	ldr	r1, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	e00f      	b.n	8001546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001544:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0202 	bic.w	r2, r2, #2
 8001554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6899      	ldr	r1, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7e1b      	ldrb	r3, [r3, #24]
 8001560:	005a      	lsls	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01b      	beq.n	80015ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001582:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6859      	ldr	r1, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	3b01      	subs	r3, #1
 80015a0:	035a      	lsls	r2, r3, #13
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	e007      	b.n	80015bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	051a      	lsls	r2, r3, #20
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015fe:	025a      	lsls	r2, r3, #9
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	029a      	lsls	r2, r3, #10
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40012300 	.word	0x40012300
 800163c:	0f000001 	.word	0x0f000001

08001640 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e0ed      	b.n	800182e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fa28 	bl	8000ab4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff fc54 	bl	8000f20 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800167a:	e012      	b.n	80016a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800167c:	f7ff fc50 	bl	8000f20 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b0a      	cmp	r3, #10
 8001688:	d90b      	bls.n	80016a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2205      	movs	r2, #5
 800169a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0c5      	b.n	800182e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0e5      	beq.n	800167c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0202 	bic.w	r2, r2, #2
 80016be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c0:	f7ff fc2e 	bl	8000f20 <HAL_GetTick>
 80016c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016c6:	e012      	b.n	80016ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c8:	f7ff fc2a 	bl	8000f20 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b0a      	cmp	r3, #10
 80016d4:	d90b      	bls.n	80016ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2205      	movs	r2, #5
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e09f      	b.n	800182e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e5      	bne.n	80016c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7e1b      	ldrb	r3, [r3, #24]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e007      	b.n	8001726 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	7e5b      	ldrb	r3, [r3, #25]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e007      	b.n	8001750 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800174e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	7e9b      	ldrb	r3, [r3, #26]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e007      	b.n	800177a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0220 	bic.w	r2, r2, #32
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7edb      	ldrb	r3, [r3, #27]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d108      	bne.n	8001794 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0210 	bic.w	r2, r2, #16
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e007      	b.n	80017a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0210 	orr.w	r2, r2, #16
 80017a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7f1b      	ldrb	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0208 	orr.w	r2, r2, #8
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	e007      	b.n	80017ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0208 	bic.w	r2, r2, #8
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	7f5b      	ldrb	r3, [r3, #29]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f042 0204 	orr.w	r2, r2, #4
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e007      	b.n	80017f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0204 	bic.w	r2, r2, #4
 80017f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	ea42 0103 	orr.w	r1, r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b08a      	sub	sp, #40	@ 0x28
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	d07c      	beq.n	8001976 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d023      	beq.n	80018ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2201      	movs	r2, #1
 800188c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f983 	bl	8001ba4 <HAL_CAN_TxMailbox0CompleteCallback>
 800189e:	e016      	b.n	80018ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b2:	e00c      	b.n	80018ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c6:	e002      	b.n	80018ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f989 	bl	8001be0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d024      	beq.n	8001922 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f963 	bl	8001bb8 <HAL_CAN_TxMailbox1CompleteCallback>
 80018f2:	e016      	b.n	8001922 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
 8001906:	e00c      	b.n	8001922 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	627b      	str	r3, [r7, #36]	@ 0x24
 800191a:	e002      	b.n	8001922 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f969 	bl	8001bf4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d024      	beq.n	8001976 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001934:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f943 	bl	8001bcc <HAL_CAN_TxMailbox2CompleteCallback>
 8001946:	e016      	b.n	8001976 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
 800195a:	e00c      	b.n	8001976 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
 800196e:	e002      	b.n	8001976 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f949 	bl	8001c08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00c      	beq.n	800199a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2210      	movs	r2, #16
 8001998:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2208      	movs	r2, #8
 80019b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f93a 	bl	8001c30 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f921 	bl	8001c1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00c      	beq.n	80019fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2208      	movs	r2, #8
 8001a18:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f91c 	bl	8001c58 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d009      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f903 	bl	8001c44 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2210      	movs	r2, #16
 8001a58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f906 	bl	8001c6c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8ff 	bl	8001c80 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d07b      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d072      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001a96:	6a3b      	ldr	r3, [r7, #32]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d043      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d03e      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b04:	2b60      	cmp	r3, #96	@ 0x60
 8001b06:	d02b      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x32a>
 8001b08:	2b60      	cmp	r3, #96	@ 0x60
 8001b0a:	d82e      	bhi.n	8001b6a <HAL_CAN_IRQHandler+0x334>
 8001b0c:	2b50      	cmp	r3, #80	@ 0x50
 8001b0e:	d022      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x320>
 8001b10:	2b50      	cmp	r3, #80	@ 0x50
 8001b12:	d82a      	bhi.n	8001b6a <HAL_CAN_IRQHandler+0x334>
 8001b14:	2b40      	cmp	r3, #64	@ 0x40
 8001b16:	d019      	beq.n	8001b4c <HAL_CAN_IRQHandler+0x316>
 8001b18:	2b40      	cmp	r3, #64	@ 0x40
 8001b1a:	d826      	bhi.n	8001b6a <HAL_CAN_IRQHandler+0x334>
 8001b1c:	2b30      	cmp	r3, #48	@ 0x30
 8001b1e:	d010      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x30c>
 8001b20:	2b30      	cmp	r3, #48	@ 0x30
 8001b22:	d822      	bhi.n	8001b6a <HAL_CAN_IRQHandler+0x334>
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d002      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x2f8>
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	d005      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b2c:	e01d      	b.n	8001b6a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b36:	e019      	b.n	8001b6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b40:	e014      	b.n	8001b6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	f043 0320 	orr.w	r3, r3, #32
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b4a:	e00f      	b.n	8001b6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b54:	e00a      	b.n	8001b6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b5e:	e005      	b.n	8001b6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b68:	e000      	b.n	8001b6c <HAL_CAN_IRQHandler+0x336>
            break;
 8001b6a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b7a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2204      	movs	r2, #4
 8001b82:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f87c 	bl	8001c94 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	@ 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff4c 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2a:	f7ff ff61 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f7ff ffb1 	bl	8001d9c <NVIC_EncodePriority>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff80 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff54 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e165      	b.n	8002154 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8154 	bne.w	800214e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80ae 	beq.w	800214e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800216c <HAL_GPIO_Init+0x300>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a5c      	ldr	r2, [pc, #368]	@ (800216c <HAL_GPIO_Init+0x300>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b5a      	ldr	r3, [pc, #360]	@ (800216c <HAL_GPIO_Init+0x300>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a58      	ldr	r2, [pc, #352]	@ (8002170 <HAL_GPIO_Init+0x304>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4f      	ldr	r2, [pc, #316]	@ (8002174 <HAL_GPIO_Init+0x308>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d025      	beq.n	8002086 <HAL_GPIO_Init+0x21a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4e      	ldr	r2, [pc, #312]	@ (8002178 <HAL_GPIO_Init+0x30c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01f      	beq.n	8002082 <HAL_GPIO_Init+0x216>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4d      	ldr	r2, [pc, #308]	@ (800217c <HAL_GPIO_Init+0x310>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x212>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4c      	ldr	r2, [pc, #304]	@ (8002180 <HAL_GPIO_Init+0x314>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4b      	ldr	r2, [pc, #300]	@ (8002184 <HAL_GPIO_Init+0x318>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x20a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4a      	ldr	r2, [pc, #296]	@ (8002188 <HAL_GPIO_Init+0x31c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x206>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a49      	ldr	r2, [pc, #292]	@ (800218c <HAL_GPIO_Init+0x320>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x202>
 800206a:	2306      	movs	r3, #6
 800206c:	e00c      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 800206e:	2307      	movs	r3, #7
 8002070:	e00a      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 8002072:	2305      	movs	r3, #5
 8002074:	e008      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 8002076:	2304      	movs	r3, #4
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 800207a:	2303      	movs	r3, #3
 800207c:	e004      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 800207e:	2302      	movs	r3, #2
 8002080:	e002      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_GPIO_Init+0x21c>
 8002086:	2300      	movs	r3, #0
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	f002 0203 	and.w	r2, r2, #3
 800208e:	0092      	lsls	r2, r2, #2
 8002090:	4093      	lsls	r3, r2
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002098:	4935      	ldr	r1, [pc, #212]	@ (8002170 <HAL_GPIO_Init+0x304>)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	089b      	lsrs	r3, r3, #2
 800209e:	3302      	adds	r3, #2
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_GPIO_Init+0x324>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ca:	4a31      	ldr	r2, [pc, #196]	@ (8002190 <HAL_GPIO_Init+0x324>)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002190 <HAL_GPIO_Init+0x324>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f4:	4a26      	ldr	r2, [pc, #152]	@ (8002190 <HAL_GPIO_Init+0x324>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020fa:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <HAL_GPIO_Init+0x324>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800211e:	4a1c      	ldr	r2, [pc, #112]	@ (8002190 <HAL_GPIO_Init+0x324>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <HAL_GPIO_Init+0x324>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002148:	4a11      	ldr	r2, [pc, #68]	@ (8002190 <HAL_GPIO_Init+0x324>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	2b0f      	cmp	r3, #15
 8002158:	f67f ae96 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800
 8002170:	40013800 	.word	0x40013800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00
 8002184:	40021000 	.word	0x40021000
 8002188:	40021400 	.word	0x40021400
 800218c:	40021800 	.word	0x40021800
 8002190:	40013c00 	.word	0x40013c00

08002194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691a      	ldr	r2, [r3, #16]
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
 80021b0:	e001      	b.n	80021b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]
 80021d0:	4613      	mov	r3, r2
 80021d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021da:	887a      	ldrh	r2, [r7, #2]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e0:	e003      	b.n	80021ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	041a      	lsls	r2, r3, #16
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	619a      	str	r2, [r3, #24]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fe1a 	bl	8000f20 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7fe fe16 	bl	8000f20 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f887 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fc20 	bl	8000be4 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08006708 	.word	0x08006708
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff0 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	0a9b      	lsrs	r3, r3, #10
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	@ (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40023800 	.word	0x40023800
 8002400:	08006718 	.word	0x08006718

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002408:	f7ff ffdc 	bl	80023c4 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0b5b      	lsrs	r3, r3, #13
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	@ (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08006718 	.word	0x08006718

0800242c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	220f      	movs	r2, #15
 800243a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002448:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002460:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	08db      	lsrs	r3, r3, #3
 8002466:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <HAL_RCC_GetClockConfig+0x60>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 020f 	and.w	r2, r3, #15
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002494:	b0ae      	sub	sp, #184	@ 0xb8
 8002496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b6:	4bcb      	ldr	r3, [pc, #812]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	f200 8206 	bhi.w	80028d0 <HAL_RCC_GetSysClockFreq+0x440>
 80024c4:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <HAL_RCC_GetSysClockFreq+0x3c>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	08002501 	.word	0x08002501
 80024d0:	080028d1 	.word	0x080028d1
 80024d4:	080028d1 	.word	0x080028d1
 80024d8:	080028d1 	.word	0x080028d1
 80024dc:	08002509 	.word	0x08002509
 80024e0:	080028d1 	.word	0x080028d1
 80024e4:	080028d1 	.word	0x080028d1
 80024e8:	080028d1 	.word	0x080028d1
 80024ec:	08002511 	.word	0x08002511
 80024f0:	080028d1 	.word	0x080028d1
 80024f4:	080028d1 	.word	0x080028d1
 80024f8:	080028d1 	.word	0x080028d1
 80024fc:	08002701 	.word	0x08002701
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4bb9      	ldr	r3, [pc, #740]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002506:	e1e7      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002508:	4bb8      	ldr	r3, [pc, #736]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x35c>)
 800250a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800250e:	e1e3      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002510:	4bb4      	ldr	r3, [pc, #720]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251c:	4bb1      	ldr	r3, [pc, #708]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d071      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002528:	4bae      	ldr	r3, [pc, #696]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002534:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800254a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800254e:	4622      	mov	r2, r4
 8002550:	462b      	mov	r3, r5
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	0159      	lsls	r1, r3, #5
 800255c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002560:	0150      	lsls	r0, r2, #5
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4621      	mov	r1, r4
 8002568:	1a51      	subs	r1, r2, r1
 800256a:	6439      	str	r1, [r7, #64]	@ 0x40
 800256c:	4629      	mov	r1, r5
 800256e:	eb63 0301 	sbc.w	r3, r3, r1
 8002572:	647b      	str	r3, [r7, #68]	@ 0x44
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002580:	4649      	mov	r1, r9
 8002582:	018b      	lsls	r3, r1, #6
 8002584:	4641      	mov	r1, r8
 8002586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258a:	4641      	mov	r1, r8
 800258c:	018a      	lsls	r2, r1, #6
 800258e:	4641      	mov	r1, r8
 8002590:	1a51      	subs	r1, r2, r1
 8002592:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002594:	4649      	mov	r1, r9
 8002596:	eb63 0301 	sbc.w	r3, r3, r1
 800259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025a8:	4649      	mov	r1, r9
 80025aa:	00cb      	lsls	r3, r1, #3
 80025ac:	4641      	mov	r1, r8
 80025ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b2:	4641      	mov	r1, r8
 80025b4:	00ca      	lsls	r2, r1, #3
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	4622      	mov	r2, r4
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c2:	462b      	mov	r3, r5
 80025c4:	460a      	mov	r2, r1
 80025c6:	eb42 0303 	adc.w	r3, r2, r3
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025d8:	4629      	mov	r1, r5
 80025da:	024b      	lsls	r3, r1, #9
 80025dc:	4621      	mov	r1, r4
 80025de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025e2:	4621      	mov	r1, r4
 80025e4:	024a      	lsls	r2, r1, #9
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ee:	2200      	movs	r2, #0
 80025f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025f8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80025fc:	f7fd fe08 	bl	8000210 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4613      	mov	r3, r2
 8002606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800260a:	e067      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800260c:	4b75      	ldr	r3, [pc, #468]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	099b      	lsrs	r3, r3, #6
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002618:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800261c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002624:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002626:	2300      	movs	r3, #0
 8002628:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800262a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800262e:	4622      	mov	r2, r4
 8002630:	462b      	mov	r3, r5
 8002632:	f04f 0000 	mov.w	r0, #0
 8002636:	f04f 0100 	mov.w	r1, #0
 800263a:	0159      	lsls	r1, r3, #5
 800263c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002640:	0150      	lsls	r0, r2, #5
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4621      	mov	r1, r4
 8002648:	1a51      	subs	r1, r2, r1
 800264a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800264c:	4629      	mov	r1, r5
 800264e:	eb63 0301 	sbc.w	r3, r3, r1
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002660:	4649      	mov	r1, r9
 8002662:	018b      	lsls	r3, r1, #6
 8002664:	4641      	mov	r1, r8
 8002666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800266a:	4641      	mov	r1, r8
 800266c:	018a      	lsls	r2, r1, #6
 800266e:	4641      	mov	r1, r8
 8002670:	ebb2 0a01 	subs.w	sl, r2, r1
 8002674:	4649      	mov	r1, r9
 8002676:	eb63 0b01 	sbc.w	fp, r3, r1
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002686:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800268a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800268e:	4692      	mov	sl, r2
 8002690:	469b      	mov	fp, r3
 8002692:	4623      	mov	r3, r4
 8002694:	eb1a 0303 	adds.w	r3, sl, r3
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	462b      	mov	r3, r5
 800269c:	eb4b 0303 	adc.w	r3, fp, r3
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026ae:	4629      	mov	r1, r5
 80026b0:	028b      	lsls	r3, r1, #10
 80026b2:	4621      	mov	r1, r4
 80026b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b8:	4621      	mov	r1, r4
 80026ba:	028a      	lsls	r2, r1, #10
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026c4:	2200      	movs	r2, #0
 80026c6:	673b      	str	r3, [r7, #112]	@ 0x70
 80026c8:	677a      	str	r2, [r7, #116]	@ 0x74
 80026ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80026ce:	f7fd fd9f 	bl	8000210 <__aeabi_uldivmod>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4613      	mov	r3, r2
 80026d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026dc:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	3301      	adds	r3, #1
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80026ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026fe:	e0eb      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002700:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270c:	4b35      	ldr	r3, [pc, #212]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d06b      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b32      	ldr	r3, [pc, #200]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x354>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	2200      	movs	r2, #0
 8002720:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002722:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002724:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272a:	663b      	str	r3, [r7, #96]	@ 0x60
 800272c:	2300      	movs	r3, #0
 800272e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002730:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002734:	4622      	mov	r2, r4
 8002736:	462b      	mov	r3, r5
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	0159      	lsls	r1, r3, #5
 8002742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002746:	0150      	lsls	r0, r2, #5
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4621      	mov	r1, r4
 800274e:	1a51      	subs	r1, r2, r1
 8002750:	61b9      	str	r1, [r7, #24]
 8002752:	4629      	mov	r1, r5
 8002754:	eb63 0301 	sbc.w	r3, r3, r1
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002766:	4659      	mov	r1, fp
 8002768:	018b      	lsls	r3, r1, #6
 800276a:	4651      	mov	r1, sl
 800276c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002770:	4651      	mov	r1, sl
 8002772:	018a      	lsls	r2, r1, #6
 8002774:	4651      	mov	r1, sl
 8002776:	ebb2 0801 	subs.w	r8, r2, r1
 800277a:	4659      	mov	r1, fp
 800277c:	eb63 0901 	sbc.w	r9, r3, r1
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002790:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002794:	4690      	mov	r8, r2
 8002796:	4699      	mov	r9, r3
 8002798:	4623      	mov	r3, r4
 800279a:	eb18 0303 	adds.w	r3, r8, r3
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	462b      	mov	r3, r5
 80027a2:	eb49 0303 	adc.w	r3, r9, r3
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027b4:	4629      	mov	r1, r5
 80027b6:	024b      	lsls	r3, r1, #9
 80027b8:	4621      	mov	r1, r4
 80027ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027be:	4621      	mov	r1, r4
 80027c0:	024a      	lsls	r2, r1, #9
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027ca:	2200      	movs	r2, #0
 80027cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027ce:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027d0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027d4:	f7fd fd1c 	bl	8000210 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027e2:	e065      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x420>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	00f42400 	.word	0x00f42400
 80027ec:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f0:	4b3d      	ldr	r3, [pc, #244]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	099b      	lsrs	r3, r3, #6
 80027f6:	2200      	movs	r2, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	4611      	mov	r1, r2
 80027fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002800:	653b      	str	r3, [r7, #80]	@ 0x50
 8002802:	2300      	movs	r3, #0
 8002804:	657b      	str	r3, [r7, #84]	@ 0x54
 8002806:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800280a:	4642      	mov	r2, r8
 800280c:	464b      	mov	r3, r9
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	0159      	lsls	r1, r3, #5
 8002818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800281c:	0150      	lsls	r0, r2, #5
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4641      	mov	r1, r8
 8002824:	1a51      	subs	r1, r2, r1
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	4649      	mov	r1, r9
 800282a:	eb63 0301 	sbc.w	r3, r3, r1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800283c:	4659      	mov	r1, fp
 800283e:	018b      	lsls	r3, r1, #6
 8002840:	4651      	mov	r1, sl
 8002842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002846:	4651      	mov	r1, sl
 8002848:	018a      	lsls	r2, r1, #6
 800284a:	4651      	mov	r1, sl
 800284c:	1a54      	subs	r4, r2, r1
 800284e:	4659      	mov	r1, fp
 8002850:	eb63 0501 	sbc.w	r5, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	00eb      	lsls	r3, r5, #3
 800285e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002862:	00e2      	lsls	r2, r4, #3
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4643      	mov	r3, r8
 800286a:	18e3      	adds	r3, r4, r3
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	464b      	mov	r3, r9
 8002870:	eb45 0303 	adc.w	r3, r5, r3
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002882:	4629      	mov	r1, r5
 8002884:	028b      	lsls	r3, r1, #10
 8002886:	4621      	mov	r1, r4
 8002888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800288c:	4621      	mov	r1, r4
 800288e:	028a      	lsls	r2, r1, #10
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002898:	2200      	movs	r2, #0
 800289a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800289c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800289e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028a2:	f7fd fcb5 	bl	8000210 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4613      	mov	r3, r2
 80028ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028b0:	4b0d      	ldr	r3, [pc, #52]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x458>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	0f1b      	lsrs	r3, r3, #28
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80028be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028ce:	e003      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x45c>)
 80028d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	37b8      	adds	r7, #184	@ 0xb8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	00f42400 	.word	0x00f42400

080028f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e28d      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8083 	beq.w	8002a16 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002910:	4b94      	ldr	r3, [pc, #592]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 030c 	and.w	r3, r3, #12
 8002918:	2b04      	cmp	r3, #4
 800291a:	d019      	beq.n	8002950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800291c:	4b91      	ldr	r3, [pc, #580]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002924:	2b08      	cmp	r3, #8
 8002926:	d106      	bne.n	8002936 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002928:	4b8e      	ldr	r3, [pc, #568]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002934:	d00c      	beq.n	8002950 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002936:	4b8b      	ldr	r3, [pc, #556]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d112      	bne.n	8002968 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002942:	4b88      	ldr	r3, [pc, #544]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294e:	d10b      	bne.n	8002968 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	4b84      	ldr	r3, [pc, #528]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d05b      	beq.n	8002a14 <HAL_RCC_OscConfig+0x124>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d157      	bne.n	8002a14 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e25a      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002970:	d106      	bne.n	8002980 <HAL_RCC_OscConfig+0x90>
 8002972:	4b7c      	ldr	r3, [pc, #496]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a7b      	ldr	r2, [pc, #492]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e01d      	b.n	80029bc <HAL_RCC_OscConfig+0xcc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0xb4>
 800298a:	4b76      	ldr	r3, [pc, #472]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a75      	ldr	r2, [pc, #468]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b73      	ldr	r3, [pc, #460]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a72      	ldr	r2, [pc, #456]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0xcc>
 80029a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe faac 	bl	8000f20 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe faa8 	bl	8000f20 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	@ 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e21f      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b61      	ldr	r3, [pc, #388]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0xdc>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fa98 	bl	8000f20 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fa94 	bl	8000f20 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e20b      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a06:	4b57      	ldr	r3, [pc, #348]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x104>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d06f      	beq.n	8002b02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a22:	4b50      	ldr	r3, [pc, #320]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d017      	beq.n	8002a5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d105      	bne.n	8002a46 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b47      	ldr	r3, [pc, #284]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b44      	ldr	r3, [pc, #272]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b41      	ldr	r3, [pc, #260]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x186>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1d3      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b3b      	ldr	r3, [pc, #236]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4937      	ldr	r1, [pc, #220]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b34      	ldr	r3, [pc, #208]	@ (8002b68 <HAL_RCC_OscConfig+0x278>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fa41 	bl	8000f20 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fa3d 	bl	8000f20 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1b4      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b28      	ldr	r3, [pc, #160]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4925      	ldr	r1, [pc, #148]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b24      	ldr	r3, [pc, #144]	@ (8002b68 <HAL_RCC_OscConfig+0x278>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe fa20 	bl	8000f20 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fe fa1c 	bl	8000f20 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e193      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d036      	beq.n	8002b7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_RCC_OscConfig+0x27c>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fe fa00 	bl	8000f20 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fe f9fc 	bl	8000f20 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e173      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <HAL_RCC_OscConfig+0x274>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x234>
 8002b42:	e01b      	b.n	8002b7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_OscConfig+0x27c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4a:	f7fe f9e9 	bl	8000f20 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e00e      	b.n	8002b70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fe f9e5 	bl	8000f20 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d907      	bls.n	8002b70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e15c      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
 8002b64:	40023800 	.word	0x40023800
 8002b68:	42470000 	.word	0x42470000
 8002b6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	4b8a      	ldr	r3, [pc, #552]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ea      	bne.n	8002b52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8097 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8e:	4b83      	ldr	r3, [pc, #524]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10f      	bne.n	8002bba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002baa:	4b7c      	ldr	r3, [pc, #496]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bba:	4b79      	ldr	r3, [pc, #484]	@ (8002da0 <HAL_RCC_OscConfig+0x4b0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d118      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc6:	4b76      	ldr	r3, [pc, #472]	@ (8002da0 <HAL_RCC_OscConfig+0x4b0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a75      	ldr	r2, [pc, #468]	@ (8002da0 <HAL_RCC_OscConfig+0x4b0>)
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f9a5 	bl	8000f20 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bda:	f7fe f9a1 	bl	8000f20 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e118      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bec:	4b6c      	ldr	r3, [pc, #432]	@ (8002da0 <HAL_RCC_OscConfig+0x4b0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x31e>
 8002c00:	4b66      	ldr	r3, [pc, #408]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c04:	4a65      	ldr	r2, [pc, #404]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c0c:	e01c      	b.n	8002c48 <HAL_RCC_OscConfig+0x358>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0x340>
 8002c16:	4b61      	ldr	r3, [pc, #388]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a60      	ldr	r2, [pc, #384]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c22:	4b5e      	ldr	r3, [pc, #376]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	4a5d      	ldr	r2, [pc, #372]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0x358>
 8002c30:	4b5a      	ldr	r3, [pc, #360]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c34:	4a59      	ldr	r2, [pc, #356]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3c:	4b57      	ldr	r3, [pc, #348]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a56      	ldr	r2, [pc, #344]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	f023 0304 	bic.w	r3, r3, #4
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fe f966 	bl	8000f20 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c58:	f7fe f962 	bl	8000f20 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0d7      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ee      	beq.n	8002c58 <HAL_RCC_OscConfig+0x368>
 8002c7a:	e014      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7fe f950 	bl	8000f20 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c84:	f7fe f94c 	bl	8000f20 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0c1      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9a:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1ee      	bne.n	8002c84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca6:	7dfb      	ldrb	r3, [r7, #23]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cac:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80ad 	beq.w	8002e1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc2:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d060      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d145      	bne.n	8002d62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b33      	ldr	r3, [pc, #204]	@ (8002da4 <HAL_RCC_OscConfig+0x4b4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe f920 	bl	8000f20 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7fe f91c 	bl	8000f20 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e093      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	4b29      	ldr	r3, [pc, #164]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	071b      	lsls	r3, r3, #28
 8002d2e:	491b      	ldr	r1, [pc, #108]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d34:	4b1b      	ldr	r3, [pc, #108]	@ (8002da4 <HAL_RCC_OscConfig+0x4b4>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f8f1 	bl	8000f20 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe f8ed 	bl	8000f20 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e064      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x452>
 8002d60:	e05c      	b.n	8002e1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_RCC_OscConfig+0x4b4>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7fe f8da 	bl	8000f20 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d70:	f7fe f8d6 	bl	8000f20 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e04d      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x480>
 8002d8e:	e045      	b.n	8002e1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e040      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40007000 	.word	0x40007000
 8002da4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e28 <HAL_RCC_OscConfig+0x538>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d030      	beq.n	8002e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d129      	bne.n	8002e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d122      	bne.n	8002e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002dd8:	4013      	ands	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d119      	bne.n	8002e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	3b01      	subs	r3, #1
 8002df2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d10f      	bne.n	8002e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800

08002e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e041      	b.n	8002ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f839 	bl	8002eca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3304      	adds	r3, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f000 f9c0 	bl	80031f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d001      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04e      	b.n	8002f96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a23      	ldr	r2, [pc, #140]	@ (8002fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d022      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f22:	d01d      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a1e      	ldr	r2, [pc, #120]	@ (8002fac <HAL_TIM_Base_Start_IT+0xcc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_Base_Start_IT+0x80>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a18      	ldr	r2, [pc, #96]	@ (8002fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d010      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0201 	orr.w	r2, r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f82:	e007      	b.n	8002f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	40000400 	.word	0x40000400
 8002fac:	40000800 	.word	0x40000800
 8002fb0:	40000c00 	.word	0x40000c00
 8002fb4:	40010400 	.word	0x40010400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40001800 	.word	0x40001800

08002fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8d2 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8c4 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f8d5 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0204 	mvn.w	r2, #4
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8ac 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f89e 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f8af 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0208 	mvn.w	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f886 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f878 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f889 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2208      	movs	r2, #8
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f860 	bl	80031b4 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f852 	bl	80031a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f863 	bl	80031c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0201 	mvn.w	r2, #1
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fc3c 	bl	80009a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f906 	bl	800335c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00c      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f834 	bl	80031dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00c      	beq.n	8003198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0220 	mvn.w	r2, #32
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8d8 	bl	8003348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a46      	ldr	r2, [pc, #280]	@ (800331c <TIM_Base_SetConfig+0x12c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a43      	ldr	r2, [pc, #268]	@ (8003320 <TIM_Base_SetConfig+0x130>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a42      	ldr	r2, [pc, #264]	@ (8003324 <TIM_Base_SetConfig+0x134>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a41      	ldr	r2, [pc, #260]	@ (8003328 <TIM_Base_SetConfig+0x138>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a40      	ldr	r2, [pc, #256]	@ (800332c <TIM_Base_SetConfig+0x13c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a35      	ldr	r2, [pc, #212]	@ (800331c <TIM_Base_SetConfig+0x12c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003250:	d027      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a32      	ldr	r2, [pc, #200]	@ (8003320 <TIM_Base_SetConfig+0x130>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d023      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a31      	ldr	r2, [pc, #196]	@ (8003324 <TIM_Base_SetConfig+0x134>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01f      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a30      	ldr	r2, [pc, #192]	@ (8003328 <TIM_Base_SetConfig+0x138>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2f      	ldr	r2, [pc, #188]	@ (800332c <TIM_Base_SetConfig+0x13c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d017      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2e      	ldr	r2, [pc, #184]	@ (8003330 <TIM_Base_SetConfig+0x140>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2d      	ldr	r2, [pc, #180]	@ (8003334 <TIM_Base_SetConfig+0x144>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00f      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2c      	ldr	r2, [pc, #176]	@ (8003338 <TIM_Base_SetConfig+0x148>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2b      	ldr	r2, [pc, #172]	@ (800333c <TIM_Base_SetConfig+0x14c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2a      	ldr	r2, [pc, #168]	@ (8003340 <TIM_Base_SetConfig+0x150>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d003      	beq.n	80032a2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <TIM_Base_SetConfig+0x154>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d108      	bne.n	80032b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a10      	ldr	r2, [pc, #64]	@ (800331c <TIM_Base_SetConfig+0x12c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0xf8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a12      	ldr	r2, [pc, #72]	@ (800332c <TIM_Base_SetConfig+0x13c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d103      	bne.n	80032f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d105      	bne.n	800330e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f023 0201 	bic.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]
  }
}
 800330e:	bf00      	nop
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800
 8003328:	40000c00 	.word	0x40000c00
 800332c:	40010400 	.word	0x40010400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800
 800333c:	40001800 	.word	0x40001800
 8003340:	40001c00 	.word	0x40001c00
 8003344:	40002000 	.word	0x40002000

08003348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e042      	b.n	8003408 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fbdc 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f82b 	bl	8003410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695a      	ldr	r2, [r3, #20]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003414:	b0c0      	sub	sp, #256	@ 0x100
 8003416:	af00      	add	r7, sp, #0
 8003418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	68d9      	ldr	r1, [r3, #12]
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	ea40 0301 	orr.w	r3, r0, r1
 8003438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	431a      	orrs	r2, r3
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003468:	f021 010c 	bic.w	r1, r1, #12
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003476:	430b      	orrs	r3, r1
 8003478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348a:	6999      	ldr	r1, [r3, #24]
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	ea40 0301 	orr.w	r3, r0, r1
 8003496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b8f      	ldr	r3, [pc, #572]	@ (80036dc <UART_SetConfig+0x2cc>)
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d005      	beq.n	80034b0 <UART_SetConfig+0xa0>
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b8d      	ldr	r3, [pc, #564]	@ (80036e0 <UART_SetConfig+0x2d0>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d104      	bne.n	80034ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7fe ffa8 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80034b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034b8:	e003      	b.n	80034c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ba:	f7fe ff8f 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 80034be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034cc:	f040 810c 	bne.w	80036e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034e2:	4622      	mov	r2, r4
 80034e4:	462b      	mov	r3, r5
 80034e6:	1891      	adds	r1, r2, r2
 80034e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034ea:	415b      	adcs	r3, r3
 80034ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034f2:	4621      	mov	r1, r4
 80034f4:	eb12 0801 	adds.w	r8, r2, r1
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb43 0901 	adc.w	r9, r3, r1
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800350a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800350e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003512:	4690      	mov	r8, r2
 8003514:	4699      	mov	r9, r3
 8003516:	4623      	mov	r3, r4
 8003518:	eb18 0303 	adds.w	r3, r8, r3
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003520:	462b      	mov	r3, r5
 8003522:	eb49 0303 	adc.w	r3, r9, r3
 8003526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800352a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800353a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800353e:	460b      	mov	r3, r1
 8003540:	18db      	adds	r3, r3, r3
 8003542:	653b      	str	r3, [r7, #80]	@ 0x50
 8003544:	4613      	mov	r3, r2
 8003546:	eb42 0303 	adc.w	r3, r2, r3
 800354a:	657b      	str	r3, [r7, #84]	@ 0x54
 800354c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003554:	f7fc fe5c 	bl	8000210 <__aeabi_uldivmod>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4b61      	ldr	r3, [pc, #388]	@ (80036e4 <UART_SetConfig+0x2d4>)
 800355e:	fba3 2302 	umull	r2, r3, r3, r2
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	011c      	lsls	r4, r3, #4
 8003566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003578:	4642      	mov	r2, r8
 800357a:	464b      	mov	r3, r9
 800357c:	1891      	adds	r1, r2, r2
 800357e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003580:	415b      	adcs	r3, r3
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003588:	4641      	mov	r1, r8
 800358a:	eb12 0a01 	adds.w	sl, r2, r1
 800358e:	4649      	mov	r1, r9
 8003590:	eb43 0b01 	adc.w	fp, r3, r1
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a8:	4692      	mov	sl, r2
 80035aa:	469b      	mov	fp, r3
 80035ac:	4643      	mov	r3, r8
 80035ae:	eb1a 0303 	adds.w	r3, sl, r3
 80035b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035b6:	464b      	mov	r3, r9
 80035b8:	eb4b 0303 	adc.w	r3, fp, r3
 80035bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035d4:	460b      	mov	r3, r1
 80035d6:	18db      	adds	r3, r3, r3
 80035d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80035da:	4613      	mov	r3, r2
 80035dc:	eb42 0303 	adc.w	r3, r2, r3
 80035e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035ea:	f7fc fe11 	bl	8000210 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <UART_SetConfig+0x2d4>)
 80035f6:	fba3 2301 	umull	r2, r3, r3, r1
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2264      	movs	r2, #100	@ 0x64
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	1acb      	subs	r3, r1, r3
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800360a:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <UART_SetConfig+0x2d4>)
 800360c:	fba3 2302 	umull	r2, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003618:	441c      	add	r4, r3
 800361a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361e:	2200      	movs	r2, #0
 8003620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800362c:	4642      	mov	r2, r8
 800362e:	464b      	mov	r3, r9
 8003630:	1891      	adds	r1, r2, r2
 8003632:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003634:	415b      	adcs	r3, r3
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800363c:	4641      	mov	r1, r8
 800363e:	1851      	adds	r1, r2, r1
 8003640:	6339      	str	r1, [r7, #48]	@ 0x30
 8003642:	4649      	mov	r1, r9
 8003644:	414b      	adcs	r3, r1
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003654:	4659      	mov	r1, fp
 8003656:	00cb      	lsls	r3, r1, #3
 8003658:	4651      	mov	r1, sl
 800365a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365e:	4651      	mov	r1, sl
 8003660:	00ca      	lsls	r2, r1, #3
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	4603      	mov	r3, r0
 8003668:	4642      	mov	r2, r8
 800366a:	189b      	adds	r3, r3, r2
 800366c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003670:	464b      	mov	r3, r9
 8003672:	460a      	mov	r2, r1
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800368c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003690:	460b      	mov	r3, r1
 8003692:	18db      	adds	r3, r3, r3
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003696:	4613      	mov	r3, r2
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800369e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036a6:	f7fc fdb3 	bl	8000210 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <UART_SetConfig+0x2d4>)
 80036b0:	fba3 1302 	umull	r1, r3, r3, r2
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	2164      	movs	r1, #100	@ 0x64
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	3332      	adds	r3, #50	@ 0x32
 80036c2:	4a08      	ldr	r2, [pc, #32]	@ (80036e4 <UART_SetConfig+0x2d4>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	095b      	lsrs	r3, r3, #5
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4422      	add	r2, r4
 80036d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036d8:	e106      	b.n	80038e8 <UART_SetConfig+0x4d8>
 80036da:	bf00      	nop
 80036dc:	40011000 	.word	0x40011000
 80036e0:	40011400 	.word	0x40011400
 80036e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036fa:	4642      	mov	r2, r8
 80036fc:	464b      	mov	r3, r9
 80036fe:	1891      	adds	r1, r2, r2
 8003700:	6239      	str	r1, [r7, #32]
 8003702:	415b      	adcs	r3, r3
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
 8003706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800370a:	4641      	mov	r1, r8
 800370c:	1854      	adds	r4, r2, r1
 800370e:	4649      	mov	r1, r9
 8003710:	eb43 0501 	adc.w	r5, r3, r1
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	00eb      	lsls	r3, r5, #3
 800371e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003722:	00e2      	lsls	r2, r4, #3
 8003724:	4614      	mov	r4, r2
 8003726:	461d      	mov	r5, r3
 8003728:	4643      	mov	r3, r8
 800372a:	18e3      	adds	r3, r4, r3
 800372c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003730:	464b      	mov	r3, r9
 8003732:	eb45 0303 	adc.w	r3, r5, r3
 8003736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	f04f 0300 	mov.w	r3, #0
 8003752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003756:	4629      	mov	r1, r5
 8003758:	008b      	lsls	r3, r1, #2
 800375a:	4621      	mov	r1, r4
 800375c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003760:	4621      	mov	r1, r4
 8003762:	008a      	lsls	r2, r1, #2
 8003764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003768:	f7fc fd52 	bl	8000210 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4b60      	ldr	r3, [pc, #384]	@ (80038f4 <UART_SetConfig+0x4e4>)
 8003772:	fba3 2302 	umull	r2, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	011c      	lsls	r4, r3, #4
 800377a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800377e:	2200      	movs	r2, #0
 8003780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800378c:	4642      	mov	r2, r8
 800378e:	464b      	mov	r3, r9
 8003790:	1891      	adds	r1, r2, r2
 8003792:	61b9      	str	r1, [r7, #24]
 8003794:	415b      	adcs	r3, r3
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800379c:	4641      	mov	r1, r8
 800379e:	1851      	adds	r1, r2, r1
 80037a0:	6139      	str	r1, [r7, #16]
 80037a2:	4649      	mov	r1, r9
 80037a4:	414b      	adcs	r3, r1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037b4:	4659      	mov	r1, fp
 80037b6:	00cb      	lsls	r3, r1, #3
 80037b8:	4651      	mov	r1, sl
 80037ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037be:	4651      	mov	r1, sl
 80037c0:	00ca      	lsls	r2, r1, #3
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	4603      	mov	r3, r0
 80037c8:	4642      	mov	r2, r8
 80037ca:	189b      	adds	r3, r3, r2
 80037cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037d0:	464b      	mov	r3, r9
 80037d2:	460a      	mov	r2, r1
 80037d4:	eb42 0303 	adc.w	r3, r2, r3
 80037d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037f4:	4649      	mov	r1, r9
 80037f6:	008b      	lsls	r3, r1, #2
 80037f8:	4641      	mov	r1, r8
 80037fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037fe:	4641      	mov	r1, r8
 8003800:	008a      	lsls	r2, r1, #2
 8003802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003806:	f7fc fd03 	bl	8000210 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4611      	mov	r1, r2
 8003810:	4b38      	ldr	r3, [pc, #224]	@ (80038f4 <UART_SetConfig+0x4e4>)
 8003812:	fba3 2301 	umull	r2, r3, r3, r1
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2264      	movs	r2, #100	@ 0x64
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	1acb      	subs	r3, r1, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	@ 0x32
 8003824:	4a33      	ldr	r2, [pc, #204]	@ (80038f4 <UART_SetConfig+0x4e4>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003830:	441c      	add	r4, r3
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	673b      	str	r3, [r7, #112]	@ 0x70
 800383a:	677a      	str	r2, [r7, #116]	@ 0x74
 800383c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003840:	4642      	mov	r2, r8
 8003842:	464b      	mov	r3, r9
 8003844:	1891      	adds	r1, r2, r2
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	415b      	adcs	r3, r3
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003850:	4641      	mov	r1, r8
 8003852:	1851      	adds	r1, r2, r1
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	4649      	mov	r1, r9
 8003858:	414b      	adcs	r3, r1
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003868:	4659      	mov	r1, fp
 800386a:	00cb      	lsls	r3, r1, #3
 800386c:	4651      	mov	r1, sl
 800386e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003872:	4651      	mov	r1, sl
 8003874:	00ca      	lsls	r2, r1, #3
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	4603      	mov	r3, r0
 800387c:	4642      	mov	r2, r8
 800387e:	189b      	adds	r3, r3, r2
 8003880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003882:	464b      	mov	r3, r9
 8003884:	460a      	mov	r2, r1
 8003886:	eb42 0303 	adc.w	r3, r2, r3
 800388a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	663b      	str	r3, [r7, #96]	@ 0x60
 8003896:	667a      	str	r2, [r7, #100]	@ 0x64
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038a4:	4649      	mov	r1, r9
 80038a6:	008b      	lsls	r3, r1, #2
 80038a8:	4641      	mov	r1, r8
 80038aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ae:	4641      	mov	r1, r8
 80038b0:	008a      	lsls	r2, r1, #2
 80038b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038b6:	f7fc fcab 	bl	8000210 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <UART_SetConfig+0x4e4>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	2164      	movs	r1, #100	@ 0x64
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	3332      	adds	r3, #50	@ 0x32
 80038d2:	4a08      	ldr	r2, [pc, #32]	@ (80038f4 <UART_SetConfig+0x4e4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 020f 	and.w	r2, r3, #15
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4422      	add	r2, r4
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	bf00      	nop
 80038ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038ee:	46bd      	mov	sp, r7
 80038f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f4:	51eb851f 	.word	0x51eb851f

080038f8 <__NVIC_SetPriority>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	@ (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	@ (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003950:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <SysTick_Handler+0x1c>)
 8003952:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003954:	f001 fd2a 	bl	80053ac <xTaskGetSchedulerState>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800395e:	f002 fb23 	bl	8005fa8 <xPortSysTickHandler>
  }
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003970:	2100      	movs	r1, #0
 8003972:	f06f 0004 	mvn.w	r0, #4
 8003976:	f7ff ffbf 	bl	80038f8 <__NVIC_SetPriority>
#endif
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003986:	f3ef 8305 	mrs	r3, IPSR
 800398a:	603b      	str	r3, [r7, #0]
  return(result);
 800398c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003992:	f06f 0305 	mvn.w	r3, #5
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e00c      	b.n	80039b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <osKernelInitialize+0x44>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80039a2:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <osKernelInitialize+0x44>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e002      	b.n	80039b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000190 	.word	0x20000190

080039c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039ce:	f3ef 8305 	mrs	r3, IPSR
 80039d2:	603b      	str	r3, [r7, #0]
  return(result);
 80039d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80039da:	f06f 0305 	mvn.w	r3, #5
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	e010      	b.n	8003a04 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <osKernelStart+0x48>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d109      	bne.n	80039fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039ea:	f7ff ffbf 	bl	800396c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <osKernelStart+0x48>)
 80039f0:	2202      	movs	r2, #2
 80039f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039f4:	f001 f876 	bl	8004ae4 <vTaskStartScheduler>
      stat = osOK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e002      	b.n	8003a04 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003a04:	687b      	ldr	r3, [r7, #4]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000190 	.word	0x20000190

08003a14 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	@ 0x38
 8003a18:	af04      	add	r7, sp, #16
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a24:	f3ef 8305 	mrs	r3, IPSR
 8003a28:	617b      	str	r3, [r7, #20]
  return(result);
 8003a2a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d17e      	bne.n	8003b2e <osThreadNew+0x11a>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d07b      	beq.n	8003b2e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a3a:	2318      	movs	r3, #24
 8003a3c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d045      	beq.n	8003ada <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <osThreadNew+0x48>
        name = attr->name;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d008      	beq.n	8003a82 <osThreadNew+0x6e>
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b38      	cmp	r3, #56	@ 0x38
 8003a74:	d805      	bhi.n	8003a82 <osThreadNew+0x6e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <osThreadNew+0x72>
        return (NULL);
 8003a82:	2300      	movs	r3, #0
 8003a84:	e054      	b.n	8003b30 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00e      	beq.n	8003abc <osThreadNew+0xa8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2ba7      	cmp	r3, #167	@ 0xa7
 8003aa4:	d90a      	bls.n	8003abc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <osThreadNew+0xa8>
        mem = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e010      	b.n	8003ade <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10c      	bne.n	8003ade <osThreadNew+0xca>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <osThreadNew+0xca>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <osThreadNew+0xca>
          mem = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	e001      	b.n	8003ade <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d110      	bne.n	8003b06 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003aec:	9202      	str	r2, [sp, #8]
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6a3a      	ldr	r2, [r7, #32]
 8003af8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fdfe 	bl	80046fc <xTaskCreateStatic>
 8003b00:	4603      	mov	r3, r0
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e013      	b.n	8003b2e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d110      	bne.n	8003b2e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	f107 0310 	add.w	r3, r7, #16
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fe4c 	bl	80047bc <xTaskCreate>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d001      	beq.n	8003b2e <osThreadNew+0x11a>
            hTask = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b2e:	693b      	ldr	r3, [r7, #16]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	@ 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4a07      	ldr	r2, [pc, #28]	@ (8003b64 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4a06      	ldr	r2, [pc, #24]	@ (8003b68 <vApplicationGetIdleTaskMemory+0x30>)
 8003b4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	601a      	str	r2, [r3, #0]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000194 	.word	0x20000194
 8003b68:	2000023c 	.word	0x2000023c

08003b6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a07      	ldr	r2, [pc, #28]	@ (8003b98 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4a06      	ldr	r2, [pc, #24]	@ (8003b9c <vApplicationGetTimerTaskMemory+0x30>)
 8003b82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b8a:	601a      	str	r2, [r3, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	2000043c 	.word	0x2000043c
 8003b9c:	200004e4 	.word	0x200004e4

08003ba0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f103 0208 	add.w	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f103 0208 	add.w	r2, r3, #8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f103 0208 	add.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	601a      	str	r2, [r3, #0]
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d103      	bne.n	8003c62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e00c      	b.n	8003c7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3308      	adds	r3, #8
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e002      	b.n	8003c70 <vListInsert+0x2e>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d2f6      	bcs.n	8003c6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6852      	ldr	r2, [r2, #4]
 8003cd4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d103      	bne.n	8003ce8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	1e5a      	subs	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d2e:	bf00      	nop
 8003d30:	bf00      	nop
 8003d32:	e7fd      	b.n	8003d30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d34:	f002 f8a8 	bl	8005e88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	441a      	add	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	3b01      	subs	r3, #1
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	441a      	add	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	22ff      	movs	r2, #255	@ 0xff
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	22ff      	movs	r2, #255	@ 0xff
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d114      	bne.n	8003db4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01a      	beq.n	8003dc8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3310      	adds	r3, #16
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f942 	bl	8005020 <xTaskRemoveFromEventList>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d012      	beq.n	8003dc8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <xQueueGenericReset+0xd0>)
 8003da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	e009      	b.n	8003dc8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3310      	adds	r3, #16
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fef1 	bl	8003ba0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3324      	adds	r3, #36	@ 0x24
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff feec 	bl	8003ba0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dc8:	f002 f890 	bl	8005eec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dcc:	2301      	movs	r3, #1
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	@ 0x38
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	e7fd      	b.n	8003e04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10b      	bne.n	8003e26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	e7fd      	b.n	8003e22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <xQueueGenericCreateStatic+0x56>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <xQueueGenericCreateStatic+0x5a>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueGenericCreateStatic+0x5c>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	623b      	str	r3, [r7, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <xQueueGenericCreateStatic+0x84>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <xQueueGenericCreateStatic+0x88>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <xQueueGenericCreateStatic+0x8a>
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	61fb      	str	r3, [r7, #28]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e82:	2350      	movs	r3, #80	@ 0x50
 8003e84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b50      	cmp	r3, #80	@ 0x50
 8003e8a:	d00b      	beq.n	8003ea4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61bb      	str	r3, [r7, #24]
}
 8003e9e:	bf00      	nop
 8003ea0:	bf00      	nop
 8003ea2:	e7fd      	b.n	8003ea0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ea4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00d      	beq.n	8003ecc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f805 	bl	8003ed6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3730      	adds	r7, #48	@ 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d103      	bne.n	8003ef2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	e002      	b.n	8003ef8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f04:	2101      	movs	r1, #1
 8003f06:	69b8      	ldr	r0, [r7, #24]
 8003f08:	f7ff fefe 	bl	8003d08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08e      	sub	sp, #56	@ 0x38
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <xQueueGenericSend+0x34>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <xQueueGenericSend+0x42>
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <xQueueGenericSend+0x46>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <xQueueGenericSend+0x48>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <xQueueGenericSend+0x64>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d103      	bne.n	8003f8e <xQueueGenericSend+0x72>
 8003f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <xQueueGenericSend+0x76>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <xQueueGenericSend+0x78>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10b      	bne.n	8003fb0 <xQueueGenericSend+0x94>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	623b      	str	r3, [r7, #32]
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fb0:	f001 f9fc 	bl	80053ac <xTaskGetSchedulerState>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <xQueueGenericSend+0xa4>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <xQueueGenericSend+0xa8>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <xQueueGenericSend+0xaa>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61fb      	str	r3, [r7, #28]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fe2:	f001 ff51 	bl	8005e88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <xQueueGenericSend+0xdc>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d129      	bne.n	800404c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ffe:	f000 fa0f 	bl	8004420 <prvCopyDataToQueue>
 8004002:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800400c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400e:	3324      	adds	r3, #36	@ 0x24
 8004010:	4618      	mov	r0, r3
 8004012:	f001 f805 	bl	8005020 <xTaskRemoveFromEventList>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800401c:	4b3f      	ldr	r3, [pc, #252]	@ (800411c <xQueueGenericSend+0x200>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	e00a      	b.n	8004044 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004034:	4b39      	ldr	r3, [pc, #228]	@ (800411c <xQueueGenericSend+0x200>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004044:	f001 ff52 	bl	8005eec <vPortExitCritical>
				return pdPASS;
 8004048:	2301      	movs	r3, #1
 800404a:	e063      	b.n	8004114 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004052:	f001 ff4b 	bl	8005eec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004056:	2300      	movs	r3, #0
 8004058:	e05c      	b.n	8004114 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800405a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f83f 	bl	80050e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800406e:	f001 ff3d 	bl	8005eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004072:	f000 fda7 	bl	8004bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004076:	f001 ff07 	bl	8005e88 <vPortEnterCritical>
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d103      	bne.n	8004090 <xQueueGenericSend+0x174>
 8004088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004096:	b25b      	sxtb	r3, r3
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d103      	bne.n	80040a6 <xQueueGenericSend+0x18a>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040a6:	f001 ff21 	bl	8005eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040aa:	1d3a      	adds	r2, r7, #4
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 f82e 	bl	8005114 <xTaskCheckForTimeOut>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d124      	bne.n	8004108 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040c0:	f000 faa6 	bl	8004610 <prvIsQueueFull>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	3310      	adds	r3, #16
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 ff52 	bl	8004f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040da:	f000 fa31 	bl	8004540 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040de:	f000 fd7f 	bl	8004be0 <xTaskResumeAll>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f af7c 	bne.w	8003fe2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80040ea:	4b0c      	ldr	r3, [pc, #48]	@ (800411c <xQueueGenericSend+0x200>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	e772      	b.n	8003fe2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fe:	f000 fa1f 	bl	8004540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004102:	f000 fd6d 	bl	8004be0 <xTaskResumeAll>
 8004106:	e76c      	b.n	8003fe2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800410a:	f000 fa19 	bl	8004540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800410e:	f000 fd67 	bl	8004be0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004114:	4618      	mov	r0, r3
 8004116:	3738      	adds	r7, #56	@ 0x38
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b090      	sub	sp, #64	@ 0x40
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10b      	bne.n	8004150 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800414a:	bf00      	nop
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <xQueueGenericSendFromISR+0x3e>
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <xQueueGenericSendFromISR+0x42>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <xQueueGenericSendFromISR+0x44>
 8004162:	2300      	movs	r3, #0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d103      	bne.n	800418e <xQueueGenericSendFromISR+0x6e>
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <xQueueGenericSendFromISR+0x72>
 800418e:	2301      	movs	r3, #1
 8004190:	e000      	b.n	8004194 <xQueueGenericSendFromISR+0x74>
 8004192:	2300      	movs	r3, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	623b      	str	r3, [r7, #32]
}
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041b0:	f001 ff4a 	bl	8006048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041b4:	f3ef 8211 	mrs	r2, BASEPRI
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	61fa      	str	r2, [r7, #28]
 80041ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <xQueueGenericSendFromISR+0xc2>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d12f      	bne.n	8004242 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80041f8:	f000 f912 	bl	8004420 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d112      	bne.n	800422c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	3324      	adds	r3, #36	@ 0x24
 8004212:	4618      	mov	r0, r3
 8004214:	f000 ff04 	bl	8005020 <xTaskRemoveFromEventList>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00e      	beq.n	800423c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e007      	b.n	800423c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800422c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004230:	3301      	adds	r3, #1
 8004232:	b2db      	uxtb	r3, r3
 8004234:	b25a      	sxtb	r2, r3
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800423c:	2301      	movs	r3, #1
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004240:	e001      	b.n	8004246 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004242:	2300      	movs	r3, #0
 8004244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004250:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004254:	4618      	mov	r0, r3
 8004256:	3740      	adds	r7, #64	@ 0x40
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	@ 0x30
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004268:	2300      	movs	r3, #0
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10b      	bne.n	800428e <xQueueReceive+0x32>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	623b      	str	r3, [r7, #32]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <xQueueReceive+0x40>
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueReceive+0x44>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueReceive+0x46>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10b      	bne.n	80042be <xQueueReceive+0x62>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	61fb      	str	r3, [r7, #28]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042be:	f001 f875 	bl	80053ac <xTaskGetSchedulerState>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <xQueueReceive+0x72>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <xQueueReceive+0x76>
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <xQueueReceive+0x78>
 80042d2:	2300      	movs	r3, #0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <xQueueReceive+0x94>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	61bb      	str	r3, [r7, #24]
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042f0:	f001 fdca 	bl	8005e88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01f      	beq.n	8004340 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004304:	f000 f8f6 	bl	80044f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	1e5a      	subs	r2, r3, #1
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00f      	beq.n	8004338 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fe7f 	bl	8005020 <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004328:	4b3c      	ldr	r3, [pc, #240]	@ (800441c <xQueueReceive+0x1c0>)
 800432a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004338:	f001 fdd8 	bl	8005eec <vPortExitCritical>
				return pdPASS;
 800433c:	2301      	movs	r3, #1
 800433e:	e069      	b.n	8004414 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d103      	bne.n	800434e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004346:	f001 fdd1 	bl	8005eec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800434a:	2300      	movs	r3, #0
 800434c:	e062      	b.n	8004414 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004354:	f107 0310 	add.w	r3, r7, #16
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fec5 	bl	80050e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800435e:	2301      	movs	r3, #1
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004362:	f001 fdc3 	bl	8005eec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004366:	f000 fc2d 	bl	8004bc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800436a:	f001 fd8d 	bl	8005e88 <vPortEnterCritical>
 800436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004370:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004374:	b25b      	sxtb	r3, r3
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437a:	d103      	bne.n	8004384 <xQueueReceive+0x128>
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800438a:	b25b      	sxtb	r3, r3
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d103      	bne.n	800439a <xQueueReceive+0x13e>
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800439a:	f001 fda7 	bl	8005eec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800439e:	1d3a      	adds	r2, r7, #4
 80043a0:	f107 0310 	add.w	r3, r7, #16
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 feb4 	bl	8005114 <xTaskCheckForTimeOut>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d123      	bne.n	80043fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b4:	f000 f916 	bl	80045e4 <prvIsQueueEmpty>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	3324      	adds	r3, #36	@ 0x24
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fdd8 	bl	8004f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043ce:	f000 f8b7 	bl	8004540 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043d2:	f000 fc05 	bl	8004be0 <xTaskResumeAll>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d189      	bne.n	80042f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80043dc:	4b0f      	ldr	r3, [pc, #60]	@ (800441c <xQueueReceive+0x1c0>)
 80043de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	e780      	b.n	80042f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f0:	f000 f8a6 	bl	8004540 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043f4:	f000 fbf4 	bl	8004be0 <xTaskResumeAll>
 80043f8:	e77a      	b.n	80042f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043fc:	f000 f8a0 	bl	8004540 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004400:	f000 fbee 	bl	8004be0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004406:	f000 f8ed 	bl	80045e4 <prvIsQueueEmpty>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f43f af6f 	beq.w	80042f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004412:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004414:	4618      	mov	r0, r3
 8004416:	3730      	adds	r7, #48	@ 0x30
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	e000ed04 	.word	0xe000ed04

08004420 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d14d      	bne.n	80044e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ffcc 	bl	80053e8 <xTaskPriorityDisinherit>
 8004450:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	e043      	b.n	80044e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d119      	bne.n	8004494 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6858      	ldr	r0, [r3, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	461a      	mov	r2, r3
 800446a:	68b9      	ldr	r1, [r7, #8]
 800446c:	f002 f8a0 	bl	80065b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004478:	441a      	add	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	d32b      	bcc.n	80044e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	e026      	b.n	80044e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68d8      	ldr	r0, [r3, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	461a      	mov	r2, r3
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	f002 f886 	bl	80065b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	425b      	negs	r3, r3
 80044ae:	441a      	add	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d207      	bcs.n	80044d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	425b      	negs	r3, r3
 80044ca:	441a      	add	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d105      	bne.n	80044e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	3b01      	subs	r3, #1
 80044e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80044ea:	697b      	ldr	r3, [r7, #20]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d018      	beq.n	8004538 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	441a      	add	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	d303      	bcc.n	8004528 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68d9      	ldr	r1, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	461a      	mov	r2, r3
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f002 f83c 	bl	80065b0 <memcpy>
	}
}
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004548:	f001 fc9e 	bl	8005e88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004552:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004554:	e011      	b.n	800457a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	2b00      	cmp	r3, #0
 800455c:	d012      	beq.n	8004584 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3324      	adds	r3, #36	@ 0x24
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fd5c 	bl	8005020 <xTaskRemoveFromEventList>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800456e:	f000 fe35 	bl	80051dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	3b01      	subs	r3, #1
 8004576:	b2db      	uxtb	r3, r3
 8004578:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800457a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800457e:	2b00      	cmp	r3, #0
 8004580:	dce9      	bgt.n	8004556 <prvUnlockQueue+0x16>
 8004582:	e000      	b.n	8004586 <prvUnlockQueue+0x46>
					break;
 8004584:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	22ff      	movs	r2, #255	@ 0xff
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800458e:	f001 fcad 	bl	8005eec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004592:	f001 fc79 	bl	8005e88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800459c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800459e:	e011      	b.n	80045c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3310      	adds	r3, #16
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd37 	bl	8005020 <xTaskRemoveFromEventList>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045b8:	f000 fe10 	bl	80051dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045bc:	7bbb      	ldrb	r3, [r7, #14]
 80045be:	3b01      	subs	r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	dce9      	bgt.n	80045a0 <prvUnlockQueue+0x60>
 80045cc:	e000      	b.n	80045d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	22ff      	movs	r2, #255	@ 0xff
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045d8:	f001 fc88 	bl	8005eec <vPortExitCritical>
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045ec:	f001 fc4c 	bl	8005e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d102      	bne.n	80045fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e001      	b.n	8004602 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004602:	f001 fc73 	bl	8005eec <vPortExitCritical>

	return xReturn;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004618:	f001 fc36 	bl	8005e88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004624:	429a      	cmp	r2, r3
 8004626:	d102      	bne.n	800462e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e001      	b.n	8004632 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004632:	f001 fc5b 	bl	8005eec <vPortExitCritical>

	return xReturn;
 8004636:	68fb      	ldr	r3, [r7, #12]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	e014      	b.n	800467a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004650:	4a0f      	ldr	r2, [pc, #60]	@ (8004690 <vQueueAddToRegistry+0x50>)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800465c:	490c      	ldr	r1, [pc, #48]	@ (8004690 <vQueueAddToRegistry+0x50>)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004666:	4a0a      	ldr	r2, [pc, #40]	@ (8004690 <vQueueAddToRegistry+0x50>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004672:	e006      	b.n	8004682 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b07      	cmp	r3, #7
 800467e:	d9e7      	bls.n	8004650 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	200008e4 	.word	0x200008e4

08004694 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046a4:	f001 fbf0 	bl	8005e88 <vPortEnterCritical>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ae:	b25b      	sxtb	r3, r3
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d103      	bne.n	80046be <vQueueWaitForMessageRestricted+0x2a>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046c4:	b25b      	sxtb	r3, r3
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d103      	bne.n	80046d4 <vQueueWaitForMessageRestricted+0x40>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046d4:	f001 fc0a 	bl	8005eec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	3324      	adds	r3, #36	@ 0x24
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fc6d 	bl	8004fc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7ff ff26 	bl	8004540 <prvUnlockQueue>
	}
 80046f4:	bf00      	nop
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08e      	sub	sp, #56	@ 0x38
 8004700:	af04      	add	r7, sp, #16
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800470a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	623b      	str	r3, [r7, #32]
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	e7fd      	b.n	8004724 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <xTaskCreateStatic+0x4a>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	61fb      	str	r3, [r7, #28]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004746:	23a8      	movs	r3, #168	@ 0xa8
 8004748:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2ba8      	cmp	r3, #168	@ 0xa8
 800474e:	d00b      	beq.n	8004768 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	61bb      	str	r3, [r7, #24]
}
 8004762:	bf00      	nop
 8004764:	bf00      	nop
 8004766:	e7fd      	b.n	8004764 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004768:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800476a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01e      	beq.n	80047ae <xTaskCreateStatic+0xb2>
 8004770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004772:	2b00      	cmp	r3, #0
 8004774:	d01b      	beq.n	80047ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004782:	2202      	movs	r2, #2
 8004784:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004788:	2300      	movs	r3, #0
 800478a:	9303      	str	r3, [sp, #12]
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	9302      	str	r3, [sp, #8]
 8004790:	f107 0314 	add.w	r3, r7, #20
 8004794:	9301      	str	r3, [sp, #4]
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f851 	bl	8004848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047a8:	f000 f8f6 	bl	8004998 <prvAddNewTaskToReadyList>
 80047ac:	e001      	b.n	80047b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047b2:	697b      	ldr	r3, [r7, #20]
	}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3728      	adds	r7, #40	@ 0x28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08c      	sub	sp, #48	@ 0x30
 80047c0:	af04      	add	r7, sp, #16
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f001 fc7b 	bl	80060cc <pvPortMalloc>
 80047d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00e      	beq.n	80047fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047de:	20a8      	movs	r0, #168	@ 0xa8
 80047e0:	f001 fc74 	bl	80060cc <pvPortMalloc>
 80047e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80047f2:	e005      	b.n	8004800 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f001 fd37 	bl	8006268 <vPortFree>
 80047fa:	e001      	b.n	8004800 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d017      	beq.n	8004836 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	2300      	movs	r3, #0
 8004812:	9303      	str	r3, [sp, #12]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f80f 	bl	8004848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800482a:	69f8      	ldr	r0, [r7, #28]
 800482c:	f000 f8b4 	bl	8004998 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004830:	2301      	movs	r3, #1
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	e002      	b.n	800483c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295
 800483a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800483c:	69bb      	ldr	r3, [r7, #24]
	}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	461a      	mov	r2, r3
 8004860:	21a5      	movs	r1, #165	@ 0xa5
 8004862:	f001 fe21 	bl	80064a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004870:	3b01      	subs	r3, #1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	617b      	str	r3, [r7, #20]
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01f      	beq.n	80048e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a8:	2300      	movs	r3, #0
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	e012      	b.n	80048d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4413      	add	r3, r2
 80048b4:	7819      	ldrb	r1, [r3, #0]
 80048b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	3334      	adds	r3, #52	@ 0x34
 80048be:	460a      	mov	r2, r1
 80048c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	4413      	add	r3, r2
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d006      	beq.n	80048dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	3301      	adds	r3, #1
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	d9e9      	bls.n	80048ae <prvInitialiseNewTask+0x66>
 80048da:	e000      	b.n	80048de <prvInitialiseNewTask+0x96>
			{
				break;
 80048dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048e6:	e003      	b.n	80048f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f2:	2b37      	cmp	r3, #55	@ 0x37
 80048f4:	d901      	bls.n	80048fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048f6:	2337      	movs	r3, #55	@ 0x37
 80048f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004904:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004908:	2200      	movs	r2, #0
 800490a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	3304      	adds	r3, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff f965 	bl	8003be0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004918:	3318      	adds	r3, #24
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff f960 	bl	8003be0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004924:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004934:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	2200      	movs	r2, #0
 8004942:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004948:	3354      	adds	r3, #84	@ 0x54
 800494a:	224c      	movs	r2, #76	@ 0x4c
 800494c:	2100      	movs	r1, #0
 800494e:	4618      	mov	r0, r3
 8004950:	f001 fdaa 	bl	80064a8 <memset>
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	4a0d      	ldr	r2, [pc, #52]	@ (800498c <prvInitialiseNewTask+0x144>)
 8004958:	659a      	str	r2, [r3, #88]	@ 0x58
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	4a0c      	ldr	r2, [pc, #48]	@ (8004990 <prvInitialiseNewTask+0x148>)
 800495e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <prvInitialiseNewTask+0x14c>)
 8004964:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	68f9      	ldr	r1, [r7, #12]
 800496a:	69b8      	ldr	r0, [r7, #24]
 800496c:	f001 f95a 	bl	8005c24 <pxPortInitialiseStack>
 8004970:	4602      	mov	r2, r0
 8004972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004974:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800497c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004982:	bf00      	nop
 8004984:	3720      	adds	r7, #32
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20004b78 	.word	0x20004b78
 8004990:	20004be0 	.word	0x20004be0
 8004994:	20004c48 	.word	0x20004c48

08004998 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049a0:	f001 fa72 	bl	8005e88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049a4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a5c <prvAddNewTaskToReadyList+0xc4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	4a2c      	ldr	r2, [pc, #176]	@ (8004a5c <prvAddNewTaskToReadyList+0xc4>)
 80049ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049bc:	4b27      	ldr	r3, [pc, #156]	@ (8004a5c <prvAddNewTaskToReadyList+0xc4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d110      	bne.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049c4:	f000 fc2e 	bl	8005224 <prvInitialiseTaskLists>
 80049c8:	e00d      	b.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049ca:	4b26      	ldr	r3, [pc, #152]	@ (8004a64 <prvAddNewTaskToReadyList+0xcc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049d2:	4b23      	ldr	r3, [pc, #140]	@ (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	429a      	cmp	r2, r3
 80049de:	d802      	bhi.n	80049e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049e6:	4b20      	ldr	r3, [pc, #128]	@ (8004a68 <prvAddNewTaskToReadyList+0xd0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3301      	adds	r3, #1
 80049ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004a68 <prvAddNewTaskToReadyList+0xd0>)
 80049ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <prvAddNewTaskToReadyList+0xd0>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <prvAddNewTaskToReadyList+0xd4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d903      	bls.n	8004a0c <prvAddNewTaskToReadyList+0x74>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <prvAddNewTaskToReadyList+0xd4>)
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4a15      	ldr	r2, [pc, #84]	@ (8004a70 <prvAddNewTaskToReadyList+0xd8>)
 8004a1a:	441a      	add	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7ff f8e9 	bl	8003bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a28:	f001 fa60 	bl	8005eec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a64 <prvAddNewTaskToReadyList+0xcc>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00e      	beq.n	8004a52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <prvAddNewTaskToReadyList+0xc8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d207      	bcs.n	8004a52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <prvAddNewTaskToReadyList+0xdc>)
 8004a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a52:	bf00      	nop
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000df8 	.word	0x20000df8
 8004a60:	20000924 	.word	0x20000924
 8004a64:	20000e04 	.word	0x20000e04
 8004a68:	20000e14 	.word	0x20000e14
 8004a6c:	20000e00 	.word	0x20000e00
 8004a70:	20000928 	.word	0x20000928
 8004a74:	e000ed04 	.word	0xe000ed04

08004a78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a8a:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <vTaskDelay+0x64>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <vTaskDelay+0x32>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	60bb      	str	r3, [r7, #8]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004aaa:	f000 f88b 	bl	8004bc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aae:	2100      	movs	r1, #0
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fd09 	bl	80054c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ab6:	f000 f893 	bl	8004be0 <xTaskResumeAll>
 8004aba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004ac2:	4b07      	ldr	r3, [pc, #28]	@ (8004ae0 <vTaskDelay+0x68>)
 8004ac4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000e20 	.word	0x20000e20
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	@ 0x28
 8004ae8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004af2:	463a      	mov	r2, r7
 8004af4:	1d39      	adds	r1, r7, #4
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff f81c 	bl	8003b38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b00:	6839      	ldr	r1, [r7, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	9202      	str	r2, [sp, #8]
 8004b08:	9301      	str	r3, [sp, #4]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	460a      	mov	r2, r1
 8004b12:	4924      	ldr	r1, [pc, #144]	@ (8004ba4 <vTaskStartScheduler+0xc0>)
 8004b14:	4824      	ldr	r0, [pc, #144]	@ (8004ba8 <vTaskStartScheduler+0xc4>)
 8004b16:	f7ff fdf1 	bl	80046fc <xTaskCreateStatic>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4a23      	ldr	r2, [pc, #140]	@ (8004bac <vTaskStartScheduler+0xc8>)
 8004b1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b20:	4b22      	ldr	r3, [pc, #136]	@ (8004bac <vTaskStartScheduler+0xc8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e001      	b.n	8004b32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d102      	bne.n	8004b3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b38:	f000 fd1a 	bl	8005570 <xTimerCreateTimerTask>
 8004b3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d11b      	bne.n	8004b7c <vTaskStartScheduler+0x98>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	613b      	str	r3, [r7, #16]
}
 8004b56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b58:	4b15      	ldr	r3, [pc, #84]	@ (8004bb0 <vTaskStartScheduler+0xcc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3354      	adds	r3, #84	@ 0x54
 8004b5e:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <vTaskStartScheduler+0xd0>)
 8004b60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b62:	4b15      	ldr	r3, [pc, #84]	@ (8004bb8 <vTaskStartScheduler+0xd4>)
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b6a:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <vTaskStartScheduler+0xd8>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b70:	4b13      	ldr	r3, [pc, #76]	@ (8004bc0 <vTaskStartScheduler+0xdc>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b76:	f001 f8e3 	bl	8005d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b7a:	e00f      	b.n	8004b9c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d10b      	bne.n	8004b9c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	e7fd      	b.n	8004b98 <vTaskStartScheduler+0xb4>
}
 8004b9c:	bf00      	nop
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	080066a8 	.word	0x080066a8
 8004ba8:	080051f5 	.word	0x080051f5
 8004bac:	20000e1c 	.word	0x20000e1c
 8004bb0:	20000924 	.word	0x20000924
 8004bb4:	20000010 	.word	0x20000010
 8004bb8:	20000e18 	.word	0x20000e18
 8004bbc:	20000e04 	.word	0x20000e04
 8004bc0:	20000dfc 	.word	0x20000dfc

08004bc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bc8:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <vTaskSuspendAll+0x18>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	4a03      	ldr	r2, [pc, #12]	@ (8004bdc <vTaskSuspendAll+0x18>)
 8004bd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bd2:	bf00      	nop
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	20000e20 	.word	0x20000e20

08004be0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bee:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <xTaskResumeAll+0x118>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10b      	bne.n	8004c0e <xTaskResumeAll+0x2e>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	603b      	str	r3, [r7, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	e7fd      	b.n	8004c0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c0e:	f001 f93b 	bl	8005e88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c12:	4b39      	ldr	r3, [pc, #228]	@ (8004cf8 <xTaskResumeAll+0x118>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	4a37      	ldr	r2, [pc, #220]	@ (8004cf8 <xTaskResumeAll+0x118>)
 8004c1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c1c:	4b36      	ldr	r3, [pc, #216]	@ (8004cf8 <xTaskResumeAll+0x118>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d162      	bne.n	8004cea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c24:	4b35      	ldr	r3, [pc, #212]	@ (8004cfc <xTaskResumeAll+0x11c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05e      	beq.n	8004cea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c2c:	e02f      	b.n	8004c8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2e:	4b34      	ldr	r3, [pc, #208]	@ (8004d00 <xTaskResumeAll+0x120>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3318      	adds	r3, #24
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff f83a 	bl	8003cb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff f835 	bl	8003cb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d04 <xTaskResumeAll+0x124>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d903      	bls.n	8004c5e <xTaskResumeAll+0x7e>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d04 <xTaskResumeAll+0x124>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <xTaskResumeAll+0x128>)
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe ffc0 	bl	8003bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7e:	4b23      	ldr	r3, [pc, #140]	@ (8004d0c <xTaskResumeAll+0x12c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d302      	bcc.n	8004c8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004c88:	4b21      	ldr	r3, [pc, #132]	@ (8004d10 <xTaskResumeAll+0x130>)
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d00 <xTaskResumeAll+0x120>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cb      	bne.n	8004c2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c9c:	f000 fb66 	bl	800536c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d14 <xTaskResumeAll+0x134>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d010      	beq.n	8004cce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cac:	f000 f846 	bl	8004d3c <xTaskIncrementTick>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004cb6:	4b16      	ldr	r3, [pc, #88]	@ (8004d10 <xTaskResumeAll+0x130>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f1      	bne.n	8004cac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <xTaskResumeAll+0x134>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cce:	4b10      	ldr	r3, [pc, #64]	@ (8004d10 <xTaskResumeAll+0x130>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cda:	4b0f      	ldr	r3, [pc, #60]	@ (8004d18 <xTaskResumeAll+0x138>)
 8004cdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cea:	f001 f8ff 	bl	8005eec <vPortExitCritical>

	return xAlreadyYielded;
 8004cee:	68bb      	ldr	r3, [r7, #8]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000e20 	.word	0x20000e20
 8004cfc:	20000df8 	.word	0x20000df8
 8004d00:	20000db8 	.word	0x20000db8
 8004d04:	20000e00 	.word	0x20000e00
 8004d08:	20000928 	.word	0x20000928
 8004d0c:	20000924 	.word	0x20000924
 8004d10:	20000e0c 	.word	0x20000e0c
 8004d14:	20000e08 	.word	0x20000e08
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d22:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <xTaskGetTickCount+0x1c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d28:	687b      	ldr	r3, [r7, #4]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000dfc 	.word	0x20000dfc

08004d3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d46:	4b4f      	ldr	r3, [pc, #316]	@ (8004e84 <xTaskIncrementTick+0x148>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f040 8090 	bne.w	8004e70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d50:	4b4d      	ldr	r3, [pc, #308]	@ (8004e88 <xTaskIncrementTick+0x14c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3301      	adds	r3, #1
 8004d56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d58:	4a4b      	ldr	r2, [pc, #300]	@ (8004e88 <xTaskIncrementTick+0x14c>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d121      	bne.n	8004da8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d64:	4b49      	ldr	r3, [pc, #292]	@ (8004e8c <xTaskIncrementTick+0x150>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00b      	beq.n	8004d86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	603b      	str	r3, [r7, #0]
}
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <xTaskIncrementTick+0x46>
 8004d86:	4b41      	ldr	r3, [pc, #260]	@ (8004e8c <xTaskIncrementTick+0x150>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	4b40      	ldr	r3, [pc, #256]	@ (8004e90 <xTaskIncrementTick+0x154>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a3e      	ldr	r2, [pc, #248]	@ (8004e8c <xTaskIncrementTick+0x150>)
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	4a3e      	ldr	r2, [pc, #248]	@ (8004e90 <xTaskIncrementTick+0x154>)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <xTaskIncrementTick+0x158>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	4a3c      	ldr	r2, [pc, #240]	@ (8004e94 <xTaskIncrementTick+0x158>)
 8004da2:	6013      	str	r3, [r2, #0]
 8004da4:	f000 fae2 	bl	800536c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004da8:	4b3b      	ldr	r3, [pc, #236]	@ (8004e98 <xTaskIncrementTick+0x15c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d349      	bcc.n	8004e46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db2:	4b36      	ldr	r3, [pc, #216]	@ (8004e8c <xTaskIncrementTick+0x150>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbc:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <xTaskIncrementTick+0x15c>)
 8004dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc2:	601a      	str	r2, [r3, #0]
					break;
 8004dc4:	e03f      	b.n	8004e46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc6:	4b31      	ldr	r3, [pc, #196]	@ (8004e8c <xTaskIncrementTick+0x150>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d203      	bcs.n	8004de6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dde:	4a2e      	ldr	r2, [pc, #184]	@ (8004e98 <xTaskIncrementTick+0x15c>)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004de4:	e02f      	b.n	8004e46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe ff62 	bl	8003cb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	3318      	adds	r3, #24
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe ff59 	bl	8003cb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e06:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <xTaskIncrementTick+0x160>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <xTaskIncrementTick+0xda>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	4a22      	ldr	r2, [pc, #136]	@ (8004e9c <xTaskIncrementTick+0x160>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea0 <xTaskIncrementTick+0x164>)
 8004e24:	441a      	add	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe fee4 	bl	8003bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea4 <xTaskIncrementTick+0x168>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d3b8      	bcc.n	8004db2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e44:	e7b5      	b.n	8004db2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e46:	4b17      	ldr	r3, [pc, #92]	@ (8004ea4 <xTaskIncrementTick+0x168>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	4914      	ldr	r1, [pc, #80]	@ (8004ea0 <xTaskIncrementTick+0x164>)
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	440b      	add	r3, r1
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d901      	bls.n	8004e62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e62:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <xTaskIncrementTick+0x16c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e004      	b.n	8004e7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e70:	4b0e      	ldr	r3, [pc, #56]	@ (8004eac <xTaskIncrementTick+0x170>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a0d      	ldr	r2, [pc, #52]	@ (8004eac <xTaskIncrementTick+0x170>)
 8004e78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e7a:	697b      	ldr	r3, [r7, #20]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000e20 	.word	0x20000e20
 8004e88:	20000dfc 	.word	0x20000dfc
 8004e8c:	20000db0 	.word	0x20000db0
 8004e90:	20000db4 	.word	0x20000db4
 8004e94:	20000e10 	.word	0x20000e10
 8004e98:	20000e18 	.word	0x20000e18
 8004e9c:	20000e00 	.word	0x20000e00
 8004ea0:	20000928 	.word	0x20000928
 8004ea4:	20000924 	.word	0x20000924
 8004ea8:	20000e0c 	.word	0x20000e0c
 8004eac:	20000e08 	.word	0x20000e08

08004eb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <vTaskSwitchContext+0xb4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8004f68 <vTaskSwitchContext+0xb8>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ec4:	e047      	b.n	8004f56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004ec6:	4b28      	ldr	r3, [pc, #160]	@ (8004f68 <vTaskSwitchContext+0xb8>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ecc:	4b27      	ldr	r3, [pc, #156]	@ (8004f6c <vTaskSwitchContext+0xbc>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e011      	b.n	8004ef8 <vTaskSwitchContext+0x48>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <vTaskSwitchContext+0x42>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	607b      	str	r3, [r7, #4]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <vTaskSwitchContext+0x3e>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	491d      	ldr	r1, [pc, #116]	@ (8004f70 <vTaskSwitchContext+0xc0>)
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0e3      	beq.n	8004ed4 <vTaskSwitchContext+0x24>
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4a16      	ldr	r2, [pc, #88]	@ (8004f70 <vTaskSwitchContext+0xc0>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	605a      	str	r2, [r3, #4]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d104      	bne.n	8004f3c <vTaskSwitchContext+0x8c>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	@ (8004f74 <vTaskSwitchContext+0xc4>)
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4a09      	ldr	r2, [pc, #36]	@ (8004f6c <vTaskSwitchContext+0xbc>)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f4c:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <vTaskSwitchContext+0xc4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3354      	adds	r3, #84	@ 0x54
 8004f52:	4a09      	ldr	r2, [pc, #36]	@ (8004f78 <vTaskSwitchContext+0xc8>)
 8004f54:	6013      	str	r3, [r2, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000e20 	.word	0x20000e20
 8004f68:	20000e0c 	.word	0x20000e0c
 8004f6c:	20000e00 	.word	0x20000e00
 8004f70:	20000928 	.word	0x20000928
 8004f74:	20000924 	.word	0x20000924
 8004f78:	20000010 	.word	0x20000010

08004f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10b      	bne.n	8004fa4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fa4:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <vTaskPlaceOnEventList+0x48>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3318      	adds	r3, #24
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7fe fe48 	bl	8003c42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	6838      	ldr	r0, [r7, #0]
 8004fb6:	f000 fa87 	bl	80054c8 <prvAddCurrentTaskToDelayedList>
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000924 	.word	0x20000924

08004fc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10b      	bne.n	8004ff2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	617b      	str	r3, [r7, #20]
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	e7fd      	b.n	8004fee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800501c <vTaskPlaceOnEventListRestricted+0x54>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3318      	adds	r3, #24
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7fe fdfd 	bl	8003bfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f000 fa5a 	bl	80054c8 <prvAddCurrentTaskToDelayedList>
	}
 8005014:	bf00      	nop
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000924 	.word	0x20000924

08005020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	60fb      	str	r3, [r7, #12]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	3318      	adds	r3, #24
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fe2e 	bl	8003cb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005058:	4b1d      	ldr	r3, [pc, #116]	@ (80050d0 <xTaskRemoveFromEventList+0xb0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d11d      	bne.n	800509c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fe25 	bl	8003cb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506e:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <xTaskRemoveFromEventList+0xb4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	429a      	cmp	r2, r3
 8005074:	d903      	bls.n	800507e <xTaskRemoveFromEventList+0x5e>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a16      	ldr	r2, [pc, #88]	@ (80050d4 <xTaskRemoveFromEventList+0xb4>)
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a13      	ldr	r2, [pc, #76]	@ (80050d8 <xTaskRemoveFromEventList+0xb8>)
 800508c:	441a      	add	r2, r3
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7fe fdb0 	bl	8003bfa <vListInsertEnd>
 800509a:	e005      	b.n	80050a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	3318      	adds	r3, #24
 80050a0:	4619      	mov	r1, r3
 80050a2:	480e      	ldr	r0, [pc, #56]	@ (80050dc <xTaskRemoveFromEventList+0xbc>)
 80050a4:	f7fe fda9 	bl	8003bfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ac:	4b0c      	ldr	r3, [pc, #48]	@ (80050e0 <xTaskRemoveFromEventList+0xc0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d905      	bls.n	80050c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050b6:	2301      	movs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050ba:	4b0a      	ldr	r3, [pc, #40]	@ (80050e4 <xTaskRemoveFromEventList+0xc4>)
 80050bc:	2201      	movs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e001      	b.n	80050c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050c6:	697b      	ldr	r3, [r7, #20]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000e20 	.word	0x20000e20
 80050d4:	20000e00 	.word	0x20000e00
 80050d8:	20000928 	.word	0x20000928
 80050dc:	20000db8 	.word	0x20000db8
 80050e0:	20000924 	.word	0x20000924
 80050e4:	20000e0c 	.word	0x20000e0c

080050e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050f0:	4b06      	ldr	r3, [pc, #24]	@ (800510c <vTaskInternalSetTimeOutState+0x24>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <vTaskInternalSetTimeOutState+0x28>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	605a      	str	r2, [r3, #4]
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20000e10 	.word	0x20000e10
 8005110:	20000dfc 	.word	0x20000dfc

08005114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b088      	sub	sp, #32
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	613b      	str	r3, [r7, #16]
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	60fb      	str	r3, [r7, #12]
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	e7fd      	b.n	8005156 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800515a:	f000 fe95 	bl	8005e88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800515e:	4b1d      	ldr	r3, [pc, #116]	@ (80051d4 <xTaskCheckForTimeOut+0xc0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d102      	bne.n	800517e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
 800517c:	e023      	b.n	80051c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <xTaskCheckForTimeOut+0xc4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d007      	beq.n	800519a <xTaskCheckForTimeOut+0x86>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e015      	b.n	80051c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d20b      	bcs.n	80051bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	1ad2      	subs	r2, r2, r3
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f7ff ff99 	bl	80050e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e004      	b.n	80051c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051c6:	f000 fe91 	bl	8005eec <vPortExitCritical>

	return xReturn;
 80051ca:	69fb      	ldr	r3, [r7, #28]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000dfc 	.word	0x20000dfc
 80051d8:	20000e10 	.word	0x20000e10

080051dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051e0:	4b03      	ldr	r3, [pc, #12]	@ (80051f0 <vTaskMissedYield+0x14>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
}
 80051e6:	bf00      	nop
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	20000e0c 	.word	0x20000e0c

080051f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051fc:	f000 f852 	bl	80052a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005200:	4b06      	ldr	r3, [pc, #24]	@ (800521c <prvIdleTask+0x28>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d9f9      	bls.n	80051fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <prvIdleTask+0x2c>)
 800520a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005218:	e7f0      	b.n	80051fc <prvIdleTask+0x8>
 800521a:	bf00      	nop
 800521c:	20000928 	.word	0x20000928
 8005220:	e000ed04 	.word	0xe000ed04

08005224 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	e00c      	b.n	800524a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4a12      	ldr	r2, [pc, #72]	@ (8005284 <prvInitialiseTaskLists+0x60>)
 800523c:	4413      	add	r3, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fcae 	bl	8003ba0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3301      	adds	r3, #1
 8005248:	607b      	str	r3, [r7, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b37      	cmp	r3, #55	@ 0x37
 800524e:	d9ef      	bls.n	8005230 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005250:	480d      	ldr	r0, [pc, #52]	@ (8005288 <prvInitialiseTaskLists+0x64>)
 8005252:	f7fe fca5 	bl	8003ba0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005256:	480d      	ldr	r0, [pc, #52]	@ (800528c <prvInitialiseTaskLists+0x68>)
 8005258:	f7fe fca2 	bl	8003ba0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800525c:	480c      	ldr	r0, [pc, #48]	@ (8005290 <prvInitialiseTaskLists+0x6c>)
 800525e:	f7fe fc9f 	bl	8003ba0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005262:	480c      	ldr	r0, [pc, #48]	@ (8005294 <prvInitialiseTaskLists+0x70>)
 8005264:	f7fe fc9c 	bl	8003ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005268:	480b      	ldr	r0, [pc, #44]	@ (8005298 <prvInitialiseTaskLists+0x74>)
 800526a:	f7fe fc99 	bl	8003ba0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800526e:	4b0b      	ldr	r3, [pc, #44]	@ (800529c <prvInitialiseTaskLists+0x78>)
 8005270:	4a05      	ldr	r2, [pc, #20]	@ (8005288 <prvInitialiseTaskLists+0x64>)
 8005272:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005274:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <prvInitialiseTaskLists+0x7c>)
 8005276:	4a05      	ldr	r2, [pc, #20]	@ (800528c <prvInitialiseTaskLists+0x68>)
 8005278:	601a      	str	r2, [r3, #0]
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20000928 	.word	0x20000928
 8005288:	20000d88 	.word	0x20000d88
 800528c:	20000d9c 	.word	0x20000d9c
 8005290:	20000db8 	.word	0x20000db8
 8005294:	20000dcc 	.word	0x20000dcc
 8005298:	20000de4 	.word	0x20000de4
 800529c:	20000db0 	.word	0x20000db0
 80052a0:	20000db4 	.word	0x20000db4

080052a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052aa:	e019      	b.n	80052e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052ac:	f000 fdec 	bl	8005e88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <prvCheckTasksWaitingTermination+0x50>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	3304      	adds	r3, #4
 80052bc:	4618      	mov	r0, r3
 80052be:	f7fe fcf9 	bl	8003cb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <prvCheckTasksWaitingTermination+0x54>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	4a0b      	ldr	r2, [pc, #44]	@ (80052f8 <prvCheckTasksWaitingTermination+0x54>)
 80052ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052cc:	4b0b      	ldr	r3, [pc, #44]	@ (80052fc <prvCheckTasksWaitingTermination+0x58>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <prvCheckTasksWaitingTermination+0x58>)
 80052d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052d6:	f000 fe09 	bl	8005eec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f810 	bl	8005300 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052e0:	4b06      	ldr	r3, [pc, #24]	@ (80052fc <prvCheckTasksWaitingTermination+0x58>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e1      	bne.n	80052ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000dcc 	.word	0x20000dcc
 80052f8:	20000df8 	.word	0x20000df8
 80052fc:	20000de0 	.word	0x20000de0

08005300 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3354      	adds	r3, #84	@ 0x54
 800530c:	4618      	mov	r0, r3
 800530e:	f001 f8d3 	bl	80064b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005318:	2b00      	cmp	r3, #0
 800531a:	d108      	bne.n	800532e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005320:	4618      	mov	r0, r3
 8005322:	f000 ffa1 	bl	8006268 <vPortFree>
				vPortFree( pxTCB );
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 ff9e 	bl	8006268 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800532c:	e019      	b.n	8005362 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005334:	2b01      	cmp	r3, #1
 8005336:	d103      	bne.n	8005340 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 ff95 	bl	8006268 <vPortFree>
	}
 800533e:	e010      	b.n	8005362 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005346:	2b02      	cmp	r3, #2
 8005348:	d00b      	beq.n	8005362 <prvDeleteTCB+0x62>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	60fb      	str	r3, [r7, #12]
}
 800535c:	bf00      	nop
 800535e:	bf00      	nop
 8005360:	e7fd      	b.n	800535e <prvDeleteTCB+0x5e>
	}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005372:	4b0c      	ldr	r3, [pc, #48]	@ (80053a4 <prvResetNextTaskUnblockTime+0x38>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800537c:	4b0a      	ldr	r3, [pc, #40]	@ (80053a8 <prvResetNextTaskUnblockTime+0x3c>)
 800537e:	f04f 32ff 	mov.w	r2, #4294967295
 8005382:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005384:	e008      	b.n	8005398 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005386:	4b07      	ldr	r3, [pc, #28]	@ (80053a4 <prvResetNextTaskUnblockTime+0x38>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a04      	ldr	r2, [pc, #16]	@ (80053a8 <prvResetNextTaskUnblockTime+0x3c>)
 8005396:	6013      	str	r3, [r2, #0]
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	20000db0 	.word	0x20000db0
 80053a8:	20000e18 	.word	0x20000e18

080053ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053b2:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <xTaskGetSchedulerState+0x34>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053ba:	2301      	movs	r3, #1
 80053bc:	607b      	str	r3, [r7, #4]
 80053be:	e008      	b.n	80053d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c0:	4b08      	ldr	r3, [pc, #32]	@ (80053e4 <xTaskGetSchedulerState+0x38>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053c8:	2302      	movs	r3, #2
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	e001      	b.n	80053d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053d2:	687b      	ldr	r3, [r7, #4]
	}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	20000e04 	.word	0x20000e04
 80053e4:	20000e20 	.word	0x20000e20

080053e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d058      	beq.n	80054b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053fe:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <xTaskPriorityDisinherit+0xd4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	429a      	cmp	r2, r3
 8005406:	d00b      	beq.n	8005420 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
}
 800541a:	bf00      	nop
 800541c:	bf00      	nop
 800541e:	e7fd      	b.n	800541c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60bb      	str	r3, [r7, #8]
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005444:	1e5a      	subs	r2, r3, #1
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005452:	429a      	cmp	r2, r3
 8005454:	d02c      	beq.n	80054b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545a:	2b00      	cmp	r3, #0
 800545c:	d128      	bne.n	80054b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3304      	adds	r3, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fc26 	bl	8003cb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005480:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <xTaskPriorityDisinherit+0xd8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d903      	bls.n	8005490 <xTaskPriorityDisinherit+0xa8>
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	4a0c      	ldr	r2, [pc, #48]	@ (80054c0 <xTaskPriorityDisinherit+0xd8>)
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4a09      	ldr	r2, [pc, #36]	@ (80054c4 <xTaskPriorityDisinherit+0xdc>)
 800549e:	441a      	add	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f7fe fba7 	bl	8003bfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054b0:	697b      	ldr	r3, [r7, #20]
	}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000924 	.word	0x20000924
 80054c0:	20000e00 	.word	0x20000e00
 80054c4:	20000928 	.word	0x20000928

080054c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054d2:	4b21      	ldr	r3, [pc, #132]	@ (8005558 <prvAddCurrentTaskToDelayedList+0x90>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d8:	4b20      	ldr	r3, [pc, #128]	@ (800555c <prvAddCurrentTaskToDelayedList+0x94>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3304      	adds	r3, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fbe8 	bl	8003cb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d10a      	bne.n	8005502 <prvAddCurrentTaskToDelayedList+0x3a>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f2:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <prvAddCurrentTaskToDelayedList+0x94>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4819      	ldr	r0, [pc, #100]	@ (8005560 <prvAddCurrentTaskToDelayedList+0x98>)
 80054fc:	f7fe fb7d 	bl	8003bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005500:	e026      	b.n	8005550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <prvAddCurrentTaskToDelayedList+0x94>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	429a      	cmp	r2, r3
 8005518:	d209      	bcs.n	800552e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551a:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <prvAddCurrentTaskToDelayedList+0x94>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3304      	adds	r3, #4
 8005524:	4619      	mov	r1, r3
 8005526:	4610      	mov	r0, r2
 8005528:	f7fe fb8b 	bl	8003c42 <vListInsert>
}
 800552c:	e010      	b.n	8005550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800552e:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <prvAddCurrentTaskToDelayedList+0x94>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f7fe fb81 	bl	8003c42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005540:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	429a      	cmp	r2, r3
 8005548:	d202      	bcs.n	8005550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800554a:	4a08      	ldr	r2, [pc, #32]	@ (800556c <prvAddCurrentTaskToDelayedList+0xa4>)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	bf00      	nop
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000dfc 	.word	0x20000dfc
 800555c:	20000924 	.word	0x20000924
 8005560:	20000de4 	.word	0x20000de4
 8005564:	20000db4 	.word	0x20000db4
 8005568:	20000db0 	.word	0x20000db0
 800556c:	20000e18 	.word	0x20000e18

08005570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	@ 0x28
 8005574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800557a:	f000 fb13 	bl	8005ba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800557e:	4b1d      	ldr	r3, [pc, #116]	@ (80055f4 <xTimerCreateTimerTask+0x84>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d021      	beq.n	80055ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800558e:	1d3a      	adds	r2, r7, #4
 8005590:	f107 0108 	add.w	r1, r7, #8
 8005594:	f107 030c 	add.w	r3, r7, #12
 8005598:	4618      	mov	r0, r3
 800559a:	f7fe fae7 	bl	8003b6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	9202      	str	r2, [sp, #8]
 80055a6:	9301      	str	r3, [sp, #4]
 80055a8:	2302      	movs	r3, #2
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	460a      	mov	r2, r1
 80055b0:	4911      	ldr	r1, [pc, #68]	@ (80055f8 <xTimerCreateTimerTask+0x88>)
 80055b2:	4812      	ldr	r0, [pc, #72]	@ (80055fc <xTimerCreateTimerTask+0x8c>)
 80055b4:	f7ff f8a2 	bl	80046fc <xTaskCreateStatic>
 80055b8:	4603      	mov	r3, r0
 80055ba:	4a11      	ldr	r2, [pc, #68]	@ (8005600 <xTimerCreateTimerTask+0x90>)
 80055bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055be:	4b10      	ldr	r3, [pc, #64]	@ (8005600 <xTimerCreateTimerTask+0x90>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055c6:	2301      	movs	r3, #1
 80055c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10b      	bne.n	80055e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	e7fd      	b.n	80055e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055e8:	697b      	ldr	r3, [r7, #20]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20000e54 	.word	0x20000e54
 80055f8:	080066b0 	.word	0x080066b0
 80055fc:	0800573d 	.word	0x0800573d
 8005600:	20000e58 	.word	0x20000e58

08005604 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08a      	sub	sp, #40	@ 0x28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005612:	2300      	movs	r3, #0
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10b      	bne.n	8005634 <xTimerGenericCommand+0x30>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	623b      	str	r3, [r7, #32]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005634:	4b19      	ldr	r3, [pc, #100]	@ (800569c <xTimerGenericCommand+0x98>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02a      	beq.n	8005692 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b05      	cmp	r3, #5
 800564c:	dc18      	bgt.n	8005680 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800564e:	f7ff fead 	bl	80053ac <xTaskGetSchedulerState>
 8005652:	4603      	mov	r3, r0
 8005654:	2b02      	cmp	r3, #2
 8005656:	d109      	bne.n	800566c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005658:	4b10      	ldr	r3, [pc, #64]	@ (800569c <xTimerGenericCommand+0x98>)
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	f107 0110 	add.w	r1, r7, #16
 8005660:	2300      	movs	r3, #0
 8005662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005664:	f7fe fc5a 	bl	8003f1c <xQueueGenericSend>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24
 800566a:	e012      	b.n	8005692 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800566c:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <xTimerGenericCommand+0x98>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	f107 0110 	add.w	r1, r7, #16
 8005674:	2300      	movs	r3, #0
 8005676:	2200      	movs	r2, #0
 8005678:	f7fe fc50 	bl	8003f1c <xQueueGenericSend>
 800567c:	6278      	str	r0, [r7, #36]	@ 0x24
 800567e:	e008      	b.n	8005692 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <xTimerGenericCommand+0x98>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	f107 0110 	add.w	r1, r7, #16
 8005688:	2300      	movs	r3, #0
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	f7fe fd48 	bl	8004120 <xQueueGenericSendFromISR>
 8005690:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005694:	4618      	mov	r0, r3
 8005696:	3728      	adds	r7, #40	@ 0x28
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000e54 	.word	0x20000e54

080056a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056aa:	4b23      	ldr	r3, [pc, #140]	@ (8005738 <prvProcessExpiredTimer+0x98>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fafb 	bl	8003cb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d023      	beq.n	8005714 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	18d1      	adds	r1, r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	6978      	ldr	r0, [r7, #20]
 80056da:	f000 f8d5 	bl	8005888 <prvInsertTimerInActiveList>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d020      	beq.n	8005726 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056e4:	2300      	movs	r3, #0
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	2300      	movs	r3, #0
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	2100      	movs	r1, #0
 80056ee:	6978      	ldr	r0, [r7, #20]
 80056f0:	f7ff ff88 	bl	8005604 <xTimerGenericCommand>
 80056f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d114      	bne.n	8005726 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	f383 8811 	msr	BASEPRI, r3
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	f3bf 8f4f 	dsb	sy
 800570c:	60fb      	str	r3, [r7, #12]
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	e7fd      	b.n	8005710 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	b2da      	uxtb	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	4798      	blx	r3
}
 800572e:	bf00      	nop
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000e4c 	.word	0x20000e4c

0800573c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005744:	f107 0308 	add.w	r3, r7, #8
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f859 	bl	8005800 <prvGetNextExpireTime>
 800574e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4619      	mov	r1, r3
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f805 	bl	8005764 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800575a:	f000 f8d7 	bl	800590c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800575e:	bf00      	nop
 8005760:	e7f0      	b.n	8005744 <prvTimerTask+0x8>
	...

08005764 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800576e:	f7ff fa29 	bl	8004bc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f866 	bl	8005848 <prvSampleTimeNow>
 800577c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d130      	bne.n	80057e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <prvProcessTimerOrBlockTask+0x3c>
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	429a      	cmp	r2, r3
 8005790:	d806      	bhi.n	80057a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005792:	f7ff fa25 	bl	8004be0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ff81 	bl	80056a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800579e:	e024      	b.n	80057ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80057a6:	4b13      	ldr	r3, [pc, #76]	@ (80057f4 <prvProcessTimerOrBlockTask+0x90>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <prvProcessTimerOrBlockTask+0x50>
 80057b0:	2301      	movs	r3, #1
 80057b2:	e000      	b.n	80057b6 <prvProcessTimerOrBlockTask+0x52>
 80057b4:	2300      	movs	r3, #0
 80057b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057b8:	4b0f      	ldr	r3, [pc, #60]	@ (80057f8 <prvProcessTimerOrBlockTask+0x94>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	f7fe ff65 	bl	8004694 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057ca:	f7ff fa09 	bl	8004be0 <xTaskResumeAll>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10a      	bne.n	80057ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057d4:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <prvProcessTimerOrBlockTask+0x98>)
 80057d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	f3bf 8f6f 	isb	sy
}
 80057e4:	e001      	b.n	80057ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057e6:	f7ff f9fb 	bl	8004be0 <xTaskResumeAll>
}
 80057ea:	bf00      	nop
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000e50 	.word	0x20000e50
 80057f8:	20000e54 	.word	0x20000e54
 80057fc:	e000ed04 	.word	0xe000ed04

08005800 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005808:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <prvGetNextExpireTime+0x44>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <prvGetNextExpireTime+0x16>
 8005812:	2201      	movs	r2, #1
 8005814:	e000      	b.n	8005818 <prvGetNextExpireTime+0x18>
 8005816:	2200      	movs	r2, #0
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005824:	4b07      	ldr	r3, [pc, #28]	@ (8005844 <prvGetNextExpireTime+0x44>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e001      	b.n	8005834 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005834:	68fb      	ldr	r3, [r7, #12]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000e4c 	.word	0x20000e4c

08005848 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005850:	f7ff fa64 	bl	8004d1c <xTaskGetTickCount>
 8005854:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005856:	4b0b      	ldr	r3, [pc, #44]	@ (8005884 <prvSampleTimeNow+0x3c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d205      	bcs.n	800586c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005860:	f000 f93a 	bl	8005ad8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	e002      	b.n	8005872 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005872:	4a04      	ldr	r2, [pc, #16]	@ (8005884 <prvSampleTimeNow+0x3c>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005878:	68fb      	ldr	r3, [r7, #12]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000e5c 	.word	0x20000e5c

08005888 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d812      	bhi.n	80058d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e01b      	b.n	80058fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <prvInsertTimerInActiveList+0x7c>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f7fe f9b8 	bl	8003c42 <vListInsert>
 80058d2:	e012      	b.n	80058fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d206      	bcs.n	80058ea <prvInsertTimerInActiveList+0x62>
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d302      	bcc.n	80058ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e007      	b.n	80058fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ea:	4b07      	ldr	r3, [pc, #28]	@ (8005908 <prvInsertTimerInActiveList+0x80>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f7fe f9a4 	bl	8003c42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058fa:	697b      	ldr	r3, [r7, #20]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000e50 	.word	0x20000e50
 8005908:	20000e4c 	.word	0x20000e4c

0800590c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08e      	sub	sp, #56	@ 0x38
 8005910:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005912:	e0ce      	b.n	8005ab2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	da19      	bge.n	800594e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	3304      	adds	r3, #4
 800591e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10b      	bne.n	800593e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	61fb      	str	r3, [r7, #28]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800593e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005944:	6850      	ldr	r0, [r2, #4]
 8005946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005948:	6892      	ldr	r2, [r2, #8]
 800594a:	4611      	mov	r1, r2
 800594c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f2c0 80ae 	blt.w	8005ab2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800595a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe f9a4 	bl	8003cb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800596c:	463b      	mov	r3, r7
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff ff6a 	bl	8005848 <prvSampleTimeNow>
 8005974:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b09      	cmp	r3, #9
 800597a:	f200 8097 	bhi.w	8005aac <prvProcessReceivedCommands+0x1a0>
 800597e:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <prvProcessReceivedCommands+0x78>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059ad 	.word	0x080059ad
 800598c:	080059ad 	.word	0x080059ad
 8005990:	08005a23 	.word	0x08005a23
 8005994:	08005a37 	.word	0x08005a37
 8005998:	08005a83 	.word	0x08005a83
 800599c:	080059ad 	.word	0x080059ad
 80059a0:	080059ad 	.word	0x080059ad
 80059a4:	08005a23 	.word	0x08005a23
 80059a8:	08005a37 	.word	0x08005a37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	18d1      	adds	r1, r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059cc:	f7ff ff5c 	bl	8005888 <prvInsertTimerInActiveList>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d06c      	beq.n	8005ab0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d061      	beq.n	8005ab0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	441a      	add	r2, r3
 80059f4:	2300      	movs	r3, #0
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	2100      	movs	r1, #0
 80059fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059fe:	f7ff fe01 	bl	8005604 <xTimerGenericCommand>
 8005a02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d152      	bne.n	8005ab0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0e:	f383 8811 	msr	BASEPRI, r3
 8005a12:	f3bf 8f6f 	isb	sy
 8005a16:	f3bf 8f4f 	dsb	sy
 8005a1a:	61bb      	str	r3, [r7, #24]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a34:	e03d      	b.n	8005ab2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	617b      	str	r3, [r7, #20]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	18d1      	adds	r1, r2, r3
 8005a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7c:	f7ff ff04 	bl	8005888 <prvInsertTimerInActiveList>
					break;
 8005a80:	e017      	b.n	8005ab2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d103      	bne.n	8005a98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a92:	f000 fbe9 	bl	8006268 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a96:	e00c      	b.n	8005ab2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005aaa:	e002      	b.n	8005ab2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005aac:	bf00      	nop
 8005aae:	e000      	b.n	8005ab2 <prvProcessReceivedCommands+0x1a6>
					break;
 8005ab0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ab2:	4b08      	ldr	r3, [pc, #32]	@ (8005ad4 <prvProcessReceivedCommands+0x1c8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	1d39      	adds	r1, r7, #4
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fbce 	bl	800425c <xQueueReceive>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f47f af26 	bne.w	8005914 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	3730      	adds	r7, #48	@ 0x30
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000e54 	.word	0x20000e54

08005ad8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ade:	e049      	b.n	8005b74 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b9c <prvSwitchTimerLists+0xc4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aea:	4b2c      	ldr	r3, [pc, #176]	@ (8005b9c <prvSwitchTimerLists+0xc4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fe f8db 	bl	8003cb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d02f      	beq.n	8005b74 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d90e      	bls.n	8005b44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b32:	4b1a      	ldr	r3, [pc, #104]	@ (8005b9c <prvSwitchTimerLists+0xc4>)
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f7fe f880 	bl	8003c42 <vListInsert>
 8005b42:	e017      	b.n	8005b74 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b44:	2300      	movs	r3, #0
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fd58 	bl	8005604 <xTimerGenericCommand>
 8005b54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	603b      	str	r3, [r7, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <prvSwitchTimerLists+0xc4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1b0      	bne.n	8005ae0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b7e:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <prvSwitchTimerLists+0xc4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b84:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <prvSwitchTimerLists+0xc8>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a04      	ldr	r2, [pc, #16]	@ (8005b9c <prvSwitchTimerLists+0xc4>)
 8005b8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ba0 <prvSwitchTimerLists+0xc8>)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6013      	str	r3, [r2, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000e4c 	.word	0x20000e4c
 8005ba0:	20000e50 	.word	0x20000e50

08005ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005baa:	f000 f96d 	bl	8005e88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bae:	4b15      	ldr	r3, [pc, #84]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d120      	bne.n	8005bf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005bb6:	4814      	ldr	r0, [pc, #80]	@ (8005c08 <prvCheckForValidListAndQueue+0x64>)
 8005bb8:	f7fd fff2 	bl	8003ba0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bbc:	4813      	ldr	r0, [pc, #76]	@ (8005c0c <prvCheckForValidListAndQueue+0x68>)
 8005bbe:	f7fd ffef 	bl	8003ba0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005bc2:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <prvCheckForValidListAndQueue+0x6c>)
 8005bc4:	4a10      	ldr	r2, [pc, #64]	@ (8005c08 <prvCheckForValidListAndQueue+0x64>)
 8005bc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bc8:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <prvCheckForValidListAndQueue+0x70>)
 8005bca:	4a10      	ldr	r2, [pc, #64]	@ (8005c0c <prvCheckForValidListAndQueue+0x68>)
 8005bcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <prvCheckForValidListAndQueue+0x74>)
 8005bd4:	4a11      	ldr	r2, [pc, #68]	@ (8005c1c <prvCheckForValidListAndQueue+0x78>)
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f7fe f8ff 	bl	8003ddc <xQueueGenericCreateStatic>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4a08      	ldr	r2, [pc, #32]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005be2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005be4:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	490b      	ldr	r1, [pc, #44]	@ (8005c20 <prvCheckForValidListAndQueue+0x7c>)
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fd24 	bl	8004640 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bf8:	f000 f978 	bl	8005eec <vPortExitCritical>
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000e54 	.word	0x20000e54
 8005c08:	20000e24 	.word	0x20000e24
 8005c0c:	20000e38 	.word	0x20000e38
 8005c10:	20000e4c 	.word	0x20000e4c
 8005c14:	20000e50 	.word	0x20000e50
 8005c18:	20000f00 	.word	0x20000f00
 8005c1c:	20000e60 	.word	0x20000e60
 8005c20:	080066b8 	.word	0x080066b8

08005c24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3b04      	subs	r3, #4
 8005c34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c54:	4a0c      	ldr	r2, [pc, #48]	@ (8005c88 <pxPortInitialiseStack+0x64>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3b14      	subs	r3, #20
 8005c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f06f 0202 	mvn.w	r2, #2
 8005c72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3b20      	subs	r3, #32
 8005c78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	08005c8d 	.word	0x08005c8d

08005c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c96:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <prvTaskExitError+0x58>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d00b      	beq.n	8005cb8 <prvTaskExitError+0x2c>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	60fb      	str	r3, [r7, #12]
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	e7fd      	b.n	8005cb4 <prvTaskExitError+0x28>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60bb      	str	r3, [r7, #8]
}
 8005cca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ccc:	bf00      	nop
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0fc      	beq.n	8005cce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	2000000c 	.word	0x2000000c
	...

08005cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cf0:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <pxCurrentTCBConst2>)
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6808      	ldr	r0, [r1, #0]
 8005cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	f380 8809 	msr	PSP, r0
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8811 	msr	BASEPRI, r0
 8005d0a:	4770      	bx	lr
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst2>:
 8005d10:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d18:	4808      	ldr	r0, [pc, #32]	@ (8005d3c <prvPortStartFirstTask+0x24>)
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	6800      	ldr	r0, [r0, #0]
 8005d1e:	f380 8808 	msr	MSP, r0
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8814 	msr	CONTROL, r0
 8005d2a:	b662      	cpsie	i
 8005d2c:	b661      	cpsie	f
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	df00      	svc	0
 8005d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d3a:	bf00      	nop
 8005d3c:	e000ed08 	.word	0xe000ed08

08005d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d46:	4b47      	ldr	r3, [pc, #284]	@ (8005e64 <xPortStartScheduler+0x124>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a47      	ldr	r2, [pc, #284]	@ (8005e68 <xPortStartScheduler+0x128>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d10b      	bne.n	8005d68 <xPortStartScheduler+0x28>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	613b      	str	r3, [r7, #16]
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d68:	4b3e      	ldr	r3, [pc, #248]	@ (8005e64 <xPortStartScheduler+0x124>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8005e6c <xPortStartScheduler+0x12c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d10b      	bne.n	8005d8a <xPortStartScheduler+0x4a>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	60fb      	str	r3, [r7, #12]
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d8a:	4b39      	ldr	r3, [pc, #228]	@ (8005e70 <xPortStartScheduler+0x130>)
 8005d8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	22ff      	movs	r2, #255	@ 0xff
 8005d9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b31      	ldr	r3, [pc, #196]	@ (8005e74 <xPortStartScheduler+0x134>)
 8005db0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005db2:	4b31      	ldr	r3, [pc, #196]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005db4:	2207      	movs	r2, #7
 8005db6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005db8:	e009      	b.n	8005dce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005dba:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005dc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dce:	78fb      	ldrb	r3, [r7, #3]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd6:	2b80      	cmp	r3, #128	@ 0x80
 8005dd8:	d0ef      	beq.n	8005dba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dda:	4b27      	ldr	r3, [pc, #156]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f1c3 0307 	rsb	r3, r3, #7
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d00b      	beq.n	8005dfe <xPortStartScheduler+0xbe>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60bb      	str	r3, [r7, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e08:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e10:	4a19      	ldr	r2, [pc, #100]	@ (8005e78 <xPortStartScheduler+0x138>)
 8005e12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e1c:	4b17      	ldr	r3, [pc, #92]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a16      	ldr	r2, [pc, #88]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005e26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e28:	4b14      	ldr	r3, [pc, #80]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a13      	ldr	r2, [pc, #76]	@ (8005e7c <xPortStartScheduler+0x13c>)
 8005e2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005e32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e34:	f000 f8da 	bl	8005fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <xPortStartScheduler+0x140>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e3e:	f000 f8f9 	bl	8006034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e42:	4b10      	ldr	r3, [pc, #64]	@ (8005e84 <xPortStartScheduler+0x144>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a0f      	ldr	r2, [pc, #60]	@ (8005e84 <xPortStartScheduler+0x144>)
 8005e48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e4e:	f7ff ff63 	bl	8005d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e52:	f7ff f82d 	bl	8004eb0 <vTaskSwitchContext>
	prvTaskExitError();
 8005e56:	f7ff ff19 	bl	8005c8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	e000ed00 	.word	0xe000ed00
 8005e68:	410fc271 	.word	0x410fc271
 8005e6c:	410fc270 	.word	0x410fc270
 8005e70:	e000e400 	.word	0xe000e400
 8005e74:	20000f50 	.word	0x20000f50
 8005e78:	20000f54 	.word	0x20000f54
 8005e7c:	e000ed20 	.word	0xe000ed20
 8005e80:	2000000c 	.word	0x2000000c
 8005e84:	e000ef34 	.word	0xe000ef34

08005e88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	607b      	str	r3, [r7, #4]
}
 8005ea0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ea2:	4b10      	ldr	r3, [pc, #64]	@ (8005ee4 <vPortEnterCritical+0x5c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee4 <vPortEnterCritical+0x5c>)
 8005eaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <vPortEnterCritical+0x5c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d110      	bne.n	8005ed6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee8 <vPortEnterCritical+0x60>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00b      	beq.n	8005ed6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	603b      	str	r3, [r7, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	e7fd      	b.n	8005ed2 <vPortEnterCritical+0x4a>
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	370c      	adds	r7, #12
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	2000000c 	.word	0x2000000c
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ef2:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <vPortExitCritical+0x50>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10b      	bne.n	8005f12 <vPortExitCritical+0x26>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	607b      	str	r3, [r7, #4]
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	e7fd      	b.n	8005f0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005f12:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <vPortExitCritical+0x50>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	4a08      	ldr	r2, [pc, #32]	@ (8005f3c <vPortExitCritical+0x50>)
 8005f1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f1c:	4b07      	ldr	r3, [pc, #28]	@ (8005f3c <vPortExitCritical+0x50>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <vPortExitCritical+0x44>
 8005f24:	2300      	movs	r3, #0
 8005f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f383 8811 	msr	BASEPRI, r3
}
 8005f2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c

08005f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f40:	f3ef 8009 	mrs	r0, PSP
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	4b15      	ldr	r3, [pc, #84]	@ (8005fa0 <pxCurrentTCBConst>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	f01e 0f10 	tst.w	lr, #16
 8005f50:	bf08      	it	eq
 8005f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f64:	f380 8811 	msr	BASEPRI, r0
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f7fe ff9e 	bl	8004eb0 <vTaskSwitchContext>
 8005f74:	f04f 0000 	mov.w	r0, #0
 8005f78:	f380 8811 	msr	BASEPRI, r0
 8005f7c:	bc09      	pop	{r0, r3}
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	6808      	ldr	r0, [r1, #0]
 8005f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f86:	f01e 0f10 	tst.w	lr, #16
 8005f8a:	bf08      	it	eq
 8005f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f90:	f380 8809 	msr	PSP, r0
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst>:
 8005fa0:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	607b      	str	r3, [r7, #4]
}
 8005fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fc2:	f7fe febb 	bl	8004d3c <xTaskIncrementTick>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <xPortSysTickHandler+0x40>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f383 8811 	msr	BASEPRI, r3
}
 8005fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	e000ed04 	.word	0xe000ed04

08005fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <vPortSetupTimerInterrupt+0x34>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <vPortSetupTimerInterrupt+0x38>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8006028 <vPortSetupTimerInterrupt+0x3c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0a      	ldr	r2, [pc, #40]	@ (800602c <vPortSetupTimerInterrupt+0x40>)
 8006002:	fba2 2303 	umull	r2, r3, r2, r3
 8006006:	099b      	lsrs	r3, r3, #6
 8006008:	4a09      	ldr	r2, [pc, #36]	@ (8006030 <vPortSetupTimerInterrupt+0x44>)
 800600a:	3b01      	subs	r3, #1
 800600c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800600e:	4b04      	ldr	r3, [pc, #16]	@ (8006020 <vPortSetupTimerInterrupt+0x34>)
 8006010:	2207      	movs	r2, #7
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	e000e010 	.word	0xe000e010
 8006024:	e000e018 	.word	0xe000e018
 8006028:	20000000 	.word	0x20000000
 800602c:	10624dd3 	.word	0x10624dd3
 8006030:	e000e014 	.word	0xe000e014

08006034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006034:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006044 <vPortEnableVFP+0x10>
 8006038:	6801      	ldr	r1, [r0, #0]
 800603a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800603e:	6001      	str	r1, [r0, #0]
 8006040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006042:	bf00      	nop
 8006044:	e000ed88 	.word	0xe000ed88

08006048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800604e:	f3ef 8305 	mrs	r3, IPSR
 8006052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b0f      	cmp	r3, #15
 8006058:	d915      	bls.n	8006086 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800605a:	4a18      	ldr	r2, [pc, #96]	@ (80060bc <vPortValidateInterruptPriority+0x74>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006064:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <vPortValidateInterruptPriority+0x78>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	7afa      	ldrb	r2, [r7, #11]
 800606a:	429a      	cmp	r2, r3
 800606c:	d20b      	bcs.n	8006086 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006086:	4b0f      	ldr	r3, [pc, #60]	@ (80060c4 <vPortValidateInterruptPriority+0x7c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800608e:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <vPortValidateInterruptPriority+0x80>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	429a      	cmp	r2, r3
 8006094:	d90b      	bls.n	80060ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	603b      	str	r3, [r7, #0]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vPortValidateInterruptPriority+0x62>
	}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	e000e3f0 	.word	0xe000e3f0
 80060c0:	20000f50 	.word	0x20000f50
 80060c4:	e000ed0c 	.word	0xe000ed0c
 80060c8:	20000f54 	.word	0x20000f54

080060cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	@ 0x28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060d8:	f7fe fd74 	bl	8004bc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006250 <pvPortMalloc+0x184>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060e4:	f000 f924 	bl	8006330 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006254 <pvPortMalloc+0x188>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 8095 	bne.w	8006220 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01e      	beq.n	800613a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80060fc:	2208      	movs	r2, #8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4413      	add	r3, r2
 8006102:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f003 0307 	and.w	r3, r3, #7
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f023 0307 	bic.w	r3, r3, #7
 8006114:	3308      	adds	r3, #8
 8006116:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <pvPortMalloc+0x6e>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	617b      	str	r3, [r7, #20]
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d06f      	beq.n	8006220 <pvPortMalloc+0x154>
 8006140:	4b45      	ldr	r3, [pc, #276]	@ (8006258 <pvPortMalloc+0x18c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d86a      	bhi.n	8006220 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800614a:	4b44      	ldr	r3, [pc, #272]	@ (800625c <pvPortMalloc+0x190>)
 800614c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800614e:	4b43      	ldr	r3, [pc, #268]	@ (800625c <pvPortMalloc+0x190>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006154:	e004      	b.n	8006160 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d903      	bls.n	8006172 <pvPortMalloc+0xa6>
 800616a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1f1      	bne.n	8006156 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006172:	4b37      	ldr	r3, [pc, #220]	@ (8006250 <pvPortMalloc+0x184>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006178:	429a      	cmp	r2, r3
 800617a:	d051      	beq.n	8006220 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2208      	movs	r2, #8
 8006182:	4413      	add	r3, r2
 8006184:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	2308      	movs	r3, #8
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	429a      	cmp	r2, r3
 800619c:	d920      	bls.n	80061e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800619e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <pvPortMalloc+0xfc>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
}
 80061c2:	bf00      	nop
 80061c4:	bf00      	nop
 80061c6:	e7fd      	b.n	80061c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	1ad2      	subs	r2, r2, r3
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061da:	69b8      	ldr	r0, [r7, #24]
 80061dc:	f000 f90a 	bl	80063f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <pvPortMalloc+0x18c>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006258 <pvPortMalloc+0x18c>)
 80061ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <pvPortMalloc+0x18c>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <pvPortMalloc+0x194>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d203      	bcs.n	8006202 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061fa:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <pvPortMalloc+0x18c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a18      	ldr	r2, [pc, #96]	@ (8006260 <pvPortMalloc+0x194>)
 8006200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	4b13      	ldr	r3, [pc, #76]	@ (8006254 <pvPortMalloc+0x188>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	431a      	orrs	r2, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006216:	4b13      	ldr	r3, [pc, #76]	@ (8006264 <pvPortMalloc+0x198>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	3301      	adds	r3, #1
 800621c:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <pvPortMalloc+0x198>)
 800621e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006220:	f7fe fcde 	bl	8004be0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <pvPortMalloc+0x17a>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60fb      	str	r3, [r7, #12]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <pvPortMalloc+0x176>
	return pvReturn;
 8006246:	69fb      	ldr	r3, [r7, #28]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3728      	adds	r7, #40	@ 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20004b60 	.word	0x20004b60
 8006254:	20004b74 	.word	0x20004b74
 8006258:	20004b64 	.word	0x20004b64
 800625c:	20004b58 	.word	0x20004b58
 8006260:	20004b68 	.word	0x20004b68
 8006264:	20004b6c 	.word	0x20004b6c

08006268 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d04f      	beq.n	800631a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800627a:	2308      	movs	r3, #8
 800627c:	425b      	negs	r3, r3
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	4413      	add	r3, r2
 8006282:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4b25      	ldr	r3, [pc, #148]	@ (8006324 <vPortFree+0xbc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4013      	ands	r3, r2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <vPortFree+0x46>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <vPortFree+0x66>
	__asm volatile
 80062b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60bb      	str	r3, [r7, #8]
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	e7fd      	b.n	80062ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4b14      	ldr	r3, [pc, #80]	@ (8006324 <vPortFree+0xbc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01e      	beq.n	800631a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11a      	bne.n	800631a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006324 <vPortFree+0xbc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	401a      	ands	r2, r3
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062f4:	f7fe fc66 	bl	8004bc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006328 <vPortFree+0xc0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4413      	add	r3, r2
 8006302:	4a09      	ldr	r2, [pc, #36]	@ (8006328 <vPortFree+0xc0>)
 8006304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006306:	6938      	ldr	r0, [r7, #16]
 8006308:	f000 f874 	bl	80063f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800630c:	4b07      	ldr	r3, [pc, #28]	@ (800632c <vPortFree+0xc4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a06      	ldr	r2, [pc, #24]	@ (800632c <vPortFree+0xc4>)
 8006314:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006316:	f7fe fc63 	bl	8004be0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800631a:	bf00      	nop
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20004b74 	.word	0x20004b74
 8006328:	20004b64 	.word	0x20004b64
 800632c:	20004b70 	.word	0x20004b70

08006330 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006336:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800633a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800633c:	4b27      	ldr	r3, [pc, #156]	@ (80063dc <prvHeapInit+0xac>)
 800633e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00c      	beq.n	8006364 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3307      	adds	r3, #7
 800634e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f023 0307 	bic.w	r3, r3, #7
 8006356:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	4a1f      	ldr	r2, [pc, #124]	@ (80063dc <prvHeapInit+0xac>)
 8006360:	4413      	add	r3, r2
 8006362:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006368:	4a1d      	ldr	r2, [pc, #116]	@ (80063e0 <prvHeapInit+0xb0>)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800636e:	4b1c      	ldr	r3, [pc, #112]	@ (80063e0 <prvHeapInit+0xb0>)
 8006370:	2200      	movs	r2, #0
 8006372:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	4413      	add	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800637c:	2208      	movs	r2, #8
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0307 	bic.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <prvHeapInit+0xb4>)
 8006390:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006392:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <prvHeapInit+0xb4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2200      	movs	r2, #0
 8006398:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800639a:	4b12      	ldr	r3, [pc, #72]	@ (80063e4 <prvHeapInit+0xb4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80063b0:	4b0c      	ldr	r3, [pc, #48]	@ (80063e4 <prvHeapInit+0xb4>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	4a0a      	ldr	r2, [pc, #40]	@ (80063e8 <prvHeapInit+0xb8>)
 80063be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	4a09      	ldr	r2, [pc, #36]	@ (80063ec <prvHeapInit+0xbc>)
 80063c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80063c8:	4b09      	ldr	r3, [pc, #36]	@ (80063f0 <prvHeapInit+0xc0>)
 80063ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80063ce:	601a      	str	r2, [r3, #0]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000f58 	.word	0x20000f58
 80063e0:	20004b58 	.word	0x20004b58
 80063e4:	20004b60 	.word	0x20004b60
 80063e8:	20004b68 	.word	0x20004b68
 80063ec:	20004b64 	.word	0x20004b64
 80063f0:	20004b74 	.word	0x20004b74

080063f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063fc:	4b28      	ldr	r3, [pc, #160]	@ (80064a0 <prvInsertBlockIntoFreeList+0xac>)
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	e002      	b.n	8006408 <prvInsertBlockIntoFreeList+0x14>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d8f7      	bhi.n	8006402 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	4413      	add	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d108      	bne.n	8006436 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	441a      	add	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	441a      	add	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d118      	bne.n	800647c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d00d      	beq.n	8006472 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	441a      	add	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e008      	b.n	8006484 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006472:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	e003      	b.n	8006484 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	429a      	cmp	r2, r3
 800648a:	d002      	beq.n	8006492 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20004b58 	.word	0x20004b58
 80064a4:	20004b60 	.word	0x20004b60

080064a8 <memset>:
 80064a8:	4402      	add	r2, r0
 80064aa:	4603      	mov	r3, r0
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d100      	bne.n	80064b2 <memset+0xa>
 80064b0:	4770      	bx	lr
 80064b2:	f803 1b01 	strb.w	r1, [r3], #1
 80064b6:	e7f9      	b.n	80064ac <memset+0x4>

080064b8 <_reclaim_reent>:
 80064b8:	4b29      	ldr	r3, [pc, #164]	@ (8006560 <_reclaim_reent+0xa8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4283      	cmp	r3, r0
 80064be:	b570      	push	{r4, r5, r6, lr}
 80064c0:	4604      	mov	r4, r0
 80064c2:	d04b      	beq.n	800655c <_reclaim_reent+0xa4>
 80064c4:	69c3      	ldr	r3, [r0, #28]
 80064c6:	b1ab      	cbz	r3, 80064f4 <_reclaim_reent+0x3c>
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	b16b      	cbz	r3, 80064e8 <_reclaim_reent+0x30>
 80064cc:	2500      	movs	r5, #0
 80064ce:	69e3      	ldr	r3, [r4, #28]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	5959      	ldr	r1, [r3, r5]
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d13b      	bne.n	8006550 <_reclaim_reent+0x98>
 80064d8:	3504      	adds	r5, #4
 80064da:	2d80      	cmp	r5, #128	@ 0x80
 80064dc:	d1f7      	bne.n	80064ce <_reclaim_reent+0x16>
 80064de:	69e3      	ldr	r3, [r4, #28]
 80064e0:	4620      	mov	r0, r4
 80064e2:	68d9      	ldr	r1, [r3, #12]
 80064e4:	f000 f872 	bl	80065cc <_free_r>
 80064e8:	69e3      	ldr	r3, [r4, #28]
 80064ea:	6819      	ldr	r1, [r3, #0]
 80064ec:	b111      	cbz	r1, 80064f4 <_reclaim_reent+0x3c>
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 f86c 	bl	80065cc <_free_r>
 80064f4:	6961      	ldr	r1, [r4, #20]
 80064f6:	b111      	cbz	r1, 80064fe <_reclaim_reent+0x46>
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 f867 	bl	80065cc <_free_r>
 80064fe:	69e1      	ldr	r1, [r4, #28]
 8006500:	b111      	cbz	r1, 8006508 <_reclaim_reent+0x50>
 8006502:	4620      	mov	r0, r4
 8006504:	f000 f862 	bl	80065cc <_free_r>
 8006508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800650a:	b111      	cbz	r1, 8006512 <_reclaim_reent+0x5a>
 800650c:	4620      	mov	r0, r4
 800650e:	f000 f85d 	bl	80065cc <_free_r>
 8006512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006514:	b111      	cbz	r1, 800651c <_reclaim_reent+0x64>
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f858 	bl	80065cc <_free_r>
 800651c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800651e:	b111      	cbz	r1, 8006526 <_reclaim_reent+0x6e>
 8006520:	4620      	mov	r0, r4
 8006522:	f000 f853 	bl	80065cc <_free_r>
 8006526:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006528:	b111      	cbz	r1, 8006530 <_reclaim_reent+0x78>
 800652a:	4620      	mov	r0, r4
 800652c:	f000 f84e 	bl	80065cc <_free_r>
 8006530:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006532:	b111      	cbz	r1, 800653a <_reclaim_reent+0x82>
 8006534:	4620      	mov	r0, r4
 8006536:	f000 f849 	bl	80065cc <_free_r>
 800653a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800653c:	b111      	cbz	r1, 8006544 <_reclaim_reent+0x8c>
 800653e:	4620      	mov	r0, r4
 8006540:	f000 f844 	bl	80065cc <_free_r>
 8006544:	6a23      	ldr	r3, [r4, #32]
 8006546:	b14b      	cbz	r3, 800655c <_reclaim_reent+0xa4>
 8006548:	4620      	mov	r0, r4
 800654a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800654e:	4718      	bx	r3
 8006550:	680e      	ldr	r6, [r1, #0]
 8006552:	4620      	mov	r0, r4
 8006554:	f000 f83a 	bl	80065cc <_free_r>
 8006558:	4631      	mov	r1, r6
 800655a:	e7bb      	b.n	80064d4 <_reclaim_reent+0x1c>
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	bf00      	nop
 8006560:	20000010 	.word	0x20000010

08006564 <__libc_init_array>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	4d0d      	ldr	r5, [pc, #52]	@ (800659c <__libc_init_array+0x38>)
 8006568:	4c0d      	ldr	r4, [pc, #52]	@ (80065a0 <__libc_init_array+0x3c>)
 800656a:	1b64      	subs	r4, r4, r5
 800656c:	10a4      	asrs	r4, r4, #2
 800656e:	2600      	movs	r6, #0
 8006570:	42a6      	cmp	r6, r4
 8006572:	d109      	bne.n	8006588 <__libc_init_array+0x24>
 8006574:	4d0b      	ldr	r5, [pc, #44]	@ (80065a4 <__libc_init_array+0x40>)
 8006576:	4c0c      	ldr	r4, [pc, #48]	@ (80065a8 <__libc_init_array+0x44>)
 8006578:	f000 f87e 	bl	8006678 <_init>
 800657c:	1b64      	subs	r4, r4, r5
 800657e:	10a4      	asrs	r4, r4, #2
 8006580:	2600      	movs	r6, #0
 8006582:	42a6      	cmp	r6, r4
 8006584:	d105      	bne.n	8006592 <__libc_init_array+0x2e>
 8006586:	bd70      	pop	{r4, r5, r6, pc}
 8006588:	f855 3b04 	ldr.w	r3, [r5], #4
 800658c:	4798      	blx	r3
 800658e:	3601      	adds	r6, #1
 8006590:	e7ee      	b.n	8006570 <__libc_init_array+0xc>
 8006592:	f855 3b04 	ldr.w	r3, [r5], #4
 8006596:	4798      	blx	r3
 8006598:	3601      	adds	r6, #1
 800659a:	e7f2      	b.n	8006582 <__libc_init_array+0x1e>
 800659c:	08006728 	.word	0x08006728
 80065a0:	08006728 	.word	0x08006728
 80065a4:	08006728 	.word	0x08006728
 80065a8:	0800672c 	.word	0x0800672c

080065ac <__retarget_lock_acquire_recursive>:
 80065ac:	4770      	bx	lr

080065ae <__retarget_lock_release_recursive>:
 80065ae:	4770      	bx	lr

080065b0 <memcpy>:
 80065b0:	440a      	add	r2, r1
 80065b2:	4291      	cmp	r1, r2
 80065b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b8:	d100      	bne.n	80065bc <memcpy+0xc>
 80065ba:	4770      	bx	lr
 80065bc:	b510      	push	{r4, lr}
 80065be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c6:	4291      	cmp	r1, r2
 80065c8:	d1f9      	bne.n	80065be <memcpy+0xe>
 80065ca:	bd10      	pop	{r4, pc}

080065cc <_free_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d041      	beq.n	8006658 <_free_r+0x8c>
 80065d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d8:	1f0c      	subs	r4, r1, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfb8      	it	lt
 80065de:	18e4      	addlt	r4, r4, r3
 80065e0:	f000 f83e 	bl	8006660 <__malloc_lock>
 80065e4:	4a1d      	ldr	r2, [pc, #116]	@ (800665c <_free_r+0x90>)
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	b933      	cbnz	r3, 80065f8 <_free_r+0x2c>
 80065ea:	6063      	str	r3, [r4, #4]
 80065ec:	6014      	str	r4, [r2, #0]
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f4:	f000 b83a 	b.w	800666c <__malloc_unlock>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d908      	bls.n	800660e <_free_r+0x42>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	1821      	adds	r1, r4, r0
 8006600:	428b      	cmp	r3, r1
 8006602:	bf01      	itttt	eq
 8006604:	6819      	ldreq	r1, [r3, #0]
 8006606:	685b      	ldreq	r3, [r3, #4]
 8006608:	1809      	addeq	r1, r1, r0
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	e7ed      	b.n	80065ea <_free_r+0x1e>
 800660e:	461a      	mov	r2, r3
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b10b      	cbz	r3, 8006618 <_free_r+0x4c>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d9fa      	bls.n	800660e <_free_r+0x42>
 8006618:	6811      	ldr	r1, [r2, #0]
 800661a:	1850      	adds	r0, r2, r1
 800661c:	42a0      	cmp	r0, r4
 800661e:	d10b      	bne.n	8006638 <_free_r+0x6c>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	4401      	add	r1, r0
 8006624:	1850      	adds	r0, r2, r1
 8006626:	4283      	cmp	r3, r0
 8006628:	6011      	str	r1, [r2, #0]
 800662a:	d1e0      	bne.n	80065ee <_free_r+0x22>
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	6053      	str	r3, [r2, #4]
 8006632:	4408      	add	r0, r1
 8006634:	6010      	str	r0, [r2, #0]
 8006636:	e7da      	b.n	80065ee <_free_r+0x22>
 8006638:	d902      	bls.n	8006640 <_free_r+0x74>
 800663a:	230c      	movs	r3, #12
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	e7d6      	b.n	80065ee <_free_r+0x22>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	1821      	adds	r1, r4, r0
 8006644:	428b      	cmp	r3, r1
 8006646:	bf04      	itt	eq
 8006648:	6819      	ldreq	r1, [r3, #0]
 800664a:	685b      	ldreq	r3, [r3, #4]
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	bf04      	itt	eq
 8006650:	1809      	addeq	r1, r1, r0
 8006652:	6021      	streq	r1, [r4, #0]
 8006654:	6054      	str	r4, [r2, #4]
 8006656:	e7ca      	b.n	80065ee <_free_r+0x22>
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	20004cb4 	.word	0x20004cb4

08006660 <__malloc_lock>:
 8006660:	4801      	ldr	r0, [pc, #4]	@ (8006668 <__malloc_lock+0x8>)
 8006662:	f7ff bfa3 	b.w	80065ac <__retarget_lock_acquire_recursive>
 8006666:	bf00      	nop
 8006668:	20004cb0 	.word	0x20004cb0

0800666c <__malloc_unlock>:
 800666c:	4801      	ldr	r0, [pc, #4]	@ (8006674 <__malloc_unlock+0x8>)
 800666e:	f7ff bf9e 	b.w	80065ae <__retarget_lock_release_recursive>
 8006672:	bf00      	nop
 8006674:	20004cb0 	.word	0x20004cb0

08006678 <_init>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	bf00      	nop
 800667c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667e:	bc08      	pop	{r3}
 8006680:	469e      	mov	lr, r3
 8006682:	4770      	bx	lr

08006684 <_fini>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr
