
freeRTOS_DMU_GTB6_Led_USART_Deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005004  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080051d4  080051d4  000061d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800525c  0800525c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800525c  0800525c  0000625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005264  08005264  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005268  08005268  00006268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800526c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000421c  20000060  080052cc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000427c  080052cc  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114cb  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b16  00000000  00000000  0001855b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  0001b078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7e  00000000  00000000  0001be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242b2  00000000  00000000  0001c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ce9  00000000  00000000  00040b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfac0  00000000  00000000  00051841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  00131344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00134df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080051bc 	.word	0x080051bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080051bc 	.word	0x080051bc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	2000007c 	.word	0x2000007c
 8000530:	2000011c 	.word	0x2000011c

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b090      	sub	sp, #64	@ 0x40
 8000538:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fccb 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f857 	bl	80005f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 8000542:	f000 fc1d 	bl	8000d80 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f973 	bl	8000830 <MX_GPIO_Init>
  MX_ADC1_Init();
 800054a:	f000 f8bf 	bl	80006cc <MX_ADC1_Init>
  MX_CAN1_Init();
 800054e:	f000 f90f 	bl	8000770 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f943 	bl	80007dc <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000556:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <main+0x9c>)
 8000558:	f107 041c 	add.w	r4, r7, #28
 800055c:	461d      	mov	r5, r3
 800055e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000562:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f002 ffe6 	bl	8003542 <osThreadCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <main+0xa0>)
 800057a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <main+0xa4>)
 800057e:	463c      	mov	r4, r7
 8000580:	461d      	mov	r5, r3
 8000582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000586:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800058a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800058e:	463b      	mov	r3, r7
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f002 ffd5 	bl	8003542 <osThreadCreate>
 8000598:	4603      	mov	r3, r0
 800059a:	4a10      	ldr	r2, [pc, #64]	@ (80005dc <main+0xa8>)
 800059c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  xTaskCreate(StartDefaultTask," DMU OKUMA ",configMINIMAL_STACK_SIZE, NULL, 2, &myTask01Handle);
 800059e:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <main+0xa0>)
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2302      	movs	r3, #2
 80005a4:	9300      	str	r3, [sp, #0]
 80005a6:	2300      	movs	r3, #0
 80005a8:	2280      	movs	r2, #128	@ 0x80
 80005aa:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <main+0xac>)
 80005ac:	480d      	ldr	r0, [pc, #52]	@ (80005e4 <main+0xb0>)
 80005ae:	f003 f9c9 	bl	8003944 <xTaskCreate>
  xTaskCreate(StartTask02," Led yakma ", configMINIMAL_STACK_SIZE, NULL, 2, &myTask02Handle);
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <main+0xa8>)
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2302      	movs	r3, #2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2280      	movs	r2, #128	@ 0x80
 80005be:	490a      	ldr	r1, [pc, #40]	@ (80005e8 <main+0xb4>)
 80005c0:	480a      	ldr	r0, [pc, #40]	@ (80005ec <main+0xb8>)
 80005c2:	f003 f9bf 	bl	8003944 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005c6:	f002 ffb5 	bl	8003534 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	bf00      	nop
 80005cc:	e7fd      	b.n	80005ca <main+0x96>
 80005ce:	bf00      	nop
 80005d0:	080051f8 	.word	0x080051f8
 80005d4:	200003d4 	.word	0x200003d4
 80005d8:	08005220 	.word	0x08005220
 80005dc:	200003d8 	.word	0x200003d8
 80005e0:	080051d4 	.word	0x080051d4
 80005e4:	0800098d 	.word	0x0800098d
 80005e8:	080051e0 	.word	0x080051e0
 80005ec:	08000a29 	.word	0x08000a29

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2234      	movs	r2, #52	@ 0x34
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fd02 	bl	8005008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 0308 	add.w	r3, r7, #8
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <SystemClock_Config+0xd4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a29      	ldr	r2, [pc, #164]	@ (80006c4 <SystemClock_Config+0xd4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <SystemClock_Config+0xd4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	2300      	movs	r3, #0
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	4b24      	ldr	r3, [pc, #144]	@ (80006c8 <SystemClock_Config+0xd8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800063c:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <SystemClock_Config+0xd8>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b20      	ldr	r3, [pc, #128]	@ (80006c8 <SystemClock_Config+0xd8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000650:	2302      	movs	r3, #2
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	2301      	movs	r3, #1
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	2310      	movs	r3, #16
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065c:	2302      	movs	r3, #2
 800065e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000668:	2340      	movs	r3, #64	@ 0x40
 800066a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f9cd 	bl	8002a1c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000688:	f000 fa28 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000694:	2390      	movs	r3, #144	@ 0x90
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fe6c 	bl	8002388 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006b6:	f000 fa11 	bl	8000adc <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	@ 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <MX_ADC1_Init+0x9c>)
 80006e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <MX_ADC1_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000704:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070a:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <MX_ADC1_Init+0x98>)
 800070c:	4a17      	ldr	r2, [pc, #92]	@ (800076c <MX_ADC1_Init+0xa0>)
 800070e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000710:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000716:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000718:	2201      	movs	r2, #1
 800071a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800071c:	4b11      	ldr	r3, [pc, #68]	@ (8000764 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <MX_ADC1_Init+0x98>)
 8000726:	2201      	movs	r2, #1
 8000728:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	@ (8000764 <MX_ADC1_Init+0x98>)
 800072c:	f000 fc44 	bl	8000fb8 <HAL_ADC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000736:	f000 f9d1 	bl	8000adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	@ (8000764 <MX_ADC1_Init+0x98>)
 800074c:	f000 fde2 	bl	8001314 <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000756:	f000 f9c1 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000031c 	.word	0x2000031c
 8000768:	40012000 	.word	0x40012000
 800076c:	0f000001 	.word	0x0f000001

08000770 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000774:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_CAN1_Init+0x64>)
 8000776:	4a18      	ldr	r2, [pc, #96]	@ (80007d8 <MX_CAN1_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800077a:	4b16      	ldr	r3, [pc, #88]	@ (80007d4 <MX_CAN1_Init+0x64>)
 800077c:	220c      	movs	r2, #12
 800077e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000780:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_CAN1_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000786:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <MX_CAN1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_CAN1_Init+0x64>)
 800078e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000792:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000794:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_CAN1_Init+0x64>)
 8000796:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800079a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <MX_CAN1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <MX_CAN1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_CAN1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_CAN1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_CAN1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <MX_CAN1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_CAN1_Init+0x64>)
 80007c2:	f000 ffd5 	bl	8001770 <HAL_CAN_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 f986 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000364 	.word	0x20000364
 80007d8:	40006400 	.word	0x40006400

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f002 fba0 	bl	8002f58 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f95d 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000038c 	.word	0x2000038c
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	@ 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b4c      	ldr	r3, [pc, #304]	@ (800097c <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a4b      	ldr	r2, [pc, #300]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b49      	ldr	r3, [pc, #292]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b45      	ldr	r3, [pc, #276]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a44      	ldr	r2, [pc, #272]	@ (800097c <MX_GPIO_Init+0x14c>)
 800086c:	f043 0320 	orr.w	r3, r3, #32
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b42      	ldr	r3, [pc, #264]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b3e      	ldr	r3, [pc, #248]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a3d      	ldr	r2, [pc, #244]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b3b      	ldr	r3, [pc, #236]	@ (800097c <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b37      	ldr	r3, [pc, #220]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a36      	ldr	r2, [pc, #216]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b34      	ldr	r3, [pc, #208]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b30      	ldr	r3, [pc, #192]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a2f      	ldr	r2, [pc, #188]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b2d      	ldr	r3, [pc, #180]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b29      	ldr	r3, [pc, #164]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a28      	ldr	r2, [pc, #160]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b26      	ldr	r3, [pc, #152]	@ (800097c <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f4:	4822      	ldr	r0, [pc, #136]	@ (8000980 <MX_GPIO_Init+0x150>)
 80008f6:	f001 fd2d 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2106      	movs	r1, #6
 80008fe:	4821      	ldr	r0, [pc, #132]	@ (8000984 <MX_GPIO_Init+0x154>)
 8000900:	f001 fd28 	bl	8002354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4818      	ldr	r0, [pc, #96]	@ (8000980 <MX_GPIO_Init+0x150>)
 800091e:	f001 fb6d 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4813      	ldr	r0, [pc, #76]	@ (8000984 <MX_GPIO_Init+0x154>)
 8000938:	f001 fb60 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800093c:	2306      	movs	r3, #6
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	480c      	ldr	r0, [pc, #48]	@ (8000984 <MX_GPIO_Init+0x154>)
 8000954:	f001 fb52 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4806      	ldr	r0, [pc, #24]	@ (8000988 <MX_GPIO_Init+0x158>)
 800096e:	f001 fb45 	bl	8001ffc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	@ 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40020800 	.word	0x40020800
 8000984:	40021400 	.word	0x40021400
 8000988:	40021000 	.word	0x40021000

0800098c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000994:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <StartDefaultTask+0x88>)
 8000996:	f000 fb53 	bl	8001040 <HAL_ADC_Start>

	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 800099a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099e:	481e      	ldr	r0, [pc, #120]	@ (8000a18 <StartDefaultTask+0x8c>)
 80009a0:	f001 fcc0 	bl	8002324 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <StartDefaultTask+0x90>)
 80009aa:	601a      	str	r2, [r3, #0]
	  if(digital_output == 0)
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <StartDefaultTask+0x90>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d12a      	bne.n	8000a0a <StartDefaultTask+0x7e>
	  {
		  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 80009b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <StartDefaultTask+0x88>)
 80009ba:	f000 fc13 	bl	80011e4 <HAL_ADC_PollForConversion>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10d      	bne.n	80009e0 <StartDefaultTask+0x54>
		  {
			  dmu_value = HAL_ADC_GetValue(&hadc1);
 80009c4:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <StartDefaultTask+0x88>)
 80009c6:	f000 fc98 	bl	80012fa <HAL_ADC_GetValue>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <StartDefaultTask+0x94>)
 80009ce:	6013      	str	r3, [r2, #0]
			  osSignalSet(myTask02Handle, dmu_value);// bildirim göndermek için
 80009d0:	4b14      	ldr	r3, [pc, #80]	@ (8000a24 <StartDefaultTask+0x98>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <StartDefaultTask+0x94>)
 80009d6:	6812      	ldr	r2, [r2, #0]
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fe12 	bl	8003604 <osSignalSet>
		  }

		  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 80009e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009e4:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <StartDefaultTask+0x88>)
 80009e6:	f000 fbfd 	bl	80011e4 <HAL_ADC_PollForConversion>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d10c      	bne.n	8000a0a <StartDefaultTask+0x7e>
		  {
			  dmu_value = HAL_ADC_GetValue(&hadc1);
 80009f0:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <StartDefaultTask+0x88>)
 80009f2:	f000 fc82 	bl	80012fa <HAL_ADC_GetValue>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a09      	ldr	r2, [pc, #36]	@ (8000a20 <StartDefaultTask+0x94>)
 80009fa:	6013      	str	r3, [r2, #0]
			  xTaskNotify(myTask02Handle, 0x00, eIncrement); // bildirim göndermek için
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <StartDefaultTask+0x98>)
 80009fe:	6818      	ldr	r0, [r3, #0]
 8000a00:	2300      	movs	r3, #0
 8000a02:	2202      	movs	r2, #2
 8000a04:	2100      	movs	r1, #0
 8000a06:	f003 fcb1 	bl	800436c <xTaskGenericNotify>
		  }

	  };

    osDelay(1);
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f002 fde5 	bl	80035da <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000a10:	e7c0      	b.n	8000994 <StartDefaultTask+0x8>
 8000a12:	bf00      	nop
 8000a14:	2000031c 	.word	0x2000031c
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	200003e0 	.word	0x200003e0
 8000a20:	200003dc 	.word	0x200003dc
 8000a24:	200003d8 	.word	0x200003d8

08000a28 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t pulNotificationValue = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  if(osSignalWait(&pulNotificationValue, 100).status == osEventSignal) // bidirim almak için
 8000a34:	f107 0108 	add.w	r1, r7, #8
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2264      	movs	r2, #100	@ 0x64
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fe20 	bl	8003684 <osSignalWait>
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d11b      	bne.n	8000a82 <StartTask02+0x5a>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	4821      	ldr	r0, [pc, #132]	@ (8000ad4 <StartTask02+0xac>)
 8000a50:	f001 fc80 	bl	8002354 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	481f      	ldr	r0, [pc, #124]	@ (8000ad8 <StartTask02+0xb0>)
 8000a5c:	f001 fc7a 	bl	8002354 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 8000a60:	2064      	movs	r0, #100	@ 0x64
 8000a62:	f003 f8bf 	bl	8003be4 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2107      	movs	r1, #7
 8000a6a:	481a      	ldr	r0, [pc, #104]	@ (8000ad4 <StartTask02+0xac>)
 8000a6c:	f001 fc72 	bl	8002354 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a76:	4818      	ldr	r0, [pc, #96]	@ (8000ad8 <StartTask02+0xb0>)
 8000a78:	f001 fc6c 	bl	8002354 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 8000a7c:	2064      	movs	r0, #100	@ 0x64
 8000a7e:	f003 f8b1 	bl	8003be4 <vTaskDelay>
//		  char *task1 = "task 1 tamamlandır\n";
//		  HAL_UART_Transmit(&huart2, (uint8_t*)task1, strlen(task1), 100);
//		  vTaskDelay(100);
	  }

	  if(xTaskNotifyWait(0, 0, &pulNotificationValue, portMAX_DELAY) == pdTRUE) // bidirim almak için
 8000a82:	f107 0208 	add.w	r2, r7, #8
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f003 fc0d 	bl	80042ac <xTaskNotifyWait>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d1cd      	bne.n	8000a34 <StartTask02+0xc>
		  // bu Basetype değeri türünden yani pdTrue ya da pdFalse , pdTrue ise bildirim geldi demektir.
		  // bi bildirim geidiğinde önceki bildirim değerini siler, çıkışta bildirim değerini siler, Notifiy değeri yani bildirim geldiğinde bu değeri alsın, bekleme değeri
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <StartTask02+0xac>)
 8000a9e:	f001 fc59 	bl	8002354 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa8:	480b      	ldr	r0, [pc, #44]	@ (8000ad8 <StartTask02+0xb0>)
 8000aaa:	f001 fc53 	bl	8002354 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 8000aae:	2064      	movs	r0, #100	@ 0x64
 8000ab0:	f003 f898 	bl	8003be4 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <StartTask02+0xac>)
 8000aba:	f001 fc4b 	bl	8002354 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <StartTask02+0xb0>)
 8000ac6:	f001 fc45 	bl	8002354 <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 8000aca:	2064      	movs	r0, #100	@ 0x64
 8000acc:	f003 f88a 	bl	8003be4 <vTaskDelay>
	  if(osSignalWait(&pulNotificationValue, 100).status == osEventSignal) // bidirim almak için
 8000ad0:	e7b0      	b.n	8000a34 <StartTask02+0xc>
 8000ad2:	bf00      	nop
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40020800 	.word	0x40020800

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <HAL_MspInit+0x54>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f001 fa2e 	bl	8001f8e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a17      	ldr	r2, [pc, #92]	@ (8000bbc <HAL_ADC_MspInit+0x7c>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d127      	bne.n	8000bb2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_ADC_MspInit+0x80>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <HAL_ADC_MspInit+0x84>)
 8000bae:	f001 fa25 	bl	8001ffc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	@ 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012000 	.word	0x40012000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c5c <HAL_CAN_MspInit+0x94>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d134      	bne.n	8000c54 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <HAL_CAN_MspInit+0x98>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c60 <HAL_CAN_MspInit+0x98>)
 8000bf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_CAN_MspInit+0x98>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_CAN_MspInit+0x98>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <HAL_CAN_MspInit+0x98>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_CAN_MspInit+0x98>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c34:	2309      	movs	r3, #9
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4809      	ldr	r0, [pc, #36]	@ (8000c64 <HAL_CAN_MspInit+0x9c>)
 8000c40:	f001 f9dc 	bl	8001ffc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2105      	movs	r1, #5
 8000c48:	2014      	movs	r0, #20
 8000c4a:	f001 f9a0 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c4e:	2014      	movs	r0, #20
 8000c50:	f001 f9b9 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	@ 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40006400 	.word	0x40006400
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a19      	ldr	r2, [pc, #100]	@ (8000cec <HAL_UART_MspInit+0x84>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12b      	bne.n	8000ce2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a10      	ldr	r2, [pc, #64]	@ (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf0 <HAL_UART_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	@ (8000cf4 <HAL_UART_MspInit+0x8c>)
 8000cde:	f001 f98d 	bl	8001ffc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x4>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <MemManage_Handler+0x4>

08000d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d32:	f000 f921 	bl	8000f78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d36:	f003 fa9b 	bl	8004270 <xTaskGetSchedulerState>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d001      	beq.n	8000d44 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d40:	f003 fee2 	bl	8004b08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <CAN1_RX0_IRQHandler+0x10>)
 8000d4e:	f000 fe0a 	bl	8001966 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000364 	.word	0x20000364

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	@ (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	2302      	movs	r3, #2
 8000d98:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 030c 	and.w	r3, r3, #12
 8000da2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d011      	beq.n	8000dce <SystemCoreClockUpdate+0x4e>
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d844      	bhi.n	8000e3a <SystemCoreClockUpdate+0xba>
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <SystemCoreClockUpdate+0x3e>
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d004      	beq.n	8000dc6 <SystemCoreClockUpdate+0x46>
 8000dbc:	e03d      	b.n	8000e3a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <SystemCoreClockUpdate+0xf0>)
 8000dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8000e74 <SystemCoreClockUpdate+0xf4>)
 8000dc2:	601a      	str	r2, [r3, #0]
      break;
 8000dc4:	e03d      	b.n	8000e42 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <SystemCoreClockUpdate+0xf0>)
 8000dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8000e78 <SystemCoreClockUpdate+0xf8>)
 8000dca:	601a      	str	r2, [r3, #0]
      break;
 8000dcc:	e039      	b.n	8000e42 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000dce:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	0d9b      	lsrs	r3, r3, #22
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dda:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000de2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dea:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <SystemCoreClockUpdate+0xf8>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4a1e      	ldr	r2, [pc, #120]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	0992      	lsrs	r2, r2, #6
 8000df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e00b      	b.n	8000e1c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000e04:	4a1b      	ldr	r2, [pc, #108]	@ (8000e74 <SystemCoreClockUpdate+0xf4>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0c:	4a17      	ldr	r2, [pc, #92]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000e0e:	6852      	ldr	r2, [r2, #4]
 8000e10:	0992      	lsrs	r2, r2, #6
 8000e12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	0c1b      	lsrs	r3, r3, #16
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	3301      	adds	r3, #1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <SystemCoreClockUpdate+0xf0>)
 8000e36:	6013      	str	r3, [r2, #0]
      break;
 8000e38:	e003      	b.n	8000e42 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <SystemCoreClockUpdate+0xf0>)
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <SystemCoreClockUpdate+0xf4>)
 8000e3e:	601a      	str	r2, [r3, #0]
      break;
 8000e40:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e42:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <SystemCoreClockUpdate+0xec>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <SystemCoreClockUpdate+0xfc>)
 8000e4e:	5cd3      	ldrb	r3, [r2, r3]
 8000e50:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <SystemCoreClockUpdate+0xf0>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <SystemCoreClockUpdate+0xf0>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	371c      	adds	r7, #28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	20000000 	.word	0x20000000
 8000e74:	00f42400 	.word	0x00f42400
 8000e78:	007a1200 	.word	0x007a1200
 8000e7c:	08005244 	.word	0x08005244

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e84:	f7ff ff6a 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480c      	ldr	r0, [pc, #48]	@ (8000ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8a:	490d      	ldr	r1, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f004 f909 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fb3f 	bl	8000534 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ec4:	0800526c 	.word	0x0800526c
  ldr r2, =_sbss
 8000ec8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ecc:	2000427c 	.word	0x2000427c

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f001 f83b 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fdee 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 f853 	bl	8001fe2 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f001 f81b 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	200003e4 	.word	0x200003e4

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	200003e4 	.word	0x200003e4

08000fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e033      	b.n	8001036 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fdb2 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d118      	bne.n	8001028 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ffe:	f023 0302 	bic.w	r3, r3, #2
 8001002:	f043 0202 	orr.w	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 fab4 	bl	8001578 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f023 0303 	bic.w	r3, r3, #3
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
 8001026:	e001      	b.n	800102c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <HAL_ADC_Start+0x1a>
 8001056:	2302      	movs	r3, #2
 8001058:	e0b2      	b.n	80011c0 <HAL_ADC_Start+0x180>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b01      	cmp	r3, #1
 800106e:	d018      	beq.n	80010a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0201 	orr.w	r2, r2, #1
 800107e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001080:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <HAL_ADC_Start+0x18c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a52      	ldr	r2, [pc, #328]	@ (80011d0 <HAL_ADC_Start+0x190>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	0c9a      	lsrs	r2, r3, #18
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001094:	e002      	b.n	800109c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	3b01      	subs	r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d17a      	bne.n	80011a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d007      	beq.n	80010e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ee:	d106      	bne.n	80010fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f4:	f023 0206 	bic.w	r2, r3, #6
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80010fc:	e002      	b.n	8001104 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800110c:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <HAL_ADC_Start+0x194>)
 800110e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001118:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 031f 	and.w	r3, r3, #31
 8001122:	2b00      	cmp	r3, #0
 8001124:	d12a      	bne.n	800117c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a2b      	ldr	r2, [pc, #172]	@ (80011d8 <HAL_ADC_Start+0x198>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d015      	beq.n	800115c <HAL_ADC_Start+0x11c>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a29      	ldr	r2, [pc, #164]	@ (80011dc <HAL_ADC_Start+0x19c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d105      	bne.n	8001146 <HAL_ADC_Start+0x106>
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <HAL_ADC_Start+0x194>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00a      	beq.n	800115c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <HAL_ADC_Start+0x1a0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d136      	bne.n	80011be <HAL_ADC_Start+0x17e>
 8001150:	4b20      	ldr	r3, [pc, #128]	@ (80011d4 <HAL_ADC_Start+0x194>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	d130      	bne.n	80011be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d129      	bne.n	80011be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	e020      	b.n	80011be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a15      	ldr	r2, [pc, #84]	@ (80011d8 <HAL_ADC_Start+0x198>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d11b      	bne.n	80011be <HAL_ADC_Start+0x17e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d114      	bne.n	80011be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	e00b      	b.n	80011be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f043 0210 	orr.w	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	20000000 	.word	0x20000000
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	40012300 	.word	0x40012300
 80011d8:	40012000 	.word	0x40012000
 80011dc:	40012100 	.word	0x40012100
 80011e0:	40012200 	.word	0x40012200

080011e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001200:	d113      	bne.n	800122a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800120c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001210:	d10b      	bne.n	800122a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f043 0220 	orr.w	r2, r3, #32
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e063      	b.n	80012f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800122a:	f7ff feb9 	bl	8000fa0 <HAL_GetTick>
 800122e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001230:	e021      	b.n	8001276 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d01d      	beq.n	8001276 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d007      	beq.n	8001250 <HAL_ADC_PollForConversion+0x6c>
 8001240:	f7ff feae 	bl	8000fa0 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d212      	bcs.n	8001276 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b02      	cmp	r3, #2
 800125c:	d00b      	beq.n	8001276 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f043 0204 	orr.w	r2, r3, #4
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e03d      	b.n	80012f2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b02      	cmp	r3, #2
 8001282:	d1d6      	bne.n	8001232 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f06f 0212 	mvn.w	r2, #18
 800128c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d123      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d11f      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d006      	beq.n	80012cc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d111      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d105      	bne.n	80012f0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x1c>
 800132c:	2302      	movs	r3, #2
 800132e:	e113      	b.n	8001558 <HAL_ADC_ConfigChannel+0x244>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b09      	cmp	r3, #9
 800133e:	d925      	bls.n	800138c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68d9      	ldr	r1, [r3, #12]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	3b1e      	subs	r3, #30
 8001356:	2207      	movs	r2, #7
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43da      	mvns	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	400a      	ands	r2, r1
 8001364:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68d9      	ldr	r1, [r3, #12]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	b29b      	uxth	r3, r3
 8001376:	4618      	mov	r0, r3
 8001378:	4603      	mov	r3, r0
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4403      	add	r3, r0
 800137e:	3b1e      	subs	r3, #30
 8001380:	409a      	lsls	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	e022      	b.n	80013d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6919      	ldr	r1, [r3, #16]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	2207      	movs	r2, #7
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	400a      	ands	r2, r1
 80013ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6919      	ldr	r1, [r3, #16]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	4603      	mov	r3, r0
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4403      	add	r3, r0
 80013c8:	409a      	lsls	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d824      	bhi.n	8001424 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b05      	subs	r3, #5
 80013ec:	221f      	movs	r2, #31
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	400a      	ands	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	b29b      	uxth	r3, r3
 8001408:	4618      	mov	r0, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	3b05      	subs	r3, #5
 8001416:	fa00 f203 	lsl.w	r2, r0, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	635a      	str	r2, [r3, #52]	@ 0x34
 8001422:	e04c      	b.n	80014be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d824      	bhi.n	8001476 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	3b23      	subs	r3, #35	@ 0x23
 800143e:	221f      	movs	r2, #31
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b29b      	uxth	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	3b23      	subs	r3, #35	@ 0x23
 8001468:	fa00 f203 	lsl.w	r2, r0, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	631a      	str	r2, [r3, #48]	@ 0x30
 8001474:	e023      	b.n	80014be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b41      	subs	r3, #65	@ 0x41
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b41      	subs	r3, #65	@ 0x41
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014be:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <HAL_ADC_ConfigChannel+0x250>)
 80014c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a28      	ldr	r2, [pc, #160]	@ (8001568 <HAL_ADC_ConfigChannel+0x254>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10f      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1d8>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b12      	cmp	r3, #18
 80014d2:	d10b      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001568 <HAL_ADC_ConfigChannel+0x254>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_ADC_ConfigChannel+0x23a>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_ADC_ConfigChannel+0x258>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d003      	beq.n	8001508 <HAL_ADC_ConfigChannel+0x1f4>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b11      	cmp	r3, #17
 8001506:	d122      	bne.n	800154e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a11      	ldr	r2, [pc, #68]	@ (800156c <HAL_ADC_ConfigChannel+0x258>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d111      	bne.n	800154e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_ADC_ConfigChannel+0x25c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <HAL_ADC_ConfigChannel+0x260>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	0c9a      	lsrs	r2, r3, #18
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001540:	e002      	b.n	8001548 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3b01      	subs	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f9      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40012300 	.word	0x40012300
 8001568:	40012000 	.word	0x40012000
 800156c:	10000012 	.word	0x10000012
 8001570:	20000000 	.word	0x20000000
 8001574:	431bde83 	.word	0x431bde83

08001578 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001580:	4b79      	ldr	r3, [pc, #484]	@ (8001768 <ADC_Init+0x1f0>)
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	431a      	orrs	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	021a      	lsls	r2, r3, #8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160a:	4a58      	ldr	r2, [pc, #352]	@ (800176c <ADC_Init+0x1f4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d022      	beq.n	8001656 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800161e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6899      	ldr	r1, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6899      	ldr	r1, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	e00f      	b.n	8001676 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001674:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0202 	bic.w	r2, r2, #2
 8001684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e1b      	ldrb	r3, [r3, #24]
 8001690:	005a      	lsls	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01b      	beq.n	80016dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6859      	ldr	r1, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	3b01      	subs	r3, #1
 80016d0:	035a      	lsls	r2, r3, #13
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	e007      	b.n	80016ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	3b01      	subs	r3, #1
 8001708:	051a      	lsls	r2, r3, #20
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800172e:	025a      	lsls	r2, r3, #9
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6899      	ldr	r1, [r3, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	029a      	lsls	r2, r3, #10
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40012300 	.word	0x40012300
 800176c:	0f000001 	.word	0x0f000001

08001770 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0ed      	b.n	800195e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fa1a 	bl	8000bc8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f042 0201 	orr.w	r2, r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a4:	f7ff fbfc 	bl	8000fa0 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017aa:	e012      	b.n	80017d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ac:	f7ff fbf8 	bl	8000fa0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d90b      	bls.n	80017d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0c5      	b.n	800195e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0e5      	beq.n	80017ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0202 	bic.w	r2, r2, #2
 80017ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f0:	f7ff fbd6 	bl	8000fa0 <HAL_GetTick>
 80017f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017f6:	e012      	b.n	800181e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f8:	f7ff fbd2 	bl	8000fa0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b0a      	cmp	r3, #10
 8001804:	d90b      	bls.n	800181e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2205      	movs	r2, #5
 8001816:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e09f      	b.n	800195e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1e5      	bne.n	80017f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7e1b      	ldrb	r3, [r3, #24]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d108      	bne.n	8001846 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e007      	b.n	8001856 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7e5b      	ldrb	r3, [r3, #25]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d108      	bne.n	8001870 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e007      	b.n	8001880 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800187e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e9b      	ldrb	r3, [r3, #26]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0220 	orr.w	r2, r2, #32
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e007      	b.n	80018aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0220 	bic.w	r2, r2, #32
 80018a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7edb      	ldrb	r3, [r3, #27]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d108      	bne.n	80018c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0210 	bic.w	r2, r2, #16
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e007      	b.n	80018d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0210 	orr.w	r2, r2, #16
 80018d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7f1b      	ldrb	r3, [r3, #28]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d108      	bne.n	80018ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0208 	orr.w	r2, r2, #8
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e007      	b.n	80018fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0208 	bic.w	r2, r2, #8
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7f5b      	ldrb	r3, [r3, #29]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d108      	bne.n	8001918 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0204 	orr.w	r2, r2, #4
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e007      	b.n	8001928 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0204 	bic.w	r2, r2, #4
 8001926:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	ea42 0103 	orr.w	r1, r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	1e5a      	subs	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b08a      	sub	sp, #40	@ 0x28
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d07c      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d023      	beq.n	80019fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f983 	bl	8001cd4 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ce:	e016      	b.n	80019fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e2:	e00c      	b.n	80019fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f6:	e002      	b.n	80019fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f989 	bl	8001d10 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d024      	beq.n	8001a52 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f963 	bl	8001ce8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a22:	e016      	b.n	8001a52 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	e00c      	b.n	8001a52 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	e002      	b.n	8001a52 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f969 	bl	8001d24 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d024      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f943 	bl	8001cfc <HAL_CAN_TxMailbox2CompleteCallback>
 8001a76:	e016      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	e00c      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a9e:	e002      	b.n	8001aa6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f949 	bl	8001d38 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00c      	beq.n	8001aca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00b      	beq.n	8001aec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f93a 	bl	8001d60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0303 	and.w	r3, r3, #3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f921 	bl	8001d4c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00b      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d006      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2208      	movs	r2, #8
 8001b48:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f91c 	bl	8001d88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f903 	bl	8001d74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d006      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2210      	movs	r2, #16
 8001b88:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f906 	bl	8001d9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f8ff 	bl	8001db0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d07b      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d072      	beq.n	8001cac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	f043 0302 	orr.w	r3, r3, #2
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d043      	beq.n	8001cac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03e      	beq.n	8001cac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c34:	2b60      	cmp	r3, #96	@ 0x60
 8001c36:	d02b      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x32a>
 8001c38:	2b60      	cmp	r3, #96	@ 0x60
 8001c3a:	d82e      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c3c:	2b50      	cmp	r3, #80	@ 0x50
 8001c3e:	d022      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x320>
 8001c40:	2b50      	cmp	r3, #80	@ 0x50
 8001c42:	d82a      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c44:	2b40      	cmp	r3, #64	@ 0x40
 8001c46:	d019      	beq.n	8001c7c <HAL_CAN_IRQHandler+0x316>
 8001c48:	2b40      	cmp	r3, #64	@ 0x40
 8001c4a:	d826      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c4c:	2b30      	cmp	r3, #48	@ 0x30
 8001c4e:	d010      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x30c>
 8001c50:	2b30      	cmp	r3, #48	@ 0x30
 8001c52:	d822      	bhi.n	8001c9a <HAL_CAN_IRQHandler+0x334>
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d002      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x2f8>
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d005      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c5c:	e01d      	b.n	8001c9a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c66:	e019      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	f043 0310 	orr.w	r3, r3, #16
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c70:	e014      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	f043 0320 	orr.w	r3, r3, #32
 8001c78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c7a:	e00f      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c84:	e00a      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c8e:	e005      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c98:	e000      	b.n	8001c9c <HAL_CAN_IRQHandler+0x336>
            break;
 8001c9a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	699a      	ldr	r2, [r3, #24]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001caa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d008      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f87c 	bl	8001dc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	@ 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff3e 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff8e 	bl	8001ecc <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5d 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff31 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa2 	bl	8001f34 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e165      	b.n	80022e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	429a      	cmp	r2, r3
 8002032:	f040 8154 	bne.w	80022de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d005      	beq.n	800204e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204a:	2b02      	cmp	r3, #2
 800204c:	d130      	bne.n	80020b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002084:	2201      	movs	r2, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 0201 	and.w	r2, r3, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d017      	beq.n	80020ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2203      	movs	r2, #3
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d123      	bne.n	8002140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	08da      	lsrs	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	69b9      	ldr	r1, [r7, #24]
 800213c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80ae 	beq.w	80022de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b5d      	ldr	r3, [pc, #372]	@ (80022fc <HAL_GPIO_Init+0x300>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	4a5c      	ldr	r2, [pc, #368]	@ (80022fc <HAL_GPIO_Init+0x300>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002190:	6453      	str	r3, [r2, #68]	@ 0x44
 8002192:	4b5a      	ldr	r3, [pc, #360]	@ (80022fc <HAL_GPIO_Init+0x300>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800219e:	4a58      	ldr	r2, [pc, #352]	@ (8002300 <HAL_GPIO_Init+0x304>)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	220f      	movs	r2, #15
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002304 <HAL_GPIO_Init+0x308>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d025      	beq.n	8002216 <HAL_GPIO_Init+0x21a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002308 <HAL_GPIO_Init+0x30c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x216>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4d      	ldr	r2, [pc, #308]	@ (800230c <HAL_GPIO_Init+0x310>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x212>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002310 <HAL_GPIO_Init+0x314>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x20e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_GPIO_Init+0x318>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x20a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002318 <HAL_GPIO_Init+0x31c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x206>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a49      	ldr	r2, [pc, #292]	@ (800231c <HAL_GPIO_Init+0x320>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x202>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00c      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 80021fe:	2307      	movs	r3, #7
 8002200:	e00a      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 8002202:	2305      	movs	r3, #5
 8002204:	e008      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 8002206:	2304      	movs	r3, #4
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 800220a:	2303      	movs	r3, #3
 800220c:	e004      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 800220e:	2302      	movs	r3, #2
 8002210:	e002      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x21c>
 8002216:	2300      	movs	r3, #0
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f002 0203 	and.w	r2, r2, #3
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	4093      	lsls	r3, r2
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002228:	4935      	ldr	r1, [pc, #212]	@ (8002300 <HAL_GPIO_Init+0x304>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_GPIO_Init+0x324>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a31      	ldr	r2, [pc, #196]	@ (8002320 <HAL_GPIO_Init+0x324>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_GPIO_Init+0x324>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <HAL_GPIO_Init+0x324>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228a:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <HAL_GPIO_Init+0x324>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002320 <HAL_GPIO_Init+0x324>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_GPIO_Init+0x324>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d8:	4a11      	ldr	r2, [pc, #68]	@ (8002320 <HAL_GPIO_Init+0x324>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	f67f ae96 	bls.w	8002018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40013800 	.word	0x40013800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40021000 	.word	0x40021000
 8002318:	40021400 	.word	0x40021400
 800231c:	40021800 	.word	0x40021800
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	4013      	ands	r3, r2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d002      	beq.n	8002342 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800233c:	2301      	movs	r3, #1
 800233e:	73fb      	strb	r3, [r7, #15]
 8002340:	e001      	b.n	8002346 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
 8002360:	4613      	mov	r3, r2
 8002362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002364:	787b      	ldrb	r3, [r7, #1]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002370:	e003      	b.n	800237a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	041a      	lsls	r2, r3, #16
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	619a      	str	r2, [r3, #24]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 030f 	and.w	r3, r3, #15
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fd92 	bl	8000fa0 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fd8e 	bl	8000fa0 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f855 	bl	80025bc <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	@ (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fcf2 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08005244 	.word	0x08005244
 800254c:	20000000 	.word	0x20000000
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002558:	4b03      	ldr	r3, [pc, #12]	@ (8002568 <HAL_RCC_GetHCLKFreq+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000000 	.word	0x20000000

0800256c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002570:	f7ff fff0 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	@ (800258c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	@ (8002590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	08005254 	.word	0x08005254

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002598:	f7ff ffdc 	bl	8002554 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0b5b      	lsrs	r3, r3, #13
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	@ (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08005254 	.word	0x08005254

080025bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b0ae      	sub	sp, #184	@ 0xb8
 80025c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e2:	4bcb      	ldr	r3, [pc, #812]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	f200 8206 	bhi.w	80029fc <HAL_RCC_GetSysClockFreq+0x440>
 80025f0:	a201      	add	r2, pc, #4	@ (adr r2, 80025f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f6:	bf00      	nop
 80025f8:	0800262d 	.word	0x0800262d
 80025fc:	080029fd 	.word	0x080029fd
 8002600:	080029fd 	.word	0x080029fd
 8002604:	080029fd 	.word	0x080029fd
 8002608:	08002635 	.word	0x08002635
 800260c:	080029fd 	.word	0x080029fd
 8002610:	080029fd 	.word	0x080029fd
 8002614:	080029fd 	.word	0x080029fd
 8002618:	0800263d 	.word	0x0800263d
 800261c:	080029fd 	.word	0x080029fd
 8002620:	080029fd 	.word	0x080029fd
 8002624:	080029fd 	.word	0x080029fd
 8002628:	0800282d 	.word	0x0800282d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4bb9      	ldr	r3, [pc, #740]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x358>)
 800262e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002632:	e1e7      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002634:	4bb8      	ldr	r3, [pc, #736]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002636:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800263a:	e1e3      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4bb4      	ldr	r3, [pc, #720]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002644:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002648:	4bb1      	ldr	r3, [pc, #708]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d071      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4bae      	ldr	r3, [pc, #696]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002660:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4621      	mov	r1, r4
 8002694:	1a51      	subs	r1, r2, r1
 8002696:	6439      	str	r1, [r7, #64]	@ 0x40
 8002698:	4629      	mov	r1, r5
 800269a:	eb63 0301 	sbc.w	r3, r3, r1
 800269e:	647b      	str	r3, [r7, #68]	@ 0x44
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026ac:	4649      	mov	r1, r9
 80026ae:	018b      	lsls	r3, r1, #6
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b6:	4641      	mov	r1, r8
 80026b8:	018a      	lsls	r2, r1, #6
 80026ba:	4641      	mov	r1, r8
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026c0:	4649      	mov	r1, r9
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026d4:	4649      	mov	r1, r9
 80026d6:	00cb      	lsls	r3, r1, #3
 80026d8:	4641      	mov	r1, r8
 80026da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026de:	4641      	mov	r1, r8
 80026e0:	00ca      	lsls	r2, r1, #3
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	4622      	mov	r2, r4
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80026ee:	462b      	mov	r3, r5
 80026f0:	460a      	mov	r2, r1
 80026f2:	eb42 0303 	adc.w	r3, r2, r3
 80026f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002704:	4629      	mov	r1, r5
 8002706:	024b      	lsls	r3, r1, #9
 8002708:	4621      	mov	r1, r4
 800270a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800270e:	4621      	mov	r1, r4
 8002710:	024a      	lsls	r2, r1, #9
 8002712:	4610      	mov	r0, r2
 8002714:	4619      	mov	r1, r3
 8002716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800271a:	2200      	movs	r2, #0
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002720:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002724:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002728:	f7fd fd72 	bl	8000210 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002736:	e067      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002738:	4b75      	ldr	r3, [pc, #468]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	099b      	lsrs	r3, r3, #6
 800273e:	2200      	movs	r2, #0
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002744:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002748:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002750:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002752:	2300      	movs	r3, #0
 8002754:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002756:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0159      	lsls	r1, r3, #5
 8002768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276c:	0150      	lsls	r0, r2, #5
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4621      	mov	r1, r4
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002778:	4629      	mov	r1, r5
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800278c:	4649      	mov	r1, r9
 800278e:	018b      	lsls	r3, r1, #6
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002796:	4641      	mov	r1, r8
 8002798:	018a      	lsls	r2, r1, #6
 800279a:	4641      	mov	r1, r8
 800279c:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a0:	4649      	mov	r1, r9
 80027a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ba:	4692      	mov	sl, r2
 80027bc:	469b      	mov	fp, r3
 80027be:	4623      	mov	r3, r4
 80027c0:	eb1a 0303 	adds.w	r3, sl, r3
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	462b      	mov	r3, r5
 80027c8:	eb4b 0303 	adc.w	r3, fp, r3
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027da:	4629      	mov	r1, r5
 80027dc:	028b      	lsls	r3, r1, #10
 80027de:	4621      	mov	r1, r4
 80027e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e4:	4621      	mov	r1, r4
 80027e6:	028a      	lsls	r2, r1, #10
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f0:	2200      	movs	r2, #0
 80027f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80027f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80027f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027fa:	f7fd fd09 	bl	8000210 <__aeabi_uldivmod>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4613      	mov	r3, r2
 8002804:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002808:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c1b      	lsrs	r3, r3, #16
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	3301      	adds	r3, #1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800281a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800281e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800282a:	e0eb      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800282c:	4b38      	ldr	r3, [pc, #224]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002838:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d06b      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800284e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002856:	663b      	str	r3, [r7, #96]	@ 0x60
 8002858:	2300      	movs	r3, #0
 800285a:	667b      	str	r3, [r7, #100]	@ 0x64
 800285c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002860:	4622      	mov	r2, r4
 8002862:	462b      	mov	r3, r5
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	0159      	lsls	r1, r3, #5
 800286e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002872:	0150      	lsls	r0, r2, #5
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4621      	mov	r1, r4
 800287a:	1a51      	subs	r1, r2, r1
 800287c:	61b9      	str	r1, [r7, #24]
 800287e:	4629      	mov	r1, r5
 8002880:	eb63 0301 	sbc.w	r3, r3, r1
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002892:	4659      	mov	r1, fp
 8002894:	018b      	lsls	r3, r1, #6
 8002896:	4651      	mov	r1, sl
 8002898:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289c:	4651      	mov	r1, sl
 800289e:	018a      	lsls	r2, r1, #6
 80028a0:	4651      	mov	r1, sl
 80028a2:	ebb2 0801 	subs.w	r8, r2, r1
 80028a6:	4659      	mov	r1, fp
 80028a8:	eb63 0901 	sbc.w	r9, r3, r1
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c0:	4690      	mov	r8, r2
 80028c2:	4699      	mov	r9, r3
 80028c4:	4623      	mov	r3, r4
 80028c6:	eb18 0303 	adds.w	r3, r8, r3
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	462b      	mov	r3, r5
 80028ce:	eb49 0303 	adc.w	r3, r9, r3
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028e0:	4629      	mov	r1, r5
 80028e2:	024b      	lsls	r3, r1, #9
 80028e4:	4621      	mov	r1, r4
 80028e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ea:	4621      	mov	r1, r4
 80028ec:	024a      	lsls	r2, r1, #9
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028f6:	2200      	movs	r2, #0
 80028f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002900:	f7fd fc86 	bl	8000210 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800290e:	e065      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x420>
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x458>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	099b      	lsrs	r3, r3, #6
 8002922:	2200      	movs	r2, #0
 8002924:	4618      	mov	r0, r3
 8002926:	4611      	mov	r1, r2
 8002928:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800292c:	653b      	str	r3, [r7, #80]	@ 0x50
 800292e:	2300      	movs	r3, #0
 8002930:	657b      	str	r3, [r7, #84]	@ 0x54
 8002932:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002936:	4642      	mov	r2, r8
 8002938:	464b      	mov	r3, r9
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	0159      	lsls	r1, r3, #5
 8002944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002948:	0150      	lsls	r0, r2, #5
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4641      	mov	r1, r8
 8002950:	1a51      	subs	r1, r2, r1
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	4649      	mov	r1, r9
 8002956:	eb63 0301 	sbc.w	r3, r3, r1
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002968:	4659      	mov	r1, fp
 800296a:	018b      	lsls	r3, r1, #6
 800296c:	4651      	mov	r1, sl
 800296e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002972:	4651      	mov	r1, sl
 8002974:	018a      	lsls	r2, r1, #6
 8002976:	4651      	mov	r1, sl
 8002978:	1a54      	subs	r4, r2, r1
 800297a:	4659      	mov	r1, fp
 800297c:	eb63 0501 	sbc.w	r5, r3, r1
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	00eb      	lsls	r3, r5, #3
 800298a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800298e:	00e2      	lsls	r2, r4, #3
 8002990:	4614      	mov	r4, r2
 8002992:	461d      	mov	r5, r3
 8002994:	4643      	mov	r3, r8
 8002996:	18e3      	adds	r3, r4, r3
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	464b      	mov	r3, r9
 800299c:	eb45 0303 	adc.w	r3, r5, r3
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ae:	4629      	mov	r1, r5
 80029b0:	028b      	lsls	r3, r1, #10
 80029b2:	4621      	mov	r1, r4
 80029b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029b8:	4621      	mov	r1, r4
 80029ba:	028a      	lsls	r2, r1, #10
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c4:	2200      	movs	r2, #0
 80029c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029ce:	f7fd fc1f 	bl	8000210 <__aeabi_uldivmod>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4613      	mov	r3, r2
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x458>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	0f1b      	lsrs	r3, r3, #28
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80029ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0x45c>)
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	37b8      	adds	r7, #184	@ 0xb8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	40023800 	.word	0x40023800
 8002a18:	00f42400 	.word	0x00f42400

08002a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e28d      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8083 	beq.w	8002b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a3c:	4b94      	ldr	r3, [pc, #592]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d019      	beq.n	8002a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a48:	4b91      	ldr	r3, [pc, #580]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d106      	bne.n	8002a62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a54:	4b8e      	ldr	r3, [pc, #568]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a60:	d00c      	beq.n	8002a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b8b      	ldr	r3, [pc, #556]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d112      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6e:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a7c:	4b84      	ldr	r3, [pc, #528]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d05b      	beq.n	8002b40 <HAL_RCC_OscConfig+0x124>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d157      	bne.n	8002b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e25a      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a9c:	d106      	bne.n	8002aac <HAL_RCC_OscConfig+0x90>
 8002a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7b      	ldr	r2, [pc, #492]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xb4>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b73      	ldr	r3, [pc, #460]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a72      	ldr	r2, [pc, #456]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xcc>
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fa56 	bl	8000fa0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe fa52 	bl	8000fa0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e21f      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xdc>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fa42 	bl	8000fa0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe fa3e 	bl	8000fa0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e20b      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b57      	ldr	r3, [pc, #348]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x104>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d06f      	beq.n	8002c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b4e:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d017      	beq.n	8002b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x186>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1d3      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	@ (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe f9eb 	bl	8000fa0 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe f9e7 	bl	8000fa0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1b4      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <HAL_RCC_OscConfig+0x278>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe f9ca 	bl	8000fa0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe f9c6 	bl	8000fa0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e193      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f9aa 	bl	8000fa0 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe f9a6 	bl	8000fa0 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e173      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <HAL_RCC_OscConfig+0x274>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x234>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_OscConfig+0x27c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe f993 	bl	8000fa0 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f98f 	bl	8000fa0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e15c      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b83      	ldr	r3, [pc, #524]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7f      	ldr	r3, [pc, #508]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b79      	ldr	r3, [pc, #484]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f94f 	bl	8000fa0 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe f94b 	bl	8000fa0 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e118      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6c      	ldr	r3, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x4b0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x31e>
 8002d2c:	4b66      	ldr	r3, [pc, #408]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d30:	4a65      	ldr	r2, [pc, #404]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x340>
 8002d42:	4b61      	ldr	r3, [pc, #388]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a60      	ldr	r2, [pc, #384]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x358>
 8002d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a59      	ldr	r2, [pc, #356]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d68:	4b57      	ldr	r3, [pc, #348]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6c:	4a56      	ldr	r2, [pc, #344]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f910 	bl	8000fa0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe f90c 	bl	8000fa0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0d7      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x368>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7fe f8fa 	bl	8000fa0 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f8f6 	bl	8000fa0 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0c1      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b40      	ldr	r3, [pc, #256]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80ad 	beq.w	8002f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d060      	beq.n	8002ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d145      	bne.n	8002e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b33      	ldr	r3, [pc, #204]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe f8ca 	bl	8000fa0 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f8c6 	bl	8000fa0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e093      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	071b      	lsls	r3, r3, #28
 8002e5a:	491b      	ldr	r1, [pc, #108]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe f89b 	bl	8000fa0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e6e:	f7fe f897 	bl	8000fa0 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e064      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x452>
 8002e8c:	e05c      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_RCC_OscConfig+0x4b4>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe f884 	bl	8000fa0 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe f880 	bl	8000fa0 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04d      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x480>
 8002eba:	e045      	b.n	8002f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e040      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ed4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f54 <HAL_RCC_OscConfig+0x538>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d030      	beq.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d129      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d122      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d119      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10f      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d107      	bne.n	8002f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e042      	b.n	8002ff0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fe72 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2224      	movs	r2, #36	@ 0x24
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f82b 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695a      	ldr	r2, [r3, #20]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ffc:	b0c0      	sub	sp, #256	@ 0x100
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	ea40 0301 	orr.w	r3, r0, r1
 8003020:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003050:	f021 010c 	bic.w	r1, r1, #12
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800305e:	430b      	orrs	r3, r1
 8003060:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003072:	6999      	ldr	r1, [r3, #24]
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	ea40 0301 	orr.w	r3, r0, r1
 800307e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8f      	ldr	r3, [pc, #572]	@ (80032c4 <UART_SetConfig+0x2cc>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <UART_SetConfig+0xa0>
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b8d      	ldr	r3, [pc, #564]	@ (80032c8 <UART_SetConfig+0x2d0>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d104      	bne.n	80030a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff fa7c 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800309c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030a0:	e003      	b.n	80030aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030a2:	f7ff fa63 	bl	800256c <HAL_RCC_GetPCLK1Freq>
 80030a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030b4:	f040 810c 	bne.w	80032d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	1891      	adds	r1, r2, r2
 80030d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030d2:	415b      	adcs	r3, r3
 80030d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030da:	4621      	mov	r1, r4
 80030dc:	eb12 0801 	adds.w	r8, r2, r1
 80030e0:	4629      	mov	r1, r5
 80030e2:	eb43 0901 	adc.w	r9, r3, r1
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fa:	4690      	mov	r8, r2
 80030fc:	4699      	mov	r9, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	eb18 0303 	adds.w	r3, r8, r3
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003108:	462b      	mov	r3, r5
 800310a:	eb49 0303 	adc.w	r3, r9, r3
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800311e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003126:	460b      	mov	r3, r1
 8003128:	18db      	adds	r3, r3, r3
 800312a:	653b      	str	r3, [r7, #80]	@ 0x50
 800312c:	4613      	mov	r3, r2
 800312e:	eb42 0303 	adc.w	r3, r2, r3
 8003132:	657b      	str	r3, [r7, #84]	@ 0x54
 8003134:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003138:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800313c:	f7fd f868 	bl	8000210 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <UART_SetConfig+0x2d4>)
 8003146:	fba3 2302 	umull	r2, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	011c      	lsls	r4, r3, #4
 800314e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003158:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800315c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	1891      	adds	r1, r2, r2
 8003166:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003168:	415b      	adcs	r3, r3
 800316a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800316c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003170:	4641      	mov	r1, r8
 8003172:	eb12 0a01 	adds.w	sl, r2, r1
 8003176:	4649      	mov	r1, r9
 8003178:	eb43 0b01 	adc.w	fp, r3, r1
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003188:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800318c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003190:	4692      	mov	sl, r2
 8003192:	469b      	mov	fp, r3
 8003194:	4643      	mov	r3, r8
 8003196:	eb1a 0303 	adds.w	r3, sl, r3
 800319a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800319e:	464b      	mov	r3, r9
 80031a0:	eb4b 0303 	adc.w	r3, fp, r3
 80031a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031bc:	460b      	mov	r3, r1
 80031be:	18db      	adds	r3, r3, r3
 80031c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80031c2:	4613      	mov	r3, r2
 80031c4:	eb42 0303 	adc.w	r3, r2, r3
 80031c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031d2:	f7fd f81d 	bl	8000210 <__aeabi_uldivmod>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	4b3b      	ldr	r3, [pc, #236]	@ (80032cc <UART_SetConfig+0x2d4>)
 80031de:	fba3 2301 	umull	r2, r3, r3, r1
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	2264      	movs	r2, #100	@ 0x64
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	1acb      	subs	r3, r1, r3
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031f2:	4b36      	ldr	r3, [pc, #216]	@ (80032cc <UART_SetConfig+0x2d4>)
 80031f4:	fba3 2302 	umull	r2, r3, r3, r2
 80031f8:	095b      	lsrs	r3, r3, #5
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003200:	441c      	add	r4, r3
 8003202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003206:	2200      	movs	r2, #0
 8003208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800320c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003210:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	1891      	adds	r1, r2, r2
 800321a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800321c:	415b      	adcs	r3, r3
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003220:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003224:	4641      	mov	r1, r8
 8003226:	1851      	adds	r1, r2, r1
 8003228:	6339      	str	r1, [r7, #48]	@ 0x30
 800322a:	4649      	mov	r1, r9
 800322c:	414b      	adcs	r3, r1
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800323c:	4659      	mov	r1, fp
 800323e:	00cb      	lsls	r3, r1, #3
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003246:	4651      	mov	r1, sl
 8003248:	00ca      	lsls	r2, r1, #3
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	4603      	mov	r3, r0
 8003250:	4642      	mov	r2, r8
 8003252:	189b      	adds	r3, r3, r2
 8003254:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003258:	464b      	mov	r3, r9
 800325a:	460a      	mov	r2, r1
 800325c:	eb42 0303 	adc.w	r3, r2, r3
 8003260:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003270:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003274:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003278:	460b      	mov	r3, r1
 800327a:	18db      	adds	r3, r3, r3
 800327c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800327e:	4613      	mov	r3, r2
 8003280:	eb42 0303 	adc.w	r3, r2, r3
 8003284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003286:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800328a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800328e:	f7fc ffbf 	bl	8000210 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <UART_SetConfig+0x2d4>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	@ 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	3332      	adds	r3, #50	@ 0x32
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <UART_SetConfig+0x2d4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 0207 	and.w	r2, r3, #7
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4422      	add	r2, r4
 80032be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032c0:	e106      	b.n	80034d0 <UART_SetConfig+0x4d8>
 80032c2:	bf00      	nop
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032e2:	4642      	mov	r2, r8
 80032e4:	464b      	mov	r3, r9
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	6239      	str	r1, [r7, #32]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f2:	4641      	mov	r1, r8
 80032f4:	1854      	adds	r4, r2, r1
 80032f6:	4649      	mov	r1, r9
 80032f8:	eb43 0501 	adc.w	r5, r3, r1
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	00eb      	lsls	r3, r5, #3
 8003306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800330a:	00e2      	lsls	r2, r4, #3
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	4643      	mov	r3, r8
 8003312:	18e3      	adds	r3, r4, r3
 8003314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003318:	464b      	mov	r3, r9
 800331a:	eb45 0303 	adc.w	r3, r5, r3
 800331e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800332e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800333e:	4629      	mov	r1, r5
 8003340:	008b      	lsls	r3, r1, #2
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003348:	4621      	mov	r1, r4
 800334a:	008a      	lsls	r2, r1, #2
 800334c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003350:	f7fc ff5e 	bl	8000210 <__aeabi_uldivmod>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4b60      	ldr	r3, [pc, #384]	@ (80034dc <UART_SetConfig+0x4e4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	011c      	lsls	r4, r3, #4
 8003362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003366:	2200      	movs	r2, #0
 8003368:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800336c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003370:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003374:	4642      	mov	r2, r8
 8003376:	464b      	mov	r3, r9
 8003378:	1891      	adds	r1, r2, r2
 800337a:	61b9      	str	r1, [r7, #24]
 800337c:	415b      	adcs	r3, r3
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003384:	4641      	mov	r1, r8
 8003386:	1851      	adds	r1, r2, r1
 8003388:	6139      	str	r1, [r7, #16]
 800338a:	4649      	mov	r1, r9
 800338c:	414b      	adcs	r3, r1
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800339c:	4659      	mov	r1, fp
 800339e:	00cb      	lsls	r3, r1, #3
 80033a0:	4651      	mov	r1, sl
 80033a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a6:	4651      	mov	r1, sl
 80033a8:	00ca      	lsls	r2, r1, #3
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	4642      	mov	r2, r8
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033dc:	4649      	mov	r1, r9
 80033de:	008b      	lsls	r3, r1, #2
 80033e0:	4641      	mov	r1, r8
 80033e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e6:	4641      	mov	r1, r8
 80033e8:	008a      	lsls	r2, r1, #2
 80033ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033ee:	f7fc ff0f 	bl	8000210 <__aeabi_uldivmod>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	4b38      	ldr	r3, [pc, #224]	@ (80034dc <UART_SetConfig+0x4e4>)
 80033fa:	fba3 2301 	umull	r2, r3, r3, r1
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	2264      	movs	r2, #100	@ 0x64
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	1acb      	subs	r3, r1, r3
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	3332      	adds	r3, #50	@ 0x32
 800340c:	4a33      	ldr	r2, [pc, #204]	@ (80034dc <UART_SetConfig+0x4e4>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003418:	441c      	add	r4, r3
 800341a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800341e:	2200      	movs	r2, #0
 8003420:	673b      	str	r3, [r7, #112]	@ 0x70
 8003422:	677a      	str	r2, [r7, #116]	@ 0x74
 8003424:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003428:	4642      	mov	r2, r8
 800342a:	464b      	mov	r3, r9
 800342c:	1891      	adds	r1, r2, r2
 800342e:	60b9      	str	r1, [r7, #8]
 8003430:	415b      	adcs	r3, r3
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003438:	4641      	mov	r1, r8
 800343a:	1851      	adds	r1, r2, r1
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	4649      	mov	r1, r9
 8003440:	414b      	adcs	r3, r1
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003450:	4659      	mov	r1, fp
 8003452:	00cb      	lsls	r3, r1, #3
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800345a:	4651      	mov	r1, sl
 800345c:	00ca      	lsls	r2, r1, #3
 800345e:	4610      	mov	r0, r2
 8003460:	4619      	mov	r1, r3
 8003462:	4603      	mov	r3, r0
 8003464:	4642      	mov	r2, r8
 8003466:	189b      	adds	r3, r3, r2
 8003468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800346a:	464b      	mov	r3, r9
 800346c:	460a      	mov	r2, r1
 800346e:	eb42 0303 	adc.w	r3, r2, r3
 8003472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	663b      	str	r3, [r7, #96]	@ 0x60
 800347e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800348c:	4649      	mov	r1, r9
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003496:	4641      	mov	r1, r8
 8003498:	008a      	lsls	r2, r1, #2
 800349a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800349e:	f7fc feb7 	bl	8000210 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <UART_SetConfig+0x4e4>)
 80034a8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	2164      	movs	r1, #100	@ 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	3332      	adds	r3, #50	@ 0x32
 80034ba:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <UART_SetConfig+0x4e4>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	f003 020f 	and.w	r2, r3, #15
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4422      	add	r2, r4
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034d6:	46bd      	mov	sp, r7
 80034d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034dc:	51eb851f 	.word	0x51eb851f

080034e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80034ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f2:	2b84      	cmp	r3, #132	@ 0x84
 80034f4:	d005      	beq.n	8003502 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80034f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	3303      	adds	r3, #3
 8003500:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003516:	f3ef 8305 	mrs	r3, IPSR
 800351a:	607b      	str	r3, [r7, #4]
  return(result);
 800351c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf14      	ite	ne
 8003522:	2301      	movne	r3, #1
 8003524:	2300      	moveq	r3, #0
 8003526:	b2db      	uxtb	r3, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003538:	f000 fb8a 	bl	8003c50 <vTaskStartScheduler>
  
  return osOK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	bd80      	pop	{r7, pc}

08003542 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003544:	b089      	sub	sp, #36	@ 0x24
 8003546:	af04      	add	r7, sp, #16
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <osThreadCreate+0x54>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01c      	beq.n	8003596 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685c      	ldr	r4, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691e      	ldr	r6, [r3, #16]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff ffb6 	bl	80034e0 <makeFreeRtosPriority>
 8003574:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800357e:	9202      	str	r2, [sp, #8]
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	9100      	str	r1, [sp, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4632      	mov	r2, r6
 8003588:	4629      	mov	r1, r5
 800358a:	4620      	mov	r0, r4
 800358c:	f000 f97a 	bl	8003884 <xTaskCreateStatic>
 8003590:	4603      	mov	r3, r0
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e01c      	b.n	80035d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685c      	ldr	r4, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035a2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff98 	bl	80034e0 <makeFreeRtosPriority>
 80035b0:	4602      	mov	r2, r0
 80035b2:	f107 030c 	add.w	r3, r7, #12
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	9200      	str	r2, [sp, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	4632      	mov	r2, r6
 80035be:	4629      	mov	r1, r5
 80035c0:	4620      	mov	r0, r4
 80035c2:	f000 f9bf 	bl	8003944 <xTaskCreate>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d001      	beq.n	80035d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80035d0:	68fb      	ldr	r3, [r7, #12]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080035da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <osDelay+0x16>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	e000      	b.n	80035f2 <osDelay+0x18>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 faf6 	bl	8003be4 <vTaskDelay>
  
  return osOK;
 80035f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8003616:	f7ff ff7b 	bl	8003510 <inHandlerMode>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01c      	beq.n	800365a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	f107 0208 	add.w	r2, r7, #8
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	2201      	movs	r2, #1
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 ff5d 	bl	80044f0 <xTaskGenericNotifyFromISR>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d002      	beq.n	8003642 <osSignalSet+0x3e>
      return 0x80000000;
 800363c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003640:	e019      	b.n	8003676 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d015      	beq.n	8003674 <osSignalSet+0x70>
 8003648:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <osSignalSet+0x7c>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	e00c      	b.n	8003674 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	2201      	movs	r2, #1
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fe82 	bl	800436c <xTaskGenericNotify>
 8003668:	4603      	mov	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <osSignalSet+0x70>
    return 0x80000000;
 800366e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003672:	e000      	b.n	8003676 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003674:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000ed04 	.word	0xe000ed04

08003684 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b089      	sub	sp, #36	@ 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d103      	bne.n	80036a8 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 80036a0:	f04f 33ff 	mov.w	r3, #4294967295
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	e009      	b.n	80036bc <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d006      	beq.n	80036bc <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <osSignalWait+0x38>
      ticks = 1;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80036bc:	f7ff ff28 	bl	8003510 <inHandlerMode>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80036c6:	2382      	movs	r3, #130	@ 0x82
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	e01b      	b.n	8003704 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	f107 0310 	add.w	r3, r7, #16
 80036d2:	1d1a      	adds	r2, r3, #4
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2000      	movs	r0, #0
 80036d8:	f000 fde8 	bl	80042ac <xTaskNotifyWait>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d008      	beq.n	80036f4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <osSignalWait+0x6a>
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	e00a      	b.n	8003704 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80036ee:	2340      	movs	r3, #64	@ 0x40
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	e007      	b.n	8003704 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	da02      	bge.n	8003700 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80036fa:	2386      	movs	r3, #134	@ 0x86
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	e001      	b.n	8003704 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8003700:	2308      	movs	r3, #8
 8003702:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	461c      	mov	r4, r3
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	3724      	adds	r7, #36	@ 0x24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd90      	pop	{r4, r7, pc}

0800371c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 0208 	add.w	r2, r3, #8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 0208 	add.w	r2, r3, #8
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f103 0208 	add.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003776:	b480      	push	{r7}
 8003778:	b085      	sub	sp, #20
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	601a      	str	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d103      	bne.n	80037de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	e00c      	b.n	80037f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3308      	adds	r3, #8
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e002      	b.n	80037ec <vListInsert+0x2e>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d2f6      	bcs.n	80037e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6892      	ldr	r2, [r2, #8]
 8003846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6852      	ldr	r2, [r2, #4]
 8003850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	429a      	cmp	r2, r3
 800385a:	d103      	bne.n	8003864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	1e5a      	subs	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08e      	sub	sp, #56	@ 0x38
 8003888:	af04      	add	r7, sp, #16
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	61fb      	str	r3, [r7, #28]
}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	e7fd      	b.n	80038ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038ce:	23a0      	movs	r3, #160	@ 0xa0
 80038d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80038d6:	d00b      	beq.n	80038f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	61bb      	str	r3, [r7, #24]
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01e      	beq.n	8003936 <xTaskCreateStatic+0xb2>
 80038f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01b      	beq.n	8003936 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003900:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390a:	2202      	movs	r2, #2
 800390c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003910:	2300      	movs	r3, #0
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	9302      	str	r3, [sp, #8]
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f851 	bl	80039d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800392e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003930:	f000 f8ee 	bl	8003b10 <prvAddNewTaskToReadyList>
 8003934:	e001      	b.n	800393a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800393a:	697b      	ldr	r3, [r7, #20]
	}
 800393c:	4618      	mov	r0, r3
 800393e:	3728      	adds	r7, #40	@ 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	@ 0x30
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4618      	mov	r0, r3
 800395a:	f001 f967 	bl	8004c2c <pvPortMalloc>
 800395e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003966:	20a0      	movs	r0, #160	@ 0xa0
 8003968:	f001 f960 	bl	8004c2c <pvPortMalloc>
 800396c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
 800397a:	e005      	b.n	8003988 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f001 fa23 	bl	8004dc8 <vPortFree>
 8003982:	e001      	b.n	8003988 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d017      	beq.n	80039be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	2300      	movs	r3, #0
 800399a:	9303      	str	r3, [sp, #12]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f80f 	bl	80039d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039b2:	69f8      	ldr	r0, [r7, #28]
 80039b4:	f000 f8ac 	bl	8003b10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039b8:	2301      	movs	r3, #1
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e002      	b.n	80039c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039c4:	69bb      	ldr	r3, [r7, #24]
	}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e8:	3b01      	subs	r3, #1
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f023 0307 	bic.w	r3, r3, #7
 80039f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	f3bf 8f4f 	dsb	sy
 8003a12:	617b      	str	r3, [r7, #20]
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	e7fd      	b.n	8003a16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01f      	beq.n	8003a60 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e012      	b.n	8003a4c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	7819      	ldrb	r1, [r3, #0]
 8003a2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4413      	add	r3, r2
 8003a34:	3334      	adds	r3, #52	@ 0x34
 8003a36:	460a      	mov	r2, r1
 8003a38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d006      	beq.n	8003a54 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	d9e9      	bls.n	8003a26 <prvInitialiseNewTask+0x56>
 8003a52:	e000      	b.n	8003a56 <prvInitialiseNewTask+0x86>
			{
				break;
 8003a54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a5e:	e003      	b.n	8003a68 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6a:	2b06      	cmp	r3, #6
 8003a6c:	d901      	bls.n	8003a72 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a6e:	2306      	movs	r3, #6
 8003a70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	2200      	movs	r2, #0
 8003a82:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	3304      	adds	r3, #4
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fe67 	bl	800375c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	3318      	adds	r3, #24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff fe62 	bl	800375c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	f1c3 0207 	rsb	r2, r3, #7
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	334c      	adds	r3, #76	@ 0x4c
 8003ac2:	224c      	movs	r2, #76	@ 0x4c
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fa9e 	bl	8005008 <memset>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ace:	4a0d      	ldr	r2, [pc, #52]	@ (8003b04 <prvInitialiseNewTask+0x134>)
 8003ad0:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b08 <prvInitialiseNewTask+0x138>)
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	4a0c      	ldr	r2, [pc, #48]	@ (8003b0c <prvInitialiseNewTask+0x13c>)
 8003adc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	69b8      	ldr	r0, [r7, #24]
 8003ae4:	f000 fe50 	bl	8004788 <pxPortInitialiseStack>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003afa:	bf00      	nop
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	2000413c 	.word	0x2000413c
 8003b08:	200041a4 	.word	0x200041a4
 8003b0c:	2000420c 	.word	0x2000420c

08003b10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b18:	f000 ff66 	bl	80049e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc8 <prvAddNewTaskToReadyList+0xb8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	4a29      	ldr	r2, [pc, #164]	@ (8003bc8 <prvAddNewTaskToReadyList+0xb8>)
 8003b24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b2e:	4a27      	ldr	r2, [pc, #156]	@ (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b34:	4b24      	ldr	r3, [pc, #144]	@ (8003bc8 <prvAddNewTaskToReadyList+0xb8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d110      	bne.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b3c:	f000 fad4 	bl	80040e8 <prvInitialiseTaskLists>
 8003b40:	e00d      	b.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b42:	4b23      	ldr	r3, [pc, #140]	@ (8003bd0 <prvAddNewTaskToReadyList+0xc0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d802      	bhi.n	8003b5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b58:	4a1c      	ldr	r2, [pc, #112]	@ (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <prvAddNewTaskToReadyList+0xc4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3301      	adds	r3, #1
 8003b64:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <prvAddNewTaskToReadyList+0xc4>)
 8003b66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <prvAddNewTaskToReadyList+0xc8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <prvAddNewTaskToReadyList+0xc8>)
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4a15      	ldr	r2, [pc, #84]	@ (8003bdc <prvAddNewTaskToReadyList+0xcc>)
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4610      	mov	r0, r2
 8003b92:	f7ff fdf0 	bl	8003776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b96:	f000 ff59 	bl	8004a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <prvAddNewTaskToReadyList+0xc0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00e      	beq.n	8003bc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <prvAddNewTaskToReadyList+0xbc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d207      	bcs.n	8003bc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <prvAddNewTaskToReadyList+0xd0>)
 8003bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200004e8 	.word	0x200004e8
 8003bcc:	200003e8 	.word	0x200003e8
 8003bd0:	200004f4 	.word	0x200004f4
 8003bd4:	20000504 	.word	0x20000504
 8003bd8:	200004f0 	.word	0x200004f0
 8003bdc:	200003ec 	.word	0x200003ec
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bf6:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <vTaskDelay+0x64>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <vTaskDelay+0x32>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	60bb      	str	r3, [r7, #8]
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	e7fd      	b.n	8003c12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c16:	f000 f885 	bl	8003d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fd4d 	bl	80046bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c22:	f000 f88d 	bl	8003d40 <xTaskResumeAll>
 8003c26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c2e:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <vTaskDelay+0x68>)
 8003c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000510 	.word	0x20000510
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	@ 0x28
 8003c54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c5e:	463a      	mov	r2, r7
 8003c60:	1d39      	adds	r1, r7, #4
 8003c62:	f107 0308 	add.w	r3, r7, #8
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fc fc4a 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c6c:	6839      	ldr	r1, [r7, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	9202      	str	r2, [sp, #8]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	4921      	ldr	r1, [pc, #132]	@ (8003d04 <vTaskStartScheduler+0xb4>)
 8003c80:	4821      	ldr	r0, [pc, #132]	@ (8003d08 <vTaskStartScheduler+0xb8>)
 8003c82:	f7ff fdff 	bl	8003884 <xTaskCreateStatic>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a20      	ldr	r2, [pc, #128]	@ (8003d0c <vTaskStartScheduler+0xbc>)
 8003c8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <vTaskStartScheduler+0xbc>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e001      	b.n	8003c9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11b      	bne.n	8003cdc <vTaskStartScheduler+0x8c>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	613b      	str	r3, [r7, #16]
}
 8003cb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003cb8:	4b15      	ldr	r3, [pc, #84]	@ (8003d10 <vTaskStartScheduler+0xc0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	334c      	adds	r3, #76	@ 0x4c
 8003cbe:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <vTaskStartScheduler+0xc4>)
 8003cc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <vTaskStartScheduler+0xc8>)
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <vTaskStartScheduler+0xcc>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cd0:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <vTaskStartScheduler+0xd0>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cd6:	f000 fde3 	bl	80048a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cda:	e00f      	b.n	8003cfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d10b      	bne.n	8003cfc <vTaskStartScheduler+0xac>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <vTaskStartScheduler+0xa8>
}
 8003cfc:	bf00      	nop
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	0800523c 	.word	0x0800523c
 8003d08:	080040b9 	.word	0x080040b9
 8003d0c:	2000050c 	.word	0x2000050c
 8003d10:	200003e8 	.word	0x200003e8
 8003d14:	20000010 	.word	0x20000010
 8003d18:	20000508 	.word	0x20000508
 8003d1c:	200004f4 	.word	0x200004f4
 8003d20:	200004ec 	.word	0x200004ec

08003d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d28:	4b04      	ldr	r3, [pc, #16]	@ (8003d3c <vTaskSuspendAll+0x18>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	4a03      	ldr	r2, [pc, #12]	@ (8003d3c <vTaskSuspendAll+0x18>)
 8003d30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000510 	.word	0x20000510

08003d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d4e:	4b42      	ldr	r3, [pc, #264]	@ (8003e58 <xTaskResumeAll+0x118>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xTaskResumeAll+0x2e>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	603b      	str	r3, [r7, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d6e:	f000 fe3b 	bl	80049e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d72:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <xTaskResumeAll+0x118>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	4a37      	ldr	r2, [pc, #220]	@ (8003e58 <xTaskResumeAll+0x118>)
 8003d7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7c:	4b36      	ldr	r3, [pc, #216]	@ (8003e58 <xTaskResumeAll+0x118>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d161      	bne.n	8003e48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d84:	4b35      	ldr	r3, [pc, #212]	@ (8003e5c <xTaskResumeAll+0x11c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d05d      	beq.n	8003e48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d8c:	e02e      	b.n	8003dec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d8e:	4b34      	ldr	r3, [pc, #208]	@ (8003e60 <xTaskResumeAll+0x120>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	3318      	adds	r3, #24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fd48 	bl	8003830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fd43 	bl	8003830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	2201      	movs	r2, #1
 8003db0:	409a      	lsls	r2, r3
 8003db2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e64 <xTaskResumeAll+0x124>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e64 <xTaskResumeAll+0x124>)
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a27      	ldr	r2, [pc, #156]	@ (8003e68 <xTaskResumeAll+0x128>)
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7ff fccf 	bl	8003776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ddc:	4b23      	ldr	r3, [pc, #140]	@ (8003e6c <xTaskResumeAll+0x12c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d302      	bcc.n	8003dec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003de6:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <xTaskResumeAll+0x130>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dec:	4b1c      	ldr	r3, [pc, #112]	@ (8003e60 <xTaskResumeAll+0x120>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1cc      	bne.n	8003d8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dfa:	f000 fa19 	bl	8004230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <xTaskResumeAll+0x134>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d010      	beq.n	8003e2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e0a:	f000 f837 	bl	8003e7c <xTaskIncrementTick>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e14:	4b16      	ldr	r3, [pc, #88]	@ (8003e70 <xTaskResumeAll+0x130>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f1      	bne.n	8003e0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e26:	4b13      	ldr	r3, [pc, #76]	@ (8003e74 <xTaskResumeAll+0x134>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e2c:	4b10      	ldr	r3, [pc, #64]	@ (8003e70 <xTaskResumeAll+0x130>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e38:	4b0f      	ldr	r3, [pc, #60]	@ (8003e78 <xTaskResumeAll+0x138>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e48:	f000 fe00 	bl	8004a4c <vPortExitCritical>

	return xAlreadyYielded;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000510 	.word	0x20000510
 8003e5c:	200004e8 	.word	0x200004e8
 8003e60:	200004a8 	.word	0x200004a8
 8003e64:	200004f0 	.word	0x200004f0
 8003e68:	200003ec 	.word	0x200003ec
 8003e6c:	200003e8 	.word	0x200003e8
 8003e70:	200004fc 	.word	0x200004fc
 8003e74:	200004f8 	.word	0x200004f8
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e86:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc4 <xTaskIncrementTick+0x148>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 808f 	bne.w	8003fae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e90:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e98:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d121      	bne.n	8003ee8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ea4:	4b49      	ldr	r3, [pc, #292]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	603b      	str	r3, [r7, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	e7fd      	b.n	8003ec2 <xTaskIncrementTick+0x46>
 8003ec6:	4b41      	ldr	r3, [pc, #260]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	4b40      	ldr	r3, [pc, #256]	@ (8003fd0 <xTaskIncrementTick+0x154>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4a3e      	ldr	r2, [pc, #248]	@ (8003fd0 <xTaskIncrementTick+0x154>)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd4 <xTaskIncrementTick+0x158>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fd4 <xTaskIncrementTick+0x158>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	f000 f9a4 	bl	8004230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <xTaskIncrementTick+0x15c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d348      	bcc.n	8003f84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef2:	4b36      	ldr	r3, [pc, #216]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d104      	bne.n	8003f06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efc:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <xTaskIncrementTick+0x15c>)
 8003efe:	f04f 32ff 	mov.w	r2, #4294967295
 8003f02:	601a      	str	r2, [r3, #0]
					break;
 8003f04:	e03e      	b.n	8003f84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f06:	4b31      	ldr	r3, [pc, #196]	@ (8003fcc <xTaskIncrementTick+0x150>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d203      	bcs.n	8003f26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <xTaskIncrementTick+0x15c>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f24:	e02e      	b.n	8003f84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fc80 	bl	8003830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3318      	adds	r3, #24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fc77 	bl	8003830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	2201      	movs	r2, #1
 8003f48:	409a      	lsls	r2, r3
 8003f4a:	4b24      	ldr	r3, [pc, #144]	@ (8003fdc <xTaskIncrementTick+0x160>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	4a22      	ldr	r2, [pc, #136]	@ (8003fdc <xTaskIncrementTick+0x160>)
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <xTaskIncrementTick+0x164>)
 8003f62:	441a      	add	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f7ff fc03 	bl	8003776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <xTaskIncrementTick+0x168>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3b9      	bcc.n	8003ef2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	e7b6      	b.n	8003ef2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f84:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <xTaskIncrementTick+0x168>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f8a:	4915      	ldr	r1, [pc, #84]	@ (8003fe0 <xTaskIncrementTick+0x164>)
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d901      	bls.n	8003fa0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <xTaskIncrementTick+0x16c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e004      	b.n	8003fb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003fae:	4b0f      	ldr	r3, [pc, #60]	@ (8003fec <xTaskIncrementTick+0x170>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <xTaskIncrementTick+0x170>)
 8003fb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003fb8:	697b      	ldr	r3, [r7, #20]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000510 	.word	0x20000510
 8003fc8:	200004ec 	.word	0x200004ec
 8003fcc:	200004a0 	.word	0x200004a0
 8003fd0:	200004a4 	.word	0x200004a4
 8003fd4:	20000500 	.word	0x20000500
 8003fd8:	20000508 	.word	0x20000508
 8003fdc:	200004f0 	.word	0x200004f0
 8003fe0:	200003ec 	.word	0x200003ec
 8003fe4:	200003e8 	.word	0x200003e8
 8003fe8:	200004fc 	.word	0x200004fc
 8003fec:	200004f8 	.word	0x200004f8

08003ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80040a0 <vTaskSwitchContext+0xb0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ffe:	4b29      	ldr	r3, [pc, #164]	@ (80040a4 <vTaskSwitchContext+0xb4>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004004:	e045      	b.n	8004092 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004006:	4b27      	ldr	r3, [pc, #156]	@ (80040a4 <vTaskSwitchContext+0xb4>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	4b26      	ldr	r3, [pc, #152]	@ (80040a8 <vTaskSwitchContext+0xb8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	f1c3 031f 	rsb	r3, r3, #31
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	4922      	ldr	r1, [pc, #136]	@ (80040ac <vTaskSwitchContext+0xbc>)
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	607b      	str	r3, [r7, #4]
}
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <vTaskSwitchContext+0x5a>
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4a14      	ldr	r2, [pc, #80]	@ (80040ac <vTaskSwitchContext+0xbc>)
 800405a:	4413      	add	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3308      	adds	r3, #8
 8004070:	429a      	cmp	r2, r3
 8004072:	d104      	bne.n	800407e <vTaskSwitchContext+0x8e>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a0a      	ldr	r2, [pc, #40]	@ (80040b0 <vTaskSwitchContext+0xc0>)
 8004086:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004088:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <vTaskSwitchContext+0xc0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	334c      	adds	r3, #76	@ 0x4c
 800408e:	4a09      	ldr	r2, [pc, #36]	@ (80040b4 <vTaskSwitchContext+0xc4>)
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20000510 	.word	0x20000510
 80040a4:	200004fc 	.word	0x200004fc
 80040a8:	200004f0 	.word	0x200004f0
 80040ac:	200003ec 	.word	0x200003ec
 80040b0:	200003e8 	.word	0x200003e8
 80040b4:	20000010 	.word	0x20000010

080040b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040c0:	f000 f852 	bl	8004168 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <prvIdleTask+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d9f9      	bls.n	80040c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <prvIdleTask+0x2c>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040dc:	e7f0      	b.n	80040c0 <prvIdleTask+0x8>
 80040de:	bf00      	nop
 80040e0:	200003ec 	.word	0x200003ec
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e00c      	b.n	800410e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <prvInitialiseTaskLists+0x60>)
 8004100:	4413      	add	r3, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fb0a 	bl	800371c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b06      	cmp	r3, #6
 8004112:	d9ef      	bls.n	80040f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004114:	480d      	ldr	r0, [pc, #52]	@ (800414c <prvInitialiseTaskLists+0x64>)
 8004116:	f7ff fb01 	bl	800371c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800411a:	480d      	ldr	r0, [pc, #52]	@ (8004150 <prvInitialiseTaskLists+0x68>)
 800411c:	f7ff fafe 	bl	800371c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004120:	480c      	ldr	r0, [pc, #48]	@ (8004154 <prvInitialiseTaskLists+0x6c>)
 8004122:	f7ff fafb 	bl	800371c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004126:	480c      	ldr	r0, [pc, #48]	@ (8004158 <prvInitialiseTaskLists+0x70>)
 8004128:	f7ff faf8 	bl	800371c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800412c:	480b      	ldr	r0, [pc, #44]	@ (800415c <prvInitialiseTaskLists+0x74>)
 800412e:	f7ff faf5 	bl	800371c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <prvInitialiseTaskLists+0x78>)
 8004134:	4a05      	ldr	r2, [pc, #20]	@ (800414c <prvInitialiseTaskLists+0x64>)
 8004136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004138:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <prvInitialiseTaskLists+0x7c>)
 800413a:	4a05      	ldr	r2, [pc, #20]	@ (8004150 <prvInitialiseTaskLists+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200003ec 	.word	0x200003ec
 800414c:	20000478 	.word	0x20000478
 8004150:	2000048c 	.word	0x2000048c
 8004154:	200004a8 	.word	0x200004a8
 8004158:	200004bc 	.word	0x200004bc
 800415c:	200004d4 	.word	0x200004d4
 8004160:	200004a0 	.word	0x200004a0
 8004164:	200004a4 	.word	0x200004a4

08004168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416e:	e019      	b.n	80041a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004170:	f000 fc3a 	bl	80049e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <prvCheckTasksWaitingTermination+0x50>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fb55 	bl	8003830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <prvCheckTasksWaitingTermination+0x54>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a0b      	ldr	r2, [pc, #44]	@ (80041bc <prvCheckTasksWaitingTermination+0x54>)
 800418e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004190:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	4a0a      	ldr	r2, [pc, #40]	@ (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800419a:	f000 fc57 	bl	8004a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f810 	bl	80041c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a4:	4b06      	ldr	r3, [pc, #24]	@ (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e1      	bne.n	8004170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200004bc 	.word	0x200004bc
 80041bc:	200004e8 	.word	0x200004e8
 80041c0:	200004d0 	.word	0x200004d0

080041c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	334c      	adds	r3, #76	@ 0x4c
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 ff21 	bl	8005018 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fdef 	bl	8004dc8 <vPortFree>
				vPortFree( pxTCB );
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fdec 	bl	8004dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041f0:	e019      	b.n	8004226 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d103      	bne.n	8004204 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fde3 	bl	8004dc8 <vPortFree>
	}
 8004202:	e010      	b.n	8004226 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800420a:	2b02      	cmp	r3, #2
 800420c:	d00b      	beq.n	8004226 <prvDeleteTCB+0x62>
	__asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	60fb      	str	r3, [r7, #12]
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	e7fd      	b.n	8004222 <prvDeleteTCB+0x5e>
	}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004236:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <prvResetNextTaskUnblockTime+0x38>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d104      	bne.n	800424a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004240:	4b0a      	ldr	r3, [pc, #40]	@ (800426c <prvResetNextTaskUnblockTime+0x3c>)
 8004242:	f04f 32ff 	mov.w	r2, #4294967295
 8004246:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004248:	e008      	b.n	800425c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424a:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <prvResetNextTaskUnblockTime+0x38>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	4a04      	ldr	r2, [pc, #16]	@ (800426c <prvResetNextTaskUnblockTime+0x3c>)
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	200004a0 	.word	0x200004a0
 800426c:	20000508 	.word	0x20000508

08004270 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004276:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <xTaskGetSchedulerState+0x34>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800427e:	2301      	movs	r3, #1
 8004280:	607b      	str	r3, [r7, #4]
 8004282:	e008      	b.n	8004296 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <xTaskGetSchedulerState+0x38>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800428c:	2302      	movs	r3, #2
 800428e:	607b      	str	r3, [r7, #4]
 8004290:	e001      	b.n	8004296 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004296:	687b      	ldr	r3, [r7, #4]
	}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	200004f4 	.word	0x200004f4
 80042a8:	20000510 	.word	0x20000510

080042ac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80042ba:	f000 fb95 	bl	80049e8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80042be:	4b29      	ldr	r3, [pc, #164]	@ (8004364 <xTaskNotifyWait+0xb8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d01c      	beq.n	8004306 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80042cc:	4b25      	ldr	r3, [pc, #148]	@ (8004364 <xTaskNotifyWait+0xb8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	43d2      	mvns	r2, r2
 80042d8:	400a      	ands	r2, r1
 80042da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80042de:	4b21      	ldr	r3, [pc, #132]	@ (8004364 <xTaskNotifyWait+0xb8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ee:	2101      	movs	r1, #1
 80042f0:	6838      	ldr	r0, [r7, #0]
 80042f2:	f000 f9e3 	bl	80046bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80042f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004368 <xTaskNotifyWait+0xbc>)
 80042f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004306:	f000 fba1 	bl	8004a4c <vPortExitCritical>

		taskENTER_CRITICAL();
 800430a:	f000 fb6d 	bl	80049e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004314:	4b13      	ldr	r3, [pc, #76]	@ (8004364 <xTaskNotifyWait+0xb8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004320:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <xTaskNotifyWait+0xb8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d002      	beq.n	8004334 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e00a      	b.n	800434a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <xTaskNotifyWait+0xb8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	43d2      	mvns	r2, r2
 8004340:	400a      	ands	r2, r1
 8004342:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <xTaskNotifyWait+0xb8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8004354:	f000 fb7a 	bl	8004a4c <vPortExitCritical>

		return xReturn;
 8004358:	697b      	ldr	r3, [r7, #20]
	}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200003e8 	.word	0x200003e8
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	@ 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	4613      	mov	r3, r2
 800437a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800437c:	2301      	movs	r3, #1
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <xTaskGenericNotify+0x32>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	61bb      	str	r3, [r7, #24]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80043a2:	f000 fb21 	bl	80049e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80043bc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d82e      	bhi.n	800442a <xTaskGenericNotify+0xbe>
 80043cc:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <xTaskGenericNotify+0x68>)
 80043ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d2:	bf00      	nop
 80043d4:	0800444f 	.word	0x0800444f
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043fb 	.word	0x080043fb
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	08004415 	.word	0x08004415
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80043f8:	e02c      	b.n	8004454 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004408:	e024      	b.n	8004454 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004412:	e01f      	b.n	8004454 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004414:	7ffb      	ldrb	r3, [r7, #31]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d004      	beq.n	8004424 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004422:	e017      	b.n	8004454 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8004424:	2300      	movs	r3, #0
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8004428:	e014      	b.n	8004454 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004434:	d00d      	beq.n	8004452 <xTaskGenericNotify+0xe6>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	617b      	str	r3, [r7, #20]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <xTaskGenericNotify+0xde>
					break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <xTaskGenericNotify+0xe8>

					break;
 8004452:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004454:	7ffb      	ldrb	r3, [r7, #31]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d13a      	bne.n	80044d0 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	3304      	adds	r3, #4
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f9e6 	bl	8003830 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	4b1c      	ldr	r3, [pc, #112]	@ (80044e0 <xTaskGenericNotify+0x174>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	4a1b      	ldr	r2, [pc, #108]	@ (80044e0 <xTaskGenericNotify+0x174>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a18      	ldr	r2, [pc, #96]	@ (80044e4 <xTaskGenericNotify+0x178>)
 8004484:	441a      	add	r2, r3
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7ff f972 	bl	8003776 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <xTaskGenericNotify+0x146>
	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	613b      	str	r3, [r7, #16]
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b6:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <xTaskGenericNotify+0x17c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d907      	bls.n	80044d0 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80044c0:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <xTaskGenericNotify+0x180>)
 80044c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80044d0:	f000 fabc 	bl	8004a4c <vPortExitCritical>

		return xReturn;
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3728      	adds	r7, #40	@ 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200004f0 	.word	0x200004f0
 80044e4:	200003ec 	.word	0x200003ec
 80044e8:	200003e8 	.word	0x200003e8
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	@ 0x38
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004500:	2301      	movs	r3, #1
 8004502:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004522:	f000 fb41 	bl	8004ba8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800452a:	f3ef 8211 	mrs	r2, BASEPRI
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	623a      	str	r2, [r7, #32]
 8004540:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004542:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800455c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004562:	2202      	movs	r2, #2
 8004564:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	2b04      	cmp	r3, #4
 800456c:	d82e      	bhi.n	80045cc <xTaskGenericNotifyFromISR+0xdc>
 800456e:	a201      	add	r2, pc, #4	@ (adr r2, 8004574 <xTaskGenericNotifyFromISR+0x84>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	080045f1 	.word	0x080045f1
 8004578:	08004589 	.word	0x08004589
 800457c:	0800459b 	.word	0x0800459b
 8004580:	080045ab 	.word	0x080045ab
 8004584:	080045b5 	.word	0x080045b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	431a      	orrs	r2, r3
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8004598:	e02d      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80045a8:	e025      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80045b2:	e020      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80045b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d004      	beq.n	80045c6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80045bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80045c4:	e017      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80045ca:	e014      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80045cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d00d      	beq.n	80045f4 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	61bb      	str	r3, [r7, #24]
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <xTaskGenericNotifyFromISR+0xfc>
					break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <xTaskGenericNotifyFromISR+0x106>
					break;
 80045f4:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80045f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d146      	bne.n	800468c <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	617b      	str	r3, [r7, #20]
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	e7fd      	b.n	800461a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461e:	4b21      	ldr	r3, [pc, #132]	@ (80046a4 <xTaskGenericNotifyFromISR+0x1b4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11c      	bne.n	8004660 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	3304      	adds	r3, #4
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f900 	bl	8003830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	2201      	movs	r2, #1
 8004636:	409a      	lsls	r2, r3
 8004638:	4b1b      	ldr	r3, [pc, #108]	@ (80046a8 <xTaskGenericNotifyFromISR+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	4a1a      	ldr	r2, [pc, #104]	@ (80046a8 <xTaskGenericNotifyFromISR+0x1b8>)
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4a17      	ldr	r2, [pc, #92]	@ (80046ac <xTaskGenericNotifyFromISR+0x1bc>)
 8004650:	441a      	add	r2, r3
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7ff f88c 	bl	8003776 <vListInsertEnd>
 800465e:	e005      	b.n	800466c <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	3318      	adds	r3, #24
 8004664:	4619      	mov	r1, r3
 8004666:	4812      	ldr	r0, [pc, #72]	@ (80046b0 <xTaskGenericNotifyFromISR+0x1c0>)
 8004668:	f7ff f885 	bl	8003776 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004670:	4b10      	ldr	r3, [pc, #64]	@ (80046b4 <xTaskGenericNotifyFromISR+0x1c4>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	429a      	cmp	r2, r3
 8004678:	d908      	bls.n	800468c <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800467a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004686:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <xTaskGenericNotifyFromISR+0x1c8>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]
 800468c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004696:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800469a:	4618      	mov	r0, r3
 800469c:	3738      	adds	r7, #56	@ 0x38
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000510 	.word	0x20000510
 80046a8:	200004f0 	.word	0x200004f0
 80046ac:	200003ec 	.word	0x200003ec
 80046b0:	200004a8 	.word	0x200004a8
 80046b4:	200003e8 	.word	0x200003e8
 80046b8:	200004fc 	.word	0x200004fc

080046bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <prvAddCurrentTaskToDelayedList+0xb0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046cc:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff f8ac 	bl	8003830 <uxListRemove>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046de:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2201      	movs	r2, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4013      	ands	r3, r2
 80046f2:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d10a      	bne.n	8004714 <prvAddCurrentTaskToDelayedList+0x58>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004704:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	481a      	ldr	r0, [pc, #104]	@ (8004778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800470e:	f7ff f832 	bl	8003776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004712:	e026      	b.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	429a      	cmp	r2, r3
 800472a:	d209      	bcs.n	8004740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	4b13      	ldr	r3, [pc, #76]	@ (800477c <prvAddCurrentTaskToDelayedList+0xc0>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7ff f840 	bl	80037be <vListInsert>
}
 800473e:	e010      	b.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004740:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7ff f836 	bl	80037be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	d202      	bcs.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800475c:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6013      	str	r3, [r2, #0]
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200004ec 	.word	0x200004ec
 8004770:	200003e8 	.word	0x200003e8
 8004774:	200004f0 	.word	0x200004f0
 8004778:	200004d4 	.word	0x200004d4
 800477c:	200004a4 	.word	0x200004a4
 8004780:	200004a0 	.word	0x200004a0
 8004784:	20000508 	.word	0x20000508

08004788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3b04      	subs	r3, #4
 8004798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80047a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3b04      	subs	r3, #4
 80047a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3b04      	subs	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047b8:	4a0c      	ldr	r2, [pc, #48]	@ (80047ec <pxPortInitialiseStack+0x64>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b14      	subs	r3, #20
 80047c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3b04      	subs	r3, #4
 80047ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f06f 0202 	mvn.w	r2, #2
 80047d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3b20      	subs	r3, #32
 80047dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	080047f1 	.word	0x080047f1

080047f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80047fa:	4b13      	ldr	r3, [pc, #76]	@ (8004848 <prvTaskExitError+0x58>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d00b      	beq.n	800481c <prvTaskExitError+0x2c>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <prvTaskExitError+0x28>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60bb      	str	r3, [r7, #8]
}
 800482e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004830:	bf00      	nop
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0fc      	beq.n	8004832 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	2000000c 	.word	0x2000000c
 800484c:	00000000 	.word	0x00000000

08004850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <pxCurrentTCBConst2>)
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	f380 8809 	msr	PSP, r0
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	4770      	bx	lr
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst2>:
 8004870:	200003e8 	.word	0x200003e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004878:	4808      	ldr	r0, [pc, #32]	@ (800489c <prvPortStartFirstTask+0x24>)
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f380 8808 	msr	MSP, r0
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8814 	msr	CONTROL, r0
 800488a:	b662      	cpsie	i
 800488c:	b661      	cpsie	f
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	df00      	svc	0
 8004898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800489a:	bf00      	nop
 800489c:	e000ed08 	.word	0xe000ed08

080048a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048a6:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <xPortStartScheduler+0x124>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a47      	ldr	r2, [pc, #284]	@ (80049c8 <xPortStartScheduler+0x128>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10b      	bne.n	80048c8 <xPortStartScheduler+0x28>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048c8:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <xPortStartScheduler+0x124>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3f      	ldr	r2, [pc, #252]	@ (80049cc <xPortStartScheduler+0x12c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10b      	bne.n	80048ea <xPortStartScheduler+0x4a>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	e7fd      	b.n	80048e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048ea:	4b39      	ldr	r3, [pc, #228]	@ (80049d0 <xPortStartScheduler+0x130>)
 80048ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	22ff      	movs	r2, #255	@ 0xff
 80048fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b31      	ldr	r3, [pc, #196]	@ (80049d4 <xPortStartScheduler+0x134>)
 8004910:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004912:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004914:	2207      	movs	r2, #7
 8004916:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004918:	e009      	b.n	800492e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800491a:	4b2f      	ldr	r3, [pc, #188]	@ (80049d8 <xPortStartScheduler+0x138>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	4a2d      	ldr	r2, [pc, #180]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004922:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d0ef      	beq.n	800491a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800493a:	4b27      	ldr	r3, [pc, #156]	@ (80049d8 <xPortStartScheduler+0x138>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1c3 0307 	rsb	r3, r3, #7
 8004942:	2b04      	cmp	r3, #4
 8004944:	d00b      	beq.n	800495e <xPortStartScheduler+0xbe>
	__asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	60bb      	str	r3, [r7, #8]
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	e7fd      	b.n	800495a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800495e:	4b1e      	ldr	r3, [pc, #120]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	4a1c      	ldr	r2, [pc, #112]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004966:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004968:	4b1b      	ldr	r3, [pc, #108]	@ (80049d8 <xPortStartScheduler+0x138>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004970:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <xPortStartScheduler+0x138>)
 8004972:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800497c:	4b17      	ldr	r3, [pc, #92]	@ (80049dc <xPortStartScheduler+0x13c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a16      	ldr	r2, [pc, #88]	@ (80049dc <xPortStartScheduler+0x13c>)
 8004982:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004986:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004988:	4b14      	ldr	r3, [pc, #80]	@ (80049dc <xPortStartScheduler+0x13c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a13      	ldr	r2, [pc, #76]	@ (80049dc <xPortStartScheduler+0x13c>)
 800498e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004992:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004994:	f000 f8da 	bl	8004b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <xPortStartScheduler+0x140>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800499e:	f000 f8f9 	bl	8004b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049a2:	4b10      	ldr	r3, [pc, #64]	@ (80049e4 <xPortStartScheduler+0x144>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a0f      	ldr	r2, [pc, #60]	@ (80049e4 <xPortStartScheduler+0x144>)
 80049a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80049ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049ae:	f7ff ff63 	bl	8004878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049b2:	f7ff fb1d 	bl	8003ff0 <vTaskSwitchContext>
	prvTaskExitError();
 80049b6:	f7ff ff1b 	bl	80047f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	e000ed00 	.word	0xe000ed00
 80049c8:	410fc271 	.word	0x410fc271
 80049cc:	410fc270 	.word	0x410fc270
 80049d0:	e000e400 	.word	0xe000e400
 80049d4:	20000514 	.word	0x20000514
 80049d8:	20000518 	.word	0x20000518
 80049dc:	e000ed20 	.word	0xe000ed20
 80049e0:	2000000c 	.word	0x2000000c
 80049e4:	e000ef34 	.word	0xe000ef34

080049e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a02:	4b10      	ldr	r3, [pc, #64]	@ (8004a44 <vPortEnterCritical+0x5c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	4a0e      	ldr	r2, [pc, #56]	@ (8004a44 <vPortEnterCritical+0x5c>)
 8004a0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <vPortEnterCritical+0x5c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d110      	bne.n	8004a36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a14:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <vPortEnterCritical+0x60>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <vPortEnterCritical+0x4e>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	603b      	str	r3, [r7, #0]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <vPortEnterCritical+0x4a>
	}
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a52:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <vPortExitCritical+0x26>
	__asm volatile
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	607b      	str	r3, [r7, #4]
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	e7fd      	b.n	8004a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a7c:	4b07      	ldr	r3, [pc, #28]	@ (8004a9c <vPortExitCritical+0x50>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <vPortExitCritical+0x44>
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f383 8811 	msr	BASEPRI, r3
}
 8004a8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004aa0:	f3ef 8009 	mrs	r0, PSP
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <pxCurrentTCBConst>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	f01e 0f10 	tst.w	lr, #16
 8004ab0:	bf08      	it	eq
 8004ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aba:	6010      	str	r0, [r2, #0]
 8004abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ac0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004ac4:	f380 8811 	msr	BASEPRI, r0
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f7ff fa8e 	bl	8003ff0 <vTaskSwitchContext>
 8004ad4:	f04f 0000 	mov.w	r0, #0
 8004ad8:	f380 8811 	msr	BASEPRI, r0
 8004adc:	bc09      	pop	{r0, r3}
 8004ade:	6819      	ldr	r1, [r3, #0]
 8004ae0:	6808      	ldr	r0, [r1, #0]
 8004ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae6:	f01e 0f10 	tst.w	lr, #16
 8004aea:	bf08      	it	eq
 8004aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004af0:	f380 8809 	msr	PSP, r0
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	f3af 8000 	nop.w

08004b00 <pxCurrentTCBConst>:
 8004b00:	200003e8 	.word	0x200003e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	607b      	str	r3, [r7, #4]
}
 8004b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b22:	f7ff f9ab 	bl	8003e7c <xTaskIncrementTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <xPortSysTickHandler+0x40>)
 8004b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f383 8811 	msr	BASEPRI, r3
}
 8004b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b40:	bf00      	nop
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4b0b      	ldr	r3, [pc, #44]	@ (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <vPortSetupTimerInterrupt+0x38>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b88 <vPortSetupTimerInterrupt+0x3c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0a      	ldr	r2, [pc, #40]	@ (8004b8c <vPortSetupTimerInterrupt+0x40>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	4a09      	ldr	r2, [pc, #36]	@ (8004b90 <vPortSetupTimerInterrupt+0x44>)
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6e:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010
 8004b84:	e000e018 	.word	0xe000e018
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	10624dd3 	.word	0x10624dd3
 8004b90:	e000e014 	.word	0xe000e014

08004b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ba4 <vPortEnableVFP+0x10>
 8004b98:	6801      	ldr	r1, [r0, #0]
 8004b9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004b9e:	6001      	str	r1, [r0, #0]
 8004ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ba2:	bf00      	nop
 8004ba4:	e000ed88 	.word	0xe000ed88

08004ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004bae:	f3ef 8305 	mrs	r3, IPSR
 8004bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	d915      	bls.n	8004be6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bba:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <vPortValidateInterruptPriority+0x74>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <vPortValidateInterruptPriority+0x78>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	7afa      	ldrb	r2, [r7, #11]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d20b      	bcs.n	8004be6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <vPortValidateInterruptPriority+0x7c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004bee:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <vPortValidateInterruptPriority+0x80>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d90b      	bls.n	8004c0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	603b      	str	r3, [r7, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	bf00      	nop
 8004c0c:	e7fd      	b.n	8004c0a <vPortValidateInterruptPriority+0x62>
	}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000e3f0 	.word	0xe000e3f0
 8004c20:	20000514 	.word	0x20000514
 8004c24:	e000ed0c 	.word	0xe000ed0c
 8004c28:	20000518 	.word	0x20000518

08004c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	@ 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c38:	f7ff f874 	bl	8003d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004db0 <pvPortMalloc+0x184>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c44:	f000 f924 	bl	8004e90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c48:	4b5a      	ldr	r3, [pc, #360]	@ (8004db4 <pvPortMalloc+0x188>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f040 8095 	bne.w	8004d80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01e      	beq.n	8004c9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4413      	add	r3, r2
 8004c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d015      	beq.n	8004c9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f023 0307 	bic.w	r3, r3, #7
 8004c74:	3308      	adds	r3, #8
 8004c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <pvPortMalloc+0x6e>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	617b      	str	r3, [r7, #20]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d06f      	beq.n	8004d80 <pvPortMalloc+0x154>
 8004ca0:	4b45      	ldr	r3, [pc, #276]	@ (8004db8 <pvPortMalloc+0x18c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d86a      	bhi.n	8004d80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004caa:	4b44      	ldr	r3, [pc, #272]	@ (8004dbc <pvPortMalloc+0x190>)
 8004cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cae:	4b43      	ldr	r3, [pc, #268]	@ (8004dbc <pvPortMalloc+0x190>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cb4:	e004      	b.n	8004cc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d903      	bls.n	8004cd2 <pvPortMalloc+0xa6>
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1f1      	bne.n	8004cb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cd2:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <pvPortMalloc+0x184>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d051      	beq.n	8004d80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	4413      	add	r3, r2
 8004ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad2      	subs	r2, r2, r3
 8004cf6:	2308      	movs	r3, #8
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d920      	bls.n	8004d40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4413      	add	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00b      	beq.n	8004d28 <pvPortMalloc+0xfc>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	613b      	str	r3, [r7, #16]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d3a:	69b8      	ldr	r0, [r7, #24]
 8004d3c:	f000 f90a 	bl	8004f54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <pvPortMalloc+0x18c>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004db8 <pvPortMalloc+0x18c>)
 8004d4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <pvPortMalloc+0x18c>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <pvPortMalloc+0x194>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d203      	bcs.n	8004d62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d5a:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <pvPortMalloc+0x18c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a18      	ldr	r2, [pc, #96]	@ (8004dc0 <pvPortMalloc+0x194>)
 8004d60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4b13      	ldr	r3, [pc, #76]	@ (8004db4 <pvPortMalloc+0x188>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <pvPortMalloc+0x198>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	4a11      	ldr	r2, [pc, #68]	@ (8004dc4 <pvPortMalloc+0x198>)
 8004d7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d80:	f7fe ffde 	bl	8003d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <pvPortMalloc+0x17a>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	60fb      	str	r3, [r7, #12]
}
 8004da0:	bf00      	nop
 8004da2:	bf00      	nop
 8004da4:	e7fd      	b.n	8004da2 <pvPortMalloc+0x176>
	return pvReturn;
 8004da6:	69fb      	ldr	r3, [r7, #28]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3728      	adds	r7, #40	@ 0x28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20004124 	.word	0x20004124
 8004db4:	20004138 	.word	0x20004138
 8004db8:	20004128 	.word	0x20004128
 8004dbc:	2000411c 	.word	0x2000411c
 8004dc0:	2000412c 	.word	0x2000412c
 8004dc4:	20004130 	.word	0x20004130

08004dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d04f      	beq.n	8004e7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dda:	2308      	movs	r3, #8
 8004ddc:	425b      	negs	r3, r3
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <vPortFree+0xbc>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <vPortFree+0x46>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	60fb      	str	r3, [r7, #12]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <vPortFree+0x66>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60bb      	str	r3, [r7, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <vPortFree+0xbc>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01e      	beq.n	8004e7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11a      	bne.n	8004e7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	4b0e      	ldr	r3, [pc, #56]	@ (8004e84 <vPortFree+0xbc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	401a      	ands	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e54:	f7fe ff66 	bl	8003d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e88 <vPortFree+0xc0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4413      	add	r3, r2
 8004e62:	4a09      	ldr	r2, [pc, #36]	@ (8004e88 <vPortFree+0xc0>)
 8004e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e66:	6938      	ldr	r0, [r7, #16]
 8004e68:	f000 f874 	bl	8004f54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <vPortFree+0xc4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	4a06      	ldr	r2, [pc, #24]	@ (8004e8c <vPortFree+0xc4>)
 8004e74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e76:	f7fe ff63 	bl	8003d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20004138 	.word	0x20004138
 8004e88:	20004128 	.word	0x20004128
 8004e8c:	20004134 	.word	0x20004134

08004e90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004e9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e9c:	4b27      	ldr	r3, [pc, #156]	@ (8004f3c <prvHeapInit+0xac>)
 8004e9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3307      	adds	r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0307 	bic.w	r3, r3, #7
 8004eb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8004f3c <prvHeapInit+0xac>)
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f40 <prvHeapInit+0xb0>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ece:	4b1c      	ldr	r3, [pc, #112]	@ (8004f40 <prvHeapInit+0xb0>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4413      	add	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004edc:	2208      	movs	r2, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <prvHeapInit+0xb4>)
 8004ef0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ef2:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <prvHeapInit+0xb4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004efa:	4b12      	ldr	r3, [pc, #72]	@ (8004f44 <prvHeapInit+0xb4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	1ad2      	subs	r2, r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f10:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <prvHeapInit+0xb4>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f48 <prvHeapInit+0xb8>)
 8004f1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	4a09      	ldr	r2, [pc, #36]	@ (8004f4c <prvHeapInit+0xbc>)
 8004f26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f28:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <prvHeapInit+0xc0>)
 8004f2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004f2e:	601a      	str	r2, [r3, #0]
}
 8004f30:	bf00      	nop
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	2000051c 	.word	0x2000051c
 8004f40:	2000411c 	.word	0x2000411c
 8004f44:	20004124 	.word	0x20004124
 8004f48:	2000412c 	.word	0x2000412c
 8004f4c:	20004128 	.word	0x20004128
 8004f50:	20004138 	.word	0x20004138

08004f54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f5c:	4b28      	ldr	r3, [pc, #160]	@ (8005000 <prvInsertBlockIntoFreeList+0xac>)
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	e002      	b.n	8004f68 <prvInsertBlockIntoFreeList+0x14>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d8f7      	bhi.n	8004f62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d108      	bne.n	8004f96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	441a      	add	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d118      	bne.n	8004fdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4b15      	ldr	r3, [pc, #84]	@ (8005004 <prvInsertBlockIntoFreeList+0xb0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d00d      	beq.n	8004fd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	441a      	add	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e008      	b.n	8004fe4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <prvInsertBlockIntoFreeList+0xb0>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e003      	b.n	8004fe4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d002      	beq.n	8004ff2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	2000411c 	.word	0x2000411c
 8005004:	20004124 	.word	0x20004124

08005008 <memset>:
 8005008:	4402      	add	r2, r0
 800500a:	4603      	mov	r3, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	d100      	bne.n	8005012 <memset+0xa>
 8005010:	4770      	bx	lr
 8005012:	f803 1b01 	strb.w	r1, [r3], #1
 8005016:	e7f9      	b.n	800500c <memset+0x4>

08005018 <_reclaim_reent>:
 8005018:	4b29      	ldr	r3, [pc, #164]	@ (80050c0 <_reclaim_reent+0xa8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4283      	cmp	r3, r0
 800501e:	b570      	push	{r4, r5, r6, lr}
 8005020:	4604      	mov	r4, r0
 8005022:	d04b      	beq.n	80050bc <_reclaim_reent+0xa4>
 8005024:	69c3      	ldr	r3, [r0, #28]
 8005026:	b1ab      	cbz	r3, 8005054 <_reclaim_reent+0x3c>
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	b16b      	cbz	r3, 8005048 <_reclaim_reent+0x30>
 800502c:	2500      	movs	r5, #0
 800502e:	69e3      	ldr	r3, [r4, #28]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	5959      	ldr	r1, [r3, r5]
 8005034:	2900      	cmp	r1, #0
 8005036:	d13b      	bne.n	80050b0 <_reclaim_reent+0x98>
 8005038:	3504      	adds	r5, #4
 800503a:	2d80      	cmp	r5, #128	@ 0x80
 800503c:	d1f7      	bne.n	800502e <_reclaim_reent+0x16>
 800503e:	69e3      	ldr	r3, [r4, #28]
 8005040:	4620      	mov	r0, r4
 8005042:	68d9      	ldr	r1, [r3, #12]
 8005044:	f000 f864 	bl	8005110 <_free_r>
 8005048:	69e3      	ldr	r3, [r4, #28]
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	b111      	cbz	r1, 8005054 <_reclaim_reent+0x3c>
 800504e:	4620      	mov	r0, r4
 8005050:	f000 f85e 	bl	8005110 <_free_r>
 8005054:	6961      	ldr	r1, [r4, #20]
 8005056:	b111      	cbz	r1, 800505e <_reclaim_reent+0x46>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 f859 	bl	8005110 <_free_r>
 800505e:	69e1      	ldr	r1, [r4, #28]
 8005060:	b111      	cbz	r1, 8005068 <_reclaim_reent+0x50>
 8005062:	4620      	mov	r0, r4
 8005064:	f000 f854 	bl	8005110 <_free_r>
 8005068:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800506a:	b111      	cbz	r1, 8005072 <_reclaim_reent+0x5a>
 800506c:	4620      	mov	r0, r4
 800506e:	f000 f84f 	bl	8005110 <_free_r>
 8005072:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005074:	b111      	cbz	r1, 800507c <_reclaim_reent+0x64>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f84a 	bl	8005110 <_free_r>
 800507c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800507e:	b111      	cbz	r1, 8005086 <_reclaim_reent+0x6e>
 8005080:	4620      	mov	r0, r4
 8005082:	f000 f845 	bl	8005110 <_free_r>
 8005086:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005088:	b111      	cbz	r1, 8005090 <_reclaim_reent+0x78>
 800508a:	4620      	mov	r0, r4
 800508c:	f000 f840 	bl	8005110 <_free_r>
 8005090:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005092:	b111      	cbz	r1, 800509a <_reclaim_reent+0x82>
 8005094:	4620      	mov	r0, r4
 8005096:	f000 f83b 	bl	8005110 <_free_r>
 800509a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800509c:	b111      	cbz	r1, 80050a4 <_reclaim_reent+0x8c>
 800509e:	4620      	mov	r0, r4
 80050a0:	f000 f836 	bl	8005110 <_free_r>
 80050a4:	6a23      	ldr	r3, [r4, #32]
 80050a6:	b14b      	cbz	r3, 80050bc <_reclaim_reent+0xa4>
 80050a8:	4620      	mov	r0, r4
 80050aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050ae:	4718      	bx	r3
 80050b0:	680e      	ldr	r6, [r1, #0]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f82c 	bl	8005110 <_free_r>
 80050b8:	4631      	mov	r1, r6
 80050ba:	e7bb      	b.n	8005034 <_reclaim_reent+0x1c>
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	bf00      	nop
 80050c0:	20000010 	.word	0x20000010

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4d0d      	ldr	r5, [pc, #52]	@ (80050fc <__libc_init_array+0x38>)
 80050c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005100 <__libc_init_array+0x3c>)
 80050ca:	1b64      	subs	r4, r4, r5
 80050cc:	10a4      	asrs	r4, r4, #2
 80050ce:	2600      	movs	r6, #0
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005104 <__libc_init_array+0x40>)
 80050d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005108 <__libc_init_array+0x44>)
 80050d8:	f000 f870 	bl	80051bc <_init>
 80050dc:	1b64      	subs	r4, r4, r5
 80050de:	10a4      	asrs	r4, r4, #2
 80050e0:	2600      	movs	r6, #0
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	08005264 	.word	0x08005264
 8005100:	08005264 	.word	0x08005264
 8005104:	08005264 	.word	0x08005264
 8005108:	08005268 	.word	0x08005268

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <_free_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4605      	mov	r5, r0
 8005114:	2900      	cmp	r1, #0
 8005116:	d041      	beq.n	800519c <_free_r+0x8c>
 8005118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800511c:	1f0c      	subs	r4, r1, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfb8      	it	lt
 8005122:	18e4      	addlt	r4, r4, r3
 8005124:	f000 f83e 	bl	80051a4 <__malloc_lock>
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <_free_r+0x90>)
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	b933      	cbnz	r3, 800513c <_free_r+0x2c>
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	6014      	str	r4, [r2, #0]
 8005132:	4628      	mov	r0, r5
 8005134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005138:	f000 b83a 	b.w	80051b0 <__malloc_unlock>
 800513c:	42a3      	cmp	r3, r4
 800513e:	d908      	bls.n	8005152 <_free_r+0x42>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	1821      	adds	r1, r4, r0
 8005144:	428b      	cmp	r3, r1
 8005146:	bf01      	itttt	eq
 8005148:	6819      	ldreq	r1, [r3, #0]
 800514a:	685b      	ldreq	r3, [r3, #4]
 800514c:	1809      	addeq	r1, r1, r0
 800514e:	6021      	streq	r1, [r4, #0]
 8005150:	e7ed      	b.n	800512e <_free_r+0x1e>
 8005152:	461a      	mov	r2, r3
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b10b      	cbz	r3, 800515c <_free_r+0x4c>
 8005158:	42a3      	cmp	r3, r4
 800515a:	d9fa      	bls.n	8005152 <_free_r+0x42>
 800515c:	6811      	ldr	r1, [r2, #0]
 800515e:	1850      	adds	r0, r2, r1
 8005160:	42a0      	cmp	r0, r4
 8005162:	d10b      	bne.n	800517c <_free_r+0x6c>
 8005164:	6820      	ldr	r0, [r4, #0]
 8005166:	4401      	add	r1, r0
 8005168:	1850      	adds	r0, r2, r1
 800516a:	4283      	cmp	r3, r0
 800516c:	6011      	str	r1, [r2, #0]
 800516e:	d1e0      	bne.n	8005132 <_free_r+0x22>
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	6053      	str	r3, [r2, #4]
 8005176:	4408      	add	r0, r1
 8005178:	6010      	str	r0, [r2, #0]
 800517a:	e7da      	b.n	8005132 <_free_r+0x22>
 800517c:	d902      	bls.n	8005184 <_free_r+0x74>
 800517e:	230c      	movs	r3, #12
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	e7d6      	b.n	8005132 <_free_r+0x22>
 8005184:	6820      	ldr	r0, [r4, #0]
 8005186:	1821      	adds	r1, r4, r0
 8005188:	428b      	cmp	r3, r1
 800518a:	bf04      	itt	eq
 800518c:	6819      	ldreq	r1, [r3, #0]
 800518e:	685b      	ldreq	r3, [r3, #4]
 8005190:	6063      	str	r3, [r4, #4]
 8005192:	bf04      	itt	eq
 8005194:	1809      	addeq	r1, r1, r0
 8005196:	6021      	streq	r1, [r4, #0]
 8005198:	6054      	str	r4, [r2, #4]
 800519a:	e7ca      	b.n	8005132 <_free_r+0x22>
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	bf00      	nop
 80051a0:	20004278 	.word	0x20004278

080051a4 <__malloc_lock>:
 80051a4:	4801      	ldr	r0, [pc, #4]	@ (80051ac <__malloc_lock+0x8>)
 80051a6:	f7ff bfb1 	b.w	800510c <__retarget_lock_acquire_recursive>
 80051aa:	bf00      	nop
 80051ac:	20004274 	.word	0x20004274

080051b0 <__malloc_unlock>:
 80051b0:	4801      	ldr	r0, [pc, #4]	@ (80051b8 <__malloc_unlock+0x8>)
 80051b2:	f7ff bfac 	b.w	800510e <__retarget_lock_release_recursive>
 80051b6:	bf00      	nop
 80051b8:	20004274 	.word	0x20004274

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr
