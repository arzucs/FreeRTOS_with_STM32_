
freeRTOS_DMU_GTB6_Chanege_Task_Priorty_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005480  08005480  00006480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005508  08005508  00006508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005510  08005510  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005510  08005510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005514  08005514  00006514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005518  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc8  20000060  08005578  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c28  08005578  00007c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012491  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d37  00000000  00000000  00019521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0001c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b37  00000000  00000000  0001d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003360  00000000  00000000  0001dc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001133d  00000000  00000000  00020fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df264  00000000  00000000  000322fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  001115a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00115588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005468 	.word	0x08005468

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005468 	.word	0x08005468

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fbb2 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f82a 	bl	8000560 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 800050c:	f000 fb04 	bl	8000b18 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f91a 	bl	8000748 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000514:	f000 f890 	bl	8000638 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000518:	f000 f8e0 	bl	80006dc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f002 f92c 	bl	8002778 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 8000520:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <main+0x48>)
 8000522:	2100      	movs	r1, #0
 8000524:	4809      	ldr	r0, [pc, #36]	@ (800054c <main+0x4c>)
 8000526:	f002 f971 	bl	800280c <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a08      	ldr	r2, [pc, #32]	@ (8000550 <main+0x50>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000530:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <main+0x54>)
 8000532:	2100      	movs	r1, #0
 8000534:	4808      	ldr	r0, [pc, #32]	@ (8000558 <main+0x58>)
 8000536:	f002 f969 	bl	800280c <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <main+0x5c>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f002 f93e 	bl	80027c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x44>
 8000548:	080054b0 	.word	0x080054b0
 800054c:	08000889 	.word	0x08000889
 8000550:	200000ec 	.word	0x200000ec
 8000554:	080054d4 	.word	0x080054d4
 8000558:	080008c1 	.word	0x080008c1
 800055c:	200000f0 	.word	0x200000f0

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b094      	sub	sp, #80	@ 0x50
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2234      	movs	r2, #52	@ 0x34
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fe92 	bl	8005298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a28      	ldr	r2, [pc, #160]	@ (8000630 <SystemClock_Config+0xd0>)
 800058e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b26      	ldr	r3, [pc, #152]	@ (8000630 <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a22      	ldr	r2, [pc, #136]	@ (8000634 <SystemClock_Config+0xd4>)
 80005aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ae:	6013      	str	r3, [r2, #0]
 80005b0:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d4:	23a8      	movs	r3, #168	@ 0xa8
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fdf3 	bl	80021d4 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f4:	f000 f998 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800060e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fac6 	bl	8001ba8 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000622:	f000 f981 	bl	8000928 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	@ 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064a:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <MX_ADC1_Init+0x98>)
 800064c:	4a21      	ldr	r2, [pc, #132]	@ (80006d4 <MX_ADC1_Init+0x9c>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000652:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b1d      	ldr	r3, [pc, #116]	@ (80006d0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <MX_ADC1_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000672:	4b17      	ldr	r3, [pc, #92]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <MX_ADC1_Init+0x98>)
 800067a:	4a17      	ldr	r2, [pc, #92]	@ (80006d8 <MX_ADC1_Init+0xa0>)
 800067c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800067e:	4b14      	ldr	r3, [pc, #80]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <MX_ADC1_Init+0x98>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000698:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <MX_ADC1_Init+0x98>)
 800069a:	f000 fb59 	bl	8000d50 <HAL_ADC_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a4:	f000 f940 	bl	8000928 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4805      	ldr	r0, [pc, #20]	@ (80006d0 <MX_ADC1_Init+0x98>)
 80006ba:	f000 fc9f 	bl	8000ffc <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c4:	f000 f930 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	40012000 	.word	0x40012000
 80006d8:	0f000001 	.word	0x0f000001

080006dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_CAN1_Init+0x64>)
 80006e2:	4a18      	ldr	r2, [pc, #96]	@ (8000744 <MX_CAN1_Init+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_CAN1_Init+0x64>)
 80006e8:	220c      	movs	r2, #12
 80006ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_CAN1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_CAN1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_CAN1_Init+0x64>)
 80006fa:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80006fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_CAN1_Init+0x64>)
 8000702:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000706:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000708:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <MX_CAN1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800070e:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_CAN1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <MX_CAN1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000720:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_CAN1_Init+0x64>)
 800072e:	f000 fe93 	bl	8001458 <HAL_CAN_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000738:	f000 f8f6 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000c4 	.word	0x200000c4
 8000744:	40006400 	.word	0x40006400

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	@ 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
 8000762:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x130>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a44      	ldr	r2, [pc, #272]	@ (8000878 <MX_GPIO_Init+0x130>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <MX_GPIO_Init+0x130>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x130>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x130>)
 8000784:	f043 0320 	orr.w	r3, r3, #32
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <MX_GPIO_Init+0x130>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <MX_GPIO_Init+0x130>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a36      	ldr	r2, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a21      	ldr	r2, [pc, #132]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_GPIO_Init+0x130>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080c:	481b      	ldr	r0, [pc, #108]	@ (800087c <MX_GPIO_Init+0x134>)
 800080e:	f001 f9b1 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2107      	movs	r1, #7
 8000816:	481a      	ldr	r0, [pc, #104]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000818:	f001 f9ac 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	@ (800087c <MX_GPIO_Init+0x134>)
 8000836:	f000 fff1 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800083a:	2307      	movs	r3, #7
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <MX_GPIO_Init+0x138>)
 8000852:	f000 ffe3 	bl	800181c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	@ (8000884 <MX_GPIO_Init+0x13c>)
 800086c:	f000 ffd6 	bl	800181c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3730      	adds	r7, #48	@ 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40020800 	.word	0x40020800
 8000880:	40021400 	.word	0x40021400
 8000884:	40021000 	.word	0x40021000

08000888 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000890:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <StartDefaultTask+0x30>)
 8000892:	f000 faa1 	bl	8000dd8 <HAL_ADC_Start>
	  if(HAL_ADC_GetValue(&hadc1))
 8000896:	4808      	ldr	r0, [pc, #32]	@ (80008b8 <StartDefaultTask+0x30>)
 8000898:	f000 fba3 	bl	8000fe2 <HAL_ADC_GetValue>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d005      	beq.n	80008ae <StartDefaultTask+0x26>
	  {
		dmu_value = HAL_ADC_GetValue(&hadc1);
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <StartDefaultTask+0x30>)
 80008a4:	f000 fb9d 	bl	8000fe2 <HAL_ADC_GetValue>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <StartDefaultTask+0x34>)
 80008ac:	6013      	str	r3, [r2, #0]
	  }
	  HAL_ADC_Stop(&hadc1);
 80008ae:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <StartDefaultTask+0x30>)
 80008b0:	f000 fb64 	bl	8000f7c <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 80008b4:	e7ec      	b.n	8000890 <StartDefaultTask+0x8>
 80008b6:	bf00      	nop
 80008b8:	2000007c 	.word	0x2000007c
 80008bc:	200000f4 	.word	0x200000f4

080008c0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
//	uint32_t pulNotificationValue = 0;
  /* Infinite loop */
  for(;;)
  {
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	4812      	ldr	r0, [pc, #72]	@ (8000918 <StartTask02+0x58>)
 80008ce:	f001 f939 	bl	8001b44 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <StartTask02+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
	  if(digital_output == 1)
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <StartTask02+0x5c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d115      	bne.n	800090e <StartTask02+0x4e>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2107      	movs	r1, #7
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <StartTask02+0x60>)
 80008e8:	f001 f944 	bl	8001b74 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f2:	480c      	ldr	r0, [pc, #48]	@ (8000924 <StartTask02+0x64>)
 80008f4:	f001 f93e 	bl	8001b74 <HAL_GPIO_WritePin>
//		  vTaskDelay(pdMS_TO_TICKS(1000)); // milisaniyeyi tick değerine dönüştürülecek

		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2107      	movs	r1, #7
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <StartTask02+0x60>)
 80008fe:	f001 f939 	bl	8001b74 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000908:	4806      	ldr	r0, [pc, #24]	@ (8000924 <StartTask02+0x64>)
 800090a:	f001 f933 	bl	8001b74 <HAL_GPIO_WritePin>
//		  vTaskDelay(pdMS_TO_TICKS(1000));
	  }
	  vTaskDelay(pdMS_TO_TICKS(1000)); // Add a small delay to avoid excessive CPU usage
 800090e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000912:	f002 ffad 	bl	8003870 <vTaskDelay>
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8000916:	e7d7      	b.n	80008c8 <StartTask02+0x8>
 8000918:	40021000 	.word	0x40021000
 800091c:	200000f8 	.word	0x200000f8
 8000920:	40021400 	.word	0x40021400
 8000924:	40020800 	.word	0x40020800

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_MspInit+0x54>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	4a11      	ldr	r2, [pc, #68]	@ (8000988 <HAL_MspInit+0x54>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000948:	6453      	str	r3, [r2, #68]	@ 0x44
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x54>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <HAL_MspInit+0x54>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <HAL_MspInit+0x54>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	@ 0x40
 8000966:	4b08      	ldr	r3, [pc, #32]	@ (8000988 <HAL_MspInit+0x54>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	210f      	movs	r1, #15
 8000976:	f06f 0001 	mvn.w	r0, #1
 800097a:	f000 ff26 	bl	80017ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	@ (8000a08 <HAL_ADC_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d127      	bne.n	80009fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <HAL_ADC_MspInit+0x80>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <HAL_ADC_MspInit+0x80>)
 80009b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_ADC_MspInit+0x80>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_ADC_MspInit+0x80>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a0e      	ldr	r2, [pc, #56]	@ (8000a0c <HAL_ADC_MspInit+0x80>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <HAL_ADC_MspInit+0x80>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009e6:	2301      	movs	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <HAL_ADC_MspInit+0x84>)
 80009fa:	f000 ff0f 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	@ 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000

08000a14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	@ 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <HAL_CAN_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <HAL_CAN_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <HAL_CAN_MspInit+0x88>)
 8000a40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <HAL_CAN_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <HAL_CAN_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <HAL_CAN_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_CAN_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a80:	2309      	movs	r3, #9
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <HAL_CAN_MspInit+0x8c>)
 8000a8c:	f000 fec6 	bl	800181c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	@ 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40006400 	.word	0x40006400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f917 	bl	8000d10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ae2:	f003 fb5f 	bl	80041a4 <xTaskGetSchedulerState>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d001      	beq.n	8000af0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aec:	f004 f954 	bl	8004d98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	@ (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	2302      	movs	r3, #2
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000b32:	4b34      	ldr	r3, [pc, #208]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d011      	beq.n	8000b66 <SystemCoreClockUpdate+0x4e>
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	d844      	bhi.n	8000bd2 <SystemCoreClockUpdate+0xba>
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <SystemCoreClockUpdate+0x3e>
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d004      	beq.n	8000b5e <SystemCoreClockUpdate+0x46>
 8000b54:	e03d      	b.n	8000bd2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <SystemCoreClockUpdate+0xf0>)
 8000b58:	4a2c      	ldr	r2, [pc, #176]	@ (8000c0c <SystemCoreClockUpdate+0xf4>)
 8000b5a:	601a      	str	r2, [r3, #0]
      break;
 8000b5c:	e03d      	b.n	8000bda <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <SystemCoreClockUpdate+0xf0>)
 8000b60:	4a2b      	ldr	r2, [pc, #172]	@ (8000c10 <SystemCoreClockUpdate+0xf8>)
 8000b62:	601a      	str	r2, [r3, #0]
      break;
 8000b64:	e039      	b.n	8000bda <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000b66:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	0d9b      	lsrs	r3, r3, #22
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b72:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b7a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00c      	beq.n	8000b9c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b82:	4a23      	ldr	r2, [pc, #140]	@ (8000c10 <SystemCoreClockUpdate+0xf8>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000b8c:	6852      	ldr	r2, [r2, #4]
 8000b8e:	0992      	lsrs	r2, r2, #6
 8000b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e00b      	b.n	8000bb4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <SystemCoreClockUpdate+0xf4>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000ba6:	6852      	ldr	r2, [r2, #4]
 8000ba8:	0992      	lsrs	r2, r2, #6
 8000baa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bae:	fb02 f303 	mul.w	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	0c1b      	lsrs	r3, r3, #16
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c08 <SystemCoreClockUpdate+0xf0>)
 8000bce:	6013      	str	r3, [r2, #0]
      break;
 8000bd0:	e003      	b.n	8000bda <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <SystemCoreClockUpdate+0xf0>)
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <SystemCoreClockUpdate+0xf4>)
 8000bd6:	601a      	str	r2, [r3, #0]
      break;
 8000bd8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000bda:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <SystemCoreClockUpdate+0xec>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	4a0b      	ldr	r2, [pc, #44]	@ (8000c14 <SystemCoreClockUpdate+0xfc>)
 8000be6:	5cd3      	ldrb	r3, [r2, r3]
 8000be8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <SystemCoreClockUpdate+0xf0>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <SystemCoreClockUpdate+0xf0>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	371c      	adds	r7, #28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40023800 	.word	0x40023800
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	00f42400 	.word	0x00f42400
 8000c10:	007a1200 	.word	0x007a1200
 8000c14:	080054f8 	.word	0x080054f8

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c1c:	f7ff ff6a 	bl	8000af4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f004 fb85 	bl	8005354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc59 	bl	8000500 <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c5c:	08005518 	.word	0x08005518
  ldr r2, =_sbss
 8000c60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c64:	20004c28 	.word	0x20004c28

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 fd8d 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	200f      	movs	r0, #15
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff fe48 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	@ (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fd97 	bl	8001802 <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f000 fd6d 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	@ (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200000fc 	.word	0x200000fc

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	@ (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200000fc 	.word	0x200000fc

08000d50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e033      	b.n	8000dce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fe0c 	bl	800098c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	f003 0310 	and.w	r3, r3, #16
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d118      	bne.n	8000dc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d96:	f023 0302 	bic.w	r3, r3, #2
 8000d9a:	f043 0202 	orr.w	r2, r3, #2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 fa5c 	bl	8001260 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f023 0303 	bic.w	r3, r3, #3
 8000db6:	f043 0201 	orr.w	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dbe:	e001      	b.n	8000dc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d101      	bne.n	8000df2 <HAL_ADC_Start+0x1a>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e0b2      	b.n	8000f58 <HAL_ADC_Start+0x180>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d018      	beq.n	8000e3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0201 	orr.w	r2, r2, #1
 8000e16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e18:	4b52      	ldr	r3, [pc, #328]	@ (8000f64 <HAL_ADC_Start+0x18c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a52      	ldr	r2, [pc, #328]	@ (8000f68 <HAL_ADC_Start+0x190>)
 8000e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e22:	0c9a      	lsrs	r2, r3, #18
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e2c:	e002      	b.n	8000e34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f9      	bne.n	8000e2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d17a      	bne.n	8000f3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e86:	d106      	bne.n	8000e96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8c:	f023 0206 	bic.w	r2, r3, #6
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e94:	e002      	b.n	8000e9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ea4:	4b31      	ldr	r3, [pc, #196]	@ (8000f6c <HAL_ADC_Start+0x194>)
 8000ea6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000eb0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 031f 	and.w	r3, r3, #31
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d12a      	bne.n	8000f14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8000f70 <HAL_ADC_Start+0x198>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d015      	beq.n	8000ef4 <HAL_ADC_Start+0x11c>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a29      	ldr	r2, [pc, #164]	@ (8000f74 <HAL_ADC_Start+0x19c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d105      	bne.n	8000ede <HAL_ADC_Start+0x106>
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <HAL_ADC_Start+0x194>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00a      	beq.n	8000ef4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a25      	ldr	r2, [pc, #148]	@ (8000f78 <HAL_ADC_Start+0x1a0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d136      	bne.n	8000f56 <HAL_ADC_Start+0x17e>
 8000ee8:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <HAL_ADC_Start+0x194>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d130      	bne.n	8000f56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d129      	bne.n	8000f56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	e020      	b.n	8000f56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a15      	ldr	r2, [pc, #84]	@ (8000f70 <HAL_ADC_Start+0x198>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11b      	bne.n	8000f56 <HAL_ADC_Start+0x17e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d114      	bne.n	8000f56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	e00b      	b.n	8000f56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f043 0210 	orr.w	r2, r3, #16
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	20000000 	.word	0x20000000
 8000f68:	431bde83 	.word	0x431bde83
 8000f6c:	40012300 	.word	0x40012300
 8000f70:	40012000 	.word	0x40012000
 8000f74:	40012100 	.word	0x40012100
 8000f78:	40012200 	.word	0x40012200

08000f7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Stop+0x16>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e021      	b.n	8000fd6 <HAL_ADC_Stop+0x5a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0201 	bic.w	r2, r2, #1
 8000fa8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d109      	bne.n	8000fcc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fc0:	f023 0301 	bic.w	r3, r3, #1
 8000fc4:	f043 0201 	orr.w	r2, r3, #1
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x1c>
 8001014:	2302      	movs	r3, #2
 8001016:	e113      	b.n	8001240 <HAL_ADC_ConfigChannel+0x244>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b09      	cmp	r3, #9
 8001026:	d925      	bls.n	8001074 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68d9      	ldr	r1, [r3, #12]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	3b1e      	subs	r3, #30
 800103e:	2207      	movs	r2, #7
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43da      	mvns	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	400a      	ands	r2, r1
 800104c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68d9      	ldr	r1, [r3, #12]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	4603      	mov	r3, r0
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4403      	add	r3, r0
 8001066:	3b1e      	subs	r3, #30
 8001068:	409a      	lsls	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	430a      	orrs	r2, r1
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	e022      	b.n	80010ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6919      	ldr	r1, [r3, #16]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b29b      	uxth	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	2207      	movs	r2, #7
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6919      	ldr	r1, [r3, #16]
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4403      	add	r3, r0
 80010b0:	409a      	lsls	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d824      	bhi.n	800110c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b05      	subs	r3, #5
 80010d4:	221f      	movs	r2, #31
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	400a      	ands	r2, r1
 80010e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	3b05      	subs	r3, #5
 80010fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	@ 0x34
 800110a:	e04c      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d824      	bhi.n	800115e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b23      	subs	r3, #35	@ 0x23
 8001126:	221f      	movs	r2, #31
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43da      	mvns	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	400a      	ands	r2, r1
 8001134:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4618      	mov	r0, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	3b23      	subs	r3, #35	@ 0x23
 8001150:	fa00 f203 	lsl.w	r2, r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	631a      	str	r2, [r3, #48]	@ 0x30
 800115c:	e023      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4413      	add	r3, r2
 800116e:	3b41      	subs	r3, #65	@ 0x41
 8001170:	221f      	movs	r2, #31
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	400a      	ands	r2, r1
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	3b41      	subs	r3, #65	@ 0x41
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011a6:	4b29      	ldr	r3, [pc, #164]	@ (800124c <HAL_ADC_ConfigChannel+0x250>)
 80011a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a28      	ldr	r2, [pc, #160]	@ (8001250 <HAL_ADC_ConfigChannel+0x254>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d10f      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1d8>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b12      	cmp	r3, #18
 80011ba:	d10b      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_ADC_ConfigChannel+0x254>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12b      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x23a>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_ADC_ConfigChannel+0x258>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d003      	beq.n	80011f0 <HAL_ADC_ConfigChannel+0x1f4>
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b11      	cmp	r3, #17
 80011ee:	d122      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <HAL_ADC_ConfigChannel+0x258>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d111      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_ADC_ConfigChannel+0x25c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a11      	ldr	r2, [pc, #68]	@ (800125c <HAL_ADC_ConfigChannel+0x260>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	0c9a      	lsrs	r2, r3, #18
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001228:	e002      	b.n	8001230 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f9      	bne.n	800122a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40012300 	.word	0x40012300
 8001250:	40012000 	.word	0x40012000
 8001254:	10000012 	.word	0x10000012
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83

08001260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001268:	4b79      	ldr	r3, [pc, #484]	@ (8001450 <ADC_Init+0x1f0>)
 800126a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	431a      	orrs	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	021a      	lsls	r2, r3, #8
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6899      	ldr	r1, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012f2:	4a58      	ldr	r2, [pc, #352]	@ (8001454 <ADC_Init+0x1f4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d022      	beq.n	800133e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001306:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6899      	ldr	r1, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	430a      	orrs	r2, r1
 8001318:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	e00f      	b.n	800135e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800134c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800135c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0202 	bic.w	r2, r2, #2
 800136c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6899      	ldr	r1, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7e1b      	ldrb	r3, [r3, #24]
 8001378:	005a      	lsls	r2, r3, #1
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d01b      	beq.n	80013c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800139a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6859      	ldr	r1, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	3b01      	subs	r3, #1
 80013b8:	035a      	lsls	r2, r3, #13
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	e007      	b.n	80013d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	051a      	lsls	r2, r3, #20
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001416:	025a      	lsls	r2, r3, #9
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800142e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6899      	ldr	r1, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	029a      	lsls	r2, r3, #10
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	609a      	str	r2, [r3, #8]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40012300 	.word	0x40012300
 8001454:	0f000001 	.word	0x0f000001

08001458 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0ed      	b.n	8001646 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff facc 	bl	8000a14 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 0201 	orr.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800148c:	f7ff fc54 	bl	8000d38 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001492:	e012      	b.n	80014ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001494:	f7ff fc50 	bl	8000d38 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b0a      	cmp	r3, #10
 80014a0:	d90b      	bls.n	80014ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2205      	movs	r2, #5
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e0c5      	b.n	8001646 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0e5      	beq.n	8001494 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0202 	bic.w	r2, r2, #2
 80014d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d8:	f7ff fc2e 	bl	8000d38 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014de:	e012      	b.n	8001506 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e0:	f7ff fc2a 	bl	8000d38 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b0a      	cmp	r3, #10
 80014ec:	d90b      	bls.n	8001506 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2205      	movs	r2, #5
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e09f      	b.n	8001646 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1e5      	bne.n	80014e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d108      	bne.n	800152e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e007      	b.n	800153e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800153c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e5b      	ldrb	r3, [r3, #25]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e007      	b.n	8001568 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001566:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e9b      	ldrb	r3, [r3, #26]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0220 	orr.w	r2, r2, #32
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e007      	b.n	8001592 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0220 	bic.w	r2, r2, #32
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7edb      	ldrb	r3, [r3, #27]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0210 	bic.w	r2, r2, #16
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e007      	b.n	80015bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0210 	orr.w	r2, r2, #16
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7f1b      	ldrb	r3, [r3, #28]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0208 	orr.w	r2, r2, #8
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0208 	bic.w	r2, r2, #8
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7f5b      	ldrb	r3, [r3, #29]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0204 	orr.w	r2, r2, #4
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0204 	bic.w	r2, r2, #4
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	ea42 0103 	orr.w	r1, r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	@ (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff8e 	bl	80016b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	@ (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	@ (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff47 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff5c 	bl	8001698 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff8e 	bl	8001708 <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5d 	bl	80016b4 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffb0 	bl	8001770 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e165      	b.n	8001b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	429a      	cmp	r2, r3
 8001852:	f040 8154 	bne.w	8001afe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d005      	beq.n	800186e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	2b02      	cmp	r3, #2
 800186c:	d130      	bne.n	80018d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68da      	ldr	r2, [r3, #12]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 0201 	and.w	r2, r3, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d017      	beq.n	800190c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d123      	bne.n	8001960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	08da      	lsrs	r2, r3, #3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3208      	adds	r2, #8
 8001920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f003 0307 	and.w	r3, r3, #7
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	691a      	ldr	r2, [r3, #16]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	08da      	lsrs	r2, r3, #3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3208      	adds	r2, #8
 800195a:	69b9      	ldr	r1, [r7, #24]
 800195c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0203 	and.w	r2, r3, #3
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80ae 	beq.w	8001afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a5c      	ldr	r2, [pc, #368]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019be:	4a58      	ldr	r2, [pc, #352]	@ (8001b20 <HAL_GPIO_Init+0x304>)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	089b      	lsrs	r3, r3, #2
 80019c4:	3302      	adds	r3, #2
 80019c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	220f      	movs	r2, #15
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001b24 <HAL_GPIO_Init+0x308>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d025      	beq.n	8001a36 <HAL_GPIO_Init+0x21a>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001b28 <HAL_GPIO_Init+0x30c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <HAL_GPIO_Init+0x216>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4d      	ldr	r2, [pc, #308]	@ (8001b2c <HAL_GPIO_Init+0x310>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d019      	beq.n	8001a2e <HAL_GPIO_Init+0x212>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001b30 <HAL_GPIO_Init+0x314>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x20e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_GPIO_Init+0x318>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x20a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x31c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x206>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a49      	ldr	r2, [pc, #292]	@ (8001b3c <HAL_GPIO_Init+0x320>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x202>
 8001a1a:	2306      	movs	r3, #6
 8001a1c:	e00c      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a1e:	2307      	movs	r3, #7
 8001a20:	e00a      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a22:	2305      	movs	r3, #5
 8001a24:	e008      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a26:	2304      	movs	r3, #4
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e004      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e002      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_GPIO_Init+0x21c>
 8001a36:	2300      	movs	r3, #0
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	f002 0203 	and.w	r2, r2, #3
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4093      	lsls	r3, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a48:	4935      	ldr	r1, [pc, #212]	@ (8001b20 <HAL_GPIO_Init+0x304>)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	089b      	lsrs	r3, r3, #2
 8001a4e:	3302      	adds	r3, #2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a56:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a7a:	4a31      	ldr	r2, [pc, #196]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aa4:	4a26      	ldr	r2, [pc, #152]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aaa:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ace:	4a1c      	ldr	r2, [pc, #112]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001af8:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_GPIO_Init+0x324>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3301      	adds	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	2b0f      	cmp	r3, #15
 8001b08:	f67f ae96 	bls.w	8001838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40013800 	.word	0x40013800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40021400 	.word	0x40021400
 8001b3c:	40021800 	.word	0x40021800
 8001b40:	40013c00 	.word	0x40013c00

08001b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b90:	e003      	b.n	8001b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b92:	887b      	ldrh	r3, [r7, #2]
 8001b94:	041a      	lsls	r2, r3, #16
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	619a      	str	r2, [r3, #24]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0cc      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b68      	ldr	r3, [pc, #416]	@ (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d90c      	bls.n	8001be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b65      	ldr	r3, [pc, #404]	@ (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b63      	ldr	r3, [pc, #396]	@ (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e0b8      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bfc:	4b59      	ldr	r3, [pc, #356]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a58      	ldr	r2, [pc, #352]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c14:	4b53      	ldr	r3, [pc, #332]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a52      	ldr	r2, [pc, #328]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c20:	4b50      	ldr	r3, [pc, #320]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	494d      	ldr	r1, [pc, #308]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d044      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d119      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c66:	4b3f      	ldr	r3, [pc, #252]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e06f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c76:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e067      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	4b37      	ldr	r3, [pc, #220]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f023 0203 	bic.w	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4934      	ldr	r1, [pc, #208]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c98:	f7ff f84e 	bl	8000d38 <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	e00a      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca0:	f7ff f84a 	bl	8000d38 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04f      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 020c 	and.w	r2, r3, #12
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d20c      	bcs.n	8001cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	4b22      	ldr	r3, [pc, #136]	@ (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	b2d2      	uxtb	r2, r2
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e032      	b.n	8001d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d008      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cfc:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4916      	ldr	r1, [pc, #88]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1a:	4b12      	ldr	r3, [pc, #72]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	490e      	ldr	r1, [pc, #56]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d2e:	f000 f821 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001d32:	4602      	mov	r2, r0
 8001d34:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	091b      	lsrs	r3, r3, #4
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	490a      	ldr	r1, [pc, #40]	@ (8001d68 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	5ccb      	ldrb	r3, [r1, r3]
 8001d42:	fa22 f303 	lsr.w	r3, r2, r3
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffae 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023c00 	.word	0x40023c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	080054f8 	.word	0x080054f8
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004

08001d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d78:	b0ae      	sub	sp, #184	@ 0xb8
 8001d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d9a:	4bcb      	ldr	r3, [pc, #812]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	f200 8206 	bhi.w	80021b4 <HAL_RCC_GetSysClockFreq+0x440>
 8001da8:	a201      	add	r2, pc, #4	@ (adr r2, 8001db0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dae:	bf00      	nop
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	080021b5 	.word	0x080021b5
 8001db8:	080021b5 	.word	0x080021b5
 8001dbc:	080021b5 	.word	0x080021b5
 8001dc0:	08001ded 	.word	0x08001ded
 8001dc4:	080021b5 	.word	0x080021b5
 8001dc8:	080021b5 	.word	0x080021b5
 8001dcc:	080021b5 	.word	0x080021b5
 8001dd0:	08001df5 	.word	0x08001df5
 8001dd4:	080021b5 	.word	0x080021b5
 8001dd8:	080021b5 	.word	0x080021b5
 8001ddc:	080021b5 	.word	0x080021b5
 8001de0:	08001fe5 	.word	0x08001fe5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4bb9      	ldr	r3, [pc, #740]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x358>)
 8001de6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001dea:	e1e7      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dec:	4bb8      	ldr	r3, [pc, #736]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001df2:	e1e3      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df4:	4bb4      	ldr	r3, [pc, #720]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e00:	4bb1      	ldr	r3, [pc, #708]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d071      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0c:	4bae      	ldr	r3, [pc, #696]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0159      	lsls	r1, r3, #5
 8001e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e44:	0150      	lsls	r0, r2, #5
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	1a51      	subs	r1, r2, r1
 8001e4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e50:	4629      	mov	r1, r5
 8001e52:	eb63 0301 	sbc.w	r3, r3, r1
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e64:	4649      	mov	r1, r9
 8001e66:	018b      	lsls	r3, r1, #6
 8001e68:	4641      	mov	r1, r8
 8001e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e6e:	4641      	mov	r1, r8
 8001e70:	018a      	lsls	r2, r1, #6
 8001e72:	4641      	mov	r1, r8
 8001e74:	1a51      	subs	r1, r2, r1
 8001e76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e78:	4649      	mov	r1, r9
 8001e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	00cb      	lsls	r3, r1, #3
 8001e90:	4641      	mov	r1, r8
 8001e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e96:	4641      	mov	r1, r8
 8001e98:	00ca      	lsls	r2, r1, #3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	eb42 0303 	adc.w	r3, r2, r3
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f04f 0300 	mov.w	r3, #0
 8001eb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	024b      	lsls	r3, r1, #9
 8001ec0:	4621      	mov	r1, r4
 8001ec2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	024a      	lsls	r2, r1, #9
 8001eca:	4610      	mov	r0, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ed8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001edc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ee0:	f7fe f996 	bl	8000210 <__aeabi_uldivmod>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001eee:	e067      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef0:	4b75      	ldr	r3, [pc, #468]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001efc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	f04f 0000 	mov.w	r0, #0
 8001f1a:	f04f 0100 	mov.w	r1, #0
 8001f1e:	0159      	lsls	r1, r3, #5
 8001f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f24:	0150      	lsls	r0, r2, #5
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4621      	mov	r1, r4
 8001f2c:	1a51      	subs	r1, r2, r1
 8001f2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f30:	4629      	mov	r1, r5
 8001f32:	eb63 0301 	sbc.w	r3, r3, r1
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f44:	4649      	mov	r1, r9
 8001f46:	018b      	lsls	r3, r1, #6
 8001f48:	4641      	mov	r1, r8
 8001f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f4e:	4641      	mov	r1, r8
 8001f50:	018a      	lsls	r2, r1, #6
 8001f52:	4641      	mov	r1, r8
 8001f54:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f58:	4649      	mov	r1, r9
 8001f5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f72:	4692      	mov	sl, r2
 8001f74:	469b      	mov	fp, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	eb1a 0303 	adds.w	r3, sl, r3
 8001f7c:	623b      	str	r3, [r7, #32]
 8001f7e:	462b      	mov	r3, r5
 8001f80:	eb4b 0303 	adc.w	r3, fp, r3
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f92:	4629      	mov	r1, r5
 8001f94:	028b      	lsls	r3, r1, #10
 8001f96:	4621      	mov	r1, r4
 8001f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	028a      	lsls	r2, r1, #10
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fa8:	2200      	movs	r2, #0
 8001faa:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fac:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fb2:	f7fe f92d 	bl	8000210 <__aeabi_uldivmod>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4613      	mov	r3, r2
 8001fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fc0:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	3301      	adds	r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fe2:	e0eb      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe4:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff0:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d06b      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ffc:	4b32      	ldr	r3, [pc, #200]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	099b      	lsrs	r3, r3, #6
 8002002:	2200      	movs	r2, #0
 8002004:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002006:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002008:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800200a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800200e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002010:	2300      	movs	r3, #0
 8002012:	667b      	str	r3, [r7, #100]	@ 0x64
 8002014:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002018:	4622      	mov	r2, r4
 800201a:	462b      	mov	r3, r5
 800201c:	f04f 0000 	mov.w	r0, #0
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	0159      	lsls	r1, r3, #5
 8002026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800202a:	0150      	lsls	r0, r2, #5
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4621      	mov	r1, r4
 8002032:	1a51      	subs	r1, r2, r1
 8002034:	61b9      	str	r1, [r7, #24]
 8002036:	4629      	mov	r1, r5
 8002038:	eb63 0301 	sbc.w	r3, r3, r1
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800204a:	4659      	mov	r1, fp
 800204c:	018b      	lsls	r3, r1, #6
 800204e:	4651      	mov	r1, sl
 8002050:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002054:	4651      	mov	r1, sl
 8002056:	018a      	lsls	r2, r1, #6
 8002058:	4651      	mov	r1, sl
 800205a:	ebb2 0801 	subs.w	r8, r2, r1
 800205e:	4659      	mov	r1, fp
 8002060:	eb63 0901 	sbc.w	r9, r3, r1
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002070:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002074:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002078:	4690      	mov	r8, r2
 800207a:	4699      	mov	r9, r3
 800207c:	4623      	mov	r3, r4
 800207e:	eb18 0303 	adds.w	r3, r8, r3
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	462b      	mov	r3, r5
 8002086:	eb49 0303 	adc.w	r3, r9, r3
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002098:	4629      	mov	r1, r5
 800209a:	024b      	lsls	r3, r1, #9
 800209c:	4621      	mov	r1, r4
 800209e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020a2:	4621      	mov	r1, r4
 80020a4:	024a      	lsls	r2, r1, #9
 80020a6:	4610      	mov	r0, r2
 80020a8:	4619      	mov	r1, r3
 80020aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020ae:	2200      	movs	r2, #0
 80020b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020b8:	f7fe f8aa 	bl	8000210 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020c6:	e065      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x420>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d4:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x458>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	2200      	movs	r2, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	4611      	mov	r1, r2
 80020e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80020e6:	2300      	movs	r3, #0
 80020e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80020ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80020ee:	4642      	mov	r2, r8
 80020f0:	464b      	mov	r3, r9
 80020f2:	f04f 0000 	mov.w	r0, #0
 80020f6:	f04f 0100 	mov.w	r1, #0
 80020fa:	0159      	lsls	r1, r3, #5
 80020fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002100:	0150      	lsls	r0, r2, #5
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4641      	mov	r1, r8
 8002108:	1a51      	subs	r1, r2, r1
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	4649      	mov	r1, r9
 800210e:	eb63 0301 	sbc.w	r3, r3, r1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002120:	4659      	mov	r1, fp
 8002122:	018b      	lsls	r3, r1, #6
 8002124:	4651      	mov	r1, sl
 8002126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800212a:	4651      	mov	r1, sl
 800212c:	018a      	lsls	r2, r1, #6
 800212e:	4651      	mov	r1, sl
 8002130:	1a54      	subs	r4, r2, r1
 8002132:	4659      	mov	r1, fp
 8002134:	eb63 0501 	sbc.w	r5, r3, r1
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	00eb      	lsls	r3, r5, #3
 8002142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002146:	00e2      	lsls	r2, r4, #3
 8002148:	4614      	mov	r4, r2
 800214a:	461d      	mov	r5, r3
 800214c:	4643      	mov	r3, r8
 800214e:	18e3      	adds	r3, r4, r3
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	464b      	mov	r3, r9
 8002154:	eb45 0303 	adc.w	r3, r5, r3
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002166:	4629      	mov	r1, r5
 8002168:	028b      	lsls	r3, r1, #10
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002170:	4621      	mov	r1, r4
 8002172:	028a      	lsls	r2, r1, #10
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800217c:	2200      	movs	r2, #0
 800217e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002180:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002182:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002186:	f7fe f843 	bl	8000210 <__aeabi_uldivmod>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4613      	mov	r3, r2
 8002190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x458>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	0f1b      	lsrs	r3, r3, #28
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80021a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021b2:	e003      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	37b8      	adds	r7, #184	@ 0xb8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	00f42400 	.word	0x00f42400

080021d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e28d      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8083 	beq.w	80022fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021f4:	4b94      	ldr	r3, [pc, #592]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 030c 	and.w	r3, r3, #12
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d019      	beq.n	8002234 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002200:	4b91      	ldr	r3, [pc, #580]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002208:	2b08      	cmp	r3, #8
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800220c:	4b8e      	ldr	r3, [pc, #568]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b8b      	ldr	r3, [pc, #556]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b88      	ldr	r3, [pc, #544]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b84      	ldr	r3, [pc, #528]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x124>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e25a      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x90>
 8002256:	4b7c      	ldr	r3, [pc, #496]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7b      	ldr	r2, [pc, #492]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xcc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xb4>
 800226e:	4b76      	ldr	r3, [pc, #472]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b73      	ldr	r3, [pc, #460]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a72      	ldr	r2, [pc, #456]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xcc>
 8002288:	4b6f      	ldr	r3, [pc, #444]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6e      	ldr	r2, [pc, #440]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b6c      	ldr	r3, [pc, #432]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6b      	ldr	r2, [pc, #428]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fd46 	bl	8000d38 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fd42 	bl	8000d38 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	@ 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e21f      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xdc>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fd32 	bl	8000d38 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7fe fd2e 	bl	8000d38 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e20b      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b57      	ldr	r3, [pc, #348]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x104>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d06f      	beq.n	80023e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002306:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d017      	beq.n	8002342 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002312:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800231e:	4b4a      	ldr	r3, [pc, #296]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b47      	ldr	r3, [pc, #284]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b44      	ldr	r3, [pc, #272]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b41      	ldr	r3, [pc, #260]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x186>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1d3      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4937      	ldr	r1, [pc, #220]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e03a      	b.n	80023e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b34      	ldr	r3, [pc, #208]	@ (800244c <HAL_RCC_OscConfig+0x278>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fcdb 	bl	8000d38 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fcd7 	bl	8000d38 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1b4      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	4b2b      	ldr	r3, [pc, #172]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b28      	ldr	r3, [pc, #160]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4925      	ldr	r1, [pc, #148]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_OscConfig+0x278>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7fe fcba 	bl	8000d38 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe fcb6 	bl	8000d38 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e193      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b1b      	ldr	r3, [pc, #108]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d036      	beq.n	8002460 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7fe fc9a 	bl	8000d38 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002408:	f7fe fc96 	bl	8000d38 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e173      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_OscConfig+0x274>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x234>
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_OscConfig+0x27c>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fc83 	bl	8000d38 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00e      	b.n	8002454 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fc7f 	bl	8000d38 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d907      	bls.n	8002454 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e15c      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b8a      	ldr	r3, [pc, #552]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ea      	bne.n	8002436 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8097 	beq.w	800259c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b83      	ldr	r3, [pc, #524]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b7f      	ldr	r3, [pc, #508]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	4a7e      	ldr	r2, [pc, #504]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	@ 0x40
 800248e:	4b7c      	ldr	r3, [pc, #496]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b79      	ldr	r3, [pc, #484]	@ (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b76      	ldr	r3, [pc, #472]	@ (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a75      	ldr	r2, [pc, #468]	@ (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7fe fc3f 	bl	8000d38 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe fc3b 	bl	8000d38 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e118      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002684 <HAL_RCC_OscConfig+0x4b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x31e>
 80024e4:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e8:	4a65      	ldr	r2, [pc, #404]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x358>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x340>
 80024fa:	4b61      	ldr	r3, [pc, #388]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024fe:	4a60      	ldr	r2, [pc, #384]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	@ 0x70
 8002506:	4b5e      	ldr	r3, [pc, #376]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	4a5d      	ldr	r2, [pc, #372]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	@ 0x70
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x358>
 8002514:	4b5a      	ldr	r3, [pc, #360]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002518:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002520:	4b57      	ldr	r3, [pc, #348]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002524:	4a56      	ldr	r2, [pc, #344]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fc00 	bl	8000d38 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7fe fbfc 	bl	8000d38 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0d7      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <HAL_RCC_OscConfig+0x368>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe fbea 	bl	8000d38 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe fbe6 	bl	8000d38 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0c1      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	4b40      	ldr	r3, [pc, #256]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ee      	bne.n	8002568 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b3b      	ldr	r3, [pc, #236]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	4a3a      	ldr	r2, [pc, #232]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80ad 	beq.w	8002700 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a6:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d060      	beq.n	8002674 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d145      	bne.n	8002646 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <HAL_RCC_OscConfig+0x4b4>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fbba 	bl	8000d38 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fbb6 	bl	8000d38 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e093      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b29      	ldr	r3, [pc, #164]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002610:	071b      	lsls	r3, r3, #28
 8002612:	491b      	ldr	r1, [pc, #108]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <HAL_RCC_OscConfig+0x4b4>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fb8b 	bl	8000d38 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fb87 	bl	8000d38 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e064      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x452>
 8002644:	e05c      	b.n	8002700 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <HAL_RCC_OscConfig+0x4b4>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fb74 	bl	8000d38 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fb70 	bl	8000d38 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e04d      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x480>
 8002672:	e045      	b.n	8002700 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e040      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
 8002680:	40023800 	.word	0x40023800
 8002684:	40007000 	.word	0x40007000
 8002688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800268c:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <HAL_RCC_OscConfig+0x538>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d030      	beq.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d129      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d122      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026bc:	4013      	ands	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d119      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	3b01      	subs	r3, #1
 80026d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d10f      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <__NVIC_SetPriority>:
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002720:	2b00      	cmp	r3, #0
 8002722:	db0a      	blt.n	800273a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	b2da      	uxtb	r2, r3
 8002728:	490c      	ldr	r1, [pc, #48]	@ (800275c <__NVIC_SetPriority+0x4c>)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	440b      	add	r3, r1
 8002734:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002738:	e00a      	b.n	8002750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	4908      	ldr	r1, [pc, #32]	@ (8002760 <__NVIC_SetPriority+0x50>)
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	3b04      	subs	r3, #4
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	440b      	add	r3, r1
 800274e:	761a      	strb	r2, [r3, #24]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100
 8002760:	e000ed00 	.word	0xe000ed00

08002764 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002768:	2100      	movs	r1, #0
 800276a:	f06f 0004 	mvn.w	r0, #4
 800276e:	f7ff ffcf 	bl	8002710 <__NVIC_SetPriority>
#endif
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
	...

08002778 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800277e:	f3ef 8305 	mrs	r3, IPSR
 8002782:	603b      	str	r3, [r7, #0]
  return(result);
 8002784:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800278a:	f06f 0305 	mvn.w	r3, #5
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	e00c      	b.n	80027ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002792:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <osKernelInitialize+0x44>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800279a:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <osKernelInitialize+0x44>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	e002      	b.n	80027ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	20000100 	.word	0x20000100

080027c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c6:	f3ef 8305 	mrs	r3, IPSR
 80027ca:	603b      	str	r3, [r7, #0]
  return(result);
 80027cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <osKernelStart+0x1a>
    stat = osErrorISR;
 80027d2:	f06f 0305 	mvn.w	r3, #5
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	e010      	b.n	80027fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <osKernelStart+0x48>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d109      	bne.n	80027f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80027e2:	f7ff ffbf 	bl	8002764 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80027e6:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <osKernelStart+0x48>)
 80027e8:	2202      	movs	r2, #2
 80027ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80027ec:	f001 f876 	bl	80038dc <vTaskStartScheduler>
      stat = osOK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	e002      	b.n	80027fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027fc:	687b      	ldr	r3, [r7, #4]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000100 	.word	0x20000100

0800280c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	@ 0x38
 8002810:	af04      	add	r7, sp, #16
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800281c:	f3ef 8305 	mrs	r3, IPSR
 8002820:	617b      	str	r3, [r7, #20]
  return(result);
 8002822:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002824:	2b00      	cmp	r3, #0
 8002826:	d17e      	bne.n	8002926 <osThreadNew+0x11a>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07b      	beq.n	8002926 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002832:	2318      	movs	r3, #24
 8002834:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
 800283e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d045      	beq.n	80028d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <osThreadNew+0x48>
        name = attr->name;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <osThreadNew+0x6e>
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b38      	cmp	r3, #56	@ 0x38
 800286c:	d805      	bhi.n	800287a <osThreadNew+0x6e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <osThreadNew+0x72>
        return (NULL);
 800287a:	2300      	movs	r3, #0
 800287c:	e054      	b.n	8002928 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00e      	beq.n	80028b4 <osThreadNew+0xa8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2ba7      	cmp	r3, #167	@ 0xa7
 800289c:	d90a      	bls.n	80028b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d006      	beq.n	80028b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <osThreadNew+0xa8>
        mem = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e010      	b.n	80028d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <osThreadNew+0xca>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d108      	bne.n	80028d6 <osThreadNew+0xca>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <osThreadNew+0xca>
          mem = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e001      	b.n	80028d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d110      	bne.n	80028fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028e4:	9202      	str	r2, [sp, #8]
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6a3a      	ldr	r2, [r7, #32]
 80028f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fdfe 	bl	80034f4 <xTaskCreateStatic>
 80028f8:	4603      	mov	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	e013      	b.n	8002926 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d110      	bne.n	8002926 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	b29a      	uxth	r2, r3
 8002908:	f107 0310 	add.w	r3, r7, #16
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fe4c 	bl	80035b4 <xTaskCreate>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <osThreadNew+0x11a>
            hTask = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002926:	693b      	ldr	r3, [r7, #16]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3728      	adds	r7, #40	@ 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a07      	ldr	r2, [pc, #28]	@ (800295c <vApplicationGetIdleTaskMemory+0x2c>)
 8002940:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4a06      	ldr	r2, [pc, #24]	@ (8002960 <vApplicationGetIdleTaskMemory+0x30>)
 8002946:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000104 	.word	0x20000104
 8002960:	200001ac 	.word	0x200001ac

08002964 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a07      	ldr	r2, [pc, #28]	@ (8002990 <vApplicationGetTimerTaskMemory+0x2c>)
 8002974:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <vApplicationGetTimerTaskMemory+0x30>)
 800297a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002982:	601a      	str	r2, [r3, #0]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	200003ac 	.word	0x200003ac
 8002994:	20000454 	.word	0x20000454

08002998 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f103 0208 	add.w	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f04f 32ff 	mov.w	r2, #4294967295
 80029b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f103 0208 	add.w	r2, r3, #8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f103 0208 	add.w	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029f2:	b480      	push	{r7}
 80029f4:	b085      	sub	sp, #20
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
 80029fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b085      	sub	sp, #20
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d103      	bne.n	8002a5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e00c      	b.n	8002a74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	e002      	b.n	8002a68 <vListInsert+0x2e>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d2f6      	bcs.n	8002a62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	601a      	str	r2, [r3, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6892      	ldr	r2, [r2, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6852      	ldr	r2, [r2, #4]
 8002acc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d103      	bne.n	8002ae0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b2c:	f002 f8a4 	bl	8004c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	68f9      	ldr	r1, [r7, #12]
 8002b60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	441a      	add	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	22ff      	movs	r2, #255	@ 0xff
 8002b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	@ 0xff
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d114      	bne.n	8002bac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01a      	beq.n	8002bc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3310      	adds	r3, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f942 	bl	8003e18 <xTaskRemoveFromEventList>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d012      	beq.n	8002bc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <xQueueGenericReset+0xd0>)
 8002b9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	e009      	b.n	8002bc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3310      	adds	r3, #16
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fef1 	bl	8002998 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3324      	adds	r3, #36	@ 0x24
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff feec 	bl	8002998 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bc0:	f002 f88c 	bl	8004cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000ed04 	.word	0xe000ed04

08002bd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	@ 0x38
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bfa:	bf00      	nop
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	e7fd      	b.n	8002c1a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <xQueueGenericCreateStatic+0x56>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <xQueueGenericCreateStatic+0x5a>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <xQueueGenericCreateStatic+0x5c>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10b      	bne.n	8002c4c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	623b      	str	r3, [r7, #32]
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <xQueueGenericCreateStatic+0x84>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <xQueueGenericCreateStatic+0x88>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <xQueueGenericCreateStatic+0x8a>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10b      	bne.n	8002c7a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	61fb      	str	r3, [r7, #28]
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	e7fd      	b.n	8002c76 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c7a:	2350      	movs	r3, #80	@ 0x50
 8002c7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b50      	cmp	r3, #80	@ 0x50
 8002c82:	d00b      	beq.n	8002c9c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61bb      	str	r3, [r7, #24]
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f805 	bl	8002cce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3730      	adds	r7, #48	@ 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	69b8      	ldr	r0, [r7, #24]
 8002d00:	f7ff fefe 	bl	8002b00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d0c:	bf00      	nop
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08e      	sub	sp, #56	@ 0x38
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d22:	2300      	movs	r3, #0
 8002d24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <xQueueGenericSend+0x34>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSend+0x42>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueGenericSend+0x46>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGenericSend+0x48>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <xQueueGenericSend+0x64>
	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d103      	bne.n	8002d86 <xQueueGenericSend+0x72>
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <xQueueGenericSend+0x76>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericSend+0x78>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10b      	bne.n	8002da8 <xQueueGenericSend+0x94>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da8:	f001 f9fc 	bl	80041a4 <xTaskGetSchedulerState>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <xQueueGenericSend+0xa4>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <xQueueGenericSend+0xa8>
 8002db8:	2301      	movs	r3, #1
 8002dba:	e000      	b.n	8002dbe <xQueueGenericSend+0xaa>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10b      	bne.n	8002dda <xQueueGenericSend+0xc6>
	__asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	61fb      	str	r3, [r7, #28]
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	e7fd      	b.n	8002dd6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dda:	f001 ff4d 	bl	8004c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xQueueGenericSend+0xdc>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d129      	bne.n	8002e44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df6:	f000 fa0f 	bl	8003218 <prvCopyDataToQueue>
 8002dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	3324      	adds	r3, #36	@ 0x24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 f805 	bl	8003e18 <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b3f      	ldr	r3, [pc, #252]	@ (8002f14 <xQueueGenericSend+0x200>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	e00a      	b.n	8002e3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <xQueueGenericSend+0x200>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e3c:	f001 ff4e 	bl	8004cdc <vPortExitCritical>
				return pdPASS;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e063      	b.n	8002f0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4a:	f001 ff47 	bl	8004cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e05c      	b.n	8002f0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 f83f 	bl	8003ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e66:	f001 ff39 	bl	8004cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6a:	f000 fda7 	bl	80039bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6e:	f001 ff03 	bl	8004c78 <vPortEnterCritical>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d103      	bne.n	8002e88 <xQueueGenericSend+0x174>
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x18a>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e9e:	f001 ff1d 	bl	8004cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea2:	1d3a      	adds	r2, r7, #4
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f82e 	bl	8003f0c <xTaskCheckForTimeOut>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d124      	bne.n	8002f00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eb8:	f000 faa6 	bl	8003408 <prvIsQueueFull>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec4:	3310      	adds	r3, #16
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 ff52 	bl	8003d74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ed2:	f000 fa31 	bl	8003338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed6:	f000 fd7f 	bl	80039d8 <xTaskResumeAll>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f af7c 	bne.w	8002dda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <xQueueGenericSend+0x200>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e772      	b.n	8002dda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ef6:	f000 fa1f 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efa:	f000 fd6d 	bl	80039d8 <xTaskResumeAll>
 8002efe:	e76c      	b.n	8002dda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f02:	f000 fa19 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f06:	f000 fd67 	bl	80039d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3738      	adds	r7, #56	@ 0x38
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b090      	sub	sp, #64	@ 0x40
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <xQueueGenericSendFromISR+0x3e>
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <xQueueGenericSendFromISR+0x42>
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <xQueueGenericSendFromISR+0x44>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d103      	bne.n	8002f86 <xQueueGenericSendFromISR+0x6e>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <xQueueGenericSendFromISR+0x72>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <xQueueGenericSendFromISR+0x74>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	623b      	str	r3, [r7, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa8:	f001 ff46 	bl	8004e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fac:	f3ef 8211 	mrs	r2, BASEPRI
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	61fa      	str	r2, [r7, #28]
 8002fc2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <xQueueGenericSendFromISR+0xc2>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d12f      	bne.n	800303a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fe0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ff0:	f000 f912 	bl	8003218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ff4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d112      	bne.n	8003024 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	3324      	adds	r3, #36	@ 0x24
 800300a:	4618      	mov	r0, r3
 800300c:	f000 ff04 	bl	8003e18 <xTaskRemoveFromEventList>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00e      	beq.n	8003034 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e007      	b.n	8003034 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003024:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003028:	3301      	adds	r3, #1
 800302a:	b2db      	uxtb	r3, r3
 800302c:	b25a      	sxtb	r2, r3
 800302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003034:	2301      	movs	r3, #1
 8003036:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003038:	e001      	b.n	800303e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800303a:	2300      	movs	r3, #0
 800303c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800303e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003040:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003048:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800304a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800304c:	4618      	mov	r0, r3
 800304e:	3740      	adds	r7, #64	@ 0x40
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	@ 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <xQueueReceive+0x32>
	__asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	623b      	str	r3, [r7, #32]
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	e7fd      	b.n	8003082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d103      	bne.n	8003094 <xQueueReceive+0x40>
 800308c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <xQueueReceive+0x44>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <xQueueReceive+0x46>
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <xQueueReceive+0x62>
	__asm volatile
 800309e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	61fb      	str	r3, [r7, #28]
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	e7fd      	b.n	80030b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030b6:	f001 f875 	bl	80041a4 <xTaskGetSchedulerState>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <xQueueReceive+0x72>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <xQueueReceive+0x76>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <xQueueReceive+0x78>
 80030ca:	2300      	movs	r3, #0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10b      	bne.n	80030e8 <xQueueReceive+0x94>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	61bb      	str	r3, [r7, #24]
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030e8:	f001 fdc6 	bl	8004c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01f      	beq.n	8003138 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030fc:	f000 f8f6 	bl	80032ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00f      	beq.n	8003130 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	3310      	adds	r3, #16
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fe7f 	bl	8003e18 <xTaskRemoveFromEventList>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003120:	4b3c      	ldr	r3, [pc, #240]	@ (8003214 <xQueueReceive+0x1c0>)
 8003122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003130:	f001 fdd4 	bl	8004cdc <vPortExitCritical>
				return pdPASS;
 8003134:	2301      	movs	r3, #1
 8003136:	e069      	b.n	800320c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800313e:	f001 fdcd 	bl	8004cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003142:	2300      	movs	r3, #0
 8003144:	e062      	b.n	800320c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d106      	bne.n	800315a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800314c:	f107 0310 	add.w	r3, r7, #16
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fec5 	bl	8003ee0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003156:	2301      	movs	r3, #1
 8003158:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800315a:	f001 fdbf 	bl	8004cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800315e:	f000 fc2d 	bl	80039bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003162:	f001 fd89 	bl	8004c78 <vPortEnterCritical>
 8003166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800316c:	b25b      	sxtb	r3, r3
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d103      	bne.n	800317c <xQueueReceive+0x128>
 8003174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800317c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003182:	b25b      	sxtb	r3, r3
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d103      	bne.n	8003192 <xQueueReceive+0x13e>
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003192:	f001 fda3 	bl	8004cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003196:	1d3a      	adds	r2, r7, #4
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 feb4 	bl	8003f0c <xTaskCheckForTimeOut>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d123      	bne.n	80031f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ac:	f000 f916 	bl	80033dc <prvIsQueueEmpty>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d017      	beq.n	80031e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	3324      	adds	r3, #36	@ 0x24
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fdd8 	bl	8003d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031c6:	f000 f8b7 	bl	8003338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031ca:	f000 fc05 	bl	80039d8 <xTaskResumeAll>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d189      	bne.n	80030e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <xQueueReceive+0x1c0>)
 80031d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	e780      	b.n	80030e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031e8:	f000 f8a6 	bl	8003338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ec:	f000 fbf4 	bl	80039d8 <xTaskResumeAll>
 80031f0:	e77a      	b.n	80030e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031f4:	f000 f8a0 	bl	8003338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031f8:	f000 fbee 	bl	80039d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031fe:	f000 f8ed 	bl	80033dc <prvIsQueueEmpty>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	f43f af6f 	beq.w	80030e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800320a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800320c:	4618      	mov	r0, r3
 800320e:	3730      	adds	r7, #48	@ 0x30
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800322c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d14d      	bne.n	80032da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 ffcc 	bl	80041e0 <xTaskPriorityDisinherit>
 8003248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	e043      	b.n	80032da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d119      	bne.n	800328c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6858      	ldr	r0, [r3, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	461a      	mov	r2, r3
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	f002 f89c 	bl	80053a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	441a      	add	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	429a      	cmp	r2, r3
 8003280:	d32b      	bcc.n	80032da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e026      	b.n	80032da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	68d8      	ldr	r0, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	461a      	mov	r2, r3
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	f002 f882 	bl	80053a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	425b      	negs	r3, r3
 80032a6:	441a      	add	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d207      	bcs.n	80032c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	425b      	negs	r3, r3
 80032c2:	441a      	add	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d105      	bne.n	80032da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d303      	bcc.n	8003320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68d9      	ldr	r1, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003328:	461a      	mov	r2, r3
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f002 f838 	bl	80053a0 <memcpy>
	}
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003340:	f001 fc9a 	bl	8004c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800334a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800334c:	e011      	b.n	8003372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d012      	beq.n	800337c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3324      	adds	r3, #36	@ 0x24
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fd5c 	bl	8003e18 <xTaskRemoveFromEventList>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003366:	f000 fe35 	bl	8003fd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	3b01      	subs	r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	dce9      	bgt.n	800334e <prvUnlockQueue+0x16>
 800337a:	e000      	b.n	800337e <prvUnlockQueue+0x46>
					break;
 800337c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	22ff      	movs	r2, #255	@ 0xff
 8003382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003386:	f001 fca9 	bl	8004cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800338a:	f001 fc75 	bl	8004c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003396:	e011      	b.n	80033bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d012      	beq.n	80033c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3310      	adds	r3, #16
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fd37 	bl	8003e18 <xTaskRemoveFromEventList>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033b0:	f000 fe10 	bl	8003fd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033b4:	7bbb      	ldrb	r3, [r7, #14]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dce9      	bgt.n	8003398 <prvUnlockQueue+0x60>
 80033c4:	e000      	b.n	80033c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	22ff      	movs	r2, #255	@ 0xff
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033d0:	f001 fc84 	bl	8004cdc <vPortExitCritical>
}
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033e4:	f001 fc48 	bl	8004c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e001      	b.n	80033fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033fa:	f001 fc6f 	bl	8004cdc <vPortExitCritical>

	return xReturn;
 80033fe:	68fb      	ldr	r3, [r7, #12]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003410:	f001 fc32 	bl	8004c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341c:	429a      	cmp	r2, r3
 800341e:	d102      	bne.n	8003426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003420:	2301      	movs	r3, #1
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e001      	b.n	800342a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800342a:	f001 fc57 	bl	8004cdc <vPortExitCritical>

	return xReturn;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e014      	b.n	8003472 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003448:	4a0f      	ldr	r2, [pc, #60]	@ (8003488 <vQueueAddToRegistry+0x50>)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003454:	490c      	ldr	r1, [pc, #48]	@ (8003488 <vQueueAddToRegistry+0x50>)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <vQueueAddToRegistry+0x50>)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800346a:	e006      	b.n	800347a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b07      	cmp	r3, #7
 8003476:	d9e7      	bls.n	8003448 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000854 	.word	0x20000854

0800348c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800349c:	f001 fbec 	bl	8004c78 <vPortEnterCritical>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034a6:	b25b      	sxtb	r3, r3
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d103      	bne.n	80034b6 <vQueueWaitForMessageRestricted+0x2a>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d103      	bne.n	80034cc <vQueueWaitForMessageRestricted+0x40>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034cc:	f001 fc06 	bl	8004cdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d106      	bne.n	80034e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3324      	adds	r3, #36	@ 0x24
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	68b9      	ldr	r1, [r7, #8]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fc6d 	bl	8003dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff26 	bl	8003338 <prvUnlockQueue>
	}
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08e      	sub	sp, #56	@ 0x38
 80034f8:	af04      	add	r7, sp, #16
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10b      	bne.n	8003520 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	623b      	str	r3, [r7, #32]
}
 800351a:	bf00      	nop
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	61fb      	str	r3, [r7, #28]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800353e:	23a8      	movs	r3, #168	@ 0xa8
 8003540:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2ba8      	cmp	r3, #168	@ 0xa8
 8003546:	d00b      	beq.n	8003560 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	61bb      	str	r3, [r7, #24]
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003560:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01e      	beq.n	80035a6 <xTaskCreateStatic+0xb2>
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	2b00      	cmp	r3, #0
 800356c:	d01b      	beq.n	80035a6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800356e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	2202      	movs	r2, #2
 800357c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003580:	2300      	movs	r3, #0
 8003582:	9303      	str	r3, [sp, #12]
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	9302      	str	r3, [sp, #8]
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f851 	bl	8003640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800359e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035a0:	f000 f8f6 	bl	8003790 <prvAddNewTaskToReadyList>
 80035a4:	e001      	b.n	80035aa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035aa:	697b      	ldr	r3, [r7, #20]
	}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3728      	adds	r7, #40	@ 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08c      	sub	sp, #48	@ 0x30
 80035b8:	af04      	add	r7, sp, #16
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fc77 	bl	8004ebc <pvPortMalloc>
 80035ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00e      	beq.n	80035f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035d6:	20a8      	movs	r0, #168	@ 0xa8
 80035d8:	f001 fc70 	bl	8004ebc <pvPortMalloc>
 80035dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ea:	e005      	b.n	80035f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035ec:	6978      	ldr	r0, [r7, #20]
 80035ee:	f001 fd33 	bl	8005058 <vPortFree>
 80035f2:	e001      	b.n	80035f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d017      	beq.n	800362e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	2300      	movs	r3, #0
 800360a:	9303      	str	r3, [sp, #12]
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	9302      	str	r3, [sp, #8]
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f80f 	bl	8003640 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003622:	69f8      	ldr	r0, [r7, #28]
 8003624:	f000 f8b4 	bl	8003790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003628:	2301      	movs	r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	e002      	b.n	8003634 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003634:	69bb      	ldr	r3, [r7, #24]
	}
 8003636:	4618      	mov	r0, r3
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	461a      	mov	r2, r3
 8003658:	21a5      	movs	r1, #165	@ 0xa5
 800365a:	f001 fe1d 	bl	8005298 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003668:	3b01      	subs	r3, #1
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	617b      	str	r3, [r7, #20]
}
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	e7fd      	b.n	8003696 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01f      	beq.n	80036e0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e012      	b.n	80036cc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	4413      	add	r3, r2
 80036ac:	7819      	ldrb	r1, [r3, #0]
 80036ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	3334      	adds	r3, #52	@ 0x34
 80036b6:	460a      	mov	r2, r1
 80036b8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d9e9      	bls.n	80036a6 <prvInitialiseNewTask+0x66>
 80036d2:	e000      	b.n	80036d6 <prvInitialiseNewTask+0x96>
			{
				break;
 80036d4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036de:	e003      	b.n	80036e8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	2b37      	cmp	r3, #55	@ 0x37
 80036ec:	d901      	bls.n	80036f2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036ee:	2337      	movs	r3, #55	@ 0x37
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036fc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003700:	2200      	movs	r2, #0
 8003702:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f965 	bl	80029d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800370e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003710:	3318      	adds	r3, #24
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff f960 	bl	80029d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800371c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800372e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	2200      	movs	r2, #0
 800373a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	3354      	adds	r3, #84	@ 0x54
 8003742:	224c      	movs	r2, #76	@ 0x4c
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fda6 	bl	8005298 <memset>
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	4a0d      	ldr	r2, [pc, #52]	@ (8003784 <prvInitialiseNewTask+0x144>)
 8003750:	659a      	str	r2, [r3, #88]	@ 0x58
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	4a0c      	ldr	r2, [pc, #48]	@ (8003788 <prvInitialiseNewTask+0x148>)
 8003756:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	4a0c      	ldr	r2, [pc, #48]	@ (800378c <prvInitialiseNewTask+0x14c>)
 800375c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	69b8      	ldr	r0, [r7, #24]
 8003764:	f001 f95a 	bl	8004a1c <pxPortInitialiseStack>
 8003768:	4602      	mov	r2, r0
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003778:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20004ae8 	.word	0x20004ae8
 8003788:	20004b50 	.word	0x20004b50
 800378c:	20004bb8 	.word	0x20004bb8

08003790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003798:	f001 fa6e 	bl	8004c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800379c:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <prvAddNewTaskToReadyList+0xc4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037ae:	4a2a      	ldr	r2, [pc, #168]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b4:	4b27      	ldr	r3, [pc, #156]	@ (8003854 <prvAddNewTaskToReadyList+0xc4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d110      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037bc:	f000 fc2e 	bl	800401c <prvInitialiseTaskLists>
 80037c0:	e00d      	b.n	80037de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037c2:	4b26      	ldr	r3, [pc, #152]	@ (800385c <prvAddNewTaskToReadyList+0xcc>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ca:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d802      	bhi.n	80037de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037de:	4b20      	ldr	r3, [pc, #128]	@ (8003860 <prvAddNewTaskToReadyList+0xd0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003860 <prvAddNewTaskToReadyList+0xd0>)
 80037e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003860 <prvAddNewTaskToReadyList+0xd0>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003864 <prvAddNewTaskToReadyList+0xd4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d903      	bls.n	8003804 <prvAddNewTaskToReadyList+0x74>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	4a18      	ldr	r2, [pc, #96]	@ (8003864 <prvAddNewTaskToReadyList+0xd4>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4a15      	ldr	r2, [pc, #84]	@ (8003868 <prvAddNewTaskToReadyList+0xd8>)
 8003812:	441a      	add	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f7ff f8e9 	bl	80029f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003820:	f001 fa5c 	bl	8004cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003824:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <prvAddNewTaskToReadyList+0xcc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00e      	beq.n	800384a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <prvAddNewTaskToReadyList+0xc8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003836:	429a      	cmp	r2, r3
 8003838:	d207      	bcs.n	800384a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800383a:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <prvAddNewTaskToReadyList+0xdc>)
 800383c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000d68 	.word	0x20000d68
 8003858:	20000894 	.word	0x20000894
 800385c:	20000d74 	.word	0x20000d74
 8003860:	20000d84 	.word	0x20000d84
 8003864:	20000d70 	.word	0x20000d70
 8003868:	20000898 	.word	0x20000898
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003882:	4b14      	ldr	r3, [pc, #80]	@ (80038d4 <vTaskDelay+0x64>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00b      	beq.n	80038a2 <vTaskDelay+0x32>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	60bb      	str	r3, [r7, #8]
}
 800389c:	bf00      	nop
 800389e:	bf00      	nop
 80038a0:	e7fd      	b.n	800389e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038a2:	f000 f88b 	bl	80039bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038a6:	2100      	movs	r1, #0
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fd09 	bl	80042c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038ae:	f000 f893 	bl	80039d8 <xTaskResumeAll>
 80038b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d107      	bne.n	80038ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80038ba:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <vTaskDelay+0x68>)
 80038bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	20000d90 	.word	0x20000d90
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	@ 0x28
 80038e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038ea:	463a      	mov	r2, r7
 80038ec:	1d39      	adds	r1, r7, #4
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff f81c 	bl	8002930 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	460a      	mov	r2, r1
 800390a:	4924      	ldr	r1, [pc, #144]	@ (800399c <vTaskStartScheduler+0xc0>)
 800390c:	4824      	ldr	r0, [pc, #144]	@ (80039a0 <vTaskStartScheduler+0xc4>)
 800390e:	f7ff fdf1 	bl	80034f4 <xTaskCreateStatic>
 8003912:	4603      	mov	r3, r0
 8003914:	4a23      	ldr	r2, [pc, #140]	@ (80039a4 <vTaskStartScheduler+0xc8>)
 8003916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003918:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <vTaskStartScheduler+0xc8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003920:	2301      	movs	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e001      	b.n	800392a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003930:	f000 fd1a 	bl	8004368 <xTimerCreateTimerTask>
 8003934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11b      	bne.n	8003974 <vTaskStartScheduler+0x98>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	613b      	str	r3, [r7, #16]
}
 800394e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003950:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <vTaskStartScheduler+0xcc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3354      	adds	r3, #84	@ 0x54
 8003956:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <vTaskStartScheduler+0xd0>)
 8003958:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800395a:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <vTaskStartScheduler+0xd4>)
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003962:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <vTaskStartScheduler+0xd8>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003968:	4b13      	ldr	r3, [pc, #76]	@ (80039b8 <vTaskStartScheduler+0xdc>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800396e:	f001 f8df 	bl	8004b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003972:	e00f      	b.n	8003994 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d10b      	bne.n	8003994 <vTaskStartScheduler+0xb8>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60fb      	str	r3, [r7, #12]
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <vTaskStartScheduler+0xb4>
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	08005498 	.word	0x08005498
 80039a0:	08003fed 	.word	0x08003fed
 80039a4:	20000d8c 	.word	0x20000d8c
 80039a8:	20000894 	.word	0x20000894
 80039ac:	20000010 	.word	0x20000010
 80039b0:	20000d88 	.word	0x20000d88
 80039b4:	20000d74 	.word	0x20000d74
 80039b8:	20000d6c 	.word	0x20000d6c

080039bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <vTaskSuspendAll+0x18>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a03      	ldr	r2, [pc, #12]	@ (80039d4 <vTaskSuspendAll+0x18>)
 80039c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20000d90 	.word	0x20000d90

080039d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039e6:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <xTaskResumeAll+0x118>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <xTaskResumeAll+0x2e>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	603b      	str	r3, [r7, #0]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a06:	f001 f937 	bl	8004c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a0a:	4b39      	ldr	r3, [pc, #228]	@ (8003af0 <xTaskResumeAll+0x118>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	4a37      	ldr	r2, [pc, #220]	@ (8003af0 <xTaskResumeAll+0x118>)
 8003a12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a14:	4b36      	ldr	r3, [pc, #216]	@ (8003af0 <xTaskResumeAll+0x118>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d162      	bne.n	8003ae2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a1c:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <xTaskResumeAll+0x11c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05e      	beq.n	8003ae2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a24:	e02f      	b.n	8003a86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a26:	4b34      	ldr	r3, [pc, #208]	@ (8003af8 <xTaskResumeAll+0x120>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3318      	adds	r3, #24
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f83a 	bl	8002aac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff f835 	bl	8002aac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a46:	4b2d      	ldr	r3, [pc, #180]	@ (8003afc <xTaskResumeAll+0x124>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d903      	bls.n	8003a56 <xTaskResumeAll+0x7e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a52:	4a2a      	ldr	r2, [pc, #168]	@ (8003afc <xTaskResumeAll+0x124>)
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4a27      	ldr	r2, [pc, #156]	@ (8003b00 <xTaskResumeAll+0x128>)
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f7fe ffc0 	bl	80029f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a76:	4b23      	ldr	r3, [pc, #140]	@ (8003b04 <xTaskResumeAll+0x12c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d302      	bcc.n	8003a86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a80:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <xTaskResumeAll+0x130>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a86:	4b1c      	ldr	r3, [pc, #112]	@ (8003af8 <xTaskResumeAll+0x120>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1cb      	bne.n	8003a26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a94:	f000 fb66 	bl	8004164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a98:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <xTaskResumeAll+0x134>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aa4:	f000 f846 	bl	8003b34 <xTaskIncrementTick>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003aae:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <xTaskResumeAll+0x130>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f1      	bne.n	8003aa4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ac0:	4b12      	ldr	r3, [pc, #72]	@ (8003b0c <xTaskResumeAll+0x134>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ac6:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <xTaskResumeAll+0x130>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d009      	beq.n	8003ae2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8003b10 <xTaskResumeAll+0x138>)
 8003ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ae2:	f001 f8fb 	bl	8004cdc <vPortExitCritical>

	return xAlreadyYielded;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000d90 	.word	0x20000d90
 8003af4:	20000d68 	.word	0x20000d68
 8003af8:	20000d28 	.word	0x20000d28
 8003afc:	20000d70 	.word	0x20000d70
 8003b00:	20000898 	.word	0x20000898
 8003b04:	20000894 	.word	0x20000894
 8003b08:	20000d7c 	.word	0x20000d7c
 8003b0c:	20000d78 	.word	0x20000d78
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <xTaskGetTickCount+0x1c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b20:	687b      	ldr	r3, [r7, #4]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000d6c 	.word	0x20000d6c

08003b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8003c7c <xTaskIncrementTick+0x148>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8090 	bne.w	8003c68 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b48:	4b4d      	ldr	r3, [pc, #308]	@ (8003c80 <xTaskIncrementTick+0x14c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <xTaskIncrementTick+0x14c>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d121      	bne.n	8003ba0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b5c:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <xTaskIncrementTick+0x150>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	603b      	str	r3, [r7, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	e7fd      	b.n	8003b7a <xTaskIncrementTick+0x46>
 8003b7e:	4b41      	ldr	r3, [pc, #260]	@ (8003c84 <xTaskIncrementTick+0x150>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <xTaskIncrementTick+0x154>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a3e      	ldr	r2, [pc, #248]	@ (8003c84 <xTaskIncrementTick+0x150>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4a3e      	ldr	r2, [pc, #248]	@ (8003c88 <xTaskIncrementTick+0x154>)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b3e      	ldr	r3, [pc, #248]	@ (8003c8c <xTaskIncrementTick+0x158>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3301      	adds	r3, #1
 8003b98:	4a3c      	ldr	r2, [pc, #240]	@ (8003c8c <xTaskIncrementTick+0x158>)
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	f000 fae2 	bl	8004164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <xTaskIncrementTick+0x15c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d349      	bcc.n	8003c3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003baa:	4b36      	ldr	r3, [pc, #216]	@ (8003c84 <xTaskIncrementTick+0x150>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb4:	4b36      	ldr	r3, [pc, #216]	@ (8003c90 <xTaskIncrementTick+0x15c>)
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bba:	601a      	str	r2, [r3, #0]
					break;
 8003bbc:	e03f      	b.n	8003c3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbe:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <xTaskIncrementTick+0x150>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d203      	bcs.n	8003bde <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bd6:	4a2e      	ldr	r2, [pc, #184]	@ (8003c90 <xTaskIncrementTick+0x15c>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bdc:	e02f      	b.n	8003c3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe ff62 	bl	8002aac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fe ff59 	bl	8002aac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfe:	4b25      	ldr	r3, [pc, #148]	@ (8003c94 <xTaskIncrementTick+0x160>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d903      	bls.n	8003c0e <xTaskIncrementTick+0xda>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <xTaskIncrementTick+0x160>)
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c98 <xTaskIncrementTick+0x164>)
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f7fe fee4 	bl	80029f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <xTaskIncrementTick+0x168>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d3b8      	bcc.n	8003baa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3c:	e7b5      	b.n	8003baa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c3e:	4b17      	ldr	r3, [pc, #92]	@ (8003c9c <xTaskIncrementTick+0x168>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c44:	4914      	ldr	r1, [pc, #80]	@ (8003c98 <xTaskIncrementTick+0x164>)
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d901      	bls.n	8003c5a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003c56:	2301      	movs	r3, #1
 8003c58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <xTaskIncrementTick+0x16c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003c62:	2301      	movs	r3, #1
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e004      	b.n	8003c72 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c68:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca4 <xTaskIncrementTick+0x170>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca4 <xTaskIncrementTick+0x170>)
 8003c70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c72:	697b      	ldr	r3, [r7, #20]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000d90 	.word	0x20000d90
 8003c80:	20000d6c 	.word	0x20000d6c
 8003c84:	20000d20 	.word	0x20000d20
 8003c88:	20000d24 	.word	0x20000d24
 8003c8c:	20000d80 	.word	0x20000d80
 8003c90:	20000d88 	.word	0x20000d88
 8003c94:	20000d70 	.word	0x20000d70
 8003c98:	20000898 	.word	0x20000898
 8003c9c:	20000894 	.word	0x20000894
 8003ca0:	20000d7c 	.word	0x20000d7c
 8003ca4:	20000d78 	.word	0x20000d78

08003ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cae:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <vTaskSwitchContext+0xb4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d60 <vTaskSwitchContext+0xb8>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cbc:	e047      	b.n	8003d4e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <vTaskSwitchContext+0xb8>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc4:	4b27      	ldr	r3, [pc, #156]	@ (8003d64 <vTaskSwitchContext+0xbc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e011      	b.n	8003cf0 <vTaskSwitchContext+0x48>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <vTaskSwitchContext+0x42>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vTaskSwitchContext+0x3e>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	491d      	ldr	r1, [pc, #116]	@ (8003d68 <vTaskSwitchContext+0xc0>)
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0e3      	beq.n	8003ccc <vTaskSwitchContext+0x24>
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <vTaskSwitchContext+0xc0>)
 8003d10:	4413      	add	r3, r2
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	3308      	adds	r3, #8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d104      	bne.n	8003d34 <vTaskSwitchContext+0x8c>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003d6c <vTaskSwitchContext+0xc4>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4a09      	ldr	r2, [pc, #36]	@ (8003d64 <vTaskSwitchContext+0xbc>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d44:	4b09      	ldr	r3, [pc, #36]	@ (8003d6c <vTaskSwitchContext+0xc4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3354      	adds	r3, #84	@ 0x54
 8003d4a:	4a09      	ldr	r2, [pc, #36]	@ (8003d70 <vTaskSwitchContext+0xc8>)
 8003d4c:	6013      	str	r3, [r2, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000d90 	.word	0x20000d90
 8003d60:	20000d7c 	.word	0x20000d7c
 8003d64:	20000d70 	.word	0x20000d70
 8003d68:	20000898 	.word	0x20000898
 8003d6c:	20000894 	.word	0x20000894
 8003d70:	20000010 	.word	0x20000010

08003d74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10b      	bne.n	8003d9c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	60fb      	str	r3, [r7, #12]
}
 8003d96:	bf00      	nop
 8003d98:	bf00      	nop
 8003d9a:	e7fd      	b.n	8003d98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d9c:	4b07      	ldr	r3, [pc, #28]	@ (8003dbc <vTaskPlaceOnEventList+0x48>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3318      	adds	r3, #24
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7fe fe48 	bl	8002a3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003daa:	2101      	movs	r1, #1
 8003dac:	6838      	ldr	r0, [r7, #0]
 8003dae:	f000 fa87 	bl	80042c0 <prvAddCurrentTaskToDelayedList>
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000894 	.word	0x20000894

08003dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	617b      	str	r3, [r7, #20]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dea:	4b0a      	ldr	r3, [pc, #40]	@ (8003e14 <vTaskPlaceOnEventListRestricted+0x54>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3318      	adds	r3, #24
 8003df0:	4619      	mov	r1, r3
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f7fe fdfd 	bl	80029f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003e02:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	68b8      	ldr	r0, [r7, #8]
 8003e08:	f000 fa5a 	bl	80042c0 <prvAddCurrentTaskToDelayedList>
	}
 8003e0c:	bf00      	nop
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000894 	.word	0x20000894

08003e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60fb      	str	r3, [r7, #12]
}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	e7fd      	b.n	8003e42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	3318      	adds	r3, #24
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fe2e 	bl	8002aac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e50:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec8 <xTaskRemoveFromEventList+0xb0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d11d      	bne.n	8003e94 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fe fe25 	bl	8002aac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e66:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <xTaskRemoveFromEventList+0xb4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d903      	bls.n	8003e76 <xTaskRemoveFromEventList+0x5e>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	4a16      	ldr	r2, [pc, #88]	@ (8003ecc <xTaskRemoveFromEventList+0xb4>)
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <xTaskRemoveFromEventList+0xb8>)
 8003e84:	441a      	add	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f7fe fdb0 	bl	80029f2 <vListInsertEnd>
 8003e92:	e005      	b.n	8003ea0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	3318      	adds	r3, #24
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480e      	ldr	r0, [pc, #56]	@ (8003ed4 <xTaskRemoveFromEventList+0xbc>)
 8003e9c:	f7fe fda9 	bl	80029f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <xTaskRemoveFromEventList+0xc0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d905      	bls.n	8003eba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <xTaskRemoveFromEventList+0xc4>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e001      	b.n	8003ebe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ebe:	697b      	ldr	r3, [r7, #20]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000d90 	.word	0x20000d90
 8003ecc:	20000d70 	.word	0x20000d70
 8003ed0:	20000898 	.word	0x20000898
 8003ed4:	20000d28 	.word	0x20000d28
 8003ed8:	20000894 	.word	0x20000894
 8003edc:	20000d7c 	.word	0x20000d7c

08003ee0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <vTaskInternalSetTimeOutState+0x24>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <vTaskInternalSetTimeOutState+0x28>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000d80 	.word	0x20000d80
 8003f08:	20000d6c 	.word	0x20000d6c

08003f0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	613b      	str	r3, [r7, #16]
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10b      	bne.n	8003f52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f52:	f000 fe91 	bl	8004c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f56:	4b1d      	ldr	r3, [pc, #116]	@ (8003fcc <xTaskCheckForTimeOut+0xc0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	d102      	bne.n	8003f76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e023      	b.n	8003fbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <xTaskCheckForTimeOut+0xc4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d007      	beq.n	8003f92 <xTaskCheckForTimeOut+0x86>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	e015      	b.n	8003fbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d20b      	bcs.n	8003fb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff ff99 	bl	8003ee0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	e004      	b.n	8003fbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fbe:	f000 fe8d 	bl	8004cdc <vPortExitCritical>

	return xReturn;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000d6c 	.word	0x20000d6c
 8003fd0:	20000d80 	.word	0x20000d80

08003fd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <vTaskMissedYield+0x14>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	20000d7c 	.word	0x20000d7c

08003fec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ff4:	f000 f852 	bl	800409c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <prvIdleTask+0x28>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d9f9      	bls.n	8003ff4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <prvIdleTask+0x2c>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004010:	e7f0      	b.n	8003ff4 <prvIdleTask+0x8>
 8004012:	bf00      	nop
 8004014:	20000898 	.word	0x20000898
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	e00c      	b.n	8004042 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4a12      	ldr	r2, [pc, #72]	@ (800407c <prvInitialiseTaskLists+0x60>)
 8004034:	4413      	add	r3, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fcae 	bl	8002998 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3301      	adds	r3, #1
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b37      	cmp	r3, #55	@ 0x37
 8004046:	d9ef      	bls.n	8004028 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004048:	480d      	ldr	r0, [pc, #52]	@ (8004080 <prvInitialiseTaskLists+0x64>)
 800404a:	f7fe fca5 	bl	8002998 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800404e:	480d      	ldr	r0, [pc, #52]	@ (8004084 <prvInitialiseTaskLists+0x68>)
 8004050:	f7fe fca2 	bl	8002998 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004054:	480c      	ldr	r0, [pc, #48]	@ (8004088 <prvInitialiseTaskLists+0x6c>)
 8004056:	f7fe fc9f 	bl	8002998 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800405a:	480c      	ldr	r0, [pc, #48]	@ (800408c <prvInitialiseTaskLists+0x70>)
 800405c:	f7fe fc9c 	bl	8002998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004060:	480b      	ldr	r0, [pc, #44]	@ (8004090 <prvInitialiseTaskLists+0x74>)
 8004062:	f7fe fc99 	bl	8002998 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004066:	4b0b      	ldr	r3, [pc, #44]	@ (8004094 <prvInitialiseTaskLists+0x78>)
 8004068:	4a05      	ldr	r2, [pc, #20]	@ (8004080 <prvInitialiseTaskLists+0x64>)
 800406a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <prvInitialiseTaskLists+0x7c>)
 800406e:	4a05      	ldr	r2, [pc, #20]	@ (8004084 <prvInitialiseTaskLists+0x68>)
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000898 	.word	0x20000898
 8004080:	20000cf8 	.word	0x20000cf8
 8004084:	20000d0c 	.word	0x20000d0c
 8004088:	20000d28 	.word	0x20000d28
 800408c:	20000d3c 	.word	0x20000d3c
 8004090:	20000d54 	.word	0x20000d54
 8004094:	20000d20 	.word	0x20000d20
 8004098:	20000d24 	.word	0x20000d24

0800409c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a2:	e019      	b.n	80040d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040a4:	f000 fde8 	bl	8004c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a8:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <prvCheckTasksWaitingTermination+0x50>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fcf9 	bl	8002aac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040ba:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <prvCheckTasksWaitingTermination+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3b01      	subs	r3, #1
 80040c0:	4a0b      	ldr	r2, [pc, #44]	@ (80040f0 <prvCheckTasksWaitingTermination+0x54>)
 80040c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <prvCheckTasksWaitingTermination+0x58>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <prvCheckTasksWaitingTermination+0x58>)
 80040cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ce:	f000 fe05 	bl	8004cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f810 	bl	80040f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <prvCheckTasksWaitingTermination+0x58>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e1      	bne.n	80040a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000d3c 	.word	0x20000d3c
 80040f0:	20000d68 	.word	0x20000d68
 80040f4:	20000d50 	.word	0x20000d50

080040f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3354      	adds	r3, #84	@ 0x54
 8004104:	4618      	mov	r0, r3
 8004106:	f001 f8cf 	bl	80052a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	4618      	mov	r0, r3
 800411a:	f000 ff9d 	bl	8005058 <vPortFree>
				vPortFree( pxTCB );
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 ff9a 	bl	8005058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004124:	e019      	b.n	800415a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800412c:	2b01      	cmp	r3, #1
 800412e:	d103      	bne.n	8004138 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 ff91 	bl	8005058 <vPortFree>
	}
 8004136:	e010      	b.n	800415a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800413e:	2b02      	cmp	r3, #2
 8004140:	d00b      	beq.n	800415a <prvDeleteTCB+0x62>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	e7fd      	b.n	8004156 <prvDeleteTCB+0x5e>
	}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800416a:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <prvResetNextTaskUnblockTime+0x38>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004174:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004176:	f04f 32ff 	mov.w	r2, #4294967295
 800417a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800417c:	e008      	b.n	8004190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417e:	4b07      	ldr	r3, [pc, #28]	@ (800419c <prvResetNextTaskUnblockTime+0x38>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <prvResetNextTaskUnblockTime+0x3c>)
 800418e:	6013      	str	r3, [r2, #0]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	20000d20 	.word	0x20000d20
 80041a0:	20000d88 	.word	0x20000d88

080041a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041aa:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <xTaskGetSchedulerState+0x34>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d102      	bne.n	80041b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041b2:	2301      	movs	r3, #1
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	e008      	b.n	80041ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b8:	4b08      	ldr	r3, [pc, #32]	@ (80041dc <xTaskGetSchedulerState+0x38>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d102      	bne.n	80041c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041c0:	2302      	movs	r3, #2
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	e001      	b.n	80041ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041c6:	2300      	movs	r3, #0
 80041c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041ca:	687b      	ldr	r3, [r7, #4]
	}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	20000d74 	.word	0x20000d74
 80041dc:	20000d90 	.word	0x20000d90

080041e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d058      	beq.n	80042a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041f6:	4b2f      	ldr	r3, [pc, #188]	@ (80042b4 <xTaskPriorityDisinherit+0xd4>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d00b      	beq.n	8004218 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	60bb      	str	r3, [r7, #8]
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423c:	1e5a      	subs	r2, r3, #1
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424a:	429a      	cmp	r2, r3
 800424c:	d02c      	beq.n	80042a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d128      	bne.n	80042a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	3304      	adds	r3, #4
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fc26 	bl	8002aac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004278:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <xTaskPriorityDisinherit+0xd8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <xTaskPriorityDisinherit+0xa8>
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <xTaskPriorityDisinherit+0xd8>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a09      	ldr	r2, [pc, #36]	@ (80042bc <xTaskPriorityDisinherit+0xdc>)
 8004296:	441a      	add	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fe fba7 	bl	80029f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042a4:	2301      	movs	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042a8:	697b      	ldr	r3, [r7, #20]
	}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000894 	.word	0x20000894
 80042b8:	20000d70 	.word	0x20000d70
 80042bc:	20000898 	.word	0x20000898

080042c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042ca:	4b21      	ldr	r3, [pc, #132]	@ (8004350 <prvAddCurrentTaskToDelayedList+0x90>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042d0:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fbe8 	bl	8002aac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d10a      	bne.n	80042fa <prvAddCurrentTaskToDelayedList+0x3a>
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4819      	ldr	r0, [pc, #100]	@ (8004358 <prvAddCurrentTaskToDelayedList+0x98>)
 80042f4:	f7fe fb7d 	bl	80029f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042f8:	e026      	b.n	8004348 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	429a      	cmp	r2, r3
 8004310:	d209      	bcs.n	8004326 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004312:	4b12      	ldr	r3, [pc, #72]	@ (800435c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f7fe fb8b 	bl	8002a3a <vListInsert>
}
 8004324:	e010      	b.n	8004348 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004326:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <prvAddCurrentTaskToDelayedList+0x94>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f7fe fb81 	bl	8002a3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004338:	4b0a      	ldr	r3, [pc, #40]	@ (8004364 <prvAddCurrentTaskToDelayedList+0xa4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	d202      	bcs.n	8004348 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004342:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000d6c 	.word	0x20000d6c
 8004354:	20000894 	.word	0x20000894
 8004358:	20000d54 	.word	0x20000d54
 800435c:	20000d24 	.word	0x20000d24
 8004360:	20000d20 	.word	0x20000d20
 8004364:	20000d88 	.word	0x20000d88

08004368 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	@ 0x28
 800436c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004372:	f000 fb13 	bl	800499c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004376:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <xTimerCreateTimerTask+0x84>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d021      	beq.n	80043c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004386:	1d3a      	adds	r2, r7, #4
 8004388:	f107 0108 	add.w	r1, r7, #8
 800438c:	f107 030c 	add.w	r3, r7, #12
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fae7 	bl	8002964 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	9202      	str	r2, [sp, #8]
 800439e:	9301      	str	r3, [sp, #4]
 80043a0:	2302      	movs	r3, #2
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2300      	movs	r3, #0
 80043a6:	460a      	mov	r2, r1
 80043a8:	4911      	ldr	r1, [pc, #68]	@ (80043f0 <xTimerCreateTimerTask+0x88>)
 80043aa:	4812      	ldr	r0, [pc, #72]	@ (80043f4 <xTimerCreateTimerTask+0x8c>)
 80043ac:	f7ff f8a2 	bl	80034f4 <xTaskCreateStatic>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4a11      	ldr	r2, [pc, #68]	@ (80043f8 <xTimerCreateTimerTask+0x90>)
 80043b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043b6:	4b10      	ldr	r3, [pc, #64]	@ (80043f8 <xTimerCreateTimerTask+0x90>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043be:	2301      	movs	r3, #1
 80043c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	613b      	str	r3, [r7, #16]
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80043e0:	697b      	ldr	r3, [r7, #20]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000dc4 	.word	0x20000dc4
 80043f0:	080054a0 	.word	0x080054a0
 80043f4:	08004535 	.word	0x08004535
 80043f8:	20000dc8 	.word	0x20000dc8

080043fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	@ 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <xTimerGenericCommand+0x30>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	623b      	str	r3, [r7, #32]
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800442c:	4b19      	ldr	r3, [pc, #100]	@ (8004494 <xTimerGenericCommand+0x98>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02a      	beq.n	800448a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b05      	cmp	r3, #5
 8004444:	dc18      	bgt.n	8004478 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004446:	f7ff fead 	bl	80041a4 <xTaskGetSchedulerState>
 800444a:	4603      	mov	r3, r0
 800444c:	2b02      	cmp	r3, #2
 800444e:	d109      	bne.n	8004464 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004450:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <xTimerGenericCommand+0x98>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	f107 0110 	add.w	r1, r7, #16
 8004458:	2300      	movs	r3, #0
 800445a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800445c:	f7fe fc5a 	bl	8002d14 <xQueueGenericSend>
 8004460:	6278      	str	r0, [r7, #36]	@ 0x24
 8004462:	e012      	b.n	800448a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004464:	4b0b      	ldr	r3, [pc, #44]	@ (8004494 <xTimerGenericCommand+0x98>)
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	f107 0110 	add.w	r1, r7, #16
 800446c:	2300      	movs	r3, #0
 800446e:	2200      	movs	r2, #0
 8004470:	f7fe fc50 	bl	8002d14 <xQueueGenericSend>
 8004474:	6278      	str	r0, [r7, #36]	@ 0x24
 8004476:	e008      	b.n	800448a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004478:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <xTimerGenericCommand+0x98>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	f107 0110 	add.w	r1, r7, #16
 8004480:	2300      	movs	r3, #0
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	f7fe fd48 	bl	8002f18 <xQueueGenericSendFromISR>
 8004488:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800448c:	4618      	mov	r0, r3
 800448e:	3728      	adds	r7, #40	@ 0x28
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000dc4 	.word	0x20000dc4

08004498 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a2:	4b23      	ldr	r3, [pc, #140]	@ (8004530 <prvProcessExpiredTimer+0x98>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3304      	adds	r3, #4
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fafb 	bl	8002aac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	18d1      	adds	r1, r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f000 f8d5 	bl	8004680 <prvInsertTimerInActiveList>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044dc:	2300      	movs	r3, #0
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2300      	movs	r3, #0
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	2100      	movs	r1, #0
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff88 	bl	80043fc <xTimerGenericCommand>
 80044ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d114      	bne.n	800451e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	60fb      	str	r3, [r7, #12]
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	6978      	ldr	r0, [r7, #20]
 8004524:	4798      	blx	r3
}
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	20000dbc 	.word	0x20000dbc

08004534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800453c:	f107 0308 	add.w	r3, r7, #8
 8004540:	4618      	mov	r0, r3
 8004542:	f000 f859 	bl	80045f8 <prvGetNextExpireTime>
 8004546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4619      	mov	r1, r3
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f805 	bl	800455c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004552:	f000 f8d7 	bl	8004704 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004556:	bf00      	nop
 8004558:	e7f0      	b.n	800453c <prvTimerTask+0x8>
	...

0800455c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004566:	f7ff fa29 	bl	80039bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f000 f866 	bl	8004640 <prvSampleTimeNow>
 8004574:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d130      	bne.n	80045de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <prvProcessTimerOrBlockTask+0x3c>
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	429a      	cmp	r2, r3
 8004588:	d806      	bhi.n	8004598 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800458a:	f7ff fa25 	bl	80039d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800458e:	68f9      	ldr	r1, [r7, #12]
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff81 	bl	8004498 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004596:	e024      	b.n	80045e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800459e:	4b13      	ldr	r3, [pc, #76]	@ (80045ec <prvProcessTimerOrBlockTask+0x90>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <prvProcessTimerOrBlockTask+0x50>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <prvProcessTimerOrBlockTask+0x52>
 80045ac:	2300      	movs	r3, #0
 80045ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80045b0:	4b0f      	ldr	r3, [pc, #60]	@ (80045f0 <prvProcessTimerOrBlockTask+0x94>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4619      	mov	r1, r3
 80045be:	f7fe ff65 	bl	800348c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80045c2:	f7ff fa09 	bl	80039d8 <xTaskResumeAll>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10a      	bne.n	80045e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <prvProcessTimerOrBlockTask+0x98>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	f3bf 8f6f 	isb	sy
}
 80045dc:	e001      	b.n	80045e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80045de:	f7ff f9fb 	bl	80039d8 <xTaskResumeAll>
}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000dc0 	.word	0x20000dc0
 80045f0:	20000dc4 	.word	0x20000dc4
 80045f4:	e000ed04 	.word	0xe000ed04

080045f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004600:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <prvGetNextExpireTime+0x44>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <prvGetNextExpireTime+0x16>
 800460a:	2201      	movs	r2, #1
 800460c:	e000      	b.n	8004610 <prvGetNextExpireTime+0x18>
 800460e:	2200      	movs	r2, #0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d105      	bne.n	8004628 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800461c:	4b07      	ldr	r3, [pc, #28]	@ (800463c <prvGetNextExpireTime+0x44>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e001      	b.n	800462c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800462c:	68fb      	ldr	r3, [r7, #12]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20000dbc 	.word	0x20000dbc

08004640 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004648:	f7ff fa64 	bl	8003b14 <xTaskGetTickCount>
 800464c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <prvSampleTimeNow+0x3c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	429a      	cmp	r2, r3
 8004656:	d205      	bcs.n	8004664 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004658:	f000 f93a 	bl	80048d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e002      	b.n	800466a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800466a:	4a04      	ldr	r2, [pc, #16]	@ (800467c <prvSampleTimeNow+0x3c>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004670:	68fb      	ldr	r3, [r7, #12]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000dcc 	.word	0x20000dcc

08004680 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d812      	bhi.n	80046cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e01b      	b.n	80046f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80046ba:	4b10      	ldr	r3, [pc, #64]	@ (80046fc <prvInsertTimerInActiveList+0x7c>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f7fe f9b8 	bl	8002a3a <vListInsert>
 80046ca:	e012      	b.n	80046f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d206      	bcs.n	80046e2 <prvInsertTimerInActiveList+0x62>
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d302      	bcc.n	80046e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80046dc:	2301      	movs	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e007      	b.n	80046f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046e2:	4b07      	ldr	r3, [pc, #28]	@ (8004700 <prvInsertTimerInActiveList+0x80>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3304      	adds	r3, #4
 80046ea:	4619      	mov	r1, r3
 80046ec:	4610      	mov	r0, r2
 80046ee:	f7fe f9a4 	bl	8002a3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80046f2:	697b      	ldr	r3, [r7, #20]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000dc0 	.word	0x20000dc0
 8004700:	20000dbc 	.word	0x20000dbc

08004704 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	@ 0x38
 8004708:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800470a:	e0ce      	b.n	80048aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	da19      	bge.n	8004746 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	3304      	adds	r3, #4
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	61fb      	str	r3, [r7, #28]
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	e7fd      	b.n	8004732 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800473c:	6850      	ldr	r0, [r2, #4]
 800473e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004740:	6892      	ldr	r2, [r2, #8]
 8004742:	4611      	mov	r1, r2
 8004744:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f2c0 80ae 	blt.w	80048aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d004      	beq.n	8004764 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	3304      	adds	r3, #4
 800475e:	4618      	mov	r0, r3
 8004760:	f7fe f9a4 	bl	8002aac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004764:	463b      	mov	r3, r7
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff6a 	bl	8004640 <prvSampleTimeNow>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b09      	cmp	r3, #9
 8004772:	f200 8097 	bhi.w	80048a4 <prvProcessReceivedCommands+0x1a0>
 8004776:	a201      	add	r2, pc, #4	@ (adr r2, 800477c <prvProcessReceivedCommands+0x78>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047a5 	.word	0x080047a5
 8004784:	080047a5 	.word	0x080047a5
 8004788:	0800481b 	.word	0x0800481b
 800478c:	0800482f 	.word	0x0800482f
 8004790:	0800487b 	.word	0x0800487b
 8004794:	080047a5 	.word	0x080047a5
 8004798:	080047a5 	.word	0x080047a5
 800479c:	0800481b 	.word	0x0800481b
 80047a0:	0800482f 	.word	0x0800482f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	18d1      	adds	r1, r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047c4:	f7ff ff5c 	bl	8004680 <prvInsertTimerInActiveList>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d06c      	beq.n	80048a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d061      	beq.n	80048a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	441a      	add	r2, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	2300      	movs	r3, #0
 80047f2:	2100      	movs	r1, #0
 80047f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f6:	f7ff fe01 	bl	80043fc <xTimerGenericCommand>
 80047fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d152      	bne.n	80048a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	61bb      	str	r3, [r7, #24]
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	e7fd      	b.n	8004816 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800481a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	b2da      	uxtb	r2, r3
 8004826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004828:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800482c:	e03d      	b.n	80048aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800482e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	b2da      	uxtb	r2, r3
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	617b      	str	r3, [r7, #20]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	18d1      	adds	r1, r2, r3
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004874:	f7ff ff04 	bl	8004680 <prvInsertTimerInActiveList>
					break;
 8004878:	e017      	b.n	80048aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800488a:	f000 fbe5 	bl	8005058 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800488e:	e00c      	b.n	80048aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048a2:	e002      	b.n	80048aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <prvProcessReceivedCommands+0x1a6>
					break;
 80048a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <prvProcessReceivedCommands+0x1c8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	1d39      	adds	r1, r7, #4
 80048b0:	2200      	movs	r2, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fbce 	bl	8003054 <xQueueReceive>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f af26 	bne.w	800470c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	3730      	adds	r7, #48	@ 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000dc4 	.word	0x20000dc4

080048d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d6:	e049      	b.n	800496c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004994 <prvSwitchTimerLists+0xc4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004994 <prvSwitchTimerLists+0xc4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe f8db 	bl	8002aac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02f      	beq.n	800496c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4413      	add	r3, r2
 8004914:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90e      	bls.n	800493c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800492a:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <prvSwitchTimerLists+0xc4>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3304      	adds	r3, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4610      	mov	r0, r2
 8004936:	f7fe f880 	bl	8002a3a <vListInsert>
 800493a:	e017      	b.n	800496c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800493c:	2300      	movs	r3, #0
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	2100      	movs	r1, #0
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff fd58 	bl	80043fc <xTimerGenericCommand>
 800494c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	603b      	str	r3, [r7, #0]
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496c:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <prvSwitchTimerLists+0xc4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1b0      	bne.n	80048d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004976:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <prvSwitchTimerLists+0xc4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <prvSwitchTimerLists+0xc8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <prvSwitchTimerLists+0xc4>)
 8004982:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004984:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <prvSwitchTimerLists+0xc8>)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	6013      	str	r3, [r2, #0]
}
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000dbc 	.word	0x20000dbc
 8004998:	20000dc0 	.word	0x20000dc0

0800499c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80049a2:	f000 f969 	bl	8004c78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80049a6:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <prvCheckForValidListAndQueue+0x60>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d120      	bne.n	80049f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80049ae:	4814      	ldr	r0, [pc, #80]	@ (8004a00 <prvCheckForValidListAndQueue+0x64>)
 80049b0:	f7fd fff2 	bl	8002998 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80049b4:	4813      	ldr	r0, [pc, #76]	@ (8004a04 <prvCheckForValidListAndQueue+0x68>)
 80049b6:	f7fd ffef 	bl	8002998 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <prvCheckForValidListAndQueue+0x6c>)
 80049bc:	4a10      	ldr	r2, [pc, #64]	@ (8004a00 <prvCheckForValidListAndQueue+0x64>)
 80049be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80049c0:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <prvCheckForValidListAndQueue+0x70>)
 80049c2:	4a10      	ldr	r2, [pc, #64]	@ (8004a04 <prvCheckForValidListAndQueue+0x68>)
 80049c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80049c6:	2300      	movs	r3, #0
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4b11      	ldr	r3, [pc, #68]	@ (8004a10 <prvCheckForValidListAndQueue+0x74>)
 80049cc:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <prvCheckForValidListAndQueue+0x78>)
 80049ce:	2110      	movs	r1, #16
 80049d0:	200a      	movs	r0, #10
 80049d2:	f7fe f8ff 	bl	8002bd4 <xQueueGenericCreateStatic>
 80049d6:	4603      	mov	r3, r0
 80049d8:	4a08      	ldr	r2, [pc, #32]	@ (80049fc <prvCheckForValidListAndQueue+0x60>)
 80049da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80049dc:	4b07      	ldr	r3, [pc, #28]	@ (80049fc <prvCheckForValidListAndQueue+0x60>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <prvCheckForValidListAndQueue+0x60>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	490b      	ldr	r1, [pc, #44]	@ (8004a18 <prvCheckForValidListAndQueue+0x7c>)
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe fd24 	bl	8003438 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049f0:	f000 f974 	bl	8004cdc <vPortExitCritical>
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000dc4 	.word	0x20000dc4
 8004a00:	20000d94 	.word	0x20000d94
 8004a04:	20000da8 	.word	0x20000da8
 8004a08:	20000dbc 	.word	0x20000dbc
 8004a0c:	20000dc0 	.word	0x20000dc0
 8004a10:	20000e70 	.word	0x20000e70
 8004a14:	20000dd0 	.word	0x20000dd0
 8004a18:	080054a8 	.word	0x080054a8

08004a1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3b04      	subs	r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b04      	subs	r3, #4
 8004a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3b04      	subs	r3, #4
 8004a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a80 <pxPortInitialiseStack+0x64>)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b14      	subs	r3, #20
 8004a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3b04      	subs	r3, #4
 8004a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f06f 0202 	mvn.w	r2, #2
 8004a6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b20      	subs	r3, #32
 8004a70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a72:	68fb      	ldr	r3, [r7, #12]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	08004a85 	.word	0x08004a85

08004a84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a8e:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <prvTaskExitError+0x58>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d00b      	beq.n	8004ab0 <prvTaskExitError+0x2c>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	60fb      	str	r3, [r7, #12]
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	e7fd      	b.n	8004aac <prvTaskExitError+0x28>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60bb      	str	r3, [r7, #8]
}
 8004ac2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ac4:	bf00      	nop
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0fc      	beq.n	8004ac6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	2000000c 	.word	0x2000000c

08004ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ae0:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <pxCurrentTCBConst2>)
 8004ae2:	6819      	ldr	r1, [r3, #0]
 8004ae4:	6808      	ldr	r0, [r1, #0]
 8004ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	f380 8809 	msr	PSP, r0
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8811 	msr	BASEPRI, r0
 8004afa:	4770      	bx	lr
 8004afc:	f3af 8000 	nop.w

08004b00 <pxCurrentTCBConst2>:
 8004b00:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop

08004b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b08:	4808      	ldr	r0, [pc, #32]	@ (8004b2c <prvPortStartFirstTask+0x24>)
 8004b0a:	6800      	ldr	r0, [r0, #0]
 8004b0c:	6800      	ldr	r0, [r0, #0]
 8004b0e:	f380 8808 	msr	MSP, r0
 8004b12:	f04f 0000 	mov.w	r0, #0
 8004b16:	f380 8814 	msr	CONTROL, r0
 8004b1a:	b662      	cpsie	i
 8004b1c:	b661      	cpsie	f
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	df00      	svc	0
 8004b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b2a:	bf00      	nop
 8004b2c:	e000ed08 	.word	0xe000ed08

08004b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b36:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <xPortStartScheduler+0x124>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a47      	ldr	r2, [pc, #284]	@ (8004c58 <xPortStartScheduler+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10b      	bne.n	8004b58 <xPortStartScheduler+0x28>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	613b      	str	r3, [r7, #16]
}
 8004b52:	bf00      	nop
 8004b54:	bf00      	nop
 8004b56:	e7fd      	b.n	8004b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b58:	4b3e      	ldr	r3, [pc, #248]	@ (8004c54 <xPortStartScheduler+0x124>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c5c <xPortStartScheduler+0x12c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10b      	bne.n	8004b7a <xPortStartScheduler+0x4a>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	60fb      	str	r3, [r7, #12]
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	e7fd      	b.n	8004b76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <xPortStartScheduler+0x130>)
 8004b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	22ff      	movs	r2, #255	@ 0xff
 8004b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	4b31      	ldr	r3, [pc, #196]	@ (8004c64 <xPortStartScheduler+0x134>)
 8004ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ba2:	4b31      	ldr	r3, [pc, #196]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ba8:	e009      	b.n	8004bbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004baa:	4b2f      	ldr	r3, [pc, #188]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d0ef      	beq.n	8004baa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bca:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f1c3 0307 	rsb	r3, r3, #7
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d00b      	beq.n	8004bee <xPortStartScheduler+0xbe>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	60bb      	str	r3, [r7, #8]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bee:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <xPortStartScheduler+0x138>)
 8004c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c0c:	4b17      	ldr	r3, [pc, #92]	@ (8004c6c <xPortStartScheduler+0x13c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a16      	ldr	r2, [pc, #88]	@ (8004c6c <xPortStartScheduler+0x13c>)
 8004c12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c18:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <xPortStartScheduler+0x13c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a13      	ldr	r2, [pc, #76]	@ (8004c6c <xPortStartScheduler+0x13c>)
 8004c1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c24:	f000 f8da 	bl	8004ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c28:	4b11      	ldr	r3, [pc, #68]	@ (8004c70 <xPortStartScheduler+0x140>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c2e:	f000 f8f9 	bl	8004e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c32:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <xPortStartScheduler+0x144>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a0f      	ldr	r2, [pc, #60]	@ (8004c74 <xPortStartScheduler+0x144>)
 8004c38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c3e:	f7ff ff63 	bl	8004b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c42:	f7ff f831 	bl	8003ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c46:	f7ff ff1d 	bl	8004a84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	e000ed00 	.word	0xe000ed00
 8004c58:	410fc271 	.word	0x410fc271
 8004c5c:	410fc270 	.word	0x410fc270
 8004c60:	e000e400 	.word	0xe000e400
 8004c64:	20000ec0 	.word	0x20000ec0
 8004c68:	20000ec4 	.word	0x20000ec4
 8004c6c:	e000ed20 	.word	0xe000ed20
 8004c70:	2000000c 	.word	0x2000000c
 8004c74:	e000ef34 	.word	0xe000ef34

08004c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
}
 8004c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c92:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <vPortEnterCritical+0x5c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	4a0e      	ldr	r2, [pc, #56]	@ (8004cd4 <vPortEnterCritical+0x5c>)
 8004c9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <vPortEnterCritical+0x5c>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d110      	bne.n	8004cc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd8 <vPortEnterCritical+0x60>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	603b      	str	r3, [r7, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	e7fd      	b.n	8004cc2 <vPortEnterCritical+0x4a>
	}
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	2000000c 	.word	0x2000000c
 8004cd8:	e000ed04 	.word	0xe000ed04

08004cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ce2:	4b12      	ldr	r3, [pc, #72]	@ (8004d2c <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10b      	bne.n	8004d02 <vPortExitCritical+0x26>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	607b      	str	r3, [r7, #4]
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	e7fd      	b.n	8004cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d02:	4b0a      	ldr	r3, [pc, #40]	@ (8004d2c <vPortExitCritical+0x50>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	4a08      	ldr	r2, [pc, #32]	@ (8004d2c <vPortExitCritical+0x50>)
 8004d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d0c:	4b07      	ldr	r3, [pc, #28]	@ (8004d2c <vPortExitCritical+0x50>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <vPortExitCritical+0x44>
 8004d14:	2300      	movs	r3, #0
 8004d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
}
 8004d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	2000000c 	.word	0x2000000c

08004d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d30:	f3ef 8009 	mrs	r0, PSP
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <pxCurrentTCBConst>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	f01e 0f10 	tst.w	lr, #16
 8004d40:	bf08      	it	eq
 8004d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	6010      	str	r0, [r2, #0]
 8004d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d54:	f380 8811 	msr	BASEPRI, r0
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f7fe ffa2 	bl	8003ca8 <vTaskSwitchContext>
 8004d64:	f04f 0000 	mov.w	r0, #0
 8004d68:	f380 8811 	msr	BASEPRI, r0
 8004d6c:	bc09      	pop	{r0, r3}
 8004d6e:	6819      	ldr	r1, [r3, #0]
 8004d70:	6808      	ldr	r0, [r1, #0]
 8004d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d76:	f01e 0f10 	tst.w	lr, #16
 8004d7a:	bf08      	it	eq
 8004d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d80:	f380 8809 	msr	PSP, r0
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w

08004d90 <pxCurrentTCBConst>:
 8004d90:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004db2:	f7fe febf 	bl	8003b34 <xTaskIncrementTick>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <xPortSysTickHandler+0x40>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f383 8811 	msr	BASEPRI, r3
}
 8004dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dd0:	bf00      	nop
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004de0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <vPortSetupTimerInterrupt+0x34>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <vPortSetupTimerInterrupt+0x38>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <vPortSetupTimerInterrupt+0x3c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e1c <vPortSetupTimerInterrupt+0x40>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	4a09      	ldr	r2, [pc, #36]	@ (8004e20 <vPortSetupTimerInterrupt+0x44>)
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dfe:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <vPortSetupTimerInterrupt+0x34>)
 8004e00:	2207      	movs	r2, #7
 8004e02:	601a      	str	r2, [r3, #0]
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	e000e010 	.word	0xe000e010
 8004e14:	e000e018 	.word	0xe000e018
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	10624dd3 	.word	0x10624dd3
 8004e20:	e000e014 	.word	0xe000e014

08004e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004e34 <vPortEnableVFP+0x10>
 8004e28:	6801      	ldr	r1, [r0, #0]
 8004e2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004e2e:	6001      	str	r1, [r0, #0]
 8004e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e32:	bf00      	nop
 8004e34:	e000ed88 	.word	0xe000ed88

08004e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e3e:	f3ef 8305 	mrs	r3, IPSR
 8004e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b0f      	cmp	r3, #15
 8004e48:	d915      	bls.n	8004e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e4a:	4a18      	ldr	r2, [pc, #96]	@ (8004eac <vPortValidateInterruptPriority+0x74>)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e54:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <vPortValidateInterruptPriority+0x78>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	7afa      	ldrb	r2, [r7, #11]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d20b      	bcs.n	8004e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	607b      	str	r3, [r7, #4]
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	e7fd      	b.n	8004e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004e76:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <vPortValidateInterruptPriority+0x7c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <vPortValidateInterruptPriority+0x80>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d90b      	bls.n	8004e9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	603b      	str	r3, [r7, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <vPortValidateInterruptPriority+0x62>
	}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	e000e3f0 	.word	0xe000e3f0
 8004eb0:	20000ec0 	.word	0x20000ec0
 8004eb4:	e000ed0c 	.word	0xe000ed0c
 8004eb8:	20000ec4 	.word	0x20000ec4

08004ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	@ 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ec8:	f7fe fd78 	bl	80039bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8005040 <pvPortMalloc+0x184>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ed4:	f000 f924 	bl	8005120 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8005044 <pvPortMalloc+0x188>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 8095 	bne.w	8005010 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01e      	beq.n	8004f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004eec:	2208      	movs	r2, #8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d015      	beq.n	8004f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	3308      	adds	r3, #8
 8004f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <pvPortMalloc+0x6e>
	__asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	617b      	str	r3, [r7, #20]
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	e7fd      	b.n	8004f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d06f      	beq.n	8005010 <pvPortMalloc+0x154>
 8004f30:	4b45      	ldr	r3, [pc, #276]	@ (8005048 <pvPortMalloc+0x18c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d86a      	bhi.n	8005010 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f3a:	4b44      	ldr	r3, [pc, #272]	@ (800504c <pvPortMalloc+0x190>)
 8004f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f3e:	4b43      	ldr	r3, [pc, #268]	@ (800504c <pvPortMalloc+0x190>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f44:	e004      	b.n	8004f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d903      	bls.n	8004f62 <pvPortMalloc+0xa6>
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f1      	bne.n	8004f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f62:	4b37      	ldr	r3, [pc, #220]	@ (8005040 <pvPortMalloc+0x184>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d051      	beq.n	8005010 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	4413      	add	r3, r2
 8004f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	1ad2      	subs	r2, r2, r3
 8004f86:	2308      	movs	r3, #8
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d920      	bls.n	8004fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <pvPortMalloc+0xfc>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	613b      	str	r3, [r7, #16]
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1ad2      	subs	r2, r2, r3
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004fca:	69b8      	ldr	r0, [r7, #24]
 8004fcc:	f000 f90a 	bl	80051e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8005048 <pvPortMalloc+0x18c>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <pvPortMalloc+0x18c>)
 8004fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fde:	4b1a      	ldr	r3, [pc, #104]	@ (8005048 <pvPortMalloc+0x18c>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <pvPortMalloc+0x194>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d203      	bcs.n	8004ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fea:	4b17      	ldr	r3, [pc, #92]	@ (8005048 <pvPortMalloc+0x18c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a18      	ldr	r2, [pc, #96]	@ (8005050 <pvPortMalloc+0x194>)
 8004ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4b13      	ldr	r3, [pc, #76]	@ (8005044 <pvPortMalloc+0x188>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005006:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <pvPortMalloc+0x198>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	4a11      	ldr	r2, [pc, #68]	@ (8005054 <pvPortMalloc+0x198>)
 800500e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005010:	f7fe fce2 	bl	80039d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <pvPortMalloc+0x17a>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	60fb      	str	r3, [r7, #12]
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	e7fd      	b.n	8005032 <pvPortMalloc+0x176>
	return pvReturn;
 8005036:	69fb      	ldr	r3, [r7, #28]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3728      	adds	r7, #40	@ 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20004ad0 	.word	0x20004ad0
 8005044:	20004ae4 	.word	0x20004ae4
 8005048:	20004ad4 	.word	0x20004ad4
 800504c:	20004ac8 	.word	0x20004ac8
 8005050:	20004ad8 	.word	0x20004ad8
 8005054:	20004adc 	.word	0x20004adc

08005058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d04f      	beq.n	800510a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800506a:	2308      	movs	r3, #8
 800506c:	425b      	negs	r3, r3
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4413      	add	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	4b25      	ldr	r3, [pc, #148]	@ (8005114 <vPortFree+0xbc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4013      	ands	r3, r2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <vPortFree+0x46>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60fb      	str	r3, [r7, #12]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <vPortFree+0x66>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60bb      	str	r3, [r7, #8]
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	e7fd      	b.n	80050ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <vPortFree+0xbc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01e      	beq.n	800510a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11a      	bne.n	800510a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005114 <vPortFree+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050e4:	f7fe fc6a 	bl	80039bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005118 <vPortFree+0xc0>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4413      	add	r3, r2
 80050f2:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <vPortFree+0xc0>)
 80050f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050f6:	6938      	ldr	r0, [r7, #16]
 80050f8:	f000 f874 	bl	80051e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050fc:	4b07      	ldr	r3, [pc, #28]	@ (800511c <vPortFree+0xc4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4a06      	ldr	r2, [pc, #24]	@ (800511c <vPortFree+0xc4>)
 8005104:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005106:	f7fe fc67 	bl	80039d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20004ae4 	.word	0x20004ae4
 8005118:	20004ad4 	.word	0x20004ad4
 800511c:	20004ae0 	.word	0x20004ae0

08005120 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005126:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800512a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800512c:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <prvHeapInit+0xac>)
 800512e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00c      	beq.n	8005154 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3307      	adds	r3, #7
 800513e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0307 	bic.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	4a1f      	ldr	r2, [pc, #124]	@ (80051cc <prvHeapInit+0xac>)
 8005150:	4413      	add	r3, r2
 8005152:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005158:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <prvHeapInit+0xb0>)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800515e:	4b1c      	ldr	r3, [pc, #112]	@ (80051d0 <prvHeapInit+0xb0>)
 8005160:	2200      	movs	r2, #0
 8005162:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4413      	add	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800516c:	2208      	movs	r2, #8
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1a9b      	subs	r3, r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a15      	ldr	r2, [pc, #84]	@ (80051d4 <prvHeapInit+0xb4>)
 8005180:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005182:	4b14      	ldr	r3, [pc, #80]	@ (80051d4 <prvHeapInit+0xb4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2200      	movs	r2, #0
 8005188:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <prvHeapInit+0xb4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051a0:	4b0c      	ldr	r3, [pc, #48]	@ (80051d4 <prvHeapInit+0xb4>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4a0a      	ldr	r2, [pc, #40]	@ (80051d8 <prvHeapInit+0xb8>)
 80051ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a09      	ldr	r2, [pc, #36]	@ (80051dc <prvHeapInit+0xbc>)
 80051b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051b8:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <prvHeapInit+0xc0>)
 80051ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051be:	601a      	str	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20000ec8 	.word	0x20000ec8
 80051d0:	20004ac8 	.word	0x20004ac8
 80051d4:	20004ad0 	.word	0x20004ad0
 80051d8:	20004ad8 	.word	0x20004ad8
 80051dc:	20004ad4 	.word	0x20004ad4
 80051e0:	20004ae4 	.word	0x20004ae4

080051e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051ec:	4b28      	ldr	r3, [pc, #160]	@ (8005290 <prvInsertBlockIntoFreeList+0xac>)
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e002      	b.n	80051f8 <prvInsertBlockIntoFreeList+0x14>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d8f7      	bhi.n	80051f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4413      	add	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d108      	bne.n	8005226 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	441a      	add	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	441a      	add	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d118      	bne.n	800526c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b15      	ldr	r3, [pc, #84]	@ (8005294 <prvInsertBlockIntoFreeList+0xb0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d00d      	beq.n	8005262 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	441a      	add	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e008      	b.n	8005274 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005262:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <prvInsertBlockIntoFreeList+0xb0>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e003      	b.n	8005274 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d002      	beq.n	8005282 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	20004ac8 	.word	0x20004ac8
 8005294:	20004ad0 	.word	0x20004ad0

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <_reclaim_reent>:
 80052a8:	4b29      	ldr	r3, [pc, #164]	@ (8005350 <_reclaim_reent+0xa8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4283      	cmp	r3, r0
 80052ae:	b570      	push	{r4, r5, r6, lr}
 80052b0:	4604      	mov	r4, r0
 80052b2:	d04b      	beq.n	800534c <_reclaim_reent+0xa4>
 80052b4:	69c3      	ldr	r3, [r0, #28]
 80052b6:	b1ab      	cbz	r3, 80052e4 <_reclaim_reent+0x3c>
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	b16b      	cbz	r3, 80052d8 <_reclaim_reent+0x30>
 80052bc:	2500      	movs	r5, #0
 80052be:	69e3      	ldr	r3, [r4, #28]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	5959      	ldr	r1, [r3, r5]
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d13b      	bne.n	8005340 <_reclaim_reent+0x98>
 80052c8:	3504      	adds	r5, #4
 80052ca:	2d80      	cmp	r5, #128	@ 0x80
 80052cc:	d1f7      	bne.n	80052be <_reclaim_reent+0x16>
 80052ce:	69e3      	ldr	r3, [r4, #28]
 80052d0:	4620      	mov	r0, r4
 80052d2:	68d9      	ldr	r1, [r3, #12]
 80052d4:	f000 f872 	bl	80053bc <_free_r>
 80052d8:	69e3      	ldr	r3, [r4, #28]
 80052da:	6819      	ldr	r1, [r3, #0]
 80052dc:	b111      	cbz	r1, 80052e4 <_reclaim_reent+0x3c>
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 f86c 	bl	80053bc <_free_r>
 80052e4:	6961      	ldr	r1, [r4, #20]
 80052e6:	b111      	cbz	r1, 80052ee <_reclaim_reent+0x46>
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 f867 	bl	80053bc <_free_r>
 80052ee:	69e1      	ldr	r1, [r4, #28]
 80052f0:	b111      	cbz	r1, 80052f8 <_reclaim_reent+0x50>
 80052f2:	4620      	mov	r0, r4
 80052f4:	f000 f862 	bl	80053bc <_free_r>
 80052f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80052fa:	b111      	cbz	r1, 8005302 <_reclaim_reent+0x5a>
 80052fc:	4620      	mov	r0, r4
 80052fe:	f000 f85d 	bl	80053bc <_free_r>
 8005302:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005304:	b111      	cbz	r1, 800530c <_reclaim_reent+0x64>
 8005306:	4620      	mov	r0, r4
 8005308:	f000 f858 	bl	80053bc <_free_r>
 800530c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800530e:	b111      	cbz	r1, 8005316 <_reclaim_reent+0x6e>
 8005310:	4620      	mov	r0, r4
 8005312:	f000 f853 	bl	80053bc <_free_r>
 8005316:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005318:	b111      	cbz	r1, 8005320 <_reclaim_reent+0x78>
 800531a:	4620      	mov	r0, r4
 800531c:	f000 f84e 	bl	80053bc <_free_r>
 8005320:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005322:	b111      	cbz	r1, 800532a <_reclaim_reent+0x82>
 8005324:	4620      	mov	r0, r4
 8005326:	f000 f849 	bl	80053bc <_free_r>
 800532a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800532c:	b111      	cbz	r1, 8005334 <_reclaim_reent+0x8c>
 800532e:	4620      	mov	r0, r4
 8005330:	f000 f844 	bl	80053bc <_free_r>
 8005334:	6a23      	ldr	r3, [r4, #32]
 8005336:	b14b      	cbz	r3, 800534c <_reclaim_reent+0xa4>
 8005338:	4620      	mov	r0, r4
 800533a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800533e:	4718      	bx	r3
 8005340:	680e      	ldr	r6, [r1, #0]
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f83a 	bl	80053bc <_free_r>
 8005348:	4631      	mov	r1, r6
 800534a:	e7bb      	b.n	80052c4 <_reclaim_reent+0x1c>
 800534c:	bd70      	pop	{r4, r5, r6, pc}
 800534e:	bf00      	nop
 8005350:	20000010 	.word	0x20000010

08005354 <__libc_init_array>:
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	4d0d      	ldr	r5, [pc, #52]	@ (800538c <__libc_init_array+0x38>)
 8005358:	4c0d      	ldr	r4, [pc, #52]	@ (8005390 <__libc_init_array+0x3c>)
 800535a:	1b64      	subs	r4, r4, r5
 800535c:	10a4      	asrs	r4, r4, #2
 800535e:	2600      	movs	r6, #0
 8005360:	42a6      	cmp	r6, r4
 8005362:	d109      	bne.n	8005378 <__libc_init_array+0x24>
 8005364:	4d0b      	ldr	r5, [pc, #44]	@ (8005394 <__libc_init_array+0x40>)
 8005366:	4c0c      	ldr	r4, [pc, #48]	@ (8005398 <__libc_init_array+0x44>)
 8005368:	f000 f87e 	bl	8005468 <_init>
 800536c:	1b64      	subs	r4, r4, r5
 800536e:	10a4      	asrs	r4, r4, #2
 8005370:	2600      	movs	r6, #0
 8005372:	42a6      	cmp	r6, r4
 8005374:	d105      	bne.n	8005382 <__libc_init_array+0x2e>
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	f855 3b04 	ldr.w	r3, [r5], #4
 800537c:	4798      	blx	r3
 800537e:	3601      	adds	r6, #1
 8005380:	e7ee      	b.n	8005360 <__libc_init_array+0xc>
 8005382:	f855 3b04 	ldr.w	r3, [r5], #4
 8005386:	4798      	blx	r3
 8005388:	3601      	adds	r6, #1
 800538a:	e7f2      	b.n	8005372 <__libc_init_array+0x1e>
 800538c:	08005510 	.word	0x08005510
 8005390:	08005510 	.word	0x08005510
 8005394:	08005510 	.word	0x08005510
 8005398:	08005514 	.word	0x08005514

0800539c <__retarget_lock_acquire_recursive>:
 800539c:	4770      	bx	lr

0800539e <__retarget_lock_release_recursive>:
 800539e:	4770      	bx	lr

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b6:	4291      	cmp	r1, r2
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <_free_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4605      	mov	r5, r0
 80053c0:	2900      	cmp	r1, #0
 80053c2:	d041      	beq.n	8005448 <_free_r+0x8c>
 80053c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053c8:	1f0c      	subs	r4, r1, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bfb8      	it	lt
 80053ce:	18e4      	addlt	r4, r4, r3
 80053d0:	f000 f83e 	bl	8005450 <__malloc_lock>
 80053d4:	4a1d      	ldr	r2, [pc, #116]	@ (800544c <_free_r+0x90>)
 80053d6:	6813      	ldr	r3, [r2, #0]
 80053d8:	b933      	cbnz	r3, 80053e8 <_free_r+0x2c>
 80053da:	6063      	str	r3, [r4, #4]
 80053dc:	6014      	str	r4, [r2, #0]
 80053de:	4628      	mov	r0, r5
 80053e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053e4:	f000 b83a 	b.w	800545c <__malloc_unlock>
 80053e8:	42a3      	cmp	r3, r4
 80053ea:	d908      	bls.n	80053fe <_free_r+0x42>
 80053ec:	6820      	ldr	r0, [r4, #0]
 80053ee:	1821      	adds	r1, r4, r0
 80053f0:	428b      	cmp	r3, r1
 80053f2:	bf01      	itttt	eq
 80053f4:	6819      	ldreq	r1, [r3, #0]
 80053f6:	685b      	ldreq	r3, [r3, #4]
 80053f8:	1809      	addeq	r1, r1, r0
 80053fa:	6021      	streq	r1, [r4, #0]
 80053fc:	e7ed      	b.n	80053da <_free_r+0x1e>
 80053fe:	461a      	mov	r2, r3
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	b10b      	cbz	r3, 8005408 <_free_r+0x4c>
 8005404:	42a3      	cmp	r3, r4
 8005406:	d9fa      	bls.n	80053fe <_free_r+0x42>
 8005408:	6811      	ldr	r1, [r2, #0]
 800540a:	1850      	adds	r0, r2, r1
 800540c:	42a0      	cmp	r0, r4
 800540e:	d10b      	bne.n	8005428 <_free_r+0x6c>
 8005410:	6820      	ldr	r0, [r4, #0]
 8005412:	4401      	add	r1, r0
 8005414:	1850      	adds	r0, r2, r1
 8005416:	4283      	cmp	r3, r0
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	d1e0      	bne.n	80053de <_free_r+0x22>
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	6053      	str	r3, [r2, #4]
 8005422:	4408      	add	r0, r1
 8005424:	6010      	str	r0, [r2, #0]
 8005426:	e7da      	b.n	80053de <_free_r+0x22>
 8005428:	d902      	bls.n	8005430 <_free_r+0x74>
 800542a:	230c      	movs	r3, #12
 800542c:	602b      	str	r3, [r5, #0]
 800542e:	e7d6      	b.n	80053de <_free_r+0x22>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	1821      	adds	r1, r4, r0
 8005434:	428b      	cmp	r3, r1
 8005436:	bf04      	itt	eq
 8005438:	6819      	ldreq	r1, [r3, #0]
 800543a:	685b      	ldreq	r3, [r3, #4]
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	bf04      	itt	eq
 8005440:	1809      	addeq	r1, r1, r0
 8005442:	6021      	streq	r1, [r4, #0]
 8005444:	6054      	str	r4, [r2, #4]
 8005446:	e7ca      	b.n	80053de <_free_r+0x22>
 8005448:	bd38      	pop	{r3, r4, r5, pc}
 800544a:	bf00      	nop
 800544c:	20004c24 	.word	0x20004c24

08005450 <__malloc_lock>:
 8005450:	4801      	ldr	r0, [pc, #4]	@ (8005458 <__malloc_lock+0x8>)
 8005452:	f7ff bfa3 	b.w	800539c <__retarget_lock_acquire_recursive>
 8005456:	bf00      	nop
 8005458:	20004c20 	.word	0x20004c20

0800545c <__malloc_unlock>:
 800545c:	4801      	ldr	r0, [pc, #4]	@ (8005464 <__malloc_unlock+0x8>)
 800545e:	f7ff bf9e 	b.w	800539e <__retarget_lock_release_recursive>
 8005462:	bf00      	nop
 8005464:	20004c20 	.word	0x20004c20

08005468 <_init>:
 8005468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546a:	bf00      	nop
 800546c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800546e:	bc08      	pop	{r3}
 8005470:	469e      	mov	lr, r3
 8005472:	4770      	bx	lr

08005474 <_fini>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	bf00      	nop
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr
