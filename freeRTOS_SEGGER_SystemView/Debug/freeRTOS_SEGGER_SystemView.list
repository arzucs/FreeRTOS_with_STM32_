
freeRTOS_SEGGER_SystemView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005c50  08005c50  00006c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00007064  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  00007064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00006e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005e10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007208  20000064  08005e74  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000726c  08005e74  0000726c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a1d0  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003595  00000000  00000000  00021264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00024800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001139  00000000  00000000  00025e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000428e  00000000  00000000  00026f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ef1  00000000  00000000  0002b227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df0bc  00000000  00000000  00044118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001231d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006118  00000000  00000000  00123218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b9  00000000  00000000  00129330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c38 	.word	0x08005c38

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08005c38 	.word	0x08005c38

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20004b58 	.word	0x20004b58

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SEGGER_SYSVIEW_Conf();
 80002aa:	f003 ff3b 	bl	8004124 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80002ae:	f004 fecf 	bl	8005050 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fac3 	bl	800083c <HAL_Init>
//  osKernelInitialize();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemCoreClockUpdate();
 80002b6:	f000 fa17 	bl	80006e8 <SystemCoreClockUpdate>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f839 	bl	8000330 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002be:	f001 f8eb 	bl	8001498 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  xTaskCreate(StartDefaultTask,"myTask01",configMINIMAL_STACK_SIZE, NULL, 4, &defaultTask_attributes);
 80002c2:	4b12      	ldr	r3, [pc, #72]	@ (800030c <main+0x68>)
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2304      	movs	r3, #4
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2300      	movs	r3, #0
 80002cc:	2280      	movs	r2, #128	@ 0x80
 80002ce:	4910      	ldr	r1, [pc, #64]	@ (8000310 <main+0x6c>)
 80002d0:	4810      	ldr	r0, [pc, #64]	@ (8000314 <main+0x70>)
 80002d2:	f002 f805 	bl	80022e0 <xTaskCreate>
  /* creation of myTask02 */
//  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
  xTaskCreate(StartTask02, "myTask02", configMINIMAL_STACK_SIZE, NULL, 4, &myTask02_attributes);
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <main+0x74>)
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2304      	movs	r3, #4
 80002dc:	9300      	str	r3, [sp, #0]
 80002de:	2300      	movs	r3, #0
 80002e0:	2280      	movs	r2, #128	@ 0x80
 80002e2:	490e      	ldr	r1, [pc, #56]	@ (800031c <main+0x78>)
 80002e4:	480e      	ldr	r0, [pc, #56]	@ (8000320 <main+0x7c>)
 80002e6:	f001 fffb 	bl	80022e0 <xTaskCreate>
  /* creation of myTask03 */
//  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
  xTaskCreate(StartTask03, "myTask03", configMINIMAL_STACK_SIZE, NULL, 4, &myTask03_attributes);
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <main+0x80>)
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2304      	movs	r3, #4
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2300      	movs	r3, #0
 80002f4:	2280      	movs	r2, #128	@ 0x80
 80002f6:	490c      	ldr	r1, [pc, #48]	@ (8000328 <main+0x84>)
 80002f8:	480c      	ldr	r0, [pc, #48]	@ (800032c <main+0x88>)
 80002fa:	f001 fff1 	bl	80022e0 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002fe:	f001 f8ef 	bl	80014e0 <osKernelStart>
  vTaskStartScheduler();
 8000302:	f002 f9a3 	bl	800264c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <main+0x62>
 800030a:	bf00      	nop
 800030c:	08005d5c 	.word	0x08005d5c
 8000310:	08005c74 	.word	0x08005c74
 8000314:	08000419 	.word	0x08000419
 8000318:	08005d80 	.word	0x08005d80
 800031c:	08005c5c 	.word	0x08005c5c
 8000320:	0800047d 	.word	0x0800047d
 8000324:	08005da4 	.word	0x08005da4
 8000328:	08005c68 	.word	0x08005c68
 800032c:	080004dd 	.word	0x080004dd

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000346:	2300      	movs	r3, #0
 8000348:	60bb      	str	r3, [r7, #8]
 800034a:	4b30      	ldr	r3, [pc, #192]	@ (800040c <MX_GPIO_Init+0xdc>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a2f      	ldr	r2, [pc, #188]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
 8000356:	4b2d      	ldr	r3, [pc, #180]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	f003 0304 	and.w	r3, r3, #4
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	4b29      	ldr	r3, [pc, #164]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a28      	ldr	r2, [pc, #160]	@ (800040c <MX_GPIO_Init+0xdc>)
 800036c:	f043 0320 	orr.w	r3, r3, #32
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
 8000372:	4b26      	ldr	r3, [pc, #152]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000376:	f003 0320 	and.w	r3, r3, #32
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800037e:	2300      	movs	r3, #0
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	4b22      	ldr	r3, [pc, #136]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000386:	4a21      	ldr	r2, [pc, #132]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800038c:	6313      	str	r3, [r2, #48]	@ 0x30
 800038e:	4b1f      	ldr	r3, [pc, #124]	@ (800040c <MX_GPIO_Init+0xdc>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003a0:	481b      	ldr	r0, [pc, #108]	@ (8000410 <MX_GPIO_Init+0xe0>)
 80003a2:	f000 fd27 	bl	8000df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2103      	movs	r1, #3
 80003aa:	481a      	ldr	r0, [pc, #104]	@ (8000414 <MX_GPIO_Init+0xe4>)
 80003ac:	f000 fd22 	bl	8000df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2300      	movs	r3, #0
 80003c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	4811      	ldr	r0, [pc, #68]	@ (8000410 <MX_GPIO_Init+0xe0>)
 80003ca:	f000 fb7f 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003ce:	2303      	movs	r3, #3
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	4619      	mov	r1, r3
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <MX_GPIO_Init+0xe4>)
 80003e6:	f000 fb71 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003ea:	2304      	movs	r3, #4
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	@ (8000414 <MX_GPIO_Init+0xe4>)
 80003fe:	f000 fb65 	bl	8000acc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40023800 	.word	0x40023800
 8000410:	40020800 	.word	0x40020800
 8000414:	40021400 	.word	0x40021400

08000418 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(acces_key == 1)
 8000420:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <StartDefaultTask+0x58>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d01d      	beq.n	8000464 <StartDefaultTask+0x4c>
	  {
		  acces_key =0;
 8000428:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <StartDefaultTask+0x58>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000434:	480f      	ldr	r0, [pc, #60]	@ (8000474 <StartDefaultTask+0x5c>)
 8000436:	f000 fcdd 	bl	8000df4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800043a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800043e:	f000 fa3f 	bl	80008c0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000448:	480a      	ldr	r0, [pc, #40]	@ (8000474 <StartDefaultTask+0x5c>)
 800044a:	f000 fcd3 	bl	8000df4 <HAL_GPIO_WritePin>
		  acces_key =1;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <StartDefaultTask+0x58>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
		  taskYIELD();
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <StartDefaultTask+0x60>)
 8000456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	f3bf 8f4f 	dsb	sy
 8000460:	f3bf 8f6f 	isb	sy
	  }
	    osDelay(1000);
 8000464:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000468:	f001 f860 	bl	800152c <osDelay>
	  if(acces_key == 1)
 800046c:	e7d8      	b.n	8000420 <StartDefaultTask+0x8>
 800046e:	bf00      	nop
 8000470:	20000000 	.word	0x20000000
 8000474:	40020800 	.word	0x40020800
 8000478:	e000ed04 	.word	0xe000ed04

0800047c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(acces_key == 1)
 8000484:	4b12      	ldr	r3, [pc, #72]	@ (80004d0 <StartTask02+0x54>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d01b      	beq.n	80004c4 <StartTask02+0x48>
	  {
		  acces_key =0;
 800048c:	4b10      	ldr	r3, [pc, #64]	@ (80004d0 <StartTask02+0x54>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2101      	movs	r1, #1
 8000496:	480f      	ldr	r0, [pc, #60]	@ (80004d4 <StartTask02+0x58>)
 8000498:	f000 fcac 	bl	8000df4 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800049c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004a0:	f000 fa0e 	bl	80008c0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2101      	movs	r1, #1
 80004a8:	480a      	ldr	r0, [pc, #40]	@ (80004d4 <StartTask02+0x58>)
 80004aa:	f000 fca3 	bl	8000df4 <HAL_GPIO_WritePin>
		  acces_key = 1;
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <StartTask02+0x54>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
		  taskYIELD();
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <StartTask02+0x5c>)
 80004b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	f3bf 8f4f 	dsb	sy
 80004c0:	f3bf 8f6f 	isb	sy
	  }
//	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
//	  HAL_Delay(500);
//	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
    osDelay(1000);
 80004c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004c8:	f001 f830 	bl	800152c <osDelay>
	  if(acces_key == 1)
 80004cc:	e7da      	b.n	8000484 <StartTask02+0x8>
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	e000ed04 	.word	0xe000ed04

080004dc <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */

  /* Infinite loop */
  for(;;)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <StartTask03+0x8>

080004e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a04      	ldr	r2, [pc, #16]	@ (8000508 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d101      	bne.n	80004fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004fa:	f000 f9c1 	bl	8000880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40001000 	.word	0x40001000

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <HAL_MspInit+0x64>)
 8000518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800051a:	4a15      	ldr	r2, [pc, #84]	@ (8000570 <HAL_MspInit+0x64>)
 800051c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000520:	6453      	str	r3, [r2, #68]	@ 0x44
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <HAL_MspInit+0x64>)
 8000524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_MspInit+0x64>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000536:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <HAL_MspInit+0x64>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053c:	6413      	str	r3, [r2, #64]	@ 0x40
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <HAL_MspInit+0x64>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	210f      	movs	r1, #15
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fa91 	bl	8000a78 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2105      	movs	r1, #5
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fa8c 	bl	8000a78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000560:	2005      	movs	r0, #5
 8000562:	f000 faa5 	bl	8000ab0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800

08000574 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08e      	sub	sp, #56	@ 0x38
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800057c:	2300      	movs	r3, #0
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000580:	2300      	movs	r3, #0
 8000582:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	4b33      	ldr	r3, [pc, #204]	@ (8000658 <HAL_InitTick+0xe4>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	4a32      	ldr	r2, [pc, #200]	@ (8000658 <HAL_InitTick+0xe4>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6413      	str	r3, [r2, #64]	@ 0x40
 8000594:	4b30      	ldr	r3, [pc, #192]	@ (8000658 <HAL_InitTick+0xe4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4611      	mov	r1, r2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fc5c 	bl	8000e68 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80005b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d103      	bne.n	80005c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005ba:	f000 fc41 	bl	8000e40 <HAL_RCC_GetPCLK1Freq>
 80005be:	6378      	str	r0, [r7, #52]	@ 0x34
 80005c0:	e004      	b.n	80005cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80005c2:	f000 fc3d 	bl	8000e40 <HAL_RCC_GetPCLK1Freq>
 80005c6:	4603      	mov	r3, r0
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ce:	4a23      	ldr	r2, [pc, #140]	@ (800065c <HAL_InitTick+0xe8>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	0c9b      	lsrs	r3, r3, #18
 80005d6:	3b01      	subs	r3, #1
 80005d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <HAL_InitTick+0xec>)
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <HAL_InitTick+0xf0>)
 80005de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <HAL_InitTick+0xec>)
 80005e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80005e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <HAL_InitTick+0xec>)
 80005ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <HAL_InitTick+0xec>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <HAL_InitTick+0xec>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <HAL_InitTick+0xec>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000600:	4817      	ldr	r0, [pc, #92]	@ (8000660 <HAL_InitTick+0xec>)
 8000602:	f000 fc63 	bl	8000ecc <HAL_TIM_Base_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800060c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000610:	2b00      	cmp	r3, #0
 8000612:	d11b      	bne.n	800064c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000614:	4812      	ldr	r0, [pc, #72]	@ (8000660 <HAL_InitTick+0xec>)
 8000616:	f000 fcb3 	bl	8000f80 <HAL_TIM_Base_Start_IT>
 800061a:	4603      	mov	r3, r0
 800061c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000624:	2b00      	cmp	r3, #0
 8000626:	d111      	bne.n	800064c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000628:	2036      	movs	r0, #54	@ 0x36
 800062a:	f000 fa41 	bl	8000ab0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d808      	bhi.n	8000646 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	2036      	movs	r0, #54	@ 0x36
 800063a:	f000 fa1d 	bl	8000a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <HAL_InitTick+0xf4>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e002      	b.n	800064c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800064c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000650:	4618      	mov	r0, r3
 8000652:	3738      	adds	r7, #56	@ 0x38
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	431bde83 	.word	0x431bde83
 8000660:	20000080 	.word	0x20000080
 8000664:	40001000 	.word	0x40001000
 8000668:	20000008 	.word	0x20000008

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <NMI_Handler+0x4>

08000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <MemManage_Handler+0x4>

08000684 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <BusFault_Handler+0x4>

0800068c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <UsageFault_Handler+0x4>

08000694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <TIM6_DAC_IRQHandler+0x10>)
 80006b6:	f000 fcd3 	bl	8001060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000080 	.word	0x20000080

080006c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	2302      	movs	r3, #2
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	2302      	movs	r3, #2
 8000700:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000702:	4b34      	ldr	r3, [pc, #208]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	f003 030c 	and.w	r3, r3, #12
 800070a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	2b08      	cmp	r3, #8
 8000710:	d011      	beq.n	8000736 <SystemCoreClockUpdate+0x4e>
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	2b08      	cmp	r3, #8
 8000716:	d844      	bhi.n	80007a2 <SystemCoreClockUpdate+0xba>
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d003      	beq.n	8000726 <SystemCoreClockUpdate+0x3e>
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	2b04      	cmp	r3, #4
 8000722:	d004      	beq.n	800072e <SystemCoreClockUpdate+0x46>
 8000724:	e03d      	b.n	80007a2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000726:	4b2c      	ldr	r3, [pc, #176]	@ (80007d8 <SystemCoreClockUpdate+0xf0>)
 8000728:	4a2c      	ldr	r2, [pc, #176]	@ (80007dc <SystemCoreClockUpdate+0xf4>)
 800072a:	601a      	str	r2, [r3, #0]
      break;
 800072c:	e03d      	b.n	80007aa <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800072e:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <SystemCoreClockUpdate+0xf0>)
 8000730:	4a2b      	ldr	r2, [pc, #172]	@ (80007e0 <SystemCoreClockUpdate+0xf8>)
 8000732:	601a      	str	r2, [r3, #0]
      break;
 8000734:	e039      	b.n	80007aa <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000736:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	0d9b      	lsrs	r3, r3, #22
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000742:	4b24      	ldr	r3, [pc, #144]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800074a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d00c      	beq.n	800076c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000752:	4a23      	ldr	r2, [pc, #140]	@ (80007e0 <SystemCoreClockUpdate+0xf8>)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	4a1e      	ldr	r2, [pc, #120]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 800075c:	6852      	ldr	r2, [r2, #4]
 800075e:	0992      	lsrs	r2, r2, #6
 8000760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000764:	fb02 f303 	mul.w	r3, r2, r3
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e00b      	b.n	8000784 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800076c:	4a1b      	ldr	r2, [pc, #108]	@ (80007dc <SystemCoreClockUpdate+0xf4>)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	fbb2 f3f3 	udiv	r3, r2, r3
 8000774:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 8000776:	6852      	ldr	r2, [r2, #4]
 8000778:	0992      	lsrs	r2, r2, #6
 800077a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800077e:	fb02 f303 	mul.w	r3, r2, r3
 8000782:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	0c1b      	lsrs	r3, r3, #16
 800078a:	f003 0303 	and.w	r3, r3, #3
 800078e:	3301      	adds	r3, #1
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <SystemCoreClockUpdate+0xf0>)
 800079e:	6013      	str	r3, [r2, #0]
      break;
 80007a0:	e003      	b.n	80007aa <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <SystemCoreClockUpdate+0xf0>)
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <SystemCoreClockUpdate+0xf4>)
 80007a6:	601a      	str	r2, [r3, #0]
      break;
 80007a8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <SystemCoreClockUpdate+0xec>)
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	091b      	lsrs	r3, r3, #4
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	4a0b      	ldr	r2, [pc, #44]	@ (80007e4 <SystemCoreClockUpdate+0xfc>)
 80007b6:	5cd3      	ldrb	r3, [r2, r3]
 80007b8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80007ba:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <SystemCoreClockUpdate+0xf0>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	fa22 f303 	lsr.w	r3, r2, r3
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <SystemCoreClockUpdate+0xf0>)
 80007c6:	6013      	str	r3, [r2, #0]
}
 80007c8:	bf00      	nop
 80007ca:	371c      	adds	r7, #28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	40023800 	.word	0x40023800
 80007d8:	20000004 	.word	0x20000004
 80007dc:	00f42400 	.word	0x00f42400
 80007e0:	017d7840 	.word	0x017d7840
 80007e4:	08005dc8 	.word	0x08005dc8

080007e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000820 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007ec:	f7ff ff6a 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	@ (8000828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	@ (800082c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	@ (8000834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000816:	f005 f985 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800081a:	f7ff fd43 	bl	80002a4 <main>
  bx  lr    
 800081e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800082c:	08005e10 	.word	0x08005e10
  ldr r2, =_sbss
 8000830:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000834:	2000726c 	.word	0x2000726c

08000838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC_IRQHandler>
	...

0800083c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <HAL_Init+0x40>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <HAL_Init+0x40>)
 8000846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800084a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800084c:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <HAL_Init+0x40>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <HAL_Init+0x40>)
 8000852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	@ (800087c <HAL_Init+0x40>)
 800085e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f8fc 	bl	8000a62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	200f      	movs	r0, #15
 800086c:	f7ff fe82 	bl	8000574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe4c 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023c00 	.word	0x40023c00

08000880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_IncTick+0x20>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_IncTick+0x24>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a04      	ldr	r2, [pc, #16]	@ (80008a4 <HAL_IncTick+0x24>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000000c 	.word	0x2000000c
 80008a4:	200000c8 	.word	0x200000c8

080008a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b03      	ldr	r3, [pc, #12]	@ (80008bc <HAL_GetTick+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	200000c8 	.word	0x200000c8

080008c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff ffee 	bl	80008a8 <HAL_GetTick>
 80008cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d8:	d005      	beq.n	80008e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_Delay+0x44>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008e6:	bf00      	nop
 80008e8:	f7ff ffde 	bl	80008a8 <HAL_GetTick>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d8f7      	bhi.n	80008e8 <HAL_Delay+0x28>
  {
  }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	2000000c 	.word	0x2000000c

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4907      	ldr	r1, [pc, #28]	@ (80009a4 <__NVIC_EnableIRQ+0x38>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	db0a      	blt.n	80009d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	490c      	ldr	r1, [pc, #48]	@ (80009f4 <__NVIC_SetPriority+0x4c>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	440b      	add	r3, r1
 80009cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d0:	e00a      	b.n	80009e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4908      	ldr	r1, [pc, #32]	@ (80009f8 <__NVIC_SetPriority+0x50>)
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 030f 	and.w	r3, r3, #15
 80009de:	3b04      	subs	r3, #4
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	b2d2      	uxtb	r2, r2
 80009e4:	440b      	add	r3, r1
 80009e6:	761a      	strb	r2, [r3, #24]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000e100 	.word	0xe000e100
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b089      	sub	sp, #36	@ 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f1c3 0307 	rsb	r3, r3, #7
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	bf28      	it	cs
 8000a1a:	2304      	movcs	r3, #4
 8000a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3304      	adds	r3, #4
 8000a22:	2b06      	cmp	r3, #6
 8000a24:	d902      	bls.n	8000a2c <NVIC_EncodePriority+0x30>
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3b03      	subs	r3, #3
 8000a2a:	e000      	b.n	8000a2e <NVIC_EncodePriority+0x32>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a30:	f04f 32ff 	mov.w	r2, #4294967295
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43da      	mvns	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	401a      	ands	r2, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4e:	43d9      	mvns	r1, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	4313      	orrs	r3, r2
         );
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3724      	adds	r7, #36	@ 0x24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ff4c 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
 8000a84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8a:	f7ff ff61 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	6978      	ldr	r0, [r7, #20]
 8000a96:	f7ff ffb1 	bl	80009fc <NVIC_EncodePriority>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff80 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff54 	bl	800096c <__NVIC_EnableIRQ>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
 8000ae6:	e165      	b.n	8000db4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ae8:	2201      	movs	r2, #1
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	f040 8154 	bne.w	8000dae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d005      	beq.n	8000b1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d130      	bne.n	8000b80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	2203      	movs	r2, #3
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	69ba      	ldr	r2, [r7, #24]
 8000b32:	4013      	ands	r3, r2
 8000b34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b54:	2201      	movs	r2, #1
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	091b      	lsrs	r3, r3, #4
 8000b6a:	f003 0201 	and.w	r2, r3, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69ba      	ldr	r2, [r7, #24]
 8000b7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d017      	beq.n	8000bbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d123      	bne.n	8000c10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	f003 0307 	and.w	r3, r3, #7
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	4013      	ands	r3, r2
 8000bea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691a      	ldr	r2, [r3, #16]
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	08da      	lsrs	r2, r3, #3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3208      	adds	r2, #8
 8000c0a:	69b9      	ldr	r1, [r7, #24]
 8000c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0203 	and.w	r2, r3, #3
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f000 80ae 	beq.w	8000dae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b5d      	ldr	r3, [pc, #372]	@ (8000dcc <HAL_GPIO_Init+0x300>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	4a5c      	ldr	r2, [pc, #368]	@ (8000dcc <HAL_GPIO_Init+0x300>)
 8000c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c62:	4b5a      	ldr	r3, [pc, #360]	@ (8000dcc <HAL_GPIO_Init+0x300>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c6e:	4a58      	ldr	r2, [pc, #352]	@ (8000dd0 <HAL_GPIO_Init+0x304>)
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4f      	ldr	r2, [pc, #316]	@ (8000dd4 <HAL_GPIO_Init+0x308>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d025      	beq.n	8000ce6 <HAL_GPIO_Init+0x21a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	@ (8000dd8 <HAL_GPIO_Init+0x30c>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d01f      	beq.n	8000ce2 <HAL_GPIO_Init+0x216>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4d      	ldr	r2, [pc, #308]	@ (8000ddc <HAL_GPIO_Init+0x310>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d019      	beq.n	8000cde <HAL_GPIO_Init+0x212>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4c      	ldr	r2, [pc, #304]	@ (8000de0 <HAL_GPIO_Init+0x314>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d013      	beq.n	8000cda <HAL_GPIO_Init+0x20e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8000de4 <HAL_GPIO_Init+0x318>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00d      	beq.n	8000cd6 <HAL_GPIO_Init+0x20a>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8000de8 <HAL_GPIO_Init+0x31c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d007      	beq.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a49      	ldr	r2, [pc, #292]	@ (8000dec <HAL_GPIO_Init+0x320>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d101      	bne.n	8000cce <HAL_GPIO_Init+0x202>
 8000cca:	2306      	movs	r3, #6
 8000ccc:	e00c      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000cce:	2307      	movs	r3, #7
 8000cd0:	e00a      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	e008      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e004      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e002      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_GPIO_Init+0x21c>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	69fa      	ldr	r2, [r7, #28]
 8000cea:	f002 0203 	and.w	r2, r2, #3
 8000cee:	0092      	lsls	r2, r2, #2
 8000cf0:	4093      	lsls	r3, r2
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cf8:	4935      	ldr	r1, [pc, #212]	@ (8000dd0 <HAL_GPIO_Init+0x304>)
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d06:	4b3a      	ldr	r3, [pc, #232]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d2a:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d54:	4a26      	ldr	r2, [pc, #152]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000da8:	4a11      	ldr	r2, [pc, #68]	@ (8000df0 <HAL_GPIO_Init+0x324>)
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3301      	adds	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	2b0f      	cmp	r3, #15
 8000db8:	f67f ae96 	bls.w	8000ae8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3724      	adds	r7, #36	@ 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40013800 	.word	0x40013800
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40021400 	.word	0x40021400
 8000dec:	40021800 	.word	0x40021800
 8000df0:	40013c00 	.word	0x40013c00

08000df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e04:	787b      	ldrb	r3, [r7, #1]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e10:	e003      	b.n	8000e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	041a      	lsls	r2, r3, #16
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	619a      	str	r2, [r3, #24]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_RCC_GetHCLKFreq+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e44:	f7ff fff0 	bl	8000e28 <HAL_RCC_GetHCLKFreq>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	0a9b      	lsrs	r3, r3, #10
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	4903      	ldr	r1, [pc, #12]	@ (8000e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	08005dd8 	.word	0x08005dd8

08000e68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	220f      	movs	r2, #15
 8000e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 0203 	and.w	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000eaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_RCC_GetClockConfig+0x60>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 020f 	and.w	r2, r3, #15
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	601a      	str	r2, [r3, #0]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e041      	b.n	8000f62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f839 	bl	8000f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2202      	movs	r2, #2
 8000efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	f000 f9c0 	bl	8001290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d001      	beq.n	8000f98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e04e      	b.n	8001036 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0201 	orr.w	r2, r2, #1
 8000fae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <HAL_TIM_Base_Start_IT+0xc4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d022      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc2:	d01d      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <HAL_TIM_Base_Start_IT+0xc8>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d018      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800104c <HAL_TIM_Base_Start_IT+0xcc>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d013      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <HAL_TIM_Base_Start_IT+0xd0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d00e      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <HAL_TIM_Base_Start_IT+0xd4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d009      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_TIM_Base_Start_IT+0xd8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d004      	beq.n	8001000 <HAL_TIM_Base_Start_IT+0x80>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_TIM_Base_Start_IT+0xdc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d111      	bne.n	8001024 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2b06      	cmp	r3, #6
 8001010:	d010      	beq.n	8001034 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001022:	e007      	b.n	8001034 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0201 	orr.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40010000 	.word	0x40010000
 8001048:	40000400 	.word	0x40000400
 800104c:	40000800 	.word	0x40000800
 8001050:	40000c00 	.word	0x40000c00
 8001054:	40010400 	.word	0x40010400
 8001058:	40014000 	.word	0x40014000
 800105c:	40001800 	.word	0x40001800

08001060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d020      	beq.n	80010c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01b      	beq.n	80010c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f06f 0202 	mvn.w	r2, #2
 8001094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f8d2 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 80010b0:	e005      	b.n	80010be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f8c4 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f8d5 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d020      	beq.n	8001110 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01b      	beq.n	8001110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f06f 0204 	mvn.w	r2, #4
 80010e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2202      	movs	r2, #2
 80010e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8ac 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 80010fc:	e005      	b.n	800110a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f89e 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f8af 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d020      	beq.n	800115c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01b      	beq.n	800115c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f06f 0208 	mvn.w	r2, #8
 800112c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2204      	movs	r2, #4
 8001132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f886 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 8001148:	e005      	b.n	8001156 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f000 f878 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f889 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d020      	beq.n	80011a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01b      	beq.n	80011a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f06f 0210 	mvn.w	r2, #16
 8001178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2208      	movs	r2, #8
 800117e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f860 	bl	8001254 <HAL_TIM_IC_CaptureCallback>
 8001194:	e005      	b.n	80011a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f852 	bl	8001240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f863 	bl	8001268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d00c      	beq.n	80011cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f06f 0201 	mvn.w	r2, #1
 80011c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f98e 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80011e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f906 	bl	80013fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00c      	beq.n	8001214 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800120c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f834 	bl	800127c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00c      	beq.n	8001238 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f003 0320 	and.w	r3, r3, #32
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0220 	mvn.w	r2, #32
 8001230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f8d8 	bl	80013e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a46      	ldr	r2, [pc, #280]	@ (80013bc <TIM_Base_SetConfig+0x12c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <TIM_Base_SetConfig+0x40>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ae:	d00f      	beq.n	80012d0 <TIM_Base_SetConfig+0x40>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a43      	ldr	r2, [pc, #268]	@ (80013c0 <TIM_Base_SetConfig+0x130>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d00b      	beq.n	80012d0 <TIM_Base_SetConfig+0x40>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a42      	ldr	r2, [pc, #264]	@ (80013c4 <TIM_Base_SetConfig+0x134>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d007      	beq.n	80012d0 <TIM_Base_SetConfig+0x40>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a41      	ldr	r2, [pc, #260]	@ (80013c8 <TIM_Base_SetConfig+0x138>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d003      	beq.n	80012d0 <TIM_Base_SetConfig+0x40>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a40      	ldr	r2, [pc, #256]	@ (80013cc <TIM_Base_SetConfig+0x13c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d108      	bne.n	80012e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a35      	ldr	r2, [pc, #212]	@ (80013bc <TIM_Base_SetConfig+0x12c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d02b      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012f0:	d027      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a32      	ldr	r2, [pc, #200]	@ (80013c0 <TIM_Base_SetConfig+0x130>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d023      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a31      	ldr	r2, [pc, #196]	@ (80013c4 <TIM_Base_SetConfig+0x134>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a30      	ldr	r2, [pc, #192]	@ (80013c8 <TIM_Base_SetConfig+0x138>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01b      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a2f      	ldr	r2, [pc, #188]	@ (80013cc <TIM_Base_SetConfig+0x13c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d017      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a2e      	ldr	r2, [pc, #184]	@ (80013d0 <TIM_Base_SetConfig+0x140>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <TIM_Base_SetConfig+0x144>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00f      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a2c      	ldr	r2, [pc, #176]	@ (80013d8 <TIM_Base_SetConfig+0x148>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d00b      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a2b      	ldr	r2, [pc, #172]	@ (80013dc <TIM_Base_SetConfig+0x14c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d007      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a2a      	ldr	r2, [pc, #168]	@ (80013e0 <TIM_Base_SetConfig+0x150>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d003      	beq.n	8001342 <TIM_Base_SetConfig+0xb2>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a29      	ldr	r2, [pc, #164]	@ (80013e4 <TIM_Base_SetConfig+0x154>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d108      	bne.n	8001354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <TIM_Base_SetConfig+0x12c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d003      	beq.n	8001388 <TIM_Base_SetConfig+0xf8>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <TIM_Base_SetConfig+0x13c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d103      	bne.n	8001390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d105      	bne.n	80013ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f023 0201 	bic.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]
  }
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40000400 	.word	0x40000400
 80013c4:	40000800 	.word	0x40000800
 80013c8:	40000c00 	.word	0x40000c00
 80013cc:	40010400 	.word	0x40010400
 80013d0:	40014000 	.word	0x40014000
 80013d4:	40014400 	.word	0x40014400
 80013d8:	40014800 	.word	0x40014800
 80013dc:	40001800 	.word	0x40001800
 80013e0:	40001c00 	.word	0x40001c00
 80013e4:	40002000 	.word	0x40002000

080013e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <__NVIC_SetPriority>:
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	@ (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001468:	4b05      	ldr	r3, [pc, #20]	@ (8001480 <SysTick_Handler+0x1c>)
 800146a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800146c:	f001 fdc8 	bl	8003000 <xTaskGetSchedulerState>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d001      	beq.n	800147a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001476:	f002 fbc7 	bl	8003c08 <xPortSysTickHandler>
  }
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001488:	2100      	movs	r1, #0
 800148a:	f06f 0004 	mvn.w	r0, #4
 800148e:	f7ff ffbf 	bl	8001410 <__NVIC_SetPriority>
#endif
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800149e:	f3ef 8305 	mrs	r3, IPSR
 80014a2:	603b      	str	r3, [r7, #0]
  return(result);
 80014a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80014aa:	f06f 0305 	mvn.w	r3, #5
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	e00c      	b.n	80014cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <osKernelInitialize+0x44>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <osKernelInitialize+0x44>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	e002      	b.n	80014cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200000cc 	.word	0x200000cc

080014e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014e6:	f3ef 8305 	mrs	r3, IPSR
 80014ea:	603b      	str	r3, [r7, #0]
  return(result);
 80014ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80014f2:	f06f 0305 	mvn.w	r3, #5
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	e010      	b.n	800151c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80014fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <osKernelStart+0x48>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d109      	bne.n	8001516 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001502:	f7ff ffbf 	bl	8001484 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <osKernelStart+0x48>)
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800150c:	f001 f89e 	bl	800264c <vTaskStartScheduler>
      stat = osOK;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	e002      	b.n	800151c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200000cc 	.word	0x200000cc

0800152c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001534:	f3ef 8305 	mrs	r3, IPSR
 8001538:	60bb      	str	r3, [r7, #8]
  return(result);
 800153a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <osDelay+0x1c>
    stat = osErrorISR;
 8001540:	f06f 0305 	mvn.w	r3, #5
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	e007      	b.n	8001558 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d002      	beq.n	8001558 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f001 f840 	bl	80025d8 <vTaskDelay>
    }
  }

  return (stat);
 8001558:	68fb      	ldr	r3, [r7, #12]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4a07      	ldr	r2, [pc, #28]	@ (8001590 <vApplicationGetIdleTaskMemory+0x2c>)
 8001574:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4a06      	ldr	r2, [pc, #24]	@ (8001594 <vApplicationGetIdleTaskMemory+0x30>)
 800157a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200000d0 	.word	0x200000d0
 8001594:	20000178 	.word	0x20000178

08001598 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4a07      	ldr	r2, [pc, #28]	@ (80015c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80015a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4a06      	ldr	r2, [pc, #24]	@ (80015c8 <vApplicationGetTimerTaskMemory+0x30>)
 80015ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015b6:	601a      	str	r2, [r3, #0]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000378 	.word	0x20000378
 80015c8:	20000420 	.word	0x20000420

080015cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f103 0208 	add.w	r2, r3, #8
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f103 0208 	add.w	r2, r3, #8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f103 0208 	add.w	r2, r3, #8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d103      	bne.n	800168e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e00c      	b.n	80016a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3308      	adds	r3, #8
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e002      	b.n	800169c <vListInsert+0x2e>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d2f6      	bcs.n	8001696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6892      	ldr	r2, [r2, #8]
 80016f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6852      	ldr	r2, [r2, #4]
 8001700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	d103      	bne.n	8001714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	1e5a      	subs	r2, r3, #1
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10b      	bne.n	8001760 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800174c:	f383 8811 	msr	BASEPRI, r3
 8001750:	f3bf 8f6f 	isb	sy
 8001754:	f3bf 8f4f 	dsb	sy
 8001758:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001760:	f002 f9c2 	bl	8003ae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	441a      	add	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001790:	3b01      	subs	r3, #1
 8001792:	68f9      	ldr	r1, [r7, #12]
 8001794:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	441a      	add	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	22ff      	movs	r2, #255	@ 0xff
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	22ff      	movs	r2, #255	@ 0xff
 80017ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d114      	bne.n	80017e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01a      	beq.n	80017f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3310      	adds	r3, #16
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fa1a 	bl	8002bfc <xTaskRemoveFromEventList>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d012      	beq.n	80017f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <xQueueGenericReset+0xd0>)
 80017d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f3bf 8f4f 	dsb	sy
 80017da:	f3bf 8f6f 	isb	sy
 80017de:	e009      	b.n	80017f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3310      	adds	r3, #16
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fef1 	bl	80015cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3324      	adds	r3, #36	@ 0x24
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff feec 	bl	80015cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80017f4:	f002 f9aa 	bl	8003b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000ed04 	.word	0xe000ed04

08001808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08e      	sub	sp, #56	@ 0x38
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10b      	bne.n	8001834 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800181c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001820:	f383 8811 	msr	BASEPRI, r3
 8001824:	f3bf 8f6f 	isb	sy
 8001828:	f3bf 8f4f 	dsb	sy
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800182e:	bf00      	nop
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800183a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800183e:	f383 8811 	msr	BASEPRI, r3
 8001842:	f3bf 8f6f 	isb	sy
 8001846:	f3bf 8f4f 	dsb	sy
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	e7fd      	b.n	800184e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <xQueueGenericCreateStatic+0x56>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <xQueueGenericCreateStatic+0x5a>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <xQueueGenericCreateStatic+0x5c>
 8001862:	2300      	movs	r3, #0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10b      	bne.n	8001880 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800186c:	f383 8811 	msr	BASEPRI, r3
 8001870:	f3bf 8f6f 	isb	sy
 8001874:	f3bf 8f4f 	dsb	sy
 8001878:	623b      	str	r3, [r7, #32]
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <xQueueGenericCreateStatic+0x84>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <xQueueGenericCreateStatic+0x88>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <xQueueGenericCreateStatic+0x8a>
 8001890:	2300      	movs	r3, #0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10b      	bne.n	80018ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800189a:	f383 8811 	msr	BASEPRI, r3
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f3bf 8f4f 	dsb	sy
 80018a6:	61fb      	str	r3, [r7, #28]
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80018ae:	2350      	movs	r3, #80	@ 0x50
 80018b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b50      	cmp	r3, #80	@ 0x50
 80018b6:	d00b      	beq.n	80018d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80018b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	61bb      	str	r3, [r7, #24]
}
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80018d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80018d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00d      	beq.n	80018f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80018dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80018e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80018e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4613      	mov	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f805 	bl	8001902 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3730      	adds	r7, #48	@ 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b084      	sub	sp, #16
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d103      	bne.n	800191e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	e002      	b.n	8001924 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001930:	2101      	movs	r1, #1
 8001932:	69b8      	ldr	r0, [r7, #24]
 8001934:	f7ff fefe 	bl	8001734 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	2073      	movs	r0, #115	@ 0x73
 8001948:	f003 fa7a 	bl	8004e40 <SEGGER_SYSVIEW_RecordU32x3>
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b090      	sub	sp, #64	@ 0x40
 8001958:	af02      	add	r7, sp, #8
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800196a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <xQueueGenericSend+0x34>
	__asm volatile
 8001970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001974:	f383 8811 	msr	BASEPRI, r3
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <xQueueGenericSend+0x42>
 800198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <xQueueGenericSend+0x46>
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <xQueueGenericSend+0x48>
 800199a:	2300      	movs	r3, #0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <xQueueGenericSend+0x64>
	__asm volatile
 80019a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019a4:	f383 8811 	msr	BASEPRI, r3
 80019a8:	f3bf 8f6f 	isb	sy
 80019ac:	f3bf 8f4f 	dsb	sy
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <xQueueGenericSend+0x72>
 80019be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <xQueueGenericSend+0x76>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <xQueueGenericSend+0x78>
 80019ca:	2300      	movs	r3, #0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10b      	bne.n	80019e8 <xQueueGenericSend+0x94>
	__asm volatile
 80019d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f3bf 8f4f 	dsb	sy
 80019e0:	623b      	str	r3, [r7, #32]
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80019e8:	f001 fb0a 	bl	8003000 <xTaskGetSchedulerState>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <xQueueGenericSend+0xa4>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <xQueueGenericSend+0xa8>
 80019f8:	2301      	movs	r3, #1
 80019fa:	e000      	b.n	80019fe <xQueueGenericSend+0xaa>
 80019fc:	2300      	movs	r3, #0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10b      	bne.n	8001a1a <xQueueGenericSend+0xc6>
	__asm volatile
 8001a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a06:	f383 8811 	msr	BASEPRI, r3
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	61fb      	str	r3, [r7, #28]
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	e7fd      	b.n	8001a16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a1a:	f002 f865 	bl	8003ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <xQueueGenericSend+0xdc>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d136      	bne.n	8001a9e <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 8001a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 feb6 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	460b      	mov	r3, r1
 8001a42:	4601      	mov	r1, r0
 8001a44:	205a      	movs	r0, #90	@ 0x5a
 8001a46:	f003 fa71 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001a50:	f000 fa70 	bl	8001f34 <prvCopyDataToQueue>
 8001a54:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a60:	3324      	adds	r3, #36	@ 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 f8ca 	bl	8002bfc <xTaskRemoveFromEventList>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d013      	beq.n	8001a96 <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001ba4 <xQueueGenericSend+0x250>)
 8001a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	f3bf 8f6f 	isb	sy
 8001a7e:	e00a      	b.n	8001a96 <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d007      	beq.n	8001a96 <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001a86:	4b47      	ldr	r3, [pc, #284]	@ (8001ba4 <xQueueGenericSend+0x250>)
 8001a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	f3bf 8f4f 	dsb	sy
 8001a92:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001a96:	f002 f859 	bl	8003b4c <vPortExitCritical>
				return pdPASS;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07d      	b.n	8001b9a <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d110      	bne.n	8001ac6 <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001aa4:	f002 f852 	bl	8003b4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fe7a 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4601      	mov	r1, r0
 8001abc:	205a      	movs	r0, #90	@ 0x5a
 8001abe:	f003 fa35 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e069      	b.n	8001b9a <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 f8fb 	bl	8002ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001ada:	f002 f837 	bl	8003b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ade:	f000 fe33 	bl	8002748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ae2:	f002 f801 	bl	8003ae8 <vPortEnterCritical>
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	d103      	bne.n	8001afc <xQueueGenericSend+0x1a8>
 8001af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d103      	bne.n	8001b12 <xQueueGenericSend+0x1be>
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b12:	f002 f81b 	bl	8003b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b16:	1d3a      	adds	r2, r7, #4
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f001 f8ea 	bl	8002cf8 <xTaskCheckForTimeOut>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d124      	bne.n	8001b74 <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b2c:	f000 fafa 	bl	8002124 <prvIsQueueFull>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d018      	beq.n	8001b68 <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b38:	3310      	adds	r3, #16
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 f806 	bl	8002b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001b44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b46:	f000 fa85 	bl	8002054 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001b4a:	f000 fe0b 	bl	8002764 <xTaskResumeAll>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f47f af62 	bne.w	8001a1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001b56:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <xQueueGenericSend+0x250>)
 8001b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	e758      	b.n	8001a1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b6a:	f000 fa73 	bl	8002054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b6e:	f000 fdf9 	bl	8002764 <xTaskResumeAll>
 8001b72:	e752      	b.n	8001a1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001b74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b76:	f000 fa6d 	bl	8002054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b7a:	f000 fdf3 	bl	8002764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8001b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fe0f 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4601      	mov	r1, r0
 8001b92:	205a      	movs	r0, #90	@ 0x5a
 8001b94:	f003 f9ca 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8001b98:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3738      	adds	r7, #56	@ 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	e000ed04 	.word	0xe000ed04

08001ba8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b090      	sub	sp, #64	@ 0x40
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f3bf 8f6f 	isb	sy
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <xQueueGenericSendFromISR+0x3e>
 8001bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <xQueueGenericSendFromISR+0x42>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <xQueueGenericSendFromISR+0x44>
 8001bea:	2300      	movs	r3, #0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d103      	bne.n	8001c16 <xQueueGenericSendFromISR+0x6e>
 8001c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <xQueueGenericSendFromISR+0x72>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <xQueueGenericSendFromISR+0x74>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	623b      	str	r3, [r7, #32]
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c38:	f002 f836 	bl	8003ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c3c:	f3ef 8211 	mrs	r2, BASEPRI
 8001c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	61fa      	str	r2, [r7, #28]
 8001c52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001c56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d302      	bcc.n	8001c6a <xQueueGenericSendFromISR+0xc2>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d139      	bne.n	8001cde <xQueueGenericSendFromISR+0x136>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c78:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8001c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fd91 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001c82:	4601      	mov	r1, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	461a      	mov	r2, r3
 8001c88:	2060      	movs	r0, #96	@ 0x60
 8001c8a:	f003 f87f 	bl	8004d8c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c94:	f000 f94e 	bl	8001f34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001c98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d112      	bne.n	8001cc8 <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d016      	beq.n	8001cd8 <xQueueGenericSendFromISR+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cac:	3324      	adds	r3, #36	@ 0x24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 ffa4 	bl	8002bfc <xTaskRemoveFromEventList>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00e      	beq.n	8001cd8 <xQueueGenericSendFromISR+0x130>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	e007      	b.n	8001cd8 <xQueueGenericSendFromISR+0x130>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ccc:	3301      	adds	r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	b25a      	sxtb	r2, r3
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001cdc:	e00b      	b.n	8001cf6 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fd5f 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	461a      	mov	r2, r3
 8001cec:	2060      	movs	r0, #96	@ 0x60
 8001cee:	f003 f84d 	bl	8004d8c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3740      	adds	r7, #64	@ 0x40
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b08f      	sub	sp, #60	@ 0x3c
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10b      	bne.n	8001d3e <xQueueReceive+0x32>
	__asm volatile
 8001d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d2a:	f383 8811 	msr	BASEPRI, r3
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f3bf 8f4f 	dsb	sy
 8001d36:	623b      	str	r3, [r7, #32]
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d103      	bne.n	8001d4c <xQueueReceive+0x40>
 8001d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <xQueueReceive+0x44>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <xQueueReceive+0x46>
 8001d50:	2300      	movs	r3, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10b      	bne.n	8001d6e <xQueueReceive+0x62>
	__asm volatile
 8001d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d5a:	f383 8811 	msr	BASEPRI, r3
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	61fb      	str	r3, [r7, #28]
}
 8001d68:	bf00      	nop
 8001d6a:	bf00      	nop
 8001d6c:	e7fd      	b.n	8001d6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d6e:	f001 f947 	bl	8003000 <xTaskGetSchedulerState>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <xQueueReceive+0x72>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <xQueueReceive+0x76>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <xQueueReceive+0x78>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <xQueueReceive+0x94>
	__asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	61bb      	str	r3, [r7, #24]
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001da0:	f001 fea2 	bl	8003ae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d02f      	beq.n	8001e10 <xQueueReceive+0x104>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001db4:	f000 f928 	bl	8002008 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8001db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fcf2 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f003 fcee 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	9100      	str	r1, [sp, #0]
 8001dd0:	4621      	mov	r1, r4
 8001dd2:	205c      	movs	r0, #92	@ 0x5c
 8001dd4:	f003 f8aa 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dde:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00f      	beq.n	8001e08 <xQueueReceive+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dea:	3310      	adds	r3, #16
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 ff05 	bl	8002bfc <xTaskRemoveFromEventList>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <xQueueReceive+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001df8:	4b4d      	ldr	r3, [pc, #308]	@ (8001f30 <xQueueReceive+0x224>)
 8001dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e08:	f001 fea0 	bl	8003b4c <vPortExitCritical>
				return pdPASS;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e08a      	b.n	8001f26 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d113      	bne.n	8001e3e <xQueueReceive+0x132>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e16:	f001 fe99 	bl	8003b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fcc1 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001e22:	4604      	mov	r4, r0
 8001e24:	2000      	movs	r0, #0
 8001e26:	f003 fcbd 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2101      	movs	r1, #1
 8001e30:	9100      	str	r1, [sp, #0]
 8001e32:	4621      	mov	r1, r4
 8001e34:	205c      	movs	r0, #92	@ 0x5c
 8001e36:	f003 f879 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e073      	b.n	8001f26 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d106      	bne.n	8001e52 <xQueueReceive+0x146>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 ff3f 	bl	8002ccc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e52:	f001 fe7b 	bl	8003b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e56:	f000 fc77 	bl	8002748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e5a:	f001 fe45 	bl	8003ae8 <vPortEnterCritical>
 8001e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6a:	d103      	bne.n	8001e74 <xQueueReceive+0x168>
 8001e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e80:	d103      	bne.n	8001e8a <xQueueReceive+0x17e>
 8001e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001e8a:	f001 fe5f 	bl	8003b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e8e:	1d3a      	adds	r2, r7, #4
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 ff2e 	bl	8002cf8 <xTaskCheckForTimeOut>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d124      	bne.n	8001eec <xQueueReceive+0x1e0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ea4:	f000 f928 	bl	80020f8 <prvIsQueueEmpty>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d018      	beq.n	8001ee0 <xQueueReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	3324      	adds	r3, #36	@ 0x24
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fe4a 	bl	8002b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ebe:	f000 f8c9 	bl	8002054 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ec2:	f000 fc4f 	bl	8002764 <xTaskResumeAll>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f af69 	bne.w	8001da0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001ece:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <xQueueReceive+0x224>)
 8001ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	f3bf 8f6f 	isb	sy
 8001ede:	e75f      	b.n	8001da0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ee2:	f000 f8b7 	bl	8002054 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ee6:	f000 fc3d 	bl	8002764 <xTaskResumeAll>
 8001eea:	e759      	b.n	8001da0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001eee:	f000 f8b1 	bl	8002054 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ef2:	f000 fc37 	bl	8002764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ef8:	f000 f8fe 	bl	80020f8 <prvIsQueueEmpty>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f43f af4e 	beq.w	8001da0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 fc4c 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f003 fc48 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 8001f14:	4602      	mov	r2, r0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	9100      	str	r1, [sp, #0]
 8001f1c:	4621      	mov	r1, r4
 8001f1e:	205c      	movs	r0, #92	@ 0x5c
 8001f20:	f003 f804 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8001f24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3734      	adds	r7, #52	@ 0x34
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd90      	pop	{r4, r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	e000ed04 	.word	0xe000ed04

08001f34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d14d      	bne.n	8001ff6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 f86c 	bl	800303c <xTaskPriorityDisinherit>
 8001f64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e043      	b.n	8001ff6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d119      	bne.n	8001fa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6858      	ldr	r0, [r3, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	f003 fdf6 	bl	8005b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	441a      	add	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d32b      	bcc.n	8001ff6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	e026      	b.n	8001ff6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68d8      	ldr	r0, [r3, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	f003 fddc 	bl	8005b70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	441a      	add	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	425b      	negs	r3, r3
 8001fde:	441a      	add	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d105      	bne.n	8001ff6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001ffe:	697b      	ldr	r3, [r7, #20]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	2b00      	cmp	r3, #0
 8002018:	d018      	beq.n	800204c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	441a      	add	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d303      	bcc.n	800203c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68d9      	ldr	r1, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	461a      	mov	r2, r3
 8002046:	6838      	ldr	r0, [r7, #0]
 8002048:	f003 fd92 	bl	8005b70 <memcpy>
	}
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800205c:	f001 fd44 	bl	8003ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002066:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002068:	e011      	b.n	800208e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206e:	2b00      	cmp	r3, #0
 8002070:	d012      	beq.n	8002098 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3324      	adds	r3, #36	@ 0x24
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fdc0 	bl	8002bfc <xTaskRemoveFromEventList>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002082:	f000 fe9d 	bl	8002dc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	3b01      	subs	r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	2b00      	cmp	r3, #0
 8002094:	dce9      	bgt.n	800206a <prvUnlockQueue+0x16>
 8002096:	e000      	b.n	800209a <prvUnlockQueue+0x46>
					break;
 8002098:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	22ff      	movs	r2, #255	@ 0xff
 800209e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80020a2:	f001 fd53 	bl	8003b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80020a6:	f001 fd1f 	bl	8003ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80020b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020b2:	e011      	b.n	80020d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d012      	beq.n	80020e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3310      	adds	r3, #16
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fd9b 	bl	8002bfc <xTaskRemoveFromEventList>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80020cc:	f000 fe78 	bl	8002dc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80020d0:	7bbb      	ldrb	r3, [r7, #14]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	dce9      	bgt.n	80020b4 <prvUnlockQueue+0x60>
 80020e0:	e000      	b.n	80020e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80020e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	22ff      	movs	r2, #255	@ 0xff
 80020e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80020ec:	f001 fd2e 	bl	8003b4c <vPortExitCritical>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002100:	f001 fcf2 	bl	8003ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800210c:	2301      	movs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e001      	b.n	8002116 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002116:	f001 fd19 	bl	8003b4c <vPortExitCritical>

	return xReturn;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800212c:	f001 fcdc 	bl	8003ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	429a      	cmp	r2, r3
 800213a:	d102      	bne.n	8002142 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800213c:	2301      	movs	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	e001      	b.n	8002146 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002146:	f001 fd01 	bl	8003b4c <vPortExitCritical>

	return xReturn;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e01e      	b.n	80021a2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002164:	4a13      	ldr	r2, [pc, #76]	@ (80021b4 <vQueueAddToRegistry+0x60>)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d115      	bne.n	800219c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002170:	4910      	ldr	r1, [pc, #64]	@ (80021b4 <vQueueAddToRegistry+0x60>)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800217a:	4a0e      	ldr	r2, [pc, #56]	@ (80021b4 <vQueueAddToRegistry+0x60>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4618      	mov	r0, r3
 800218a:	f003 fb0b 	bl	80057a4 <SEGGER_SYSVIEW_ShrinkId>
 800218e:	4601      	mov	r1, r0
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	2071      	movs	r0, #113	@ 0x71
 8002196:	f002 fdf9 	bl	8004d8c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800219a:	e006      	b.n	80021aa <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3301      	adds	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b07      	cmp	r3, #7
 80021a6:	d9dd      	bls.n	8002164 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000820 	.word	0x20000820

080021b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80021c8:	f001 fc8e 	bl	8003ae8 <vPortEnterCritical>
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d103      	bne.n	80021e2 <vQueueWaitForMessageRestricted+0x2a>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ee:	d103      	bne.n	80021f8 <vQueueWaitForMessageRestricted+0x40>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021f8:	f001 fca8 	bl	8003b4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3324      	adds	r3, #36	@ 0x24
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fcc5 	bl	8002b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002212:	6978      	ldr	r0, [r7, #20]
 8002214:	f7ff ff1e 	bl	8002054 <prvUnlockQueue>
	}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08e      	sub	sp, #56	@ 0x38
 8002224:	af04      	add	r7, sp, #16
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800222e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <xTaskCreateStatic+0x2c>
	__asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	623b      	str	r3, [r7, #32]
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <xTaskCreateStatic+0x4a>
	__asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	61fb      	str	r3, [r7, #28]
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	e7fd      	b.n	8002266 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800226a:	23a8      	movs	r3, #168	@ 0xa8
 800226c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2ba8      	cmp	r3, #168	@ 0xa8
 8002272:	d00b      	beq.n	800228c <xTaskCreateStatic+0x6c>
	__asm volatile
 8002274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	61bb      	str	r3, [r7, #24]
}
 8002286:	bf00      	nop
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800228c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800228e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01e      	beq.n	80022d2 <xTaskCreateStatic+0xb2>
 8002294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01b      	beq.n	80022d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80022ac:	2300      	movs	r3, #0
 80022ae:	9303      	str	r3, [sp, #12]
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f851 	bl	800236c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022cc:	f000 f8f6 	bl	80024bc <prvAddNewTaskToReadyList>
 80022d0:	e001      	b.n	80022d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80022d6:	697b      	ldr	r3, [r7, #20]
	}
 80022d8:	4618      	mov	r0, r3
 80022da:	3728      	adds	r7, #40	@ 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f001 fd19 	bl	8003d2c <pvPortMalloc>
 80022fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00e      	beq.n	8002320 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002302:	20a8      	movs	r0, #168	@ 0xa8
 8002304:	f001 fd12 	bl	8003d2c <pvPortMalloc>
 8002308:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	631a      	str	r2, [r3, #48]	@ 0x30
 8002316:	e005      	b.n	8002324 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f001 fdd5 	bl	8003ec8 <vPortFree>
 800231e:	e001      	b.n	8002324 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d017      	beq.n	800235a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	2300      	movs	r3, #0
 8002336:	9303      	str	r3, [sp, #12]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	9302      	str	r3, [sp, #8]
 800233c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f80f 	bl	800236c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800234e:	69f8      	ldr	r0, [r7, #28]
 8002350:	f000 f8b4 	bl	80024bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002354:	2301      	movs	r3, #1
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e002      	b.n	8002360 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002360:	69bb      	ldr	r3, [r7, #24]
	}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800237c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	461a      	mov	r2, r3
 8002384:	21a5      	movs	r1, #165	@ 0xa5
 8002386:	f003 fb6f 	bl	8005a68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002394:	3b01      	subs	r3, #1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f023 0307 	bic.w	r3, r3, #7
 80023a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	617b      	str	r3, [r7, #20]
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	e7fd      	b.n	80023c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01f      	beq.n	800240c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e012      	b.n	80023f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	7819      	ldrb	r1, [r3, #0]
 80023da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	3334      	adds	r3, #52	@ 0x34
 80023e2:	460a      	mov	r2, r1
 80023e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	d9e9      	bls.n	80023d2 <prvInitialiseNewTask+0x66>
 80023fe:	e000      	b.n	8002402 <prvInitialiseNewTask+0x96>
			{
				break;
 8002400:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800240a:	e003      	b.n	8002414 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800240c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	2b37      	cmp	r3, #55	@ 0x37
 8002418:	d901      	bls.n	800241e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800241a:	2337      	movs	r3, #55	@ 0x37
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002428:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	2200      	movs	r2, #0
 800242e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002432:	3304      	adds	r3, #4
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f8e9 	bl	800160c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243c:	3318      	adds	r3, #24
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f8e4 	bl	800160c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002448:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	2200      	movs	r2, #0
 8002466:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	3354      	adds	r3, #84	@ 0x54
 800246e:	224c      	movs	r2, #76	@ 0x4c
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f003 faf8 	bl	8005a68 <memset>
 8002478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247a:	4a0d      	ldr	r2, [pc, #52]	@ (80024b0 <prvInitialiseNewTask+0x144>)
 800247c:	659a      	str	r2, [r3, #88]	@ 0x58
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	4a0c      	ldr	r2, [pc, #48]	@ (80024b4 <prvInitialiseNewTask+0x148>)
 8002482:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002486:	4a0c      	ldr	r2, [pc, #48]	@ (80024b8 <prvInitialiseNewTask+0x14c>)
 8002488:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	69b8      	ldr	r0, [r7, #24]
 8002490:	f001 f9fa 	bl	8003888 <pxPortInitialiseStack>
 8002494:	4602      	mov	r2, r0
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024a6:	bf00      	nop
 80024a8:	3720      	adds	r7, #32
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000712c 	.word	0x2000712c
 80024b4:	20007194 	.word	0x20007194
 80024b8:	200071fc 	.word	0x200071fc

080024bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024c4:	f001 fb10 	bl	8003ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024c8:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <prvAddNewTaskToReadyList+0x100>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	4a3b      	ldr	r2, [pc, #236]	@ (80025bc <prvAddNewTaskToReadyList+0x100>)
 80024d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024d2:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <prvAddNewTaskToReadyList+0x104>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024da:	4a39      	ldr	r2, [pc, #228]	@ (80025c0 <prvAddNewTaskToReadyList+0x104>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024e0:	4b36      	ldr	r3, [pc, #216]	@ (80025bc <prvAddNewTaskToReadyList+0x100>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d110      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024e8:	f000 fc8e 	bl	8002e08 <prvInitialiseTaskLists>
 80024ec:	e00d      	b.n	800250a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024ee:	4b35      	ldr	r3, [pc, #212]	@ (80025c4 <prvAddNewTaskToReadyList+0x108>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024f6:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <prvAddNewTaskToReadyList+0x104>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	429a      	cmp	r2, r3
 8002502:	d802      	bhi.n	800250a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002504:	4a2e      	ldr	r2, [pc, #184]	@ (80025c0 <prvAddNewTaskToReadyList+0x104>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <prvAddNewTaskToReadyList+0x10c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <prvAddNewTaskToReadyList+0x10c>)
 8002512:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002514:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <prvAddNewTaskToReadyList+0x10c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <prvAddNewTaskToReadyList+0x94>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4618      	mov	r0, r3
 8002526:	f003 f877 	bl	8005618 <SEGGER_SYSVIEW_OnTaskCreate>
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	461d      	mov	r5, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461c      	mov	r4, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	1ae3      	subs	r3, r4, r3
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	462b      	mov	r3, r5
 800254c:	f001 fea2 	bl	8004294 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 f8e4 	bl	8005720 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <prvAddNewTaskToReadyList+0x110>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d903      	bls.n	800256c <prvAddNewTaskToReadyList+0xb0>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <prvAddNewTaskToReadyList+0x110>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a15      	ldr	r2, [pc, #84]	@ (80025d0 <prvAddNewTaskToReadyList+0x114>)
 800257a:	441a      	add	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7ff f84f 	bl	8001626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002588:	f001 fae0 	bl	8003b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800258c:	4b0d      	ldr	r3, [pc, #52]	@ (80025c4 <prvAddNewTaskToReadyList+0x108>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00e      	beq.n	80025b2 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002594:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <prvAddNewTaskToReadyList+0x104>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	429a      	cmp	r2, r3
 80025a0:	d207      	bcs.n	80025b2 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <prvAddNewTaskToReadyList+0x118>)
 80025a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000d34 	.word	0x20000d34
 80025c0:	20000860 	.word	0x20000860
 80025c4:	20000d40 	.word	0x20000d40
 80025c8:	20000d50 	.word	0x20000d50
 80025cc:	20000d3c 	.word	0x20000d3c
 80025d0:	20000864 	.word	0x20000864
 80025d4:	e000ed04 	.word	0xe000ed04

080025d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01c      	beq.n	8002624 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80025ea:	4b16      	ldr	r3, [pc, #88]	@ (8002644 <vTaskDelay+0x6c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <vTaskDelay+0x32>
	__asm volatile
 80025f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	60bb      	str	r3, [r7, #8]
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	e7fd      	b.n	8002606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800260a:	f000 f89d 	bl	8002748 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	2023      	movs	r0, #35	@ 0x23
 8002612:	f002 fb7f 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002616:	2100      	movs	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fd87 	bl	800312c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800261e:	f000 f8a1 	bl	8002764 <xTaskResumeAll>
 8002622:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 800262a:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <vTaskDelay+0x70>)
 800262c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000d5c 	.word	0x20000d5c
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	@ 0x28
 8002650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800265a:	463a      	mov	r2, r7
 800265c:	1d39      	adds	r1, r7, #4
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe ff7e 	bl	8001564 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	9202      	str	r2, [sp, #8]
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	460a      	mov	r2, r1
 800267a:	492b      	ldr	r1, [pc, #172]	@ (8002728 <vTaskStartScheduler+0xdc>)
 800267c:	482b      	ldr	r0, [pc, #172]	@ (800272c <vTaskStartScheduler+0xe0>)
 800267e:	f7ff fdcf 	bl	8002220 <xTaskCreateStatic>
 8002682:	4603      	mov	r3, r0
 8002684:	4a2a      	ldr	r2, [pc, #168]	@ (8002730 <vTaskStartScheduler+0xe4>)
 8002686:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002688:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <vTaskStartScheduler+0xe4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e001      	b.n	800269a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80026a0:	f000 fd98 	bl	80031d4 <xTimerCreateTimerTask>
 80026a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d129      	bne.n	8002700 <vTaskStartScheduler+0xb4>
	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	613b      	str	r3, [r7, #16]
}
 80026be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80026c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002734 <vTaskStartScheduler+0xe8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3354      	adds	r3, #84	@ 0x54
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <vTaskStartScheduler+0xec>)
 80026c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <vTaskStartScheduler+0xf0>)
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <vTaskStartScheduler+0xf4>)
 80026d4:	2201      	movs	r2, #1
 80026d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002744 <vTaskStartScheduler+0xf8>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <vTaskStartScheduler+0xe8>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <vTaskStartScheduler+0xe4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d102      	bne.n	80026f0 <vTaskStartScheduler+0xa4>
 80026ea:	f002 ff79 	bl	80055e0 <SEGGER_SYSVIEW_OnIdle>
 80026ee:	e004      	b.n	80026fa <vTaskStartScheduler+0xae>
 80026f0:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <vTaskStartScheduler+0xe8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 ffd1 	bl	800569c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80026fa:	f001 f951 	bl	80039a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80026fe:	e00f      	b.n	8002720 <vTaskStartScheduler+0xd4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d10b      	bne.n	8002720 <vTaskStartScheduler+0xd4>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	60fb      	str	r3, [r7, #12]
}
 800271a:	bf00      	nop
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <vTaskStartScheduler+0xd0>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	08005c80 	.word	0x08005c80
 800272c:	08002dd9 	.word	0x08002dd9
 8002730:	20000d58 	.word	0x20000d58
 8002734:	20000860 	.word	0x20000860
 8002738:	20000014 	.word	0x20000014
 800273c:	20000d54 	.word	0x20000d54
 8002740:	20000d40 	.word	0x20000d40
 8002744:	20000d38 	.word	0x20000d38

08002748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <vTaskSuspendAll+0x18>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3301      	adds	r3, #1
 8002752:	4a03      	ldr	r2, [pc, #12]	@ (8002760 <vTaskSuspendAll+0x18>)
 8002754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000d5c 	.word	0x20000d5c

08002764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002772:	4b44      	ldr	r3, [pc, #272]	@ (8002884 <xTaskResumeAll+0x120>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <xTaskResumeAll+0x2e>
	__asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	603b      	str	r3, [r7, #0]
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	e7fd      	b.n	800278e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002792:	f001 f9a9 	bl	8003ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002796:	4b3b      	ldr	r3, [pc, #236]	@ (8002884 <xTaskResumeAll+0x120>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	4a39      	ldr	r2, [pc, #228]	@ (8002884 <xTaskResumeAll+0x120>)
 800279e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027a0:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <xTaskResumeAll+0x120>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d166      	bne.n	8002876 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027a8:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <xTaskResumeAll+0x124>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d062      	beq.n	8002876 <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027b0:	e033      	b.n	800281a <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <xTaskResumeAll+0x128>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3318      	adds	r3, #24
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe ff8e 	bl	80016e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3304      	adds	r3, #4
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe ff89 	bl	80016e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 ffa5 	bl	8005720 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027da:	4b2d      	ldr	r3, [pc, #180]	@ (8002890 <xTaskResumeAll+0x12c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d903      	bls.n	80027ea <xTaskResumeAll+0x86>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <xTaskResumeAll+0x12c>)
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4a27      	ldr	r2, [pc, #156]	@ (8002894 <xTaskResumeAll+0x130>)
 80027f8:	441a      	add	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7fe ff10 	bl	8001626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280a:	4b23      	ldr	r3, [pc, #140]	@ (8002898 <xTaskResumeAll+0x134>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	429a      	cmp	r2, r3
 8002812:	d302      	bcc.n	800281a <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8002814:	4b21      	ldr	r3, [pc, #132]	@ (800289c <xTaskResumeAll+0x138>)
 8002816:	2201      	movs	r2, #1
 8002818:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800281a:	4b1c      	ldr	r3, [pc, #112]	@ (800288c <xTaskResumeAll+0x128>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1c7      	bne.n	80027b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002828:	f000 fbca 	bl	8002fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800282c:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <xTaskResumeAll+0x13c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002838:	f000 f858 	bl	80028ec <xTaskIncrementTick>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <xTaskResumeAll+0x138>)
 8002844:	2201      	movs	r2, #1
 8002846:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3b01      	subs	r3, #1
 800284c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f1      	bne.n	8002838 <xTaskResumeAll+0xd4>

						xPendedTicks = 0;
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <xTaskResumeAll+0x13c>)
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <xTaskResumeAll+0x138>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002862:	2301      	movs	r3, #1
 8002864:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <xTaskResumeAll+0x140>)
 8002868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002876:	f001 f969 	bl	8003b4c <vPortExitCritical>

	return xAlreadyYielded;
 800287a:	68bb      	ldr	r3, [r7, #8]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000d5c 	.word	0x20000d5c
 8002888:	20000d34 	.word	0x20000d34
 800288c:	20000cf4 	.word	0x20000cf4
 8002890:	20000d3c 	.word	0x20000d3c
 8002894:	20000864 	.word	0x20000864
 8002898:	20000860 	.word	0x20000860
 800289c:	20000d48 	.word	0x20000d48
 80028a0:	20000d44 	.word	0x20000d44
 80028a4:	e000ed04 	.word	0xe000ed04

080028a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80028ae:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <xTaskGetTickCount+0x1c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80028b4:	687b      	ldr	r3, [r7, #4]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000d38 	.word	0x20000d38

080028c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028ce:	f001 f9eb 	bl	8003ca8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80028d6:	4b04      	ldr	r3, [pc, #16]	@ (80028e8 <xTaskGetTickCountFromISR+0x20>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028dc:	683b      	ldr	r3, [r7, #0]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000d38 	.word	0x20000d38

080028ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028f6:	4b51      	ldr	r3, [pc, #324]	@ (8002a3c <xTaskIncrementTick+0x150>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8094 	bne.w	8002a28 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002900:	4b4f      	ldr	r3, [pc, #316]	@ (8002a40 <xTaskIncrementTick+0x154>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002908:	4a4d      	ldr	r2, [pc, #308]	@ (8002a40 <xTaskIncrementTick+0x154>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d121      	bne.n	8002958 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002914:	4b4b      	ldr	r3, [pc, #300]	@ (8002a44 <xTaskIncrementTick+0x158>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <xTaskIncrementTick+0x4a>
	__asm volatile
 800291e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002922:	f383 8811 	msr	BASEPRI, r3
 8002926:	f3bf 8f6f 	isb	sy
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	603b      	str	r3, [r7, #0]
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	e7fd      	b.n	8002932 <xTaskIncrementTick+0x46>
 8002936:	4b43      	ldr	r3, [pc, #268]	@ (8002a44 <xTaskIncrementTick+0x158>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	4b42      	ldr	r3, [pc, #264]	@ (8002a48 <xTaskIncrementTick+0x15c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a40      	ldr	r2, [pc, #256]	@ (8002a44 <xTaskIncrementTick+0x158>)
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4a40      	ldr	r2, [pc, #256]	@ (8002a48 <xTaskIncrementTick+0x15c>)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4b40      	ldr	r3, [pc, #256]	@ (8002a4c <xTaskIncrementTick+0x160>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	4a3e      	ldr	r2, [pc, #248]	@ (8002a4c <xTaskIncrementTick+0x160>)
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	f000 fb34 	bl	8002fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002958:	4b3d      	ldr	r3, [pc, #244]	@ (8002a50 <xTaskIncrementTick+0x164>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	429a      	cmp	r2, r3
 8002960:	d34d      	bcc.n	80029fe <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002962:	4b38      	ldr	r3, [pc, #224]	@ (8002a44 <xTaskIncrementTick+0x158>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d104      	bne.n	8002976 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800296c:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <xTaskIncrementTick+0x164>)
 800296e:	f04f 32ff 	mov.w	r2, #4294967295
 8002972:	601a      	str	r2, [r3, #0]
					break;
 8002974:	e043      	b.n	80029fe <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002976:	4b33      	ldr	r3, [pc, #204]	@ (8002a44 <xTaskIncrementTick+0x158>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	429a      	cmp	r2, r3
 800298c:	d203      	bcs.n	8002996 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800298e:	4a30      	ldr	r2, [pc, #192]	@ (8002a50 <xTaskIncrementTick+0x164>)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002994:	e033      	b.n	80029fe <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	3304      	adds	r3, #4
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe fea0 	bl	80016e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3318      	adds	r3, #24
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fe97 	bl	80016e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f002 feb3 	bl	8005720 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029be:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <xTaskIncrementTick+0x168>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d903      	bls.n	80029ce <xTaskIncrementTick+0xe2>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	4a22      	ldr	r2, [pc, #136]	@ (8002a54 <xTaskIncrementTick+0x168>)
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4a1f      	ldr	r2, [pc, #124]	@ (8002a58 <xTaskIncrementTick+0x16c>)
 80029dc:	441a      	add	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3304      	adds	r3, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe fe1e 	bl	8001626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ee:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <xTaskIncrementTick+0x170>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3b4      	bcc.n	8002962 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029fc:	e7b1      	b.n	8002962 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029fe:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <xTaskIncrementTick+0x170>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a04:	4914      	ldr	r1, [pc, #80]	@ (8002a58 <xTaskIncrementTick+0x16c>)
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d901      	bls.n	8002a1a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <xTaskIncrementTick+0x174>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <xTaskIncrementTick+0x146>
			{
				xSwitchRequired = pdTRUE;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e004      	b.n	8002a32 <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002a28:	4b0e      	ldr	r3, [pc, #56]	@ (8002a64 <xTaskIncrementTick+0x178>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a64 <xTaskIncrementTick+0x178>)
 8002a30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002a32:	697b      	ldr	r3, [r7, #20]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	20000d5c 	.word	0x20000d5c
 8002a40:	20000d38 	.word	0x20000d38
 8002a44:	20000cec 	.word	0x20000cec
 8002a48:	20000cf0 	.word	0x20000cf0
 8002a4c:	20000d4c 	.word	0x20000d4c
 8002a50:	20000d54 	.word	0x20000d54
 8002a54:	20000d3c 	.word	0x20000d3c
 8002a58:	20000864 	.word	0x20000864
 8002a5c:	20000860 	.word	0x20000860
 8002a60:	20000d48 	.word	0x20000d48
 8002a64:	20000d44 	.word	0x20000d44

08002a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <vTaskSwitchContext+0xcc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a76:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <vTaskSwitchContext+0xd0>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a7c:	e055      	b.n	8002b2a <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b38 <vTaskSwitchContext+0xd0>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a84:	4b2d      	ldr	r3, [pc, #180]	@ (8002b3c <vTaskSwitchContext+0xd4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e011      	b.n	8002ab0 <vTaskSwitchContext+0x48>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <vTaskSwitchContext+0x42>
	__asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	607b      	str	r3, [r7, #4]
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	e7fd      	b.n	8002aa6 <vTaskSwitchContext+0x3e>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	4923      	ldr	r1, [pc, #140]	@ (8002b40 <vTaskSwitchContext+0xd8>)
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0e3      	beq.n	8002a8c <vTaskSwitchContext+0x24>
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4a1c      	ldr	r2, [pc, #112]	@ (8002b40 <vTaskSwitchContext+0xd8>)
 8002ad0:	4413      	add	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d104      	bne.n	8002af4 <vTaskSwitchContext+0x8c>
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <vTaskSwitchContext+0xdc>)
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4a0f      	ldr	r2, [pc, #60]	@ (8002b3c <vTaskSwitchContext+0xd4>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002b04:	4b0f      	ldr	r3, [pc, #60]	@ (8002b44 <vTaskSwitchContext+0xdc>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <vTaskSwitchContext+0xe0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d102      	bne.n	8002b16 <vTaskSwitchContext+0xae>
 8002b10:	f002 fd66 	bl	80055e0 <SEGGER_SYSVIEW_OnIdle>
 8002b14:	e004      	b.n	8002b20 <vTaskSwitchContext+0xb8>
 8002b16:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <vTaskSwitchContext+0xdc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 fdbe 	bl	800569c <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b20:	4b08      	ldr	r3, [pc, #32]	@ (8002b44 <vTaskSwitchContext+0xdc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3354      	adds	r3, #84	@ 0x54
 8002b26:	4a09      	ldr	r2, [pc, #36]	@ (8002b4c <vTaskSwitchContext+0xe4>)
 8002b28:	6013      	str	r3, [r2, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000d5c 	.word	0x20000d5c
 8002b38:	20000d48 	.word	0x20000d48
 8002b3c:	20000d3c 	.word	0x20000d3c
 8002b40:	20000864 	.word	0x20000864
 8002b44:	20000860 	.word	0x20000860
 8002b48:	20000d58 	.word	0x20000d58
 8002b4c:	20000014 	.word	0x20000014

08002b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d10b      	bne.n	8002b78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	60fb      	str	r3, [r7, #12]
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <vTaskPlaceOnEventList+0x48>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3318      	adds	r3, #24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7fe fd74 	bl	800166e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b86:	2101      	movs	r1, #1
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f000 facf 	bl	800312c <prvAddCurrentTaskToDelayedList>
}
 8002b8e:	bf00      	nop
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000860 	.word	0x20000860

08002b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	617b      	str	r3, [r7, #20]
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <vTaskPlaceOnEventListRestricted+0x5c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3318      	adds	r3, #24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7fe fd29 	bl	8001626 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002bda:	f04f 33ff 	mov.w	r3, #4294967295
 8002bde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002be0:	2024      	movs	r0, #36	@ 0x24
 8002be2:	f002 f879 	bl	8004cd8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	68b8      	ldr	r0, [r7, #8]
 8002bea:	f000 fa9f 	bl	800312c <prvAddCurrentTaskToDelayedList>
	}
 8002bee:	bf00      	nop
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000860 	.word	0x20000860

08002bfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10b      	bne.n	8002c2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	60fb      	str	r3, [r7, #12]
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	3318      	adds	r3, #24
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fd56 	bl	80016e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c34:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb4 <xTaskRemoveFromEventList+0xb8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d121      	bne.n	8002c80 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fd4d 	bl	80016e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fd69 	bl	8005720 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <xTaskRemoveFromEventList+0xbc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d903      	bls.n	8002c62 <xTaskRemoveFromEventList+0x66>
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	4a16      	ldr	r2, [pc, #88]	@ (8002cb8 <xTaskRemoveFromEventList+0xbc>)
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <xTaskRemoveFromEventList+0xc0>)
 8002c70:	441a      	add	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3304      	adds	r3, #4
 8002c76:	4619      	mov	r1, r3
 8002c78:	4610      	mov	r0, r2
 8002c7a:	f7fe fcd4 	bl	8001626 <vListInsertEnd>
 8002c7e:	e005      	b.n	8002c8c <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3318      	adds	r3, #24
 8002c84:	4619      	mov	r1, r3
 8002c86:	480e      	ldr	r0, [pc, #56]	@ (8002cc0 <xTaskRemoveFromEventList+0xc4>)
 8002c88:	f7fe fccd 	bl	8001626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <xTaskRemoveFromEventList+0xc8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d905      	bls.n	8002ca6 <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <xTaskRemoveFromEventList+0xcc>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e001      	b.n	8002caa <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002caa:	697b      	ldr	r3, [r7, #20]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000d5c 	.word	0x20000d5c
 8002cb8:	20000d3c 	.word	0x20000d3c
 8002cbc:	20000864 	.word	0x20000864
 8002cc0:	20000cf4 	.word	0x20000cf4
 8002cc4:	20000860 	.word	0x20000860
 8002cc8:	20000d48 	.word	0x20000d48

08002ccc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <vTaskInternalSetTimeOutState+0x24>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <vTaskInternalSetTimeOutState+0x28>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	605a      	str	r2, [r3, #4]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	20000d4c 	.word	0x20000d4c
 8002cf4:	20000d38 	.word	0x20000d38

08002cf8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10b      	bne.n	8002d20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	613b      	str	r3, [r7, #16]
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	60fb      	str	r3, [r7, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	e7fd      	b.n	8002d3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002d3e:	f000 fed3 	bl	8003ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002d42:	4b1d      	ldr	r3, [pc, #116]	@ (8002db8 <xTaskCheckForTimeOut+0xc0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d102      	bne.n	8002d62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e023      	b.n	8002daa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <xTaskCheckForTimeOut+0xc4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d007      	beq.n	8002d7e <xTaskCheckForTimeOut+0x86>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d302      	bcc.n	8002d7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	e015      	b.n	8002daa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d20b      	bcs.n	8002da0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff99 	bl	8002ccc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e004      	b.n	8002daa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002daa:	f000 fecf 	bl	8003b4c <vPortExitCritical>

	return xReturn;
 8002dae:	69fb      	ldr	r3, [r7, #28]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000d38 	.word	0x20000d38
 8002dbc:	20000d4c 	.word	0x20000d4c

08002dc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <vTaskMissedYield+0x14>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	20000d48 	.word	0x20000d48

08002dd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002de0:	f000 f852 	bl	8002e88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002de4:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <prvIdleTask+0x28>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d9f9      	bls.n	8002de0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002dec:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <prvIdleTask+0x2c>)
 8002dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002dfc:	e7f0      	b.n	8002de0 <prvIdleTask+0x8>
 8002dfe:	bf00      	nop
 8002e00:	20000864 	.word	0x20000864
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	e00c      	b.n	8002e2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4a12      	ldr	r2, [pc, #72]	@ (8002e68 <prvInitialiseTaskLists+0x60>)
 8002e20:	4413      	add	r3, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fbd2 	bl	80015cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b37      	cmp	r3, #55	@ 0x37
 8002e32:	d9ef      	bls.n	8002e14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e34:	480d      	ldr	r0, [pc, #52]	@ (8002e6c <prvInitialiseTaskLists+0x64>)
 8002e36:	f7fe fbc9 	bl	80015cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <prvInitialiseTaskLists+0x68>)
 8002e3c:	f7fe fbc6 	bl	80015cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e40:	480c      	ldr	r0, [pc, #48]	@ (8002e74 <prvInitialiseTaskLists+0x6c>)
 8002e42:	f7fe fbc3 	bl	80015cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e46:	480c      	ldr	r0, [pc, #48]	@ (8002e78 <prvInitialiseTaskLists+0x70>)
 8002e48:	f7fe fbc0 	bl	80015cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e4c:	480b      	ldr	r0, [pc, #44]	@ (8002e7c <prvInitialiseTaskLists+0x74>)
 8002e4e:	f7fe fbbd 	bl	80015cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <prvInitialiseTaskLists+0x78>)
 8002e54:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <prvInitialiseTaskLists+0x64>)
 8002e56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e58:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <prvInitialiseTaskLists+0x7c>)
 8002e5a:	4a05      	ldr	r2, [pc, #20]	@ (8002e70 <prvInitialiseTaskLists+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000864 	.word	0x20000864
 8002e6c:	20000cc4 	.word	0x20000cc4
 8002e70:	20000cd8 	.word	0x20000cd8
 8002e74:	20000cf4 	.word	0x20000cf4
 8002e78:	20000d08 	.word	0x20000d08
 8002e7c:	20000d20 	.word	0x20000d20
 8002e80:	20000cec 	.word	0x20000cec
 8002e84:	20000cf0 	.word	0x20000cf0

08002e88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e8e:	e019      	b.n	8002ec4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002e90:	f000 fe2a 	bl	8003ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e94:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <prvCheckTasksWaitingTermination+0x50>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fc1d 	bl	80016e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <prvCheckTasksWaitingTermination+0x54>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <prvCheckTasksWaitingTermination+0x54>)
 8002eae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <prvCheckTasksWaitingTermination+0x58>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <prvCheckTasksWaitingTermination+0x58>)
 8002eb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002eba:	f000 fe47 	bl	8003b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f848 	bl	8002f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ec4:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <prvCheckTasksWaitingTermination+0x58>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e1      	bne.n	8002e90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000d08 	.word	0x20000d08
 8002edc:	20000d34 	.word	0x20000d34
 8002ee0:	20000d1c 	.word	0x20000d1c

08002ee4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002ef0:	e005      	b.n	8002efe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2ba5      	cmp	r3, #165	@ 0xa5
 8002f04:	d0f5      	beq.n	8002ef2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	089b      	lsrs	r3, r3, #2
 8002f0a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	b29b      	uxth	r3, r3
	}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <uxTaskGetStackHighWaterMark+0x14>
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <uxTaskGetStackHighWaterMark+0x34>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	e000      	b.n	8002f32 <uxTaskGetStackHighWaterMark+0x16>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002f3a:	6938      	ldr	r0, [r7, #16]
 8002f3c:	f7ff ffd2 	bl	8002ee4 <prvTaskCheckFreeStackSpace>
 8002f40:	4603      	mov	r3, r0
 8002f42:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8002f44:	68fb      	ldr	r3, [r7, #12]
	}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000860 	.word	0x20000860

08002f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3354      	adds	r3, #84	@ 0x54
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 fd89 	bl	8005a78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d108      	bne.n	8002f82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 ffa7 	bl	8003ec8 <vPortFree>
				vPortFree( pxTCB );
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 ffa4 	bl	8003ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f80:	e019      	b.n	8002fb6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d103      	bne.n	8002f94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 ff9b 	bl	8003ec8 <vPortFree>
	}
 8002f92:	e010      	b.n	8002fb6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d00b      	beq.n	8002fb6 <prvDeleteTCB+0x62>
	__asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	60fb      	str	r3, [r7, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	bf00      	nop
 8002fb4:	e7fd      	b.n	8002fb2 <prvDeleteTCB+0x5e>
	}
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <prvResetNextTaskUnblockTime+0x38>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d104      	bne.n	8002fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <prvResetNextTaskUnblockTime+0x3c>)
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002fd8:	e008      	b.n	8002fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <prvResetNextTaskUnblockTime+0x38>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	@ (8002ffc <prvResetNextTaskUnblockTime+0x3c>)
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20000cec 	.word	0x20000cec
 8002ffc:	20000d54 	.word	0x20000d54

08003000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <xTaskGetSchedulerState+0x34>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800300e:	2301      	movs	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
 8003012:	e008      	b.n	8003026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003014:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <xTaskGetSchedulerState+0x38>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800301c:	2302      	movs	r3, #2
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	e001      	b.n	8003026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003026:	687b      	ldr	r3, [r7, #4]
	}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000d40 	.word	0x20000d40
 8003038:	20000d5c 	.word	0x20000d5c

0800303c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d061      	beq.n	8003116 <xTaskPriorityDisinherit+0xda>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003052:	4b33      	ldr	r3, [pc, #204]	@ (8003120 <xTaskPriorityDisinherit+0xe4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	429a      	cmp	r2, r3
 800305a:	d00b      	beq.n	8003074 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800305c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	60fb      	str	r3, [r7, #12]
}
 800306e:	bf00      	nop
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	60bb      	str	r3, [r7, #8]
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d035      	beq.n	8003116 <xTaskPriorityDisinherit+0xda>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d131      	bne.n	8003116 <xTaskPriorityDisinherit+0xda>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fb12 	bl	80016e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4619      	mov	r1, r3
 80030c0:	204a      	movs	r0, #74	@ 0x4a
 80030c2:	f001 fe27 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4618      	mov	r0, r3
 80030de:	f002 fb1f 	bl	8005720 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003124 <xTaskPriorityDisinherit+0xe8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d903      	bls.n	80030f6 <xTaskPriorityDisinherit+0xba>
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003124 <xTaskPriorityDisinherit+0xe8>)
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4a09      	ldr	r2, [pc, #36]	@ (8003128 <xTaskPriorityDisinherit+0xec>)
 8003104:	441a      	add	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3304      	adds	r3, #4
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f7fe fa8a 	bl	8001626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003112:	2301      	movs	r3, #1
 8003114:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003116:	697b      	ldr	r3, [r7, #20]
	}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20000860 	.word	0x20000860
 8003124:	20000d3c 	.word	0x20000d3c
 8003128:	20000864 	.word	0x20000864

0800312c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003136:	4b21      	ldr	r3, [pc, #132]	@ (80031bc <prvAddCurrentTaskToDelayedList+0x90>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800313c:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3304      	adds	r3, #4
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe facc 	bl	80016e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d10a      	bne.n	8003166 <prvAddCurrentTaskToDelayedList+0x3a>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003156:	4b1a      	ldr	r3, [pc, #104]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3304      	adds	r3, #4
 800315c:	4619      	mov	r1, r3
 800315e:	4819      	ldr	r0, [pc, #100]	@ (80031c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003160:	f7fe fa61 	bl	8001626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003164:	e026      	b.n	80031b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	429a      	cmp	r2, r3
 800317c:	d209      	bcs.n	8003192 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800317e:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b0f      	ldr	r3, [pc, #60]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3304      	adds	r3, #4
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7fe fa6f 	bl	800166e <vListInsert>
}
 8003190:	e010      	b.n	80031b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003192:	4b0e      	ldr	r3, [pc, #56]	@ (80031cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7fe fa65 	bl	800166e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d202      	bcs.n	80031b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80031ae:	4a08      	ldr	r2, [pc, #32]	@ (80031d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6013      	str	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000d38 	.word	0x20000d38
 80031c0:	20000860 	.word	0x20000860
 80031c4:	20000d20 	.word	0x20000d20
 80031c8:	20000cf0 	.word	0x20000cf0
 80031cc:	20000cec 	.word	0x20000cec
 80031d0:	20000d54 	.word	0x20000d54

080031d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80031de:	f000 fb13 	bl	8003808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80031e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <xTimerCreateTimerTask+0x84>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d021      	beq.n	800322e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80031f2:	1d3a      	adds	r2, r7, #4
 80031f4:	f107 0108 	add.w	r1, r7, #8
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe f9cb 	bl	8001598 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	9202      	str	r2, [sp, #8]
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	2302      	movs	r3, #2
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2300      	movs	r3, #0
 8003212:	460a      	mov	r2, r1
 8003214:	4911      	ldr	r1, [pc, #68]	@ (800325c <xTimerCreateTimerTask+0x88>)
 8003216:	4812      	ldr	r0, [pc, #72]	@ (8003260 <xTimerCreateTimerTask+0x8c>)
 8003218:	f7ff f802 	bl	8002220 <xTaskCreateStatic>
 800321c:	4603      	mov	r3, r0
 800321e:	4a11      	ldr	r2, [pc, #68]	@ (8003264 <xTimerCreateTimerTask+0x90>)
 8003220:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <xTimerCreateTimerTask+0x90>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800322a:	2301      	movs	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10b      	bne.n	800324c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	613b      	str	r3, [r7, #16]
}
 8003246:	bf00      	nop
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800324c:	697b      	ldr	r3, [r7, #20]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000d90 	.word	0x20000d90
 800325c:	08005c88 	.word	0x08005c88
 8003260:	080033a1 	.word	0x080033a1
 8003264:	20000d94 	.word	0x20000d94

08003268 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	@ 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <xTimerGenericCommand+0x30>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	623b      	str	r3, [r7, #32]
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003298:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <xTimerGenericCommand+0x98>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02a      	beq.n	80032f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b05      	cmp	r3, #5
 80032b0:	dc18      	bgt.n	80032e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80032b2:	f7ff fea5 	bl	8003000 <xTaskGetSchedulerState>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d109      	bne.n	80032d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80032bc:	4b10      	ldr	r3, [pc, #64]	@ (8003300 <xTimerGenericCommand+0x98>)
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	f107 0110 	add.w	r1, r7, #16
 80032c4:	2300      	movs	r3, #0
 80032c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c8:	f7fe fb44 	bl	8001954 <xQueueGenericSend>
 80032cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80032ce:	e012      	b.n	80032f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <xTimerGenericCommand+0x98>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	f107 0110 	add.w	r1, r7, #16
 80032d8:	2300      	movs	r3, #0
 80032da:	2200      	movs	r2, #0
 80032dc:	f7fe fb3a 	bl	8001954 <xQueueGenericSend>
 80032e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80032e2:	e008      	b.n	80032f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <xTimerGenericCommand+0x98>)
 80032e6:	6818      	ldr	r0, [r3, #0]
 80032e8:	f107 0110 	add.w	r1, r7, #16
 80032ec:	2300      	movs	r3, #0
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	f7fe fc5a 	bl	8001ba8 <xQueueGenericSendFromISR>
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3728      	adds	r7, #40	@ 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000d90 	.word	0x20000d90

08003304 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800330e:	4b23      	ldr	r3, [pc, #140]	@ (800339c <prvProcessExpiredTimer+0x98>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3304      	adds	r3, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe f9df 	bl	80016e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	699a      	ldr	r2, [r3, #24]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	18d1      	adds	r1, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	6978      	ldr	r0, [r7, #20]
 800333e:	f000 f8d5 	bl	80034ec <prvInsertTimerInActiveList>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003348:	2300      	movs	r3, #0
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	2300      	movs	r3, #0
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	2100      	movs	r1, #0
 8003352:	6978      	ldr	r0, [r7, #20]
 8003354:	f7ff ff88 	bl	8003268 <xTimerGenericCommand>
 8003358:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d114      	bne.n	800338a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	60fb      	str	r3, [r7, #12]
}
 8003372:	bf00      	nop
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	b2da      	uxtb	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	4798      	blx	r3
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000d88 	.word	0x20000d88

080033a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033a8:	f107 0308 	add.w	r3, r7, #8
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f859 	bl	8003464 <prvGetNextExpireTime>
 80033b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4619      	mov	r1, r3
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f805 	bl	80033c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80033be:	f000 f8d7 	bl	8003570 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033c2:	bf00      	nop
 80033c4:	e7f0      	b.n	80033a8 <prvTimerTask+0x8>
	...

080033c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80033d2:	f7ff f9b9 	bl	8002748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f866 	bl	80034ac <prvSampleTimeNow>
 80033e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d130      	bne.n	800344a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <prvProcessTimerOrBlockTask+0x3c>
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d806      	bhi.n	8003404 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80033f6:	f7ff f9b5 	bl	8002764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033fa:	68f9      	ldr	r1, [r7, #12]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff81 	bl	8003304 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003402:	e024      	b.n	800344e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800340a:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <prvProcessTimerOrBlockTask+0x90>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <prvProcessTimerOrBlockTask+0x50>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <prvProcessTimerOrBlockTask+0x52>
 8003418:	2300      	movs	r3, #0
 800341a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800341c:	4b0f      	ldr	r3, [pc, #60]	@ (800345c <prvProcessTimerOrBlockTask+0x94>)
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	f7fe fec5 	bl	80021b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800342e:	f7ff f999 	bl	8002764 <xTaskResumeAll>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003438:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <prvProcessTimerOrBlockTask+0x98>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
}
 8003448:	e001      	b.n	800344e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800344a:	f7ff f98b 	bl	8002764 <xTaskResumeAll>
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000d8c 	.word	0x20000d8c
 800345c:	20000d90 	.word	0x20000d90
 8003460:	e000ed04 	.word	0xe000ed04

08003464 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800346c:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <prvGetNextExpireTime+0x44>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <prvGetNextExpireTime+0x16>
 8003476:	2201      	movs	r2, #1
 8003478:	e000      	b.n	800347c <prvGetNextExpireTime+0x18>
 800347a:	2200      	movs	r2, #0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003488:	4b07      	ldr	r3, [pc, #28]	@ (80034a8 <prvGetNextExpireTime+0x44>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e001      	b.n	8003498 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003498:	68fb      	ldr	r3, [r7, #12]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000d88 	.word	0x20000d88

080034ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80034b4:	f7ff f9f8 	bl	80028a8 <xTaskGetTickCount>
 80034b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80034ba:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <prvSampleTimeNow+0x3c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d205      	bcs.n	80034d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80034c4:	f000 f93a 	bl	800373c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e002      	b.n	80034d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80034d6:	4a04      	ldr	r2, [pc, #16]	@ (80034e8 <prvSampleTimeNow+0x3c>)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80034dc:	68fb      	ldr	r3, [r7, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000d98 	.word	0x20000d98

080034ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	d812      	bhi.n	8003538 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e01b      	b.n	800355e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <prvInsertTimerInActiveList+0x7c>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3304      	adds	r3, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f7fe f89c 	bl	800166e <vListInsert>
 8003536:	e012      	b.n	800355e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d206      	bcs.n	800354e <prvInsertTimerInActiveList+0x62>
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e007      	b.n	800355e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <prvInsertTimerInActiveList+0x80>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f7fe f888 	bl	800166e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800355e:	697b      	ldr	r3, [r7, #20]
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000d8c 	.word	0x20000d8c
 800356c:	20000d88 	.word	0x20000d88

08003570 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	@ 0x38
 8003574:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003576:	e0ce      	b.n	8003716 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	da19      	bge.n	80035b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	3304      	adds	r3, #4
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	61fb      	str	r3, [r7, #28]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80035a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a8:	6850      	ldr	r0, [r2, #4]
 80035aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ac:	6892      	ldr	r2, [r2, #8]
 80035ae:	4611      	mov	r1, r2
 80035b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f2c0 80ae 	blt.w	8003716 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80035be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c8:	3304      	adds	r3, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f888 	bl	80016e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035d0:	463b      	mov	r3, r7
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff6a 	bl	80034ac <prvSampleTimeNow>
 80035d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b09      	cmp	r3, #9
 80035de:	f200 8097 	bhi.w	8003710 <prvProcessReceivedCommands+0x1a0>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <prvProcessReceivedCommands+0x78>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003611 	.word	0x08003611
 80035f4:	08003687 	.word	0x08003687
 80035f8:	0800369b 	.word	0x0800369b
 80035fc:	080036e7 	.word	0x080036e7
 8003600:	08003611 	.word	0x08003611
 8003604:	08003611 	.word	0x08003611
 8003608:	08003687 	.word	0x08003687
 800360c:	0800369b 	.word	0x0800369b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	18d1      	adds	r1, r2, r3
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003630:	f7ff ff5c 	bl	80034ec <prvInsertTimerInActiveList>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d06c      	beq.n	8003714 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003640:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d061      	beq.n	8003714 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	441a      	add	r2, r3
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2300      	movs	r3, #0
 800365e:	2100      	movs	r1, #0
 8003660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003662:	f7ff fe01 	bl	8003268 <xTimerGenericCommand>
 8003666:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d152      	bne.n	8003714 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	61bb      	str	r3, [r7, #24]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003698:	e03d      	b.n	8003716 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	617b      	str	r3, [r7, #20]
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	18d1      	adds	r1, r2, r3
 80036da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036e0:	f7ff ff04 	bl	80034ec <prvInsertTimerInActiveList>
					break;
 80036e4:	e017      	b.n	8003716 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80036e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80036f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f6:	f000 fbe7 	bl	8003ec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80036fa:	e00c      	b.n	8003716 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	b2da      	uxtb	r2, r3
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800370e:	e002      	b.n	8003716 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <prvProcessReceivedCommands+0x1a6>
					break;
 8003714:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003716:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <prvProcessReceivedCommands+0x1c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1d39      	adds	r1, r7, #4
 800371c:	2200      	movs	r2, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe faf4 	bl	8001d0c <xQueueReceive>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	f47f af26 	bne.w	8003578 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3730      	adds	r7, #48	@ 0x30
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000d90 	.word	0x20000d90

0800373c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003742:	e049      	b.n	80037d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003744:	4b2e      	ldr	r3, [pc, #184]	@ (8003800 <prvSwitchTimerLists+0xc4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800374e:	4b2c      	ldr	r3, [pc, #176]	@ (8003800 <prvSwitchTimerLists+0xc4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3304      	adds	r3, #4
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd ffbf 	bl	80016e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d02f      	beq.n	80037d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4413      	add	r3, r2
 8003780:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	d90e      	bls.n	80037a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003796:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <prvSwitchTimerLists+0xc4>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3304      	adds	r3, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4610      	mov	r0, r2
 80037a2:	f7fd ff64 	bl	800166e <vListInsert>
 80037a6:	e017      	b.n	80037d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	2100      	movs	r1, #0
 80037b2:	68f8      	ldr	r0, [r7, #12]
 80037b4:	f7ff fd58 	bl	8003268 <xTimerGenericCommand>
 80037b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10b      	bne.n	80037d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	603b      	str	r3, [r7, #0]
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	e7fd      	b.n	80037d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <prvSwitchTimerLists+0xc4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1b0      	bne.n	8003744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80037e2:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <prvSwitchTimerLists+0xc4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <prvSwitchTimerLists+0xc8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <prvSwitchTimerLists+0xc4>)
 80037ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80037f0:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <prvSwitchTimerLists+0xc8>)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000d88 	.word	0x20000d88
 8003804:	20000d8c 	.word	0x20000d8c

08003808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800380e:	f000 f96b 	bl	8003ae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <prvCheckForValidListAndQueue+0x60>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d120      	bne.n	800385c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800381a:	4814      	ldr	r0, [pc, #80]	@ (800386c <prvCheckForValidListAndQueue+0x64>)
 800381c:	f7fd fed6 	bl	80015cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003820:	4813      	ldr	r0, [pc, #76]	@ (8003870 <prvCheckForValidListAndQueue+0x68>)
 8003822:	f7fd fed3 	bl	80015cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003826:	4b13      	ldr	r3, [pc, #76]	@ (8003874 <prvCheckForValidListAndQueue+0x6c>)
 8003828:	4a10      	ldr	r2, [pc, #64]	@ (800386c <prvCheckForValidListAndQueue+0x64>)
 800382a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <prvCheckForValidListAndQueue+0x70>)
 800382e:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <prvCheckForValidListAndQueue+0x68>)
 8003830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003832:	2300      	movs	r3, #0
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	4b11      	ldr	r3, [pc, #68]	@ (800387c <prvCheckForValidListAndQueue+0x74>)
 8003838:	4a11      	ldr	r2, [pc, #68]	@ (8003880 <prvCheckForValidListAndQueue+0x78>)
 800383a:	2110      	movs	r1, #16
 800383c:	200a      	movs	r0, #10
 800383e:	f7fd ffe3 	bl	8001808 <xQueueGenericCreateStatic>
 8003842:	4603      	mov	r3, r0
 8003844:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <prvCheckForValidListAndQueue+0x60>)
 8003846:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003848:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <prvCheckForValidListAndQueue+0x60>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <prvCheckForValidListAndQueue+0x60>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	490b      	ldr	r1, [pc, #44]	@ (8003884 <prvCheckForValidListAndQueue+0x7c>)
 8003856:	4618      	mov	r0, r3
 8003858:	f7fe fc7c 	bl	8002154 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800385c:	f000 f976 	bl	8003b4c <vPortExitCritical>
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000d90 	.word	0x20000d90
 800386c:	20000d60 	.word	0x20000d60
 8003870:	20000d74 	.word	0x20000d74
 8003874:	20000d88 	.word	0x20000d88
 8003878:	20000d8c 	.word	0x20000d8c
 800387c:	20000e3c 	.word	0x20000e3c
 8003880:	20000d9c 	.word	0x20000d9c
 8003884:	08005c90 	.word	0x08005c90

08003888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3b04      	subs	r3, #4
 8003898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3b04      	subs	r3, #4
 80038a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f023 0201 	bic.w	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3b04      	subs	r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038b8:	4a0c      	ldr	r2, [pc, #48]	@ (80038ec <pxPortInitialiseStack+0x64>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3b14      	subs	r3, #20
 80038c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	3b04      	subs	r3, #4
 80038ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f06f 0202 	mvn.w	r2, #2
 80038d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3b20      	subs	r3, #32
 80038dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	080038f1 	.word	0x080038f1

080038f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038fa:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <prvTaskExitError+0x58>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d00b      	beq.n	800391c <prvTaskExitError+0x2c>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	60fb      	str	r3, [r7, #12]
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <prvTaskExitError+0x28>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60bb      	str	r3, [r7, #8]
}
 800392e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003930:	bf00      	nop
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0fc      	beq.n	8003932 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000010 	.word	0x20000010
 800394c:	00000000 	.word	0x00000000

08003950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003950:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <pxCurrentTCBConst2>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6808      	ldr	r0, [r1, #0]
 8003956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	f380 8809 	msr	PSP, r0
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	4770      	bx	lr
 800396c:	f3af 8000 	nop.w

08003970 <pxCurrentTCBConst2>:
 8003970:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003978:	4808      	ldr	r0, [pc, #32]	@ (800399c <prvPortStartFirstTask+0x24>)
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	f380 8808 	msr	MSP, r0
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8814 	msr	CONTROL, r0
 800398a:	b662      	cpsie	i
 800398c:	b661      	cpsie	f
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	df00      	svc	0
 8003998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800399a:	bf00      	nop
 800399c:	e000ed08 	.word	0xe000ed08

080039a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039a6:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <xPortStartScheduler+0x124>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a47      	ldr	r2, [pc, #284]	@ (8003ac8 <xPortStartScheduler+0x128>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10b      	bne.n	80039c8 <xPortStartScheduler+0x28>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	613b      	str	r3, [r7, #16]
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	e7fd      	b.n	80039c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039c8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ac4 <xPortStartScheduler+0x124>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a3f      	ldr	r2, [pc, #252]	@ (8003acc <xPortStartScheduler+0x12c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d10b      	bne.n	80039ea <xPortStartScheduler+0x4a>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60fb      	str	r3, [r7, #12]
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	e7fd      	b.n	80039e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <xPortStartScheduler+0x130>)
 80039ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	22ff      	movs	r2, #255	@ 0xff
 80039fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <xPortStartScheduler+0x134>)
 8003a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a12:	4b31      	ldr	r3, [pc, #196]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a14:	2207      	movs	r2, #7
 8003a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a18:	e009      	b.n	8003a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a2d      	ldr	r2, [pc, #180]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b80      	cmp	r3, #128	@ 0x80
 8003a38:	d0ef      	beq.n	8003a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a3a:	4b27      	ldr	r3, [pc, #156]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d00b      	beq.n	8003a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60bb      	str	r3, [r7, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	e7fd      	b.n	8003a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a68:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <xPortStartScheduler+0x138>)
 8003a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <xPortStartScheduler+0x13c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <xPortStartScheduler+0x13c>)
 8003a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <xPortStartScheduler+0x13c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <xPortStartScheduler+0x13c>)
 8003a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a94:	f000 f8da 	bl	8003c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <xPortStartScheduler+0x140>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a9e:	f000 f8f9 	bl	8003c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <xPortStartScheduler+0x144>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae4 <xPortStartScheduler+0x144>)
 8003aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003aae:	f7ff ff63 	bl	8003978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ab2:	f7fe ffd9 	bl	8002a68 <vTaskSwitchContext>
	prvTaskExitError();
 8003ab6:	f7ff ff1b 	bl	80038f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	e000ed00 	.word	0xe000ed00
 8003ac8:	410fc271 	.word	0x410fc271
 8003acc:	410fc270 	.word	0x410fc270
 8003ad0:	e000e400 	.word	0xe000e400
 8003ad4:	20000e8c 	.word	0x20000e8c
 8003ad8:	20000e90 	.word	0x20000e90
 8003adc:	e000ed20 	.word	0xe000ed20
 8003ae0:	20000010 	.word	0x20000010
 8003ae4:	e000ef34 	.word	0xe000ef34

08003ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <vPortEnterCritical+0x5c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	4a0e      	ldr	r2, [pc, #56]	@ (8003b44 <vPortEnterCritical+0x5c>)
 8003b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <vPortEnterCritical+0x5c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d110      	bne.n	8003b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b14:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <vPortEnterCritical+0x60>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	603b      	str	r3, [r7, #0]
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <vPortEnterCritical+0x4a>
	}
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000010 	.word	0x20000010
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b52:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <vPortExitCritical+0x50>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10b      	bne.n	8003b72 <vPortExitCritical+0x26>
	__asm volatile
 8003b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	607b      	str	r3, [r7, #4]
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	e7fd      	b.n	8003b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b72:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <vPortExitCritical+0x50>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4a08      	ldr	r2, [pc, #32]	@ (8003b9c <vPortExitCritical+0x50>)
 8003b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b7c:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <vPortExitCritical+0x50>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d105      	bne.n	8003b90 <vPortExitCritical+0x44>
 8003b84:	2300      	movs	r3, #0
 8003b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f383 8811 	msr	BASEPRI, r3
}
 8003b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000010 	.word	0x20000010

08003ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ba0:	f3ef 8009 	mrs	r0, PSP
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	4b15      	ldr	r3, [pc, #84]	@ (8003c00 <pxCurrentTCBConst>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	f01e 0f10 	tst.w	lr, #16
 8003bb0:	bf08      	it	eq
 8003bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bba:	6010      	str	r0, [r2, #0]
 8003bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003bc4:	f380 8811 	msr	BASEPRI, r0
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f7fe ff4a 	bl	8002a68 <vTaskSwitchContext>
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f380 8811 	msr	BASEPRI, r0
 8003bdc:	bc09      	pop	{r0, r3}
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	6808      	ldr	r0, [r1, #0]
 8003be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be6:	f01e 0f10 	tst.w	lr, #16
 8003bea:	bf08      	it	eq
 8003bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bf0:	f380 8809 	msr	PSP, r0
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	f3af 8000 	nop.w

08003c00 <pxCurrentTCBConst>:
 8003c00:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
}
 8003c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f7fe fe63 	bl	80028ec <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <xPortSysTickHandler+0x40>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
}
 8003c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <vPortSetupTimerInterrupt+0x38>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <vPortSetupTimerInterrupt+0x3c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <vPortSetupTimerInterrupt+0x40>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a09      	ldr	r2, [pc, #36]	@ (8003c90 <vPortSetupTimerInterrupt+0x44>)
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c6e:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010
 8003c84:	e000e018 	.word	0xe000e018
 8003c88:	20000004 	.word	0x20000004
 8003c8c:	10624dd3 	.word	0x10624dd3
 8003c90:	e000e014 	.word	0xe000e014

08003c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ca4 <vPortEnableVFP+0x10>
 8003c98:	6801      	ldr	r1, [r0, #0]
 8003c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c9e:	6001      	str	r1, [r0, #0]
 8003ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ca2:	bf00      	nop
 8003ca4:	e000ed88 	.word	0xe000ed88

08003ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003cae:	f3ef 8305 	mrs	r3, IPSR
 8003cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b0f      	cmp	r3, #15
 8003cb8:	d915      	bls.n	8003ce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003cba:	4a18      	ldr	r2, [pc, #96]	@ (8003d1c <vPortValidateInterruptPriority+0x74>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cc4:	4b16      	ldr	r3, [pc, #88]	@ (8003d20 <vPortValidateInterruptPriority+0x78>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	7afa      	ldrb	r2, [r7, #11]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d20b      	bcs.n	8003ce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	607b      	str	r3, [r7, #4]
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	e7fd      	b.n	8003ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <vPortValidateInterruptPriority+0x7c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cee:	4b0e      	ldr	r3, [pc, #56]	@ (8003d28 <vPortValidateInterruptPriority+0x80>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d90b      	bls.n	8003d0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	603b      	str	r3, [r7, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <vPortValidateInterruptPriority+0x62>
	}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000e3f0 	.word	0xe000e3f0
 8003d20:	20000e8c 	.word	0x20000e8c
 8003d24:	e000ed0c 	.word	0xe000ed0c
 8003d28:	20000e90 	.word	0x20000e90

08003d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	@ 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d38:	f7fe fd06 	bl	8002748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <pvPortMalloc+0x184>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d44:	f000 f924 	bl	8003f90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d48:	4b5a      	ldr	r3, [pc, #360]	@ (8003eb4 <pvPortMalloc+0x188>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 8095 	bne.w	8003e80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01e      	beq.n	8003d9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d015      	beq.n	8003d9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f023 0307 	bic.w	r3, r3, #7
 8003d74:	3308      	adds	r3, #8
 8003d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <pvPortMalloc+0x6e>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	617b      	str	r3, [r7, #20]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d06f      	beq.n	8003e80 <pvPortMalloc+0x154>
 8003da0:	4b45      	ldr	r3, [pc, #276]	@ (8003eb8 <pvPortMalloc+0x18c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d86a      	bhi.n	8003e80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003daa:	4b44      	ldr	r3, [pc, #272]	@ (8003ebc <pvPortMalloc+0x190>)
 8003dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003dae:	4b43      	ldr	r3, [pc, #268]	@ (8003ebc <pvPortMalloc+0x190>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003db4:	e004      	b.n	8003dc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d903      	bls.n	8003dd2 <pvPortMalloc+0xa6>
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f1      	bne.n	8003db6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003dd2:	4b37      	ldr	r3, [pc, #220]	@ (8003eb0 <pvPortMalloc+0x184>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d051      	beq.n	8003e80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2208      	movs	r2, #8
 8003de2:	4413      	add	r3, r2
 8003de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	1ad2      	subs	r2, r2, r3
 8003df6:	2308      	movs	r3, #8
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d920      	bls.n	8003e40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4413      	add	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <pvPortMalloc+0xfc>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	613b      	str	r3, [r7, #16]
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e3a:	69b8      	ldr	r0, [r7, #24]
 8003e3c:	f000 f90a 	bl	8004054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e40:	4b1d      	ldr	r3, [pc, #116]	@ (8003eb8 <pvPortMalloc+0x18c>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb8 <pvPortMalloc+0x18c>)
 8003e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <pvPortMalloc+0x18c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <pvPortMalloc+0x194>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d203      	bcs.n	8003e62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e5a:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <pvPortMalloc+0x18c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <pvPortMalloc+0x194>)
 8003e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4b13      	ldr	r3, [pc, #76]	@ (8003eb4 <pvPortMalloc+0x188>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e76:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <pvPortMalloc+0x198>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	4a11      	ldr	r2, [pc, #68]	@ (8003ec4 <pvPortMalloc+0x198>)
 8003e7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e80:	f7fe fc70 	bl	8002764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <pvPortMalloc+0x17a>
	__asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	60fb      	str	r3, [r7, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	e7fd      	b.n	8003ea2 <pvPortMalloc+0x176>
	return pvReturn;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3728      	adds	r7, #40	@ 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20004a9c 	.word	0x20004a9c
 8003eb4:	20004ab0 	.word	0x20004ab0
 8003eb8:	20004aa0 	.word	0x20004aa0
 8003ebc:	20004a94 	.word	0x20004a94
 8003ec0:	20004aa4 	.word	0x20004aa4
 8003ec4:	20004aa8 	.word	0x20004aa8

08003ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04f      	beq.n	8003f7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003eda:	2308      	movs	r3, #8
 8003edc:	425b      	negs	r3, r3
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <vPortFree+0xbc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <vPortFree+0x46>
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	60fb      	str	r3, [r7, #12]
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <vPortFree+0x66>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60bb      	str	r3, [r7, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	e7fd      	b.n	8003f2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <vPortFree+0xbc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01e      	beq.n	8003f7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d11a      	bne.n	8003f7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <vPortFree+0xbc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f54:	f7fe fbf8 	bl	8002748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f88 <vPortFree+0xc0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	4a09      	ldr	r2, [pc, #36]	@ (8003f88 <vPortFree+0xc0>)
 8003f64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f66:	6938      	ldr	r0, [r7, #16]
 8003f68:	f000 f874 	bl	8004054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <vPortFree+0xc4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	4a06      	ldr	r2, [pc, #24]	@ (8003f8c <vPortFree+0xc4>)
 8003f74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f76:	f7fe fbf5 	bl	8002764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f7a:	bf00      	nop
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20004ab0 	.word	0x20004ab0
 8003f88:	20004aa0 	.word	0x20004aa0
 8003f8c:	20004aac 	.word	0x20004aac

08003f90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003f9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f9c:	4b27      	ldr	r3, [pc, #156]	@ (800403c <prvHeapInit+0xac>)
 8003f9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3307      	adds	r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0307 	bic.w	r3, r3, #7
 8003fb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <prvHeapInit+0xac>)
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004040 <prvHeapInit+0xb0>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fce:	4b1c      	ldr	r3, [pc, #112]	@ (8004040 <prvHeapInit+0xb0>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4413      	add	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fdc:	2208      	movs	r2, #8
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0307 	bic.w	r3, r3, #7
 8003fea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a15      	ldr	r2, [pc, #84]	@ (8004044 <prvHeapInit+0xb4>)
 8003ff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ff2:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <prvHeapInit+0xb4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ffa:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <prvHeapInit+0xb4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <prvHeapInit+0xb4>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <prvHeapInit+0xb8>)
 800401e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a09      	ldr	r2, [pc, #36]	@ (800404c <prvHeapInit+0xbc>)
 8004026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004028:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <prvHeapInit+0xc0>)
 800402a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800402e:	601a      	str	r2, [r3, #0]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	20000e94 	.word	0x20000e94
 8004040:	20004a94 	.word	0x20004a94
 8004044:	20004a9c 	.word	0x20004a9c
 8004048:	20004aa4 	.word	0x20004aa4
 800404c:	20004aa0 	.word	0x20004aa0
 8004050:	20004ab0 	.word	0x20004ab0

08004054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800405c:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <prvInsertBlockIntoFreeList+0xac>)
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e002      	b.n	8004068 <prvInsertBlockIntoFreeList+0x14>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d8f7      	bhi.n	8004062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4413      	add	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d108      	bne.n	8004096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	441a      	add	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	441a      	add	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d118      	bne.n	80040dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <prvInsertBlockIntoFreeList+0xb0>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d00d      	beq.n	80040d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	e008      	b.n	80040e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004104 <prvInsertBlockIntoFreeList+0xb0>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e003      	b.n	80040e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d002      	beq.n	80040f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20004a94 	.word	0x20004a94
 8004104:	20004a9c 	.word	0x20004a9c

08004108 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800410c:	4803      	ldr	r0, [pc, #12]	@ (800411c <_cbSendSystemDesc+0x14>)
 800410e:	f001 fa11 	bl	8005534 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004112:	4803      	ldr	r0, [pc, #12]	@ (8004120 <_cbSendSystemDesc+0x18>)
 8004114:	f001 fa0e 	bl	8005534 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	08005c98 	.word	0x08005c98
 8004120:	08005cd8 	.word	0x08005cd8

08004124 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004128:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <SEGGER_SYSVIEW_Conf+0x20>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <SEGGER_SYSVIEW_Conf+0x20>)
 800412e:	6819      	ldr	r1, [r3, #0]
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <SEGGER_SYSVIEW_Conf+0x24>)
 8004132:	4a06      	ldr	r2, [pc, #24]	@ (800414c <SEGGER_SYSVIEW_Conf+0x28>)
 8004134:	f000 fd7c 	bl	8004c30 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004138:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800413c:	f000 fdbc 	bl	8004cb8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004140:	bf00      	nop
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000004 	.word	0x20000004
 8004148:	08004109 	.word	0x08004109
 800414c:	08005de0 	.word	0x08005de0

08004150 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004152:	b085      	sub	sp, #20
 8004154:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	e048      	b.n	80041ee <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800415c:	4929      	ldr	r1, [pc, #164]	@ (8004204 <_cbSendTaskList+0xb4>)
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fed5 	bl	8002f1c <uxTaskGetStackHighWaterMark>
 8004172:	4601      	mov	r1, r0
 8004174:	4823      	ldr	r0, [pc, #140]	@ (8004204 <_cbSendTaskList+0xb4>)
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4403      	add	r3, r0
 8004182:	3310      	adds	r3, #16
 8004184:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004186:	491f      	ldr	r1, [pc, #124]	@ (8004204 <_cbSendTaskList+0xb4>)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	491b      	ldr	r1, [pc, #108]	@ (8004204 <_cbSendTaskList+0xb4>)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3304      	adds	r3, #4
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	4c16      	ldr	r4, [pc, #88]	@ (8004204 <_cbSendTaskList+0xb4>)
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4423      	add	r3, r4
 80041b6:	3308      	adds	r3, #8
 80041b8:	681c      	ldr	r4, [r3, #0]
 80041ba:	4d12      	ldr	r5, [pc, #72]	@ (8004204 <_cbSendTaskList+0xb4>)
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	442b      	add	r3, r5
 80041c8:	330c      	adds	r3, #12
 80041ca:	681d      	ldr	r5, [r3, #0]
 80041cc:	4e0d      	ldr	r6, [pc, #52]	@ (8004204 <_cbSendTaskList+0xb4>)
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4433      	add	r3, r6
 80041da:	3310      	adds	r3, #16
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	462b      	mov	r3, r5
 80041e2:	4622      	mov	r2, r4
 80041e4:	f000 f8be 	bl	8004364 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3301      	adds	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <_cbSendTaskList+0xb8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3b1      	bcc.n	800415c <_cbSendTaskList+0xc>
  }
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004202:	bf00      	nop
 8004204:	20004ab4 	.word	0x20004ab4
 8004208:	20004b54 	.word	0x20004b54

0800420c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800420c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004214:	f7fe fb58 	bl	80028c8 <xTaskGetTickCountFromISR>
 8004218:	4603      	mov	r3, r0
 800421a:	2200      	movs	r2, #0
 800421c:	469a      	mov	sl, r3
 800421e:	4693      	mov	fp, r2
 8004220:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004224:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	f04f 0a00 	mov.w	sl, #0
 8004230:	f04f 0b00 	mov.w	fp, #0
 8004234:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004238:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800423c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004240:	4652      	mov	r2, sl
 8004242:	465b      	mov	r3, fp
 8004244:	1a14      	subs	r4, r2, r0
 8004246:	eb63 0501 	sbc.w	r5, r3, r1
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	00ab      	lsls	r3, r5, #2
 8004254:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004258:	00a2      	lsls	r2, r4, #2
 800425a:	4614      	mov	r4, r2
 800425c:	461d      	mov	r5, r3
 800425e:	eb14 0800 	adds.w	r8, r4, r0
 8004262:	eb45 0901 	adc.w	r9, r5, r1
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427a:	4690      	mov	r8, r2
 800427c:	4699      	mov	r9, r3
 800427e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004282:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004286:	4610      	mov	r0, r2
 8004288:	4619      	mov	r1, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004294 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80042a2:	2205      	movs	r2, #5
 80042a4:	492b      	ldr	r1, [pc, #172]	@ (8004354 <SYSVIEW_AddTask+0xc0>)
 80042a6:	68b8      	ldr	r0, [r7, #8]
 80042a8:	f001 fbce 	bl	8005a48 <memcmp>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04b      	beq.n	800434a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80042b2:	4b29      	ldr	r3, [pc, #164]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b07      	cmp	r3, #7
 80042b8:	d903      	bls.n	80042c2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80042ba:	4828      	ldr	r0, [pc, #160]	@ (800435c <SYSVIEW_AddTask+0xc8>)
 80042bc:	f001 fb68 	bl	8005990 <SEGGER_SYSVIEW_Warn>
    return;
 80042c0:	e044      	b.n	800434c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80042c2:	4b25      	ldr	r3, [pc, #148]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4926      	ldr	r1, [pc, #152]	@ (8004360 <SYSVIEW_AddTask+0xcc>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80042d6:	4b20      	ldr	r3, [pc, #128]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4921      	ldr	r1, [pc, #132]	@ (8004360 <SYSVIEW_AddTask+0xcc>)
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3304      	adds	r3, #4
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	491b      	ldr	r1, [pc, #108]	@ (8004360 <SYSVIEW_AddTask+0xcc>)
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3308      	adds	r3, #8
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004302:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4916      	ldr	r1, [pc, #88]	@ (8004360 <SYSVIEW_AddTask+0xcc>)
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	330c      	adds	r3, #12
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004318:	4b0f      	ldr	r3, [pc, #60]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4910      	ldr	r1, [pc, #64]	@ (8004360 <SYSVIEW_AddTask+0xcc>)
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	3310      	adds	r3, #16
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a08      	ldr	r2, [pc, #32]	@ (8004358 <SYSVIEW_AddTask+0xc4>)
 8004336:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f80e 	bl	8004364 <SYSVIEW_SendTaskInfo>
 8004348:	e000      	b.n	800434c <SYSVIEW_AddTask+0xb8>
    return;
 800434a:	bf00      	nop

}
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	08005ce8 	.word	0x08005ce8
 8004358:	20004b54 	.word	0x20004b54
 800435c:	08005cf0 	.word	0x08005cf0
 8004360:	20004ab4 	.word	0x20004ab4

08004364 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b08a      	sub	sp, #40	@ 0x28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004372:	f107 0310 	add.w	r3, r7, #16
 8004376:	2218      	movs	r2, #24
 8004378:	2100      	movs	r1, #0
 800437a:	4618      	mov	r0, r3
 800437c:	f001 fb74 	bl	8005a68 <memset>
  TaskInfo.TaskID     = TaskID;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4618      	mov	r0, r3
 800439a:	f000 ffd3 	bl	8005344 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800439e:	bf00      	nop
 80043a0:	3728      	adds	r7, #40	@ 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80043ae:	4b26      	ldr	r3, [pc, #152]	@ (8004448 <_DoInit+0xa0>)
 80043b0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80043b2:	22a8      	movs	r2, #168	@ 0xa8
 80043b4:	2100      	movs	r1, #0
 80043b6:	6838      	ldr	r0, [r7, #0]
 80043b8:	f001 fb56 	bl	8005a68 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2203      	movs	r2, #3
 80043c0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2203      	movs	r2, #3
 80043c6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4a20      	ldr	r2, [pc, #128]	@ (800444c <_DoInit+0xa4>)
 80043cc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004450 <_DoInit+0xa8>)
 80043d2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043da:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2200      	movs	r2, #0
 80043ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	4a16      	ldr	r2, [pc, #88]	@ (800444c <_DoInit+0xa4>)
 80043f2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4a17      	ldr	r2, [pc, #92]	@ (8004454 <_DoInit+0xac>)
 80043f8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2210      	movs	r2, #16
 80043fe:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2200      	movs	r2, #0
 8004404:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004412:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	e00c      	b.n	8004436 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f1c3 030f 	rsb	r3, r3, #15
 8004422:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <_DoInit+0xb0>)
 8004424:	5cd1      	ldrb	r1, [r2, r3]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	460a      	mov	r2, r1
 800442e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3301      	adds	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b0f      	cmp	r3, #15
 800443a:	d9ef      	bls.n	800441c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800443c:	f3bf 8f5f 	dmb	sy
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	20004b58 	.word	0x20004b58
 800444c:	08005d40 	.word	0x08005d40
 8004450:	20004c00 	.word	0x20004c00
 8004454:	20005000 	.word	0x20005000
 8004458:	08005de8 	.word	0x08005de8

0800445c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	@ 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004468:	4b3e      	ldr	r3, [pc, #248]	@ (8004564 <SEGGER_RTT_ReadNoLock+0x108>)
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b53      	cmp	r3, #83	@ 0x53
 8004474:	d001      	beq.n	800447a <SEGGER_RTT_ReadNoLock+0x1e>
 8004476:	f7ff ff97 	bl	80043a8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4613      	mov	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	4413      	add	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	3360      	adds	r3, #96	@ 0x60
 8004486:	4a37      	ldr	r2, [pc, #220]	@ (8004564 <SEGGER_RTT_ReadNoLock+0x108>)
 8004488:	4413      	add	r3, r2
 800448a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800449c:	2300      	movs	r3, #0
 800449e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80044a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d92b      	bls.n	8004500 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4293      	cmp	r3, r2
 80044b8:	bf28      	it	cs
 80044ba:	4613      	movcs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	4413      	add	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	6939      	ldr	r1, [r7, #16]
 80044cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044ce:	f001 fb4f 	bl	8005b70 <memcpy>
    NumBytesRead += NumBytesRem;
 80044d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80044da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	4413      	add	r3, r2
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4413      	add	r3, r2
 80044f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d101      	bne.n	8004500 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80044fc:	2300      	movs	r3, #0
 80044fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4293      	cmp	r3, r2
 800450e:	bf28      	it	cs
 8004510:	4613      	movcs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004520:	4413      	add	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	6939      	ldr	r1, [r7, #16]
 8004528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800452a:	f001 fb21 	bl	8005b70 <memcpy>
    NumBytesRead += NumBytesRem;
 800452e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	4413      	add	r3, r2
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	4413      	add	r3, r2
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004558:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800455a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800455c:	4618      	mov	r0, r3
 800455e:	3730      	adds	r7, #48	@ 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	20004b58 	.word	0x20004b58

08004568 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004576:	4b3d      	ldr	r3, [pc, #244]	@ (800466c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b53      	cmp	r3, #83	@ 0x53
 8004582:	d001      	beq.n	8004588 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004584:	f7ff ff10 	bl	80043a8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004588:	f3ef 8311 	mrs	r3, BASEPRI
 800458c:	f04f 0120 	mov.w	r1, #32
 8004590:	f381 8811 	msr	BASEPRI, r1
 8004594:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004596:	4b35      	ldr	r3, [pc, #212]	@ (800466c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004598:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	4613      	mov	r3, r2
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	440b      	add	r3, r1
 80045ae:	3304      	adds	r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	dbeb      	blt.n	800459e <SEGGER_RTT_AllocUpBuffer+0x36>
 80045c6:	e000      	b.n	80045ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80045c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	69fa      	ldr	r2, [r7, #28]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	da3f      	bge.n	8004654 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80045d4:	6939      	ldr	r1, [r7, #16]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	4613      	mov	r3, r2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	4613      	mov	r3, r2
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	440b      	add	r3, r1
 80045f8:	3304      	adds	r3, #4
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80045fe:	6939      	ldr	r1, [r7, #16]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	3320      	adds	r3, #32
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	4613      	mov	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	440b      	add	r3, r1
 8004620:	3328      	adds	r3, #40	@ 0x28
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004626:	6939      	ldr	r1, [r7, #16]
 8004628:	69fa      	ldr	r2, [r7, #28]
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	3324      	adds	r3, #36	@ 0x24
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800463a:	6939      	ldr	r1, [r7, #16]
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	4613      	mov	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	332c      	adds	r3, #44	@ 0x2c
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800464e:	f3bf 8f5f 	dmb	sy
 8004652:	e002      	b.n	800465a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004660:	69fb      	ldr	r3, [r7, #28]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20004b58 	.word	0x20004b58

08004670 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	@ 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800467e:	4b21      	ldr	r3, [pc, #132]	@ (8004704 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b53      	cmp	r3, #83	@ 0x53
 800468a:	d001      	beq.n	8004690 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800468c:	f7ff fe8c 	bl	80043a8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004690:	4b1c      	ldr	r3, [pc, #112]	@ (8004704 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004692:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d82c      	bhi.n	80046f4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800469a:	f3ef 8311 	mrs	r3, BASEPRI
 800469e:	f04f 0120 	mov.w	r1, #32
 80046a2:	f381 8811 	msr	BASEPRI, r1
 80046a6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	3360      	adds	r3, #96	@ 0x60
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2200      	movs	r2, #0
 80046d6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2200      	movs	r2, #0
 80046dc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046e4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f2:	e002      	b.n	80046fa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80046f4:	f04f 33ff 	mov.w	r3, #4294967295
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3728      	adds	r7, #40	@ 0x28
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20004b58 	.word	0x20004b58

08004708 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	60fa      	str	r2, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e022      	b.n	800476c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	60fa      	str	r2, [r7, #12]
 8004730:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b80      	cmp	r3, #128	@ 0x80
 8004736:	d90a      	bls.n	800474e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004738:	2380      	movs	r3, #128	@ 0x80
 800473a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 800473c:	e007      	b.n	800474e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	1c53      	adds	r3, r2, #1
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1c59      	adds	r1, r3, #1
 8004748:	60f9      	str	r1, [r7, #12]
 800474a:	7812      	ldrb	r2, [r2, #0]
 800474c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	607a      	str	r2, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <_EncodeStr+0x58>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1ee      	bne.n	800473e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	b2da      	uxtb	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 800476c:	68fb      	ldr	r3, [r7, #12]
}
 800476e:	4618      	mov	r0, r3
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3307      	adds	r3, #7
}
 8004786:	4618      	mov	r0, r3
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800479a:	4b34      	ldr	r3, [pc, #208]	@ (800486c <_HandleIncomingPacket+0xd8>)
 800479c:	7e1b      	ldrb	r3, [r3, #24]
 800479e:	4618      	mov	r0, r3
 80047a0:	1cfb      	adds	r3, r7, #3
 80047a2:	2201      	movs	r2, #1
 80047a4:	4619      	mov	r1, r3
 80047a6:	f7ff fe59 	bl	800445c <SEGGER_RTT_ReadNoLock>
 80047aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d057      	beq.n	8004862 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	2b80      	cmp	r3, #128	@ 0x80
 80047b6:	d031      	beq.n	800481c <_HandleIncomingPacket+0x88>
 80047b8:	2b80      	cmp	r3, #128	@ 0x80
 80047ba:	dc40      	bgt.n	800483e <_HandleIncomingPacket+0xaa>
 80047bc:	2b07      	cmp	r3, #7
 80047be:	dc15      	bgt.n	80047ec <_HandleIncomingPacket+0x58>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dd3c      	ble.n	800483e <_HandleIncomingPacket+0xaa>
 80047c4:	3b01      	subs	r3, #1
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d839      	bhi.n	800483e <_HandleIncomingPacket+0xaa>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <_HandleIncomingPacket+0x3c>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f3 	.word	0x080047f3
 80047d4:	080047f9 	.word	0x080047f9
 80047d8:	080047ff 	.word	0x080047ff
 80047dc:	08004805 	.word	0x08004805
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004817 	.word	0x08004817
 80047ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80047ee:	d033      	beq.n	8004858 <_HandleIncomingPacket+0xc4>
 80047f0:	e025      	b.n	800483e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80047f2:	f000 fc2d 	bl	8005050 <SEGGER_SYSVIEW_Start>
      break;
 80047f6:	e034      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80047f8:	f000 fce4 	bl	80051c4 <SEGGER_SYSVIEW_Stop>
      break;
 80047fc:	e031      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80047fe:	f000 febd 	bl	800557c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004802:	e02e      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004804:	f000 fe82 	bl	800550c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004808:	e02b      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800480a:	f000 fd01 	bl	8005210 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800480e:	e028      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004810:	f001 f880 	bl	8005914 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004814:	e025      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004816:	f001 f85f 	bl	80058d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800481a:	e022      	b.n	8004862 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800481c:	4b13      	ldr	r3, [pc, #76]	@ (800486c <_HandleIncomingPacket+0xd8>)
 800481e:	7e1b      	ldrb	r3, [r3, #24]
 8004820:	4618      	mov	r0, r3
 8004822:	1cfb      	adds	r3, r7, #3
 8004824:	2201      	movs	r2, #1
 8004826:	4619      	mov	r1, r3
 8004828:	f7ff fe18 	bl	800445c <SEGGER_RTT_ReadNoLock>
 800482c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ffc4 	bl	80057c4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800483c:	e00e      	b.n	800485c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	da0c      	bge.n	8004860 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004846:	4b09      	ldr	r3, [pc, #36]	@ (800486c <_HandleIncomingPacket+0xd8>)
 8004848:	7e1b      	ldrb	r3, [r3, #24]
 800484a:	4618      	mov	r0, r3
 800484c:	1cfb      	adds	r3, r7, #3
 800484e:	2201      	movs	r2, #1
 8004850:	4619      	mov	r1, r3
 8004852:	f7ff fe03 	bl	800445c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004856:	e003      	b.n	8004860 <_HandleIncomingPacket+0xcc>
      break;
 8004858:	bf00      	nop
 800485a:	e002      	b.n	8004862 <_HandleIncomingPacket+0xce>
      break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <_HandleIncomingPacket+0xce>
      break;
 8004860:	bf00      	nop
    }
  }
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20007018 	.word	0x20007018

08004870 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b08c      	sub	sp, #48	@ 0x30
 8004874:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004876:	2301      	movs	r3, #1
 8004878:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	3301      	adds	r3, #1
 800487e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004884:	4b31      	ldr	r3, [pc, #196]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800488a:	e00b      	b.n	80048a4 <_TrySendOverflowPacket+0x34>
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	b2da      	uxtb	r2, r3
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004896:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	09db      	lsrs	r3, r3, #7
 80048a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048a8:	d8f0      	bhi.n	800488c <_TrySendOverflowPacket+0x1c>
 80048aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048ba:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <_TrySendOverflowPacket+0xe0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80048c0:	4b22      	ldr	r3, [pc, #136]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	623b      	str	r3, [r7, #32]
 80048d2:	e00b      	b.n	80048ec <_TrySendOverflowPacket+0x7c>
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80048de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	09db      	lsrs	r3, r3, #7
 80048ea:	623b      	str	r3, [r7, #32]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80048f0:	d8f0      	bhi.n	80048d4 <_TrySendOverflowPacket+0x64>
 80048f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80048f8:	6a3a      	ldr	r2, [r7, #32]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004900:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 8004904:	785b      	ldrb	r3, [r3, #1]
 8004906:	4618      	mov	r0, r3
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	461a      	mov	r2, r3
 8004910:	1d3b      	adds	r3, r7, #4
 8004912:	4619      	mov	r1, r3
 8004914:	f7fb fc7c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004918:	4603      	mov	r3, r0
 800491a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004922:	4a0a      	ldr	r2, [pc, #40]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004928:	4b08      	ldr	r3, [pc, #32]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	3b01      	subs	r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	4b06      	ldr	r3, [pc, #24]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 8004932:	701a      	strb	r2, [r3, #0]
 8004934:	e004      	b.n	8004940 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004936:	4b05      	ldr	r3, [pc, #20]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	3301      	adds	r3, #1
 800493c:	4a03      	ldr	r2, [pc, #12]	@ (800494c <_TrySendOverflowPacket+0xdc>)
 800493e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004940:	693b      	ldr	r3, [r7, #16]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3730      	adds	r7, #48	@ 0x30
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20007018 	.word	0x20007018
 8004950:	e0001004 	.word	0xe0001004

08004954 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	@ 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004960:	4b98      	ldr	r3, [pc, #608]	@ (8004bc4 <_SendPacket+0x270>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d010      	beq.n	800498a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004968:	4b96      	ldr	r3, [pc, #600]	@ (8004bc4 <_SendPacket+0x270>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 812d 	beq.w	8004bcc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004972:	4b94      	ldr	r3, [pc, #592]	@ (8004bc4 <_SendPacket+0x270>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d109      	bne.n	800498e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800497a:	f7ff ff79 	bl	8004870 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800497e:	4b91      	ldr	r3, [pc, #580]	@ (8004bc4 <_SendPacket+0x270>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b01      	cmp	r3, #1
 8004984:	f040 8124 	bne.w	8004bd0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004988:	e001      	b.n	800498e <_SendPacket+0x3a>
    goto Send;
 800498a:	bf00      	nop
 800498c:	e000      	b.n	8004990 <_SendPacket+0x3c>
Send:
 800498e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b1f      	cmp	r3, #31
 8004994:	d809      	bhi.n	80049aa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004996:	4b8b      	ldr	r3, [pc, #556]	@ (8004bc4 <_SendPacket+0x270>)
 8004998:	69da      	ldr	r2, [r3, #28]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 8115 	bne.w	8004bd4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b17      	cmp	r3, #23
 80049ae:	d807      	bhi.n	80049c0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e0c4      	b.n	8004b4a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80049cc:	d912      	bls.n	80049f4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	09da      	lsrs	r2, r3, #7
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	3a01      	subs	r2, #1
 80049e6:	60fa      	str	r2, [r7, #12]
 80049e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e006      	b.n	8004a02 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b7e      	cmp	r3, #126	@ 0x7e
 8004a06:	d807      	bhi.n	8004a18 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e098      	b.n	8004b4a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a1e:	d212      	bcs.n	8004a46 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	09da      	lsrs	r2, r3, #7
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	3a01      	subs	r2, #1
 8004a38:	60fa      	str	r2, [r7, #12]
 8004a3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e081      	b.n	8004b4a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a4c:	d21d      	bcs.n	8004a8a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	0b9a      	lsrs	r2, r3, #14
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	09db      	lsrs	r3, r3, #7
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	3a01      	subs	r2, #1
 8004a68:	60fa      	str	r2, [r7, #12]
 8004a6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	60fa      	str	r2, [r7, #12]
 8004a7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	e05f      	b.n	8004b4a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a90:	d228      	bcs.n	8004ae4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0d5a      	lsrs	r2, r3, #21
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	0b9b      	lsrs	r3, r3, #14
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	60fa      	str	r2, [r7, #12]
 8004aae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	09db      	lsrs	r3, r3, #7
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	60fa      	str	r2, [r7, #12]
 8004ac4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	3a01      	subs	r2, #1
 8004ad6:	60fa      	str	r2, [r7, #12]
 8004ad8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e032      	b.n	8004b4a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0f1a      	lsrs	r2, r3, #28
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0d5b      	lsrs	r3, r3, #21
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	3a01      	subs	r2, #1
 8004afe:	60fa      	str	r2, [r7, #12]
 8004b00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0b9b      	lsrs	r3, r3, #14
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	3a01      	subs	r2, #1
 8004b14:	60fa      	str	r2, [r7, #12]
 8004b16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	09db      	lsrs	r3, r3, #7
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	60fa      	str	r2, [r7, #12]
 8004b2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	60fa      	str	r2, [r7, #12]
 8004b40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc8 <_SendPacket+0x274>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b50:	4b1c      	ldr	r3, [pc, #112]	@ (8004bc4 <_SendPacket+0x270>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	623b      	str	r3, [r7, #32]
 8004b62:	e00b      	b.n	8004b7c <_SendPacket+0x228>
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	09db      	lsrs	r3, r3, #7
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b80:	d8f0      	bhi.n	8004b64 <_SendPacket+0x210>
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b88:	6a3a      	ldr	r2, [r7, #32]
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004b92:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <_SendPacket+0x270>)
 8004b94:	785b      	ldrb	r3, [r3, #1]
 8004b96:	4618      	mov	r0, r3
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68f9      	ldr	r1, [r7, #12]
 8004ba2:	f7fb fb35 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ba6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004bae:	4a05      	ldr	r2, [pc, #20]	@ (8004bc4 <_SendPacket+0x270>)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	60d3      	str	r3, [r2, #12]
 8004bb4:	e00f      	b.n	8004bd6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004bb6:	4b03      	ldr	r3, [pc, #12]	@ (8004bc4 <_SendPacket+0x270>)
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4b01      	ldr	r3, [pc, #4]	@ (8004bc4 <_SendPacket+0x270>)
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e008      	b.n	8004bd6 <_SendPacket+0x282>
 8004bc4:	20007018 	.word	0x20007018
 8004bc8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004bcc:	bf00      	nop
 8004bce:	e002      	b.n	8004bd6 <_SendPacket+0x282>
      goto SendDone;
 8004bd0:	bf00      	nop
 8004bd2:	e000      	b.n	8004bd6 <_SendPacket+0x282>
      goto SendDone;
 8004bd4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004bd6:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <_SendPacket+0x2d4>)
 8004bd8:	7e1b      	ldrb	r3, [r3, #24]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4a13      	ldr	r2, [pc, #76]	@ (8004c2c <_SendPacket+0x2d8>)
 8004bde:	460b      	mov	r3, r1
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	440b      	add	r3, r1
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	336c      	adds	r3, #108	@ 0x6c
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <_SendPacket+0x2d4>)
 8004bee:	7e1b      	ldrb	r3, [r3, #24]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	490e      	ldr	r1, [pc, #56]	@ (8004c2c <_SendPacket+0x2d8>)
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4403      	add	r3, r0
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3370      	adds	r3, #112	@ 0x70
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d00b      	beq.n	8004c1e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c06:	4b08      	ldr	r3, [pc, #32]	@ (8004c28 <_SendPacket+0x2d4>)
 8004c08:	789b      	ldrb	r3, [r3, #2]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <_SendPacket+0x2d4>)
 8004c10:	2201      	movs	r2, #1
 8004c12:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c14:	f7ff fdbe 	bl	8004794 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <_SendPacket+0x2d4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c1e:	bf00      	nop
 8004c20:	3728      	adds	r7, #40	@ 0x28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20007018 	.word	0x20007018
 8004c2c:	20004b58 	.word	0x20004b58

08004c30 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c44:	4917      	ldr	r1, [pc, #92]	@ (8004ca4 <SEGGER_SYSVIEW_Init+0x74>)
 8004c46:	4818      	ldr	r0, [pc, #96]	@ (8004ca8 <SEGGER_SYSVIEW_Init+0x78>)
 8004c48:	f7ff fc8e 	bl	8004568 <SEGGER_RTT_AllocUpBuffer>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c52:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c54:	4b15      	ldr	r3, [pc, #84]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c56:	785a      	ldrb	r2, [r3, #1]
 8004c58:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c5a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c5c:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c5e:	7e1b      	ldrb	r3, [r3, #24]
 8004c60:	4618      	mov	r0, r3
 8004c62:	2300      	movs	r3, #0
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	2308      	movs	r3, #8
 8004c68:	4a11      	ldr	r2, [pc, #68]	@ (8004cb0 <SEGGER_SYSVIEW_Init+0x80>)
 8004c6a:	490f      	ldr	r1, [pc, #60]	@ (8004ca8 <SEGGER_SYSVIEW_Init+0x78>)
 8004c6c:	f7ff fd00 	bl	8004670 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c70:	4b0e      	ldr	r3, [pc, #56]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c76:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb4 <SEGGER_SYSVIEW_Init+0x84>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c7c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c84:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c8a:	4a08      	ldr	r2, [pc, #32]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004c90:	4a06      	ldr	r2, [pc, #24]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004c96:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <SEGGER_SYSVIEW_Init+0x7c>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20005010 	.word	0x20005010
 8004ca8:	08005d54 	.word	0x08005d54
 8004cac:	20007018 	.word	0x20007018
 8004cb0:	20007010 	.word	0x20007010
 8004cb4:	e0001004 	.word	0xe0001004

08004cb8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004cc0:	4a04      	ldr	r2, [pc, #16]	@ (8004cd4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6113      	str	r3, [r2, #16]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20007018 	.word	0x20007018

08004cd8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce4:	f04f 0120 	mov.w	r1, #32
 8004ce8:	f381 8811 	msr	BASEPRI, r1
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	4808      	ldr	r0, [pc, #32]	@ (8004d10 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004cf0:	f7ff fd43 	bl	800477a <_PreparePacket>
 8004cf4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68b8      	ldr	r0, [r7, #8]
 8004cfc:	f7ff fe2a 	bl	8004954 <_SendPacket>
  RECORD_END();
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f383 8811 	msr	BASEPRI, r3
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20007048 	.word	0x20007048

08004d14 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d22:	f04f 0120 	mov.w	r1, #32
 8004d26:	f381 8811 	msr	BASEPRI, r1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	4816      	ldr	r0, [pc, #88]	@ (8004d88 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d2e:	f7ff fd24 	bl	800477a <_PreparePacket>
 8004d32:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e00b      	b.n	8004d5a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	1c59      	adds	r1, r3, #1
 8004d4a:	61f9      	str	r1, [r7, #28]
 8004d4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	09db      	lsrs	r3, r3, #7
 8004d58:	61bb      	str	r3, [r7, #24]
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d5e:	d8f0      	bhi.n	8004d42 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	61fa      	str	r2, [r7, #28]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	b2d2      	uxtb	r2, r2
 8004d6a:	701a      	strb	r2, [r3, #0]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	6938      	ldr	r0, [r7, #16]
 8004d76:	f7ff fded 	bl	8004954 <_SendPacket>
  RECORD_END();
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f383 8811 	msr	BASEPRI, r3
}
 8004d80:	bf00      	nop
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20007048 	.word	0x20007048

08004d8c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	@ 0x30
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d98:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9c:	f04f 0120 	mov.w	r1, #32
 8004da0:	f381 8811 	msr	BASEPRI, r1
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	4825      	ldr	r0, [pc, #148]	@ (8004e3c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004da8:	f7ff fce7 	bl	800477a <_PreparePacket>
 8004dac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dba:	e00b      	b.n	8004dd4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	09db      	lsrs	r3, r3, #7
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dd8:	d8f0      	bhi.n	8004dbc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	e00b      	b.n	8004e0c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	1c59      	adds	r1, r3, #1
 8004dfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	09db      	lsrs	r3, r3, #7
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e10:	d8f0      	bhi.n	8004df4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	6979      	ldr	r1, [r7, #20]
 8004e26:	69b8      	ldr	r0, [r7, #24]
 8004e28:	f7ff fd94 	bl	8004954 <_SendPacket>
  RECORD_END();
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f383 8811 	msr	BASEPRI, r3
}
 8004e32:	bf00      	nop
 8004e34:	3730      	adds	r7, #48	@ 0x30
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20007048 	.word	0x20007048

08004e40 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	@ 0x38
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e52:	f04f 0120 	mov.w	r1, #32
 8004e56:	f381 8811 	msr	BASEPRI, r1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	4832      	ldr	r0, [pc, #200]	@ (8004f28 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004e5e:	f7ff fc8c 	bl	800477a <_PreparePacket>
 8004e62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e70:	e00b      	b.n	8004e8a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e78:	1c59      	adds	r1, r3, #1
 8004e7a:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]
 8004e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e86:	09db      	lsrs	r3, r3, #7
 8004e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e8e:	d8f0      	bhi.n	8004e72 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea8:	e00b      	b.n	8004ec2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004eb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	09db      	lsrs	r3, r3, #7
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ec6:	d8f0      	bhi.n	8004eaa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	e00b      	b.n	8004efa <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	6279      	str	r1, [r7, #36]	@ 0x24
 8004eec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	623b      	str	r3, [r7, #32]
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efe:	d8f0      	bhi.n	8004ee2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f06:	6a3a      	ldr	r2, [r7, #32]
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	6979      	ldr	r1, [r7, #20]
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f7ff fd1d 	bl	8004954 <_SendPacket>
  RECORD_END();
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	f383 8811 	msr	BASEPRI, r3
}
 8004f20:	bf00      	nop
 8004f22:	3738      	adds	r7, #56	@ 0x38
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20007048 	.word	0x20007048

08004f2c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b090      	sub	sp, #64	@ 0x40
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3e:	f04f 0120 	mov.w	r1, #32
 8004f42:	f381 8811 	msr	BASEPRI, r1
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	4840      	ldr	r0, [pc, #256]	@ (800504c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004f4a:	f7ff fc16 	bl	800477a <_PreparePacket>
 8004f4e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f5c:	e00b      	b.n	8004f76 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f64:	1c59      	adds	r1, r3, #1
 8004f66:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004f68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	09db      	lsrs	r3, r3, #7
 8004f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f7a:	d8f0      	bhi.n	8004f5e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f94:	e00b      	b.n	8004fae <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	1c59      	adds	r1, r3, #1
 8004f9e:	6379      	str	r1, [r7, #52]	@ 0x34
 8004fa0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	09db      	lsrs	r3, r3, #7
 8004fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fb2:	d8f0      	bhi.n	8004f96 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	637a      	str	r2, [r7, #52]	@ 0x34
 8004fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fcc:	e00b      	b.n	8004fe6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004fd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	09db      	lsrs	r3, r3, #7
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fea:	d8f0      	bhi.n	8004fce <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005002:	623b      	str	r3, [r7, #32]
 8005004:	e00b      	b.n	800501e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005010:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	09db      	lsrs	r3, r3, #7
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2b7f      	cmp	r3, #127	@ 0x7f
 8005022:	d8f0      	bhi.n	8005006 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	627a      	str	r2, [r7, #36]	@ 0x24
 800502a:	6a3a      	ldr	r2, [r7, #32]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	6979      	ldr	r1, [r7, #20]
 8005038:	69b8      	ldr	r0, [r7, #24]
 800503a:	f7ff fc8b 	bl	8004954 <_SendPacket>
  RECORD_END();
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f383 8811 	msr	BASEPRI, r3
}
 8005044:	bf00      	nop
 8005046:	3740      	adds	r7, #64	@ 0x40
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20007048 	.word	0x20007048

08005050 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b08c      	sub	sp, #48	@ 0x30
 8005054:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005056:	4b58      	ldr	r3, [pc, #352]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800505c:	f3ef 8311 	mrs	r3, BASEPRI
 8005060:	f04f 0120 	mov.w	r1, #32
 8005064:	f381 8811 	msr	BASEPRI, r1
 8005068:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800506a:	4b53      	ldr	r3, [pc, #332]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 800506c:	785b      	ldrb	r3, [r3, #1]
 800506e:	220a      	movs	r2, #10
 8005070:	4952      	ldr	r1, [pc, #328]	@ (80051bc <SEGGER_SYSVIEW_Start+0x16c>)
 8005072:	4618      	mov	r0, r3
 8005074:	f7fb f8cc 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800507e:	200a      	movs	r0, #10
 8005080:	f7ff fe2a 	bl	8004cd8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005084:	f3ef 8311 	mrs	r3, BASEPRI
 8005088:	f04f 0120 	mov.w	r1, #32
 800508c:	f381 8811 	msr	BASEPRI, r1
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	484b      	ldr	r0, [pc, #300]	@ (80051c0 <SEGGER_SYSVIEW_Start+0x170>)
 8005094:	f7ff fb71 	bl	800477a <_PreparePacket>
 8005098:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050a2:	4b45      	ldr	r3, [pc, #276]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a8:	e00b      	b.n	80050c2 <SEGGER_SYSVIEW_Start+0x72>
 80050aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b0:	1c59      	adds	r1, r3, #1
 80050b2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80050b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	09db      	lsrs	r3, r3, #7
 80050c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050c6:	d8f0      	bhi.n	80050aa <SEGGER_SYSVIEW_Start+0x5a>
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	627b      	str	r3, [r7, #36]	@ 0x24
 80050dc:	4b36      	ldr	r3, [pc, #216]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	e00b      	b.n	80050fc <SEGGER_SYSVIEW_Start+0xac>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	1c59      	adds	r1, r3, #1
 80050ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80050ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	09db      	lsrs	r3, r3, #7
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005100:	d8f0      	bhi.n	80050e4 <SEGGER_SYSVIEW_Start+0x94>
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	627a      	str	r2, [r7, #36]	@ 0x24
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	4b28      	ldr	r3, [pc, #160]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e00b      	b.n	8005136 <SEGGER_SYSVIEW_Start+0xe6>
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	1c59      	adds	r1, r3, #1
 8005126:	61f9      	str	r1, [r7, #28]
 8005128:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	09db      	lsrs	r3, r3, #7
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	2b7f      	cmp	r3, #127	@ 0x7f
 800513a:	d8f0      	bhi.n	800511e <SEGGER_SYSVIEW_Start+0xce>
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	61fa      	str	r2, [r7, #28]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	2300      	movs	r3, #0
 8005152:	613b      	str	r3, [r7, #16]
 8005154:	e00b      	b.n	800516e <SEGGER_SYSVIEW_Start+0x11e>
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	6179      	str	r1, [r7, #20]
 8005160:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	09db      	lsrs	r3, r3, #7
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b7f      	cmp	r3, #127	@ 0x7f
 8005172:	d8f0      	bhi.n	8005156 <SEGGER_SYSVIEW_Start+0x106>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	617a      	str	r2, [r7, #20]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005184:	2218      	movs	r2, #24
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff fbe3 	bl	8004954 <_SendPacket>
      RECORD_END();
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005194:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800519c:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <SEGGER_SYSVIEW_Start+0x168>)
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80051a2:	f000 f9eb 	bl	800557c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80051a6:	f000 f9b1 	bl	800550c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80051aa:	f000 fbb3 	bl	8005914 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80051ae:	bf00      	nop
 80051b0:	3730      	adds	r7, #48	@ 0x30
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20007018 	.word	0x20007018
 80051bc:	08005dfc 	.word	0x08005dfc
 80051c0:	20007048 	.word	0x20007048

080051c4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051ca:	f3ef 8311 	mrs	r3, BASEPRI
 80051ce:	f04f 0120 	mov.w	r1, #32
 80051d2:	f381 8811 	msr	BASEPRI, r1
 80051d6:	607b      	str	r3, [r7, #4]
 80051d8:	480b      	ldr	r0, [pc, #44]	@ (8005208 <SEGGER_SYSVIEW_Stop+0x44>)
 80051da:	f7ff face 	bl	800477a <_PreparePacket>
 80051de:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80051e0:	4b0a      	ldr	r3, [pc, #40]	@ (800520c <SEGGER_SYSVIEW_Stop+0x48>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051e8:	220b      	movs	r2, #11
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6838      	ldr	r0, [r7, #0]
 80051ee:	f7ff fbb1 	bl	8004954 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <SEGGER_SYSVIEW_Stop+0x48>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f383 8811 	msr	BASEPRI, r3
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20007048 	.word	0x20007048
 800520c:	20007018 	.word	0x20007018

08005210 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	@ 0x30
 8005214:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005216:	f3ef 8311 	mrs	r3, BASEPRI
 800521a:	f04f 0120 	mov.w	r1, #32
 800521e:	f381 8811 	msr	BASEPRI, r1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	4845      	ldr	r0, [pc, #276]	@ (800533c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005226:	f7ff faa8 	bl	800477a <_PreparePacket>
 800522a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005234:	4b42      	ldr	r3, [pc, #264]	@ (8005340 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800523a:	e00b      	b.n	8005254 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	b2da      	uxtb	r2, r3
 8005240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005246:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005250:	09db      	lsrs	r3, r3, #7
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	2b7f      	cmp	r3, #127	@ 0x7f
 8005258:	d8f0      	bhi.n	800523c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800525a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]
 8005266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005268:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
 800526e:	4b34      	ldr	r3, [pc, #208]	@ (8005340 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	623b      	str	r3, [r7, #32]
 8005274:	e00b      	b.n	800528e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005280:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	09db      	lsrs	r3, r3, #7
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2b7f      	cmp	r3, #127	@ 0x7f
 8005292:	d8f0      	bhi.n	8005276 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	627a      	str	r2, [r7, #36]	@ 0x24
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e00b      	b.n	80052c8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	61f9      	str	r1, [r7, #28]
 80052ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	09db      	lsrs	r3, r3, #7
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80052cc:	d8f0      	bhi.n	80052b0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	61fa      	str	r2, [r7, #28]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	e00b      	b.n	8005300 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	6179      	str	r1, [r7, #20]
 80052f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	09db      	lsrs	r3, r3, #7
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b7f      	cmp	r3, #127	@ 0x7f
 8005304:	d8f0      	bhi.n	80052e8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	617a      	str	r2, [r7, #20]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	b2d2      	uxtb	r2, r2
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005316:	2218      	movs	r2, #24
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	f7ff fb1a 	bl	8004954 <_SendPacket>
  RECORD_END();
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800532e:	4b04      	ldr	r3, [pc, #16]	@ (8005340 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	4798      	blx	r3
  }
}
 8005334:	bf00      	nop
 8005336:	3730      	adds	r7, #48	@ 0x30
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	20007048 	.word	0x20007048
 8005340:	20007018 	.word	0x20007018

08005344 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b092      	sub	sp, #72	@ 0x48
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800534c:	f3ef 8311 	mrs	r3, BASEPRI
 8005350:	f04f 0120 	mov.w	r1, #32
 8005354:	f381 8811 	msr	BASEPRI, r1
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	486a      	ldr	r0, [pc, #424]	@ (8005504 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800535c:	f7ff fa0d 	bl	800477a <_PreparePacket>
 8005360:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b66      	ldr	r3, [pc, #408]	@ (8005508 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	643b      	str	r3, [r7, #64]	@ 0x40
 8005376:	e00b      	b.n	8005390 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800537a:	b2da      	uxtb	r2, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537e:	1c59      	adds	r1, r3, #1
 8005380:	6479      	str	r1, [r7, #68]	@ 0x44
 8005382:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538c:	09db      	lsrs	r3, r3, #7
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005392:	2b7f      	cmp	r3, #127	@ 0x7f
 8005394:	d8f0      	bhi.n	8005378 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	647a      	str	r2, [r7, #68]	@ 0x44
 800539c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053b0:	e00b      	b.n	80053ca <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b8:	1c59      	adds	r1, r3, #1
 80053ba:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80053bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	09db      	lsrs	r3, r3, #7
 80053c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80053ce:	d8f0      	bhi.n	80053b2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80053d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053de:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	4619      	mov	r1, r3
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff f98d 	bl	8004708 <_EncodeStr>
 80053ee:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053f0:	2209      	movs	r2, #9
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	6938      	ldr	r0, [r7, #16]
 80053f6:	f7ff faad 	bl	8004954 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	637b      	str	r3, [r7, #52]	@ 0x34
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b40      	ldr	r3, [pc, #256]	@ (8005508 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	633b      	str	r3, [r7, #48]	@ 0x30
 800540e:	e00b      	b.n	8005428 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	b2da      	uxtb	r2, r3
 8005414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005416:	1c59      	adds	r1, r3, #1
 8005418:	6379      	str	r1, [r7, #52]	@ 0x34
 800541a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005424:	09db      	lsrs	r3, r3, #7
 8005426:	633b      	str	r3, [r7, #48]	@ 0x30
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	2b7f      	cmp	r3, #127	@ 0x7f
 800542c:	d8f0      	bhi.n	8005410 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800542e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	637a      	str	r2, [r7, #52]	@ 0x34
 8005434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005448:	e00b      	b.n	8005462 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	b2da      	uxtb	r2, r3
 800544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005450:	1c59      	adds	r1, r3, #1
 8005452:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005454:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545e:	09db      	lsrs	r3, r3, #7
 8005460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005464:	2b7f      	cmp	r3, #127	@ 0x7f
 8005466:	d8f0      	bhi.n	800544a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800546e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	e00b      	b.n	800549c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	6279      	str	r1, [r7, #36]	@ 0x24
 800548e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	09db      	lsrs	r3, r3, #7
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b7f      	cmp	r3, #127	@ 0x7f
 80054a0:	d8f0      	bhi.n	8005484 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80054a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80054a8:	6a3a      	ldr	r2, [r7, #32]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e00b      	b.n	80054d6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	61f9      	str	r1, [r7, #28]
 80054c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	09db      	lsrs	r3, r3, #7
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80054da:	d8f0      	bhi.n	80054be <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	61fa      	str	r2, [r7, #28]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054ec:	2215      	movs	r2, #21
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	6938      	ldr	r0, [r7, #16]
 80054f2:	f7ff fa2f 	bl	8004954 <_SendPacket>
  RECORD_END();
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f383 8811 	msr	BASEPRI, r3
}
 80054fc:	bf00      	nop
 80054fe:	3748      	adds	r7, #72	@ 0x48
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20007048 	.word	0x20007048
 8005508:	20007018 	.word	0x20007018

0800550c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005510:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005518:	4b05      	ldr	r3, [pc, #20]	@ (8005530 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005522:	4b03      	ldr	r3, [pc, #12]	@ (8005530 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4798      	blx	r3
  }
}
 800552a:	bf00      	nop
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20007018 	.word	0x20007018

08005534 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800553c:	f3ef 8311 	mrs	r3, BASEPRI
 8005540:	f04f 0120 	mov.w	r1, #32
 8005544:	f381 8811 	msr	BASEPRI, r1
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	480b      	ldr	r0, [pc, #44]	@ (8005578 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800554c:	f7ff f915 	bl	800477a <_PreparePacket>
 8005550:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005552:	2280      	movs	r2, #128	@ 0x80
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	6938      	ldr	r0, [r7, #16]
 8005558:	f7ff f8d6 	bl	8004708 <_EncodeStr>
 800555c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800555e:	220e      	movs	r2, #14
 8005560:	68f9      	ldr	r1, [r7, #12]
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f7ff f9f6 	bl	8004954 <_SendPacket>
  RECORD_END();
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f383 8811 	msr	BASEPRI, r3
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	20007048 	.word	0x20007048

0800557c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800557c:	b590      	push	{r4, r7, lr}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005582:	4b15      	ldr	r3, [pc, #84]	@ (80055d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01a      	beq.n	80055c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800558a:	4b13      	ldr	r3, [pc, #76]	@ (80055d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005594:	4b10      	ldr	r3, [pc, #64]	@ (80055d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4798      	blx	r3
 800559c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055a0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80055a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	000a      	movs	r2, r1
 80055b0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055b2:	4613      	mov	r3, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4621      	mov	r1, r4
 80055b8:	200d      	movs	r0, #13
 80055ba:	f7ff fbe7 	bl	8004d8c <SEGGER_SYSVIEW_RecordU32x2>
 80055be:	e006      	b.n	80055ce <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80055c0:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	200c      	movs	r0, #12
 80055c8:	f7ff fba4 	bl	8004d14 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20007018 	.word	0x20007018
 80055dc:	e0001004 	.word	0xe0001004

080055e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055e6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ea:	f04f 0120 	mov.w	r1, #32
 80055ee:	f381 8811 	msr	BASEPRI, r1
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	4807      	ldr	r0, [pc, #28]	@ (8005614 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80055f6:	f7ff f8c0 	bl	800477a <_PreparePacket>
 80055fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80055fc:	2211      	movs	r2, #17
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6838      	ldr	r0, [r7, #0]
 8005602:	f7ff f9a7 	bl	8004954 <_SendPacket>
  RECORD_END();
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f383 8811 	msr	BASEPRI, r3
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20007048 	.word	0x20007048

08005618 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005620:	f3ef 8311 	mrs	r3, BASEPRI
 8005624:	f04f 0120 	mov.w	r1, #32
 8005628:	f381 8811 	msr	BASEPRI, r1
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	4819      	ldr	r0, [pc, #100]	@ (8005694 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005630:	f7ff f8a3 	bl	800477a <_PreparePacket>
 8005634:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800563a:	4b17      	ldr	r3, [pc, #92]	@ (8005698 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	61bb      	str	r3, [r7, #24]
 800564c:	e00b      	b.n	8005666 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	b2da      	uxtb	r2, r3
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	1c59      	adds	r1, r3, #1
 8005656:	61f9      	str	r1, [r7, #28]
 8005658:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	09db      	lsrs	r3, r3, #7
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b7f      	cmp	r3, #127	@ 0x7f
 800566a:	d8f0      	bhi.n	800564e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	61fa      	str	r2, [r7, #28]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800567c:	2208      	movs	r2, #8
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	6938      	ldr	r0, [r7, #16]
 8005682:	f7ff f967 	bl	8004954 <_SendPacket>
  RECORD_END();
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f383 8811 	msr	BASEPRI, r3
}
 800568c:	bf00      	nop
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20007048 	.word	0x20007048
 8005698:	20007018 	.word	0x20007018

0800569c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b088      	sub	sp, #32
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056a4:	f3ef 8311 	mrs	r3, BASEPRI
 80056a8:	f04f 0120 	mov.w	r1, #32
 80056ac:	f381 8811 	msr	BASEPRI, r1
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	4819      	ldr	r0, [pc, #100]	@ (8005718 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056b4:	f7ff f861 	bl	800477a <_PreparePacket>
 80056b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056be:	4b17      	ldr	r3, [pc, #92]	@ (800571c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	61bb      	str	r3, [r7, #24]
 80056d0:	e00b      	b.n	80056ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	1c59      	adds	r1, r3, #1
 80056da:	61f9      	str	r1, [r7, #28]
 80056dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	09db      	lsrs	r3, r3, #7
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ee:	d8f0      	bhi.n	80056d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	61fa      	str	r2, [r7, #28]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005700:	2204      	movs	r2, #4
 8005702:	68f9      	ldr	r1, [r7, #12]
 8005704:	6938      	ldr	r0, [r7, #16]
 8005706:	f7ff f925 	bl	8004954 <_SendPacket>
  RECORD_END();
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f383 8811 	msr	BASEPRI, r3
}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20007048 	.word	0x20007048
 800571c:	20007018 	.word	0x20007018

08005720 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005728:	f3ef 8311 	mrs	r3, BASEPRI
 800572c:	f04f 0120 	mov.w	r1, #32
 8005730:	f381 8811 	msr	BASEPRI, r1
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	4819      	ldr	r0, [pc, #100]	@ (800579c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005738:	f7ff f81f 	bl	800477a <_PreparePacket>
 800573c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005742:	4b17      	ldr	r3, [pc, #92]	@ (80057a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e00b      	b.n	800576e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	1c59      	adds	r1, r3, #1
 800575e:	61f9      	str	r1, [r7, #28]
 8005760:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	09db      	lsrs	r3, r3, #7
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b7f      	cmp	r3, #127	@ 0x7f
 8005772:	d8f0      	bhi.n	8005756 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	61fa      	str	r2, [r7, #28]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	b2d2      	uxtb	r2, r2
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005784:	2206      	movs	r2, #6
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	6938      	ldr	r0, [r7, #16]
 800578a:	f7ff f8e3 	bl	8004954 <_SendPacket>
  RECORD_END();
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f383 8811 	msr	BASEPRI, r3
}
 8005794:	bf00      	nop
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20007048 	.word	0x20007048
 80057a0:	20007018 	.word	0x20007018

080057a4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	1ad3      	subs	r3, r2, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20007018 	.word	0x20007018

080057c4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	@ 0x30
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80057ce:	4b40      	ldr	r3, [pc, #256]	@ (80058d0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d077      	beq.n	80058c6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80057d6:	4b3e      	ldr	r3, [pc, #248]	@ (80058d0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80057dc:	2300      	movs	r3, #0
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e0:	e008      	b.n	80057f4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80057e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80057e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	3301      	adds	r3, #1
 80057f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d3f2      	bcc.n	80057e2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80057fc:	e000      	b.n	8005800 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80057fe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d055      	beq.n	80058b2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005806:	f3ef 8311 	mrs	r3, BASEPRI
 800580a:	f04f 0120 	mov.w	r1, #32
 800580e:	f381 8811 	msr	BASEPRI, r1
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	482f      	ldr	r0, [pc, #188]	@ (80058d4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005816:	f7fe ffb0 	bl	800477a <_PreparePacket>
 800581a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	623b      	str	r3, [r7, #32]
 8005828:	e00b      	b.n	8005842 <SEGGER_SYSVIEW_SendModule+0x7e>
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	b2da      	uxtb	r2, r3
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	1c59      	adds	r1, r3, #1
 8005832:	6279      	str	r1, [r7, #36]	@ 0x24
 8005834:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005838:	b2d2      	uxtb	r2, r2
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	623b      	str	r3, [r7, #32]
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	2b7f      	cmp	r3, #127	@ 0x7f
 8005846:	d8f0      	bhi.n	800582a <SEGGER_SYSVIEW_SendModule+0x66>
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	627a      	str	r2, [r7, #36]	@ 0x24
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	e00b      	b.n	800587c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	1c59      	adds	r1, r3, #1
 800586c:	61f9      	str	r1, [r7, #28]
 800586e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	09db      	lsrs	r3, r3, #7
 800587a:	61bb      	str	r3, [r7, #24]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005880:	d8f0      	bhi.n	8005864 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	61fa      	str	r2, [r7, #28]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2280      	movs	r2, #128	@ 0x80
 8005898:	4619      	mov	r1, r3
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7fe ff34 	bl	8004708 <_EncodeStr>
 80058a0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80058a2:	2216      	movs	r2, #22
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	6938      	ldr	r0, [r7, #16]
 80058a8:	f7ff f854 	bl	8004954 <_SendPacket>
      RECORD_END();
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80058b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d006      	beq.n	80058c6 <SEGGER_SYSVIEW_SendModule+0x102>
 80058b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80058c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	4798      	blx	r3
    }
  }
}
 80058c6:	bf00      	nop
 80058c8:	3730      	adds	r7, #48	@ 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20007040 	.word	0x20007040
 80058d4:	20007048 	.word	0x20007048

080058d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80058de:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00f      	beq.n	8005906 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80058e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f2      	bne.n	80058ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20007040 	.word	0x20007040

08005914 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800591a:	f3ef 8311 	mrs	r3, BASEPRI
 800591e:	f04f 0120 	mov.w	r1, #32
 8005922:	f381 8811 	msr	BASEPRI, r1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	4817      	ldr	r0, [pc, #92]	@ (8005988 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800592a:	f7fe ff26 	bl	800477a <_PreparePacket>
 800592e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	4b14      	ldr	r3, [pc, #80]	@ (800598c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e00b      	b.n	8005958 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	1c59      	adds	r1, r3, #1
 8005948:	6179      	str	r1, [r7, #20]
 800594a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	09db      	lsrs	r3, r3, #7
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	2b7f      	cmp	r3, #127	@ 0x7f
 800595c:	d8f0      	bhi.n	8005940 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	1c5a      	adds	r2, r3, #1
 8005962:	617a      	str	r2, [r7, #20]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800596e:	221b      	movs	r2, #27
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68b8      	ldr	r0, [r7, #8]
 8005974:	f7fe ffee 	bl	8004954 <_SendPacket>
  RECORD_END();
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f383 8811 	msr	BASEPRI, r3
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20007048 	.word	0x20007048
 800598c:	20007044 	.word	0x20007044

08005990 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	@ 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005998:	f3ef 8311 	mrs	r3, BASEPRI
 800599c:	f04f 0120 	mov.w	r1, #32
 80059a0:	f381 8811 	msr	BASEPRI, r1
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	4827      	ldr	r0, [pc, #156]	@ (8005a44 <SEGGER_SYSVIEW_Warn+0xb4>)
 80059a8:	f7fe fee7 	bl	800477a <_PreparePacket>
 80059ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059ae:	2280      	movs	r2, #128	@ 0x80
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	6938      	ldr	r0, [r7, #16]
 80059b4:	f7fe fea8 	bl	8004708 <_EncodeStr>
 80059b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059be:	2301      	movs	r3, #1
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	e00b      	b.n	80059dc <SEGGER_SYSVIEW_Warn+0x4c>
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80059ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	09db      	lsrs	r3, r3, #7
 80059da:	623b      	str	r3, [r7, #32]
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	2b7f      	cmp	r3, #127	@ 0x7f
 80059e0:	d8f0      	bhi.n	80059c4 <SEGGER_SYSVIEW_Warn+0x34>
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80059e8:	6a3a      	ldr	r2, [r7, #32]
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	e00b      	b.n	8005a14 <SEGGER_SYSVIEW_Warn+0x84>
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1c59      	adds	r1, r3, #1
 8005a04:	61f9      	str	r1, [r7, #28]
 8005a06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a0a:	b2d2      	uxtb	r2, r2
 8005a0c:	701a      	strb	r2, [r3, #0]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	09db      	lsrs	r3, r3, #7
 8005a12:	61bb      	str	r3, [r7, #24]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a18:	d8f0      	bhi.n	80059fc <SEGGER_SYSVIEW_Warn+0x6c>
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	61fa      	str	r2, [r7, #28]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a2a:	221a      	movs	r2, #26
 8005a2c:	68f9      	ldr	r1, [r7, #12]
 8005a2e:	6938      	ldr	r0, [r7, #16]
 8005a30:	f7fe ff90 	bl	8004954 <_SendPacket>
  RECORD_END();
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f383 8811 	msr	BASEPRI, r3
}
 8005a3a:	bf00      	nop
 8005a3c:	3728      	adds	r7, #40	@ 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20007048 	.word	0x20007048

08005a48 <memcmp>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	3901      	subs	r1, #1
 8005a4c:	4402      	add	r2, r0
 8005a4e:	4290      	cmp	r0, r2
 8005a50:	d101      	bne.n	8005a56 <memcmp+0xe>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e005      	b.n	8005a62 <memcmp+0x1a>
 8005a56:	7803      	ldrb	r3, [r0, #0]
 8005a58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d001      	beq.n	8005a64 <memcmp+0x1c>
 8005a60:	1b18      	subs	r0, r3, r4
 8005a62:	bd10      	pop	{r4, pc}
 8005a64:	3001      	adds	r0, #1
 8005a66:	e7f2      	b.n	8005a4e <memcmp+0x6>

08005a68 <memset>:
 8005a68:	4402      	add	r2, r0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d100      	bne.n	8005a72 <memset+0xa>
 8005a70:	4770      	bx	lr
 8005a72:	f803 1b01 	strb.w	r1, [r3], #1
 8005a76:	e7f9      	b.n	8005a6c <memset+0x4>

08005a78 <_reclaim_reent>:
 8005a78:	4b29      	ldr	r3, [pc, #164]	@ (8005b20 <_reclaim_reent+0xa8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4283      	cmp	r3, r0
 8005a7e:	b570      	push	{r4, r5, r6, lr}
 8005a80:	4604      	mov	r4, r0
 8005a82:	d04b      	beq.n	8005b1c <_reclaim_reent+0xa4>
 8005a84:	69c3      	ldr	r3, [r0, #28]
 8005a86:	b1ab      	cbz	r3, 8005ab4 <_reclaim_reent+0x3c>
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	b16b      	cbz	r3, 8005aa8 <_reclaim_reent+0x30>
 8005a8c:	2500      	movs	r5, #0
 8005a8e:	69e3      	ldr	r3, [r4, #28]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	5959      	ldr	r1, [r3, r5]
 8005a94:	2900      	cmp	r1, #0
 8005a96:	d13b      	bne.n	8005b10 <_reclaim_reent+0x98>
 8005a98:	3504      	adds	r5, #4
 8005a9a:	2d80      	cmp	r5, #128	@ 0x80
 8005a9c:	d1f7      	bne.n	8005a8e <_reclaim_reent+0x16>
 8005a9e:	69e3      	ldr	r3, [r4, #28]
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	68d9      	ldr	r1, [r3, #12]
 8005aa4:	f000 f872 	bl	8005b8c <_free_r>
 8005aa8:	69e3      	ldr	r3, [r4, #28]
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	b111      	cbz	r1, 8005ab4 <_reclaim_reent+0x3c>
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 f86c 	bl	8005b8c <_free_r>
 8005ab4:	6961      	ldr	r1, [r4, #20]
 8005ab6:	b111      	cbz	r1, 8005abe <_reclaim_reent+0x46>
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 f867 	bl	8005b8c <_free_r>
 8005abe:	69e1      	ldr	r1, [r4, #28]
 8005ac0:	b111      	cbz	r1, 8005ac8 <_reclaim_reent+0x50>
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 f862 	bl	8005b8c <_free_r>
 8005ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005aca:	b111      	cbz	r1, 8005ad2 <_reclaim_reent+0x5a>
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 f85d 	bl	8005b8c <_free_r>
 8005ad2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ad4:	b111      	cbz	r1, 8005adc <_reclaim_reent+0x64>
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 f858 	bl	8005b8c <_free_r>
 8005adc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005ade:	b111      	cbz	r1, 8005ae6 <_reclaim_reent+0x6e>
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	f000 f853 	bl	8005b8c <_free_r>
 8005ae6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005ae8:	b111      	cbz	r1, 8005af0 <_reclaim_reent+0x78>
 8005aea:	4620      	mov	r0, r4
 8005aec:	f000 f84e 	bl	8005b8c <_free_r>
 8005af0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005af2:	b111      	cbz	r1, 8005afa <_reclaim_reent+0x82>
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 f849 	bl	8005b8c <_free_r>
 8005afa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005afc:	b111      	cbz	r1, 8005b04 <_reclaim_reent+0x8c>
 8005afe:	4620      	mov	r0, r4
 8005b00:	f000 f844 	bl	8005b8c <_free_r>
 8005b04:	6a23      	ldr	r3, [r4, #32]
 8005b06:	b14b      	cbz	r3, 8005b1c <_reclaim_reent+0xa4>
 8005b08:	4620      	mov	r0, r4
 8005b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b0e:	4718      	bx	r3
 8005b10:	680e      	ldr	r6, [r1, #0]
 8005b12:	4620      	mov	r0, r4
 8005b14:	f000 f83a 	bl	8005b8c <_free_r>
 8005b18:	4631      	mov	r1, r6
 8005b1a:	e7bb      	b.n	8005a94 <_reclaim_reent+0x1c>
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000014 	.word	0x20000014

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4d0d      	ldr	r5, [pc, #52]	@ (8005b5c <__libc_init_array+0x38>)
 8005b28:	4c0d      	ldr	r4, [pc, #52]	@ (8005b60 <__libc_init_array+0x3c>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	2600      	movs	r6, #0
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	4d0b      	ldr	r5, [pc, #44]	@ (8005b64 <__libc_init_array+0x40>)
 8005b36:	4c0c      	ldr	r4, [pc, #48]	@ (8005b68 <__libc_init_array+0x44>)
 8005b38:	f000 f87e 	bl	8005c38 <_init>
 8005b3c:	1b64      	subs	r4, r4, r5
 8005b3e:	10a4      	asrs	r4, r4, #2
 8005b40:	2600      	movs	r6, #0
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4c:	4798      	blx	r3
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b56:	4798      	blx	r3
 8005b58:	3601      	adds	r6, #1
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	08005e08 	.word	0x08005e08
 8005b60:	08005e08 	.word	0x08005e08
 8005b64:	08005e08 	.word	0x08005e08
 8005b68:	08005e0c 	.word	0x08005e0c

08005b6c <__retarget_lock_acquire_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__retarget_lock_release_recursive>:
 8005b6e:	4770      	bx	lr

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <_free_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4605      	mov	r5, r0
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d041      	beq.n	8005c18 <_free_r+0x8c>
 8005b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b98:	1f0c      	subs	r4, r1, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bfb8      	it	lt
 8005b9e:	18e4      	addlt	r4, r4, r3
 8005ba0:	f000 f83e 	bl	8005c20 <__malloc_lock>
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c1c <_free_r+0x90>)
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	b933      	cbnz	r3, 8005bb8 <_free_r+0x2c>
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	6014      	str	r4, [r2, #0]
 8005bae:	4628      	mov	r0, r5
 8005bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb4:	f000 b83a 	b.w	8005c2c <__malloc_unlock>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d908      	bls.n	8005bce <_free_r+0x42>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	1821      	adds	r1, r4, r0
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	bf01      	itttt	eq
 8005bc4:	6819      	ldreq	r1, [r3, #0]
 8005bc6:	685b      	ldreq	r3, [r3, #4]
 8005bc8:	1809      	addeq	r1, r1, r0
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	e7ed      	b.n	8005baa <_free_r+0x1e>
 8005bce:	461a      	mov	r2, r3
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b10b      	cbz	r3, 8005bd8 <_free_r+0x4c>
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d9fa      	bls.n	8005bce <_free_r+0x42>
 8005bd8:	6811      	ldr	r1, [r2, #0]
 8005bda:	1850      	adds	r0, r2, r1
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d10b      	bne.n	8005bf8 <_free_r+0x6c>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	4401      	add	r1, r0
 8005be4:	1850      	adds	r0, r2, r1
 8005be6:	4283      	cmp	r3, r0
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	d1e0      	bne.n	8005bae <_free_r+0x22>
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	6053      	str	r3, [r2, #4]
 8005bf2:	4408      	add	r0, r1
 8005bf4:	6010      	str	r0, [r2, #0]
 8005bf6:	e7da      	b.n	8005bae <_free_r+0x22>
 8005bf8:	d902      	bls.n	8005c00 <_free_r+0x74>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	e7d6      	b.n	8005bae <_free_r+0x22>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	1821      	adds	r1, r4, r0
 8005c04:	428b      	cmp	r3, r1
 8005c06:	bf04      	itt	eq
 8005c08:	6819      	ldreq	r1, [r3, #0]
 8005c0a:	685b      	ldreq	r3, [r3, #4]
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	bf04      	itt	eq
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	6054      	str	r4, [r2, #4]
 8005c16:	e7ca      	b.n	8005bae <_free_r+0x22>
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20007268 	.word	0x20007268

08005c20 <__malloc_lock>:
 8005c20:	4801      	ldr	r0, [pc, #4]	@ (8005c28 <__malloc_lock+0x8>)
 8005c22:	f7ff bfa3 	b.w	8005b6c <__retarget_lock_acquire_recursive>
 8005c26:	bf00      	nop
 8005c28:	20007264 	.word	0x20007264

08005c2c <__malloc_unlock>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	@ (8005c34 <__malloc_unlock+0x8>)
 8005c2e:	f7ff bf9e 	b.w	8005b6e <__retarget_lock_release_recursive>
 8005c32:	bf00      	nop
 8005c34:	20007264 	.word	0x20007264

08005c38 <_init>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	bf00      	nop
 8005c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3e:	bc08      	pop	{r3}
 8005c40:	469e      	mov	lr, r3
 8005c42:	4770      	bx	lr

08005c44 <_fini>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr
