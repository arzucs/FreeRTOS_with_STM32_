
freeRTOS_DMU_GTB6_Led_EXI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d20  08005d20  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d20  08005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d28  08005d28  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d28  08005d28  00006d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d30  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc8  20000060  08005d90  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c28  08005d90  00007c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012951  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e50  00000000  00000000  000199e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3f  00000000  00000000  0001d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fae  00000000  00000000  0001e24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001137e  00000000  00000000  000211fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2ae  00000000  00000000  0003257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  0011186c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00115870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c68 	.word	0x08005c68

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005c68 	.word	0x08005c68

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fcd9 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f845 	bl	8000598 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 800050e:	f000 fc2b 	bl	8000d68 <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f937 	bl	8000784 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f8ad 	bl	8000674 <MX_ADC1_Init>
  MX_CAN1_Init();
 800051a:	f000 f8fd 	bl	8000718 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051e:	f002 fd0f 	bl	8002f40 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartDefaultTask, NULL, &myTask01_attributes);
 8000522:	4a15      	ldr	r2, [pc, #84]	@ (8000578 <main+0x78>)
 8000524:	2100      	movs	r1, #0
 8000526:	4815      	ldr	r0, [pc, #84]	@ (800057c <main+0x7c>)
 8000528:	f002 fd54 	bl	8002fd4 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <main+0x80>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000532:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <main+0x84>)
 8000534:	2100      	movs	r1, #0
 8000536:	4814      	ldr	r0, [pc, #80]	@ (8000588 <main+0x88>)
 8000538:	f002 fd4c 	bl	8002fd4 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a13      	ldr	r2, [pc, #76]	@ (800058c <main+0x8c>)
 8000540:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(StartDefaultTask," DMU OKUMA ",500, NULL, 3, &myTask01_attributes);
 8000542:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <main+0x78>)
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2303      	movs	r3, #3
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000550:	490f      	ldr	r1, [pc, #60]	@ (8000590 <main+0x90>)
 8000552:	480a      	ldr	r0, [pc, #40]	@ (800057c <main+0x7c>)
 8000554:	f003 fc2e 	bl	8003db4 <xTaskCreate>
  xTaskCreate(StartTask02," Led yakma ", 500, NULL, 3, &myTask02_attributes);
 8000558:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <main+0x84>)
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2303      	movs	r3, #3
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000566:	490b      	ldr	r1, [pc, #44]	@ (8000594 <main+0x94>)
 8000568:	4807      	ldr	r0, [pc, #28]	@ (8000588 <main+0x88>)
 800056a:	f003 fc23 	bl	8003db4 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f002 fd0b 	bl	8002f88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	bf00      	nop
 8000574:	e7fd      	b.n	8000572 <main+0x72>
 8000576:	bf00      	nop
 8000578:	08005cc8 	.word	0x08005cc8
 800057c:	080008e1 	.word	0x080008e1
 8000580:	200000ec 	.word	0x200000ec
 8000584:	08005cec 	.word	0x08005cec
 8000588:	0800093d 	.word	0x0800093d
 800058c:	200000f0 	.word	0x200000f0
 8000590:	08005c98 	.word	0x08005c98
 8000594:	08005ca4 	.word	0x08005ca4

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	@ 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f005 fa76 	bl	8005a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b2a      	ldr	r3, [pc, #168]	@ (800066c <SystemClock_Config+0xd4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a29      	ldr	r2, [pc, #164]	@ (800066c <SystemClock_Config+0xd4>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b27      	ldr	r3, [pc, #156]	@ (800066c <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <SystemClock_Config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e4:	4a22      	ldr	r2, [pc, #136]	@ (8000670 <SystemClock_Config+0xd8>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060c:	2308      	movs	r3, #8
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000610:	2340      	movs	r3, #64	@ 0x40
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4618      	mov	r0, r3
 8000626:	f002 f9b9 	bl	800299c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000630:	f000 fa90 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800063c:	2390      	movs	r3, #144	@ 0x90
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fe8c 	bl	8002370 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065e:	f000 fa79 	bl	8000b54 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000686:	4b21      	ldr	r3, [pc, #132]	@ (800070c <MX_ADC1_Init+0x98>)
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <MX_ADC1_Init+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800069e:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ac:	4b17      	ldr	r3, [pc, #92]	@ (800070c <MX_ADC1_Init+0x98>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b2:	4b16      	ldr	r3, [pc, #88]	@ (800070c <MX_ADC1_Init+0x98>)
 80006b4:	4a17      	ldr	r2, [pc, #92]	@ (8000714 <MX_ADC1_Init+0xa0>)
 80006b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <MX_ADC1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006be:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_ADC1_Init+0x98>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <MX_ADC1_Init+0x98>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d2:	480e      	ldr	r0, [pc, #56]	@ (800070c <MX_ADC1_Init+0x98>)
 80006d4:	f000 fc64 	bl	8000fa0 <HAL_ADC_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 fa39 	bl	8000b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	@ (800070c <MX_ADC1_Init+0x98>)
 80006f4:	f000 fe02 	bl	80012fc <HAL_ADC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006fe:	f000 fa29 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000007c 	.word	0x2000007c
 8000710:	40012000 	.word	0x40012000
 8000714:	0f000001 	.word	0x0f000001

08000718 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <MX_CAN1_Init+0x64>)
 800071e:	4a18      	ldr	r2, [pc, #96]	@ (8000780 <MX_CAN1_Init+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_CAN1_Init+0x64>)
 8000724:	220c      	movs	r2, #12
 8000726:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_CAN1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_CAN1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <MX_CAN1_Init+0x64>)
 8000736:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800073a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <MX_CAN1_Init+0x64>)
 800073e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000742:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_CAN1_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_CAN1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_CAN1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_CAN1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_CAN1_Init+0x64>)
 800076a:	f000 fff5 	bl	8001758 <HAL_CAN_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000774:	f000 f9ee 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000c4 	.word	0x200000c4
 8000780:	40006400 	.word	0x40006400

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	@ 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b4c      	ldr	r3, [pc, #304]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a4b      	ldr	r2, [pc, #300]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b49      	ldr	r3, [pc, #292]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b45      	ldr	r3, [pc, #276]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a44      	ldr	r2, [pc, #272]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b42      	ldr	r3, [pc, #264]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b3e      	ldr	r3, [pc, #248]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a3d      	ldr	r2, [pc, #244]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b3b      	ldr	r3, [pc, #236]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b37      	ldr	r3, [pc, #220]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a36      	ldr	r2, [pc, #216]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b34      	ldr	r3, [pc, #208]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2f      	ldr	r2, [pc, #188]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a28      	ldr	r2, [pc, #160]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000848:	4822      	ldr	r0, [pc, #136]	@ (80008d4 <MX_GPIO_Init+0x150>)
 800084a:	f001 fd77 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2106      	movs	r1, #6
 8000852:	4821      	ldr	r0, [pc, #132]	@ (80008d8 <MX_GPIO_Init+0x154>)
 8000854:	f001 fd72 	bl	800233c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4818      	ldr	r0, [pc, #96]	@ (80008d4 <MX_GPIO_Init+0x150>)
 8000872:	f001 fbb7 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000876:	2301      	movs	r3, #1
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <MX_GPIO_Init+0x154>)
 800088c:	f001 fbaa 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000890:	2306      	movs	r3, #6
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <MX_GPIO_Init+0x154>)
 80008a8:	f001 fb9c 	bl	8001fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	@ (80008dc <MX_GPIO_Init+0x158>)
 80008c2:	f001 fb8f 	bl	8001fe4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	@ 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020800 	.word	0x40020800
 80008d8:	40021400 	.word	0x40021400
 80008dc:	40021000 	.word	0x40021000

080008e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 80008e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ec:	480f      	ldr	r0, [pc, #60]	@ (800092c <StartDefaultTask+0x4c>)
 80008ee:	f001 fd0d 	bl	800230c <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <StartDefaultTask+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 80008fa:	480e      	ldr	r0, [pc, #56]	@ (8000934 <StartDefaultTask+0x54>)
 80008fc:	f000 fb94 	bl	8001028 <HAL_ADC_Start>
	  if(digital_output == 0)
 8000900:	4b0b      	ldr	r3, [pc, #44]	@ (8000930 <StartDefaultTask+0x50>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d10d      	bne.n	8000924 <StartDefaultTask+0x44>
	  {
		  if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000908:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800090c:	4809      	ldr	r0, [pc, #36]	@ (8000934 <StartDefaultTask+0x54>)
 800090e:	f000 fc5d 	bl	80011cc <HAL_ADC_PollForConversion>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d105      	bne.n	8000924 <StartDefaultTask+0x44>
		  {
			  dmu_value = HAL_ADC_GetValue(&hadc1);
 8000918:	4806      	ldr	r0, [pc, #24]	@ (8000934 <StartDefaultTask+0x54>)
 800091a:	f000 fce2 	bl	80012e2 <HAL_ADC_GetValue>
 800091e:	4603      	mov	r3, r0
 8000920:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <StartDefaultTask+0x58>)
 8000922:	6013      	str	r3, [r2, #0]

		  }
	  };

    osDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f002 fbe7 	bl	80030f8 <osDelay>
	  digital_output = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 800092a:	e7dd      	b.n	80008e8 <StartDefaultTask+0x8>
 800092c:	40021000 	.word	0x40021000
 8000930:	200000f8 	.word	0x200000f8
 8000934:	2000007c 	.word	0x2000007c
 8000938:	200000f4 	.word	0x200000f4

0800093c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	uint32_t pulNotificationValue = 0 ;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  if(dmu_value <45 & digital_output == 1)
 8000948:	4b7e      	ldr	r3, [pc, #504]	@ (8000b44 <StartTask02+0x208>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b2c      	cmp	r3, #44	@ 0x2c
 800094e:	bf94      	ite	ls
 8000950:	2301      	movls	r3, #1
 8000952:	2300      	movhi	r3, #0
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b7c      	ldr	r3, [pc, #496]	@ (8000b48 <StartTask02+0x20c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	bf0c      	ite	eq
 800095e:	2301      	moveq	r3, #1
 8000960:	2300      	movne	r3, #0
 8000962:	b2db      	uxtb	r3, r3
 8000964:	4013      	ands	r3, r2
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d01c      	beq.n	80009a6 <StartTask02+0x6a>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2107      	movs	r1, #7
 8000970:	4876      	ldr	r0, [pc, #472]	@ (8000b4c <StartTask02+0x210>)
 8000972:	f001 fce3 	bl	800233c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097c:	4874      	ldr	r0, [pc, #464]	@ (8000b50 <StartTask02+0x214>)
 800097e:	f001 fcdd 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 8000982:	2064      	movs	r0, #100	@ 0x64
 8000984:	f003 fb74 	bl	8004070 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2107      	movs	r1, #7
 800098c:	486f      	ldr	r0, [pc, #444]	@ (8000b4c <StartTask02+0x210>)
 800098e:	f001 fcd5 	bl	800233c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000998:	486d      	ldr	r0, [pc, #436]	@ (8000b50 <StartTask02+0x214>)
 800099a:	f001 fccf 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(100);
 800099e:	2064      	movs	r0, #100	@ 0x64
 80009a0:	f003 fb66 	bl	8004070 <vTaskDelay>
 80009a4:	e0c9      	b.n	8000b3a <StartTask02+0x1fe>
	  }
	  else if (dmu_value >= 45 & dmu_value <200 ) // 250 ms bir yanıp sönecek
 80009a6:	4b67      	ldr	r3, [pc, #412]	@ (8000b44 <StartTask02+0x208>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80009ac:	bf8c      	ite	hi
 80009ae:	2301      	movhi	r3, #1
 80009b0:	2300      	movls	r3, #0
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b63      	ldr	r3, [pc, #396]	@ (8000b44 <StartTask02+0x208>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80009ba:	bf94      	ite	ls
 80009bc:	2301      	movls	r3, #1
 80009be:	2300      	movhi	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	4013      	ands	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d010      	beq.n	80009ec <StartTask02+0xb0>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2107      	movs	r1, #7
 80009ce:	485f      	ldr	r0, [pc, #380]	@ (8000b4c <StartTask02+0x210>)
 80009d0:	f001 fcb4 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(250);
 80009d4:	20fa      	movs	r0, #250	@ 0xfa
 80009d6:	f003 fb4b 	bl	8004070 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2107      	movs	r1, #7
 80009de:	485b      	ldr	r0, [pc, #364]	@ (8000b4c <StartTask02+0x210>)
 80009e0:	f001 fcac 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(250);
 80009e4:	20fa      	movs	r0, #250	@ 0xfa
 80009e6:	f003 fb43 	bl	8004070 <vTaskDelay>
 80009ea:	e0a6      	b.n	8000b3a <StartTask02+0x1fe>

	  }
	  else if (dmu_value >= 200 & dmu_value < 500 ) // 500 ms bir yanıp sönecek
 80009ec:	4b55      	ldr	r3, [pc, #340]	@ (8000b44 <StartTask02+0x208>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2bc7      	cmp	r3, #199	@ 0xc7
 80009f2:	bf8c      	ite	hi
 80009f4:	2301      	movhi	r3, #1
 80009f6:	2300      	movls	r3, #0
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b52      	ldr	r3, [pc, #328]	@ (8000b44 <StartTask02+0x208>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f240 11f3 	movw	r1, #499	@ 0x1f3
 8000a02:	428b      	cmp	r3, r1
 8000a04:	bf94      	ite	ls
 8000a06:	2301      	movls	r3, #1
 8000a08:	2300      	movhi	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d012      	beq.n	8000a3a <StartTask02+0xfe>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2107      	movs	r1, #7
 8000a18:	484c      	ldr	r0, [pc, #304]	@ (8000b4c <StartTask02+0x210>)
 8000a1a:	f001 fc8f 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(500);
 8000a1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a22:	f003 fb25 	bl	8004070 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2107      	movs	r1, #7
 8000a2a:	4848      	ldr	r0, [pc, #288]	@ (8000b4c <StartTask02+0x210>)
 8000a2c:	f001 fc86 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(500);
 8000a30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a34:	f003 fb1c 	bl	8004070 <vTaskDelay>
 8000a38:	e07f      	b.n	8000b3a <StartTask02+0x1fe>

	  }
	  else if (dmu_value >= 500 & dmu_value < 1000 ) // 750 ms bir yanıp sönecek
 8000a3a:	4b42      	ldr	r3, [pc, #264]	@ (8000b44 <StartTask02+0x208>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000a42:	4293      	cmp	r3, r2
 8000a44:	bf8c      	ite	hi
 8000a46:	2301      	movhi	r3, #1
 8000a48:	2300      	movls	r3, #0
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b44 <StartTask02+0x208>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8000a54:	428b      	cmp	r3, r1
 8000a56:	bf94      	ite	ls
 8000a58:	2301      	movls	r3, #1
 8000a5a:	2300      	movhi	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4013      	ands	r3, r2
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d012      	beq.n	8000a8c <StartTask02+0x150>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2107      	movs	r1, #7
 8000a6a:	4838      	ldr	r0, [pc, #224]	@ (8000b4c <StartTask02+0x210>)
 8000a6c:	f001 fc66 	bl	800233c <HAL_GPIO_WritePin>
          vTaskDelay(750);
 8000a70:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000a74:	f003 fafc 	bl	8004070 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2107      	movs	r1, #7
 8000a7c:	4833      	ldr	r0, [pc, #204]	@ (8000b4c <StartTask02+0x210>)
 8000a7e:	f001 fc5d 	bl	800233c <HAL_GPIO_WritePin>
          vTaskDelay(750);
 8000a82:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000a86:	f003 faf3 	bl	8004070 <vTaskDelay>
 8000a8a:	e056      	b.n	8000b3a <StartTask02+0x1fe>

	  }
	  else if (dmu_value >= 1000 & dmu_value < 2000 ) // 1000 ms bir yanıp sönecek
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <StartTask02+0x208>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a94:	4293      	cmp	r3, r2
 8000a96:	bf8c      	ite	hi
 8000a98:	2301      	movhi	r3, #1
 8000a9a:	2300      	movls	r3, #0
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <StartTask02+0x208>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f240 71cf 	movw	r1, #1999	@ 0x7cf
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	bf94      	ite	ls
 8000aaa:	2301      	movls	r3, #1
 8000aac:	2300      	movhi	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d012      	beq.n	8000ade <StartTask02+0x1a2>
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2107      	movs	r1, #7
 8000abc:	4823      	ldr	r0, [pc, #140]	@ (8000b4c <StartTask02+0x210>)
 8000abe:	f001 fc3d 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac6:	f003 fad3 	bl	8004070 <vTaskDelay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2107      	movs	r1, #7
 8000ace:	481f      	ldr	r0, [pc, #124]	@ (8000b4c <StartTask02+0x210>)
 8000ad0:	f001 fc34 	bl	800233c <HAL_GPIO_WritePin>
		  vTaskDelay(1000);
 8000ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad8:	f003 faca 	bl	8004070 <vTaskDelay>
 8000adc:	e02d      	b.n	8000b3a <StartTask02+0x1fe>
	  }
	  else if (dmu_value >= 2000 & dmu_value < 3100 ) // 1250 ms bir yanıp sönecek
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <StartTask02+0x208>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	bf8c      	ite	hi
 8000aea:	2301      	movhi	r3, #1
 8000aec:	2300      	movls	r3, #0
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b14      	ldr	r3, [pc, #80]	@ (8000b44 <StartTask02+0x208>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f640 411b 	movw	r1, #3099	@ 0xc1b
 8000af8:	428b      	cmp	r3, r1
 8000afa:	bf94      	ite	ls
 8000afc:	2301      	movls	r3, #1
 8000afe:	2300      	movhi	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4013      	ands	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d012      	beq.n	8000b30 <StartTask02+0x1f4>
		  {
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2107      	movs	r1, #7
 8000b0e:	480f      	ldr	r0, [pc, #60]	@ (8000b4c <StartTask02+0x210>)
 8000b10:	f001 fc14 	bl	800233c <HAL_GPIO_WritePin>
			  vTaskDelay(1250);
 8000b14:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8000b18:	f003 faaa 	bl	8004070 <vTaskDelay>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2107      	movs	r1, #7
 8000b20:	480a      	ldr	r0, [pc, #40]	@ (8000b4c <StartTask02+0x210>)
 8000b22:	f001 fc0b 	bl	800233c <HAL_GPIO_WritePin>
			  vTaskDelay(1250);
 8000b26:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8000b2a:	f003 faa1 	bl	8004070 <vTaskDelay>
 8000b2e:	e004      	b.n	8000b3a <StartTask02+0x1fe>
		  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2107      	movs	r1, #7
 8000b34:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <StartTask02+0x210>)
 8000b36:	f001 fc01 	bl	800233c <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f002 fadc 	bl	80030f8 <osDelay>
	  if(dmu_value <45 & digital_output == 1)
 8000b40:	e702      	b.n	8000948 <StartTask02+0xc>
 8000b42:	bf00      	nop
 8000b44:	200000f4 	.word	0x200000f4
 8000b48:	200000f8 	.word	0x200000f8
 8000b4c:	40021400 	.word	0x40021400
 8000b50:	40020800 	.word	0x40020800

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <HAL_MspInit+0x54>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x54>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <HAL_MspInit+0x54>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_MspInit+0x54>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0001 	mvn.w	r0, #1
 8000ba6:	f001 f9e6 	bl	8001f76 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_ADC_MspInit+0x7c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d127      	bne.n	8000c2a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <HAL_ADC_MspInit+0x80>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be2:	4a15      	ldr	r2, [pc, #84]	@ (8000c38 <HAL_ADC_MspInit+0x80>)
 8000be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <HAL_ADC_MspInit+0x80>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_ADC_MspInit+0x80>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_ADC_MspInit+0x80>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_ADC_MspInit+0x80>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c12:	2301      	movs	r3, #1
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_ADC_MspInit+0x84>)
 8000c26:	f001 f9dd 	bl	8001fe4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40012000 	.word	0x40012000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd4 <HAL_CAN_MspInit+0x94>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d134      	bne.n	8000ccc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_CAN_MspInit+0x98>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <HAL_CAN_MspInit+0x98>)
 8000c6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_CAN_MspInit+0x98>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_CAN_MspInit+0x98>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <HAL_CAN_MspInit+0x98>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_CAN_MspInit+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cac:	2309      	movs	r3, #9
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <HAL_CAN_MspInit+0x9c>)
 8000cb8:	f001 f994 	bl	8001fe4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2014      	movs	r0, #20
 8000cc2:	f001 f958 	bl	8001f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cc6:	2014      	movs	r0, #20
 8000cc8:	f001 f971 	bl	8001fae <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	@ 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40006400 	.word	0x40006400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1a:	f000 f921 	bl	8000f60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d1e:	f003 fe41 	bl	80049a4 <xTaskGetSchedulerState>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d001      	beq.n	8000d2c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d28:	f004 fc36 	bl	8005598 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <CAN1_RX0_IRQHandler+0x10>)
 8000d36:	f000 fe0a 	bl	800194e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000c4 	.word	0x200000c4

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	@ (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	2302      	movs	r3, #2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d82:	4b34      	ldr	r3, [pc, #208]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f003 030c 	and.w	r3, r3, #12
 8000d8a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d011      	beq.n	8000db6 <SystemCoreClockUpdate+0x4e>
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d844      	bhi.n	8000e22 <SystemCoreClockUpdate+0xba>
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <SystemCoreClockUpdate+0x3e>
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d004      	beq.n	8000dae <SystemCoreClockUpdate+0x46>
 8000da4:	e03d      	b.n	8000e22 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000da6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <SystemCoreClockUpdate+0xf0>)
 8000da8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e5c <SystemCoreClockUpdate+0xf4>)
 8000daa:	601a      	str	r2, [r3, #0]
      break;
 8000dac:	e03d      	b.n	8000e2a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <SystemCoreClockUpdate+0xf0>)
 8000db0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e60 <SystemCoreClockUpdate+0xf8>)
 8000db2:	601a      	str	r2, [r3, #0]
      break;
 8000db4:	e039      	b.n	8000e2a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000db6:	4b27      	ldr	r3, [pc, #156]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	0d9b      	lsrs	r3, r3, #22
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000dca:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00c      	beq.n	8000dec <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dd2:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <SystemCoreClockUpdate+0xf8>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4a1e      	ldr	r2, [pc, #120]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000ddc:	6852      	ldr	r2, [r2, #4]
 8000dde:	0992      	lsrs	r2, r2, #6
 8000de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	e00b      	b.n	8000e04 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000dec:	4a1b      	ldr	r2, [pc, #108]	@ (8000e5c <SystemCoreClockUpdate+0xf4>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df4:	4a17      	ldr	r2, [pc, #92]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000df6:	6852      	ldr	r2, [r2, #4]
 8000df8:	0992      	lsrs	r2, r2, #6
 8000dfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e58 <SystemCoreClockUpdate+0xf0>)
 8000e1e:	6013      	str	r3, [r2, #0]
      break;
 8000e20:	e003      	b.n	8000e2a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <SystemCoreClockUpdate+0xf0>)
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <SystemCoreClockUpdate+0xf4>)
 8000e26:	601a      	str	r2, [r3, #0]
      break;
 8000e28:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <SystemCoreClockUpdate+0xec>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <SystemCoreClockUpdate+0xfc>)
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <SystemCoreClockUpdate+0xf0>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	fa22 f303 	lsr.w	r3, r2, r3
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <SystemCoreClockUpdate+0xf0>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40023800 	.word	0x40023800
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	00f42400 	.word	0x00f42400
 8000e60:	007a1200 	.word	0x007a1200
 8000e64:	08005d10 	.word	0x08005d10

08000e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e6c:	f7ff ff6a 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e70:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e72:	490d      	ldr	r1, [pc, #52]	@ (8000ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e74:	4a0d      	ldr	r2, [pc, #52]	@ (8000eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e88:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e96:	f004 fe5d 	bl	8005b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e9a:	f7ff fb31 	bl	8000500 <main>
  bx  lr    
 8000e9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000eac:	08005d30 	.word	0x08005d30
  ldr r2, =_sbss
 8000eb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000eb4:	20004c28 	.word	0x20004c28

08000eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f001 f83b 	bl	8001f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fe36 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 f853 	bl	8001fca <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f001 f81b 	bl	8001f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	@ (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200000fc 	.word	0x200000fc

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200000fc 	.word	0x200000fc

08000fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e033      	b.n	800101e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff fdfa 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fe6:	f023 0302 	bic.w	r3, r3, #2
 8000fea:	f043 0202 	orr.w	r2, r3, #2
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fab4 	bl	8001560 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f023 0303 	bic.w	r3, r3, #3
 8001006:	f043 0201 	orr.w	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40
 800100e:	e001      	b.n	8001014 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800103a:	2b01      	cmp	r3, #1
 800103c:	d101      	bne.n	8001042 <HAL_ADC_Start+0x1a>
 800103e:	2302      	movs	r3, #2
 8001040:	e0b2      	b.n	80011a8 <HAL_ADC_Start+0x180>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	d018      	beq.n	800108a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001068:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <HAL_ADC_Start+0x18c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a52      	ldr	r2, [pc, #328]	@ (80011b8 <HAL_ADC_Start+0x190>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9a      	lsrs	r2, r3, #18
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800107c:	e002      	b.n	8001084 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3b01      	subs	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f9      	bne.n	800107e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b01      	cmp	r3, #1
 8001096:	d17a      	bne.n	800118e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010d6:	d106      	bne.n	80010e6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010dc:	f023 0206 	bic.w	r2, r3, #6
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80010e4:	e002      	b.n	80010ec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f4:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <HAL_ADC_Start+0x194>)
 80010f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001100:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 031f 	and.w	r3, r3, #31
 800110a:	2b00      	cmp	r3, #0
 800110c:	d12a      	bne.n	8001164 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2b      	ldr	r2, [pc, #172]	@ (80011c0 <HAL_ADC_Start+0x198>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d015      	beq.n	8001144 <HAL_ADC_Start+0x11c>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a29      	ldr	r2, [pc, #164]	@ (80011c4 <HAL_ADC_Start+0x19c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d105      	bne.n	800112e <HAL_ADC_Start+0x106>
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <HAL_ADC_Start+0x194>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a25      	ldr	r2, [pc, #148]	@ (80011c8 <HAL_ADC_Start+0x1a0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d136      	bne.n	80011a6 <HAL_ADC_Start+0x17e>
 8001138:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <HAL_ADC_Start+0x194>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0310 	and.w	r3, r3, #16
 8001140:	2b00      	cmp	r3, #0
 8001142:	d130      	bne.n	80011a6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d129      	bne.n	80011a6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	e020      	b.n	80011a6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a15      	ldr	r2, [pc, #84]	@ (80011c0 <HAL_ADC_Start+0x198>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d11b      	bne.n	80011a6 <HAL_ADC_Start+0x17e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d114      	bne.n	80011a6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	e00b      	b.n	80011a6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f043 0210 	orr.w	r2, r3, #16
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f043 0201 	orr.w	r2, r3, #1
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	40012300 	.word	0x40012300
 80011c0:	40012000 	.word	0x40012000
 80011c4:	40012100 	.word	0x40012100
 80011c8:	40012200 	.word	0x40012200

080011cc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e8:	d113      	bne.n	8001212 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011f8:	d10b      	bne.n	8001212 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f043 0220 	orr.w	r2, r3, #32
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e063      	b.n	80012da <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001212:	f7ff feb9 	bl	8000f88 <HAL_GetTick>
 8001216:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001218:	e021      	b.n	800125e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d01d      	beq.n	800125e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_ADC_PollForConversion+0x6c>
 8001228:	f7ff feae 	bl	8000f88 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d212      	bcs.n	800125e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b02      	cmp	r3, #2
 8001244:	d00b      	beq.n	800125e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124a:	f043 0204 	orr.w	r2, r3, #4
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e03d      	b.n	80012da <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b02      	cmp	r3, #2
 800126a:	d1d6      	bne.n	800121a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f06f 0212 	mvn.w	r2, #18
 8001274:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d123      	bne.n	80012d8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001294:	2b00      	cmp	r3, #0
 8001296:	d11f      	bne.n	80012d8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800129e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d111      	bne.n	80012d8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1c>
 8001314:	2302      	movs	r3, #2
 8001316:	e113      	b.n	8001540 <HAL_ADC_ConfigChannel+0x244>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b09      	cmp	r3, #9
 8001326:	d925      	bls.n	8001374 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68d9      	ldr	r1, [r3, #12]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	3b1e      	subs	r3, #30
 800133e:	2207      	movs	r2, #7
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68d9      	ldr	r1, [r3, #12]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	4603      	mov	r3, r0
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4403      	add	r3, r0
 8001366:	3b1e      	subs	r3, #30
 8001368:	409a      	lsls	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	e022      	b.n	80013ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6919      	ldr	r1, [r3, #16]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	2207      	movs	r2, #7
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6919      	ldr	r1, [r3, #16]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4403      	add	r3, r0
 80013b0:	409a      	lsls	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b06      	cmp	r3, #6
 80013c0:	d824      	bhi.n	800140c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	3b05      	subs	r3, #5
 80013d4:	221f      	movs	r2, #31
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	400a      	ands	r2, r1
 80013e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3b05      	subs	r3, #5
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	635a      	str	r2, [r3, #52]	@ 0x34
 800140a:	e04c      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b0c      	cmp	r3, #12
 8001412:	d824      	bhi.n	800145e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4413      	add	r3, r2
 8001424:	3b23      	subs	r3, #35	@ 0x23
 8001426:	221f      	movs	r2, #31
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43da      	mvns	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4618      	mov	r0, r3
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b23      	subs	r3, #35	@ 0x23
 8001450:	fa00 f203 	lsl.w	r2, r0, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	430a      	orrs	r2, r1
 800145a:	631a      	str	r2, [r3, #48]	@ 0x30
 800145c:	e023      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b41      	subs	r3, #65	@ 0x41
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b41      	subs	r3, #65	@ 0x41
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014a6:	4b29      	ldr	r3, [pc, #164]	@ (800154c <HAL_ADC_ConfigChannel+0x250>)
 80014a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a28      	ldr	r2, [pc, #160]	@ (8001550 <HAL_ADC_ConfigChannel+0x254>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d10f      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d8>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b12      	cmp	r3, #18
 80014ba:	d10b      	bne.n	80014d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <HAL_ADC_ConfigChannel+0x254>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x23a>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <HAL_ADC_ConfigChannel+0x258>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d003      	beq.n	80014f0 <HAL_ADC_ConfigChannel+0x1f4>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b11      	cmp	r3, #17
 80014ee:	d122      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_ADC_ConfigChannel+0x258>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d111      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_ADC_ConfigChannel+0x25c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a11      	ldr	r2, [pc, #68]	@ (800155c <HAL_ADC_ConfigChannel+0x260>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9a      	lsrs	r2, r3, #18
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001528:	e002      	b.n	8001530 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3b01      	subs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f9      	bne.n	800152a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40012300 	.word	0x40012300
 8001550:	40012000 	.word	0x40012000
 8001554:	10000012 	.word	0x10000012
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001568:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <ADC_Init+0x1f0>)
 800156a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	431a      	orrs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	021a      	lsls	r2, r3, #8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	4a58      	ldr	r2, [pc, #352]	@ (8001754 <ADC_Init+0x1f4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d022      	beq.n	800163e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e00f      	b.n	800165e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800164c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800165c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0202 	bic.w	r2, r2, #2
 800166c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6899      	ldr	r1, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e1b      	ldrb	r3, [r3, #24]
 8001678:	005a      	lsls	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01b      	beq.n	80016c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800169a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	3b01      	subs	r3, #1
 80016b8:	035a      	lsls	r2, r3, #13
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	e007      	b.n	80016d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	051a      	lsls	r2, r3, #20
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001716:	025a      	lsls	r2, r3, #9
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800172e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	029a      	lsls	r2, r3, #10
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40012300 	.word	0x40012300
 8001754:	0f000001 	.word	0x0f000001

08001758 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e0ed      	b.n	8001946 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fa62 	bl	8000c40 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0201 	orr.w	r2, r2, #1
 800178a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800178c:	f7ff fbfc 	bl	8000f88 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001792:	e012      	b.n	80017ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001794:	f7ff fbf8 	bl	8000f88 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b0a      	cmp	r3, #10
 80017a0:	d90b      	bls.n	80017ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2205      	movs	r2, #5
 80017b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e0c5      	b.n	8001946 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0e5      	beq.n	8001794 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0202 	bic.w	r2, r2, #2
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017d8:	f7ff fbd6 	bl	8000f88 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017de:	e012      	b.n	8001806 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017e0:	f7ff fbd2 	bl	8000f88 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b0a      	cmp	r3, #10
 80017ec:	d90b      	bls.n	8001806 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2205      	movs	r2, #5
 80017fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e09f      	b.n	8001946 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e5      	bne.n	80017e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7e1b      	ldrb	r3, [r3, #24]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d108      	bne.n	800182e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	e007      	b.n	800183e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800183c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	7e5b      	ldrb	r3, [r3, #25]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d108      	bne.n	8001858 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	e007      	b.n	8001868 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001866:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7e9b      	ldrb	r3, [r3, #26]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d108      	bne.n	8001882 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e007      	b.n	8001892 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0220 	bic.w	r2, r2, #32
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	7edb      	ldrb	r3, [r3, #27]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d108      	bne.n	80018ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 0210 	bic.w	r2, r2, #16
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e007      	b.n	80018bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0210 	orr.w	r2, r2, #16
 80018ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7f1b      	ldrb	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d108      	bne.n	80018d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0208 	orr.w	r2, r2, #8
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	e007      	b.n	80018e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0208 	bic.w	r2, r2, #8
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	7f5b      	ldrb	r3, [r3, #29]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0204 	orr.w	r2, r2, #4
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e007      	b.n	8001910 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0204 	bic.w	r2, r2, #4
 800190e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	ea42 0103 	orr.w	r1, r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b08a      	sub	sp, #40	@ 0x28
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d07c      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d023      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f983 	bl	8001cbc <HAL_CAN_TxMailbox0CompleteCallback>
 80019b6:	e016      	b.n	80019e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ca:	e00c      	b.n	80019e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019de:	e002      	b.n	80019e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f989 	bl	8001cf8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d024      	beq.n	8001a3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f963 	bl	8001cd0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a0a:	e016      	b.n	8001a3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1e:	e00c      	b.n	8001a3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a32:	e002      	b.n	8001a3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f969 	bl	8001d0c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d024      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f943 	bl	8001ce4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a5e:	e016      	b.n	8001a8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a72:	e00c      	b.n	8001a8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d004      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	e002      	b.n	8001a8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f949 	bl	8001d20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00c      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2210      	movs	r2, #16
 8001ab0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2208      	movs	r2, #8
 8001acc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f93a 	bl	8001d48 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f921 	bl	8001d34 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00c      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2210      	movs	r2, #16
 8001b14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00b      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2208      	movs	r2, #8
 8001b30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f91c 	bl	8001d70 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f903 	bl	8001d5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2210      	movs	r2, #16
 8001b70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f906 	bl	8001d84 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2208      	movs	r2, #8
 8001b92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8ff 	bl	8001d98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d07b      	beq.n	8001c9c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d072      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c02:	6a3b      	ldr	r3, [r7, #32]
 8001c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d043      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03e      	beq.n	8001c94 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c1c:	2b60      	cmp	r3, #96	@ 0x60
 8001c1e:	d02b      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x32a>
 8001c20:	2b60      	cmp	r3, #96	@ 0x60
 8001c22:	d82e      	bhi.n	8001c82 <HAL_CAN_IRQHandler+0x334>
 8001c24:	2b50      	cmp	r3, #80	@ 0x50
 8001c26:	d022      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x320>
 8001c28:	2b50      	cmp	r3, #80	@ 0x50
 8001c2a:	d82a      	bhi.n	8001c82 <HAL_CAN_IRQHandler+0x334>
 8001c2c:	2b40      	cmp	r3, #64	@ 0x40
 8001c2e:	d019      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x316>
 8001c30:	2b40      	cmp	r3, #64	@ 0x40
 8001c32:	d826      	bhi.n	8001c82 <HAL_CAN_IRQHandler+0x334>
 8001c34:	2b30      	cmp	r3, #48	@ 0x30
 8001c36:	d010      	beq.n	8001c5a <HAL_CAN_IRQHandler+0x30c>
 8001c38:	2b30      	cmp	r3, #48	@ 0x30
 8001c3a:	d822      	bhi.n	8001c82 <HAL_CAN_IRQHandler+0x334>
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d002      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x2f8>
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d005      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c44:	e01d      	b.n	8001c82 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c4e:	e019      	b.n	8001c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c58:	e014      	b.n	8001c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f043 0320 	orr.w	r3, r3, #32
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c62:	e00f      	b.n	8001c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c6c:	e00a      	b.n	8001c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c76:	e005      	b.n	8001c84 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c80:	e000      	b.n	8001c84 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c82:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699a      	ldr	r2, [r3, #24]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2204      	movs	r2, #4
 8001c9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f87c 	bl	8001dac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	@ 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <__NVIC_SetPriorityGrouping+0x44>)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	60d3      	str	r3, [r2, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <__NVIC_GetPriorityGrouping+0x18>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	f003 0307 	and.w	r3, r3, #7
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	db0b      	blt.n	8001e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	4907      	ldr	r1, [pc, #28]	@ (8001e5c <__NVIC_EnableIRQ+0x38>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	095b      	lsrs	r3, r3, #5
 8001e44:	2001      	movs	r0, #1
 8001e46:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000e100 	.word	0xe000e100

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	@ (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	@ (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	@ 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	@ 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f2c:	d301      	bcc.n	8001f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00f      	b.n	8001f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <SysTick_Config+0x40>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3a:	210f      	movs	r1, #15
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f7ff ff8e 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <SysTick_Config+0x40>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SysTick_Config+0x40>)
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ff29 	bl	8001dc0 <__NVIC_SetPriorityGrouping>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f88:	f7ff ff3e 	bl	8001e08 <__NVIC_GetPriorityGrouping>
 8001f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7ff ff8e 	bl	8001eb4 <NVIC_EncodePriority>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff5d 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff31 	bl	8001e24 <__NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ffa2 	bl	8001f1c <SysTick_Config>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e165      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8154 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ae 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b5d      	ldr	r3, [pc, #372]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a5c      	ldr	r2, [pc, #368]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b5a      	ldr	r3, [pc, #360]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	@ (80022ec <HAL_GPIO_Init+0x308>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	@ (80022f0 <HAL_GPIO_Init+0x30c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4d      	ldr	r2, [pc, #308]	@ (80022f4 <HAL_GPIO_Init+0x310>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	@ (80022f8 <HAL_GPIO_Init+0x314>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <HAL_GPIO_Init+0x318>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x20a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_GPIO_Init+0x31c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x206>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_GPIO_Init+0x320>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x202>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a31      	ldr	r2, [pc, #196]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <HAL_GPIO_Init+0x324>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a26      	ldr	r2, [pc, #152]	@ (8002308 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002296:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_GPIO_Init+0x324>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c0:	4a11      	ldr	r2, [pc, #68]	@ (8002308 <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae96 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e001      	b.n	800232e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	807b      	strh	r3, [r7, #2]
 8002348:	4613      	mov	r3, r2
 800234a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800234c:	787b      	ldrb	r3, [r7, #1]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002358:	e003      	b.n	8002362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	041a      	lsls	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fd92 	bl	8000f88 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fd8e 	bl	8000f88 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 030f 	and.w	r3, r3, #15
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	@ (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	@ (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fcf2 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08005d10 	.word	0x08005d10
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b0ae      	sub	sp, #184	@ 0xb8
 8002542:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002562:	4bcb      	ldr	r3, [pc, #812]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b0c      	cmp	r3, #12
 800256c:	f200 8206 	bhi.w	800297c <HAL_RCC_GetSysClockFreq+0x440>
 8002570:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	080025ad 	.word	0x080025ad
 800257c:	0800297d 	.word	0x0800297d
 8002580:	0800297d 	.word	0x0800297d
 8002584:	0800297d 	.word	0x0800297d
 8002588:	080025b5 	.word	0x080025b5
 800258c:	0800297d 	.word	0x0800297d
 8002590:	0800297d 	.word	0x0800297d
 8002594:	0800297d 	.word	0x0800297d
 8002598:	080025bd 	.word	0x080025bd
 800259c:	0800297d 	.word	0x0800297d
 80025a0:	0800297d 	.word	0x0800297d
 80025a4:	0800297d 	.word	0x0800297d
 80025a8:	080027ad 	.word	0x080027ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x358>)
 80025ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80025b2:	e1e7      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025ba:	e1e3      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4bb4      	ldr	r3, [pc, #720]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d071      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d4:	4bae      	ldr	r3, [pc, #696]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025f0:	2300      	movs	r3, #0
 80025f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025fa:	4622      	mov	r2, r4
 80025fc:	462b      	mov	r3, r5
 80025fe:	f04f 0000 	mov.w	r0, #0
 8002602:	f04f 0100 	mov.w	r1, #0
 8002606:	0159      	lsls	r1, r3, #5
 8002608:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800260c:	0150      	lsls	r0, r2, #5
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4621      	mov	r1, r4
 8002614:	1a51      	subs	r1, r2, r1
 8002616:	6439      	str	r1, [r7, #64]	@ 0x40
 8002618:	4629      	mov	r1, r5
 800261a:	eb63 0301 	sbc.w	r3, r3, r1
 800261e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800262c:	4649      	mov	r1, r9
 800262e:	018b      	lsls	r3, r1, #6
 8002630:	4641      	mov	r1, r8
 8002632:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002636:	4641      	mov	r1, r8
 8002638:	018a      	lsls	r2, r1, #6
 800263a:	4641      	mov	r1, r8
 800263c:	1a51      	subs	r1, r2, r1
 800263e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002640:	4649      	mov	r1, r9
 8002642:	eb63 0301 	sbc.w	r3, r3, r1
 8002646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002654:	4649      	mov	r1, r9
 8002656:	00cb      	lsls	r3, r1, #3
 8002658:	4641      	mov	r1, r8
 800265a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265e:	4641      	mov	r1, r8
 8002660:	00ca      	lsls	r2, r1, #3
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	4603      	mov	r3, r0
 8002668:	4622      	mov	r2, r4
 800266a:	189b      	adds	r3, r3, r2
 800266c:	633b      	str	r3, [r7, #48]	@ 0x30
 800266e:	462b      	mov	r3, r5
 8002670:	460a      	mov	r2, r1
 8002672:	eb42 0303 	adc.w	r3, r2, r3
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002684:	4629      	mov	r1, r5
 8002686:	024b      	lsls	r3, r1, #9
 8002688:	4621      	mov	r1, r4
 800268a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800268e:	4621      	mov	r1, r4
 8002690:	024a      	lsls	r2, r1, #9
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800269a:	2200      	movs	r2, #0
 800269c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026a8:	f7fd fdb2 	bl	8000210 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b6:	e067      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b8:	4b75      	ldr	r3, [pc, #468]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026d2:	2300      	movs	r3, #0
 80026d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026da:	4622      	mov	r2, r4
 80026dc:	462b      	mov	r3, r5
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	0159      	lsls	r1, r3, #5
 80026e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ec:	0150      	lsls	r0, r2, #5
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4621      	mov	r1, r4
 80026f4:	1a51      	subs	r1, r2, r1
 80026f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026f8:	4629      	mov	r1, r5
 80026fa:	eb63 0301 	sbc.w	r3, r3, r1
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800270c:	4649      	mov	r1, r9
 800270e:	018b      	lsls	r3, r1, #6
 8002710:	4641      	mov	r1, r8
 8002712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002716:	4641      	mov	r1, r8
 8002718:	018a      	lsls	r2, r1, #6
 800271a:	4641      	mov	r1, r8
 800271c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002720:	4649      	mov	r1, r9
 8002722:	eb63 0b01 	sbc.w	fp, r3, r1
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002732:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002736:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800273a:	4692      	mov	sl, r2
 800273c:	469b      	mov	fp, r3
 800273e:	4623      	mov	r3, r4
 8002740:	eb1a 0303 	adds.w	r3, sl, r3
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	462b      	mov	r3, r5
 8002748:	eb4b 0303 	adc.w	r3, fp, r3
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800275a:	4629      	mov	r1, r5
 800275c:	028b      	lsls	r3, r1, #10
 800275e:	4621      	mov	r1, r4
 8002760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002764:	4621      	mov	r1, r4
 8002766:	028a      	lsls	r2, r1, #10
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002770:	2200      	movs	r2, #0
 8002772:	673b      	str	r3, [r7, #112]	@ 0x70
 8002774:	677a      	str	r2, [r7, #116]	@ 0x74
 8002776:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800277a:	f7fd fd49 	bl	8000210 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4613      	mov	r3, r2
 8002784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002788:	4b41      	ldr	r3, [pc, #260]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	3301      	adds	r3, #1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800279a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800279e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027aa:	e0eb      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027ac:	4b38      	ldr	r3, [pc, #224]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b8:	4b35      	ldr	r3, [pc, #212]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d06b      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c4:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x354>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	2200      	movs	r2, #0
 80027cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80027d8:	2300      	movs	r3, #0
 80027da:	667b      	str	r3, [r7, #100]	@ 0x64
 80027dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027e0:	4622      	mov	r2, r4
 80027e2:	462b      	mov	r3, r5
 80027e4:	f04f 0000 	mov.w	r0, #0
 80027e8:	f04f 0100 	mov.w	r1, #0
 80027ec:	0159      	lsls	r1, r3, #5
 80027ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f2:	0150      	lsls	r0, r2, #5
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4621      	mov	r1, r4
 80027fa:	1a51      	subs	r1, r2, r1
 80027fc:	61b9      	str	r1, [r7, #24]
 80027fe:	4629      	mov	r1, r5
 8002800:	eb63 0301 	sbc.w	r3, r3, r1
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002812:	4659      	mov	r1, fp
 8002814:	018b      	lsls	r3, r1, #6
 8002816:	4651      	mov	r1, sl
 8002818:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800281c:	4651      	mov	r1, sl
 800281e:	018a      	lsls	r2, r1, #6
 8002820:	4651      	mov	r1, sl
 8002822:	ebb2 0801 	subs.w	r8, r2, r1
 8002826:	4659      	mov	r1, fp
 8002828:	eb63 0901 	sbc.w	r9, r3, r1
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002838:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800283c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	4623      	mov	r3, r4
 8002846:	eb18 0303 	adds.w	r3, r8, r3
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	462b      	mov	r3, r5
 800284e:	eb49 0303 	adc.w	r3, r9, r3
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002860:	4629      	mov	r1, r5
 8002862:	024b      	lsls	r3, r1, #9
 8002864:	4621      	mov	r1, r4
 8002866:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800286a:	4621      	mov	r1, r4
 800286c:	024a      	lsls	r2, r1, #9
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002876:	2200      	movs	r2, #0
 8002878:	65bb      	str	r3, [r7, #88]	@ 0x58
 800287a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800287c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002880:	f7fd fcc6 	bl	8000210 <__aeabi_uldivmod>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4613      	mov	r3, r2
 800288a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800288e:	e065      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x420>
 8002890:	40023800 	.word	0x40023800
 8002894:	00f42400 	.word	0x00f42400
 8002898:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289c:	4b3d      	ldr	r3, [pc, #244]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x458>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	2200      	movs	r2, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	4611      	mov	r1, r2
 80028a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ae:	2300      	movs	r3, #0
 80028b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80028b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80028b6:	4642      	mov	r2, r8
 80028b8:	464b      	mov	r3, r9
 80028ba:	f04f 0000 	mov.w	r0, #0
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	0159      	lsls	r1, r3, #5
 80028c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c8:	0150      	lsls	r0, r2, #5
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4641      	mov	r1, r8
 80028d0:	1a51      	subs	r1, r2, r1
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	4649      	mov	r1, r9
 80028d6:	eb63 0301 	sbc.w	r3, r3, r1
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028e8:	4659      	mov	r1, fp
 80028ea:	018b      	lsls	r3, r1, #6
 80028ec:	4651      	mov	r1, sl
 80028ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f2:	4651      	mov	r1, sl
 80028f4:	018a      	lsls	r2, r1, #6
 80028f6:	4651      	mov	r1, sl
 80028f8:	1a54      	subs	r4, r2, r1
 80028fa:	4659      	mov	r1, fp
 80028fc:	eb63 0501 	sbc.w	r5, r3, r1
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	00eb      	lsls	r3, r5, #3
 800290a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290e:	00e2      	lsls	r2, r4, #3
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	4643      	mov	r3, r8
 8002916:	18e3      	adds	r3, r4, r3
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	464b      	mov	r3, r9
 800291c:	eb45 0303 	adc.w	r3, r5, r3
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292e:	4629      	mov	r1, r5
 8002930:	028b      	lsls	r3, r1, #10
 8002932:	4621      	mov	r1, r4
 8002934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002938:	4621      	mov	r1, r4
 800293a:	028a      	lsls	r2, r1, #10
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002944:	2200      	movs	r2, #0
 8002946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002948:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800294a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800294e:	f7fd fc5f 	bl	8000210 <__aeabi_uldivmod>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4613      	mov	r3, r2
 8002958:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800295c:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x458>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	0f1b      	lsrs	r3, r3, #28
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800296a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800296e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002972:	fbb2 f3f3 	udiv	r3, r2, r3
 8002976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800297a:	e003      	b.n	8002984 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x45c>)
 800297e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002982:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002984:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002988:	4618      	mov	r0, r3
 800298a:	37b8      	adds	r7, #184	@ 0xb8
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	00f42400 	.word	0x00f42400

0800299c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e28d      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8083 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029bc:	4b94      	ldr	r3, [pc, #592]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d019      	beq.n	80029fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c8:	4b91      	ldr	r3, [pc, #580]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b84      	ldr	r3, [pc, #528]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x124>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e25a      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x90>
 8002a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7b      	ldr	r2, [pc, #492]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xcc>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xb4>
 8002a36:	4b76      	ldr	r3, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b73      	ldr	r3, [pc, #460]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a72      	ldr	r2, [pc, #456]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xcc>
 8002a50:	4b6f      	ldr	r3, [pc, #444]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6b      	ldr	r2, [pc, #428]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fa8a 	bl	8000f88 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa86 	bl	8000f88 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e21f      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b61      	ldr	r3, [pc, #388]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xdc>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fa76 	bl	8000f88 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fa72 	bl	8000f88 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e20b      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x104>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06f      	beq.n	8002bae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ace:	4b50      	ldr	r3, [pc, #320]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d017      	beq.n	8002b0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ada:	4b4d      	ldr	r3, [pc, #308]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b44      	ldr	r3, [pc, #272]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x186>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1d3      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4937      	ldr	r1, [pc, #220]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCC_OscConfig+0x278>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fa1f 	bl	8000f88 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fa1b 	bl	8000f88 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1b4      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2b      	ldr	r3, [pc, #172]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4925      	ldr	r1, [pc, #148]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <HAL_RCC_OscConfig+0x278>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe f9fe 	bl	8000f88 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe f9fa 	bl	8000f88 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e193      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d036      	beq.n	8002c28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe f9de 	bl	8000f88 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe f9da 	bl	8000f88 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e173      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x234>
 8002bee:	e01b      	b.n	8002c28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe f9c7 	bl	8000f88 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e00e      	b.n	8002c1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe f9c3 	bl	8000f88 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d907      	bls.n	8002c1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e15c      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470000 	.word	0x42470000
 8002c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ea      	bne.n	8002bfe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8097 	beq.w	8002d64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b83      	ldr	r3, [pc, #524]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c56:	4b7c      	ldr	r3, [pc, #496]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b79      	ldr	r3, [pc, #484]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b76      	ldr	r3, [pc, #472]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a75      	ldr	r2, [pc, #468]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f983 	bl	8000f88 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fe f97f 	bl	8000f88 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e118      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b6c      	ldr	r3, [pc, #432]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x31e>
 8002cac:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	4a65      	ldr	r2, [pc, #404]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x358>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x340>
 8002cc2:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a60      	ldr	r2, [pc, #384]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cce:	4b5e      	ldr	r3, [pc, #376]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x358>
 8002cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a59      	ldr	r2, [pc, #356]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a56      	ldr	r2, [pc, #344]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe f944 	bl	8000f88 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe f940 	bl	8000f88 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0d7      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RCC_OscConfig+0x368>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f92e 	bl	8000f88 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f92a 	bl	8000f88 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0c1      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	4b40      	ldr	r3, [pc, #256]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80ad 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d060      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d145      	bne.n	8002e0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <HAL_RCC_OscConfig+0x4b4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f8fe 	bl	8000f88 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe f8fa 	bl	8000f88 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e093      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b29      	ldr	r3, [pc, #164]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	071b      	lsls	r3, r3, #28
 8002dda:	491b      	ldr	r1, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCC_OscConfig+0x4b4>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe f8cf 	bl	8000f88 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe f8cb 	bl	8000f88 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e064      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x452>
 8002e0c:	e05c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_OscConfig+0x4b4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f8b8 	bl	8000f88 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f8b4 	bl	8000f88 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e04d      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x480>
 8002e3a:	e045      	b.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e040      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_OscConfig+0x538>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d030      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d129      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d122      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d119      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <__NVIC_SetPriority>:
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	@ (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f30:	2100      	movs	r1, #0
 8002f32:	f06f 0004 	mvn.w	r0, #4
 8002f36:	f7ff ffcf 	bl	8002ed8 <__NVIC_SetPriority>
#endif
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f46:	f3ef 8305 	mrs	r3, IPSR
 8002f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f52:	f06f 0305 	mvn.w	r3, #5
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	e00c      	b.n	8002f74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <osKernelInitialize+0x44>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f62:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <osKernelInitialize+0x44>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	e002      	b.n	8002f74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	20000100 	.word	0x20000100

08002f88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f8e:	f3ef 8305 	mrs	r3, IPSR
 8002f92:	603b      	str	r3, [r7, #0]
  return(result);
 8002f94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f9a:	f06f 0305 	mvn.w	r3, #5
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	e010      	b.n	8002fc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <osKernelStart+0x48>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d109      	bne.n	8002fbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002faa:	f7ff ffbf 	bl	8002f2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <osKernelStart+0x48>)
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002fb4:	f001 f892 	bl	80040dc <vTaskStartScheduler>
      stat = osOK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	e002      	b.n	8002fc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fc4:	687b      	ldr	r3, [r7, #4]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000100 	.word	0x20000100

08002fd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08e      	sub	sp, #56	@ 0x38
 8002fd8:	af04      	add	r7, sp, #16
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe4:	f3ef 8305 	mrs	r3, IPSR
 8002fe8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d17e      	bne.n	80030ee <osThreadNew+0x11a>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07b      	beq.n	80030ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ffa:	2318      	movs	r3, #24
 8002ffc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003002:	f04f 33ff 	mov.w	r3, #4294967295
 8003006:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d045      	beq.n	800309a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <osThreadNew+0x48>
        name = attr->name;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <osThreadNew+0x6e>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b38      	cmp	r3, #56	@ 0x38
 8003034:	d805      	bhi.n	8003042 <osThreadNew+0x6e>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <osThreadNew+0x72>
        return (NULL);
 8003042:	2300      	movs	r3, #0
 8003044:	e054      	b.n	80030f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00e      	beq.n	800307c <osThreadNew+0xa8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2ba7      	cmp	r3, #167	@ 0xa7
 8003064:	d90a      	bls.n	800307c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <osThreadNew+0xa8>
        mem = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	e010      	b.n	800309e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10c      	bne.n	800309e <osThreadNew+0xca>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d108      	bne.n	800309e <osThreadNew+0xca>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <osThreadNew+0xca>
          mem = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
 8003098:	e001      	b.n	800309e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d110      	bne.n	80030c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030ac:	9202      	str	r2, [sp, #8]
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fe1a 	bl	8003cf4 <xTaskCreateStatic>
 80030c0:	4603      	mov	r3, r0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e013      	b.n	80030ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d110      	bne.n	80030ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	f107 0310 	add.w	r3, r7, #16
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fe68 	bl	8003db4 <xTaskCreate>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d001      	beq.n	80030ee <osThreadNew+0x11a>
            hTask = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030ee:	693b      	ldr	r3, [r7, #16]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3728      	adds	r7, #40	@ 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003100:	f3ef 8305 	mrs	r3, IPSR
 8003104:	60bb      	str	r3, [r7, #8]
  return(result);
 8003106:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <osDelay+0x1c>
    stat = osErrorISR;
 800310c:	f06f 0305 	mvn.w	r3, #5
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	e007      	b.n	8003124 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <osDelay+0x2c>
      vTaskDelay(ticks);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 ffa6 	bl	8004070 <vTaskDelay>
    }
  }

  return (stat);
 8003124:	68fb      	ldr	r3, [r7, #12]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a07      	ldr	r2, [pc, #28]	@ (800315c <vApplicationGetIdleTaskMemory+0x2c>)
 8003140:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <vApplicationGetIdleTaskMemory+0x30>)
 8003146:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	601a      	str	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20000104 	.word	0x20000104
 8003160:	200001ac 	.word	0x200001ac

08003164 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4a07      	ldr	r2, [pc, #28]	@ (8003190 <vApplicationGetTimerTaskMemory+0x2c>)
 8003174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4a06      	ldr	r2, [pc, #24]	@ (8003194 <vApplicationGetTimerTaskMemory+0x30>)
 800317a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	200003ac 	.word	0x200003ac
 8003194:	20000454 	.word	0x20000454

08003198 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f103 0208 	add.w	r2, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f103 0208 	add.w	r2, r3, #8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f103 0208 	add.w	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	601a      	str	r2, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d103      	bne.n	800325a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	e00c      	b.n	8003274 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3308      	adds	r3, #8
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	e002      	b.n	8003268 <vListInsert+0x2e>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d2f6      	bcs.n	8003262 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6892      	ldr	r2, [r2, #8]
 80032c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6852      	ldr	r2, [r2, #4]
 80032cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d103      	bne.n	80032e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	1e5a      	subs	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800332c:	f002 f8a4 	bl	8005478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	68f9      	ldr	r1, [r7, #12]
 800333a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	441a      	add	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335c:	3b01      	subs	r3, #1
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003362:	fb01 f303 	mul.w	r3, r1, r3
 8003366:	441a      	add	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	22ff      	movs	r2, #255	@ 0xff
 8003370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	22ff      	movs	r2, #255	@ 0xff
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d114      	bne.n	80033ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01a      	beq.n	80033c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3310      	adds	r3, #16
 800338e:	4618      	mov	r0, r3
 8003390:	f001 f942 	bl	8004618 <xTaskRemoveFromEventList>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d012      	beq.n	80033c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <xQueueGenericReset+0xd0>)
 800339c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f3bf 8f4f 	dsb	sy
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	e009      	b.n	80033c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3310      	adds	r3, #16
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fef1 	bl	8003198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3324      	adds	r3, #36	@ 0x24
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff feec 	bl	8003198 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033c0:	f002 f88c 	bl	80054dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033c4:	2301      	movs	r3, #1
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08e      	sub	sp, #56	@ 0x38
 80033d8:	af02      	add	r7, sp, #8
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340a:	f383 8811 	msr	BASEPRI, r3
 800340e:	f3bf 8f6f 	isb	sy
 8003412:	f3bf 8f4f 	dsb	sy
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	e7fd      	b.n	800341a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <xQueueGenericCreateStatic+0x56>
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <xQueueGenericCreateStatic+0x5a>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <xQueueGenericCreateStatic+0x5c>
 800342e:	2300      	movs	r3, #0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003438:	f383 8811 	msr	BASEPRI, r3
 800343c:	f3bf 8f6f 	isb	sy
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	623b      	str	r3, [r7, #32]
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <xQueueGenericCreateStatic+0x84>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <xQueueGenericCreateStatic+0x88>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <xQueueGenericCreateStatic+0x8a>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	61fb      	str	r3, [r7, #28]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800347a:	2350      	movs	r3, #80	@ 0x50
 800347c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b50      	cmp	r3, #80	@ 0x50
 8003482:	d00b      	beq.n	800349c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61bb      	str	r3, [r7, #24]
}
 8003496:	bf00      	nop
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800349c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80034a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f805 	bl	80034ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3730      	adds	r7, #48	@ 0x30
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d103      	bne.n	80034ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e002      	b.n	80034f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80034fc:	2101      	movs	r1, #1
 80034fe:	69b8      	ldr	r0, [r7, #24]
 8003500:	f7ff fefe 	bl	8003300 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08e      	sub	sp, #56	@ 0x38
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003522:	2300      	movs	r3, #0
 8003524:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <xQueueGenericSend+0x34>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003542:	bf00      	nop
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x42>
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <xQueueGenericSend+0x46>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueGenericSend+0x48>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <xQueueGenericSend+0x64>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d103      	bne.n	8003586 <xQueueGenericSend+0x72>
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <xQueueGenericSend+0x76>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xQueueGenericSend+0x78>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <xQueueGenericSend+0x94>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	623b      	str	r3, [r7, #32]
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035a8:	f001 f9fc 	bl	80049a4 <xTaskGetSchedulerState>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <xQueueGenericSend+0xa4>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <xQueueGenericSend+0xa8>
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <xQueueGenericSend+0xaa>
 80035bc:	2300      	movs	r3, #0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10b      	bne.n	80035da <xQueueGenericSend+0xc6>
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	61fb      	str	r3, [r7, #28]
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop
 80035d8:	e7fd      	b.n	80035d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035da:	f001 ff4d 	bl	8005478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d302      	bcc.n	80035f0 <xQueueGenericSend+0xdc>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d129      	bne.n	8003644 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035f6:	f000 fa0f 	bl	8003a18 <prvCopyDataToQueue>
 80035fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003606:	3324      	adds	r3, #36	@ 0x24
 8003608:	4618      	mov	r0, r3
 800360a:	f001 f805 	bl	8004618 <xTaskRemoveFromEventList>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d013      	beq.n	800363c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003614:	4b3f      	ldr	r3, [pc, #252]	@ (8003714 <xQueueGenericSend+0x200>)
 8003616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	e00a      	b.n	800363c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800362c:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <xQueueGenericSend+0x200>)
 800362e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800363c:	f001 ff4e 	bl	80054dc <vPortExitCritical>
				return pdPASS;
 8003640:	2301      	movs	r3, #1
 8003642:	e063      	b.n	800370c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800364a:	f001 ff47 	bl	80054dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800364e:	2300      	movs	r3, #0
 8003650:	e05c      	b.n	800370c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	4618      	mov	r0, r3
 800365e:	f001 f83f 	bl	80046e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003662:	2301      	movs	r3, #1
 8003664:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003666:	f001 ff39 	bl	80054dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800366a:	f000 fda7 	bl	80041bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800366e:	f001 ff03 	bl	8005478 <vPortEnterCritical>
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003678:	b25b      	sxtb	r3, r3
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d103      	bne.n	8003688 <xQueueGenericSend+0x174>
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800368e:	b25b      	sxtb	r3, r3
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d103      	bne.n	800369e <xQueueGenericSend+0x18a>
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800369e:	f001 ff1d 	bl	80054dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036a2:	1d3a      	adds	r2, r7, #4
 80036a4:	f107 0314 	add.w	r3, r7, #20
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 f82e 	bl	800470c <xTaskCheckForTimeOut>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d124      	bne.n	8003700 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036b8:	f000 faa6 	bl	8003c08 <prvIsQueueFull>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d018      	beq.n	80036f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	3310      	adds	r3, #16
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 ff52 	bl	8004574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036d2:	f000 fa31 	bl	8003b38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036d6:	f000 fd7f 	bl	80041d8 <xTaskResumeAll>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f47f af7c 	bne.w	80035da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80036e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <xQueueGenericSend+0x200>)
 80036e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	e772      	b.n	80035da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036f6:	f000 fa1f 	bl	8003b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036fa:	f000 fd6d 	bl	80041d8 <xTaskResumeAll>
 80036fe:	e76c      	b.n	80035da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003702:	f000 fa19 	bl	8003b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003706:	f000 fd67 	bl	80041d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800370a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800370c:	4618      	mov	r0, r3
 800370e:	3738      	adds	r7, #56	@ 0x38
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b090      	sub	sp, #64	@ 0x40
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800372a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10b      	bne.n	8003748 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <xQueueGenericSendFromISR+0x3e>
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <xQueueGenericSendFromISR+0x42>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <xQueueGenericSendFromISR+0x44>
 800375a:	2300      	movs	r3, #0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	e7fd      	b.n	8003774 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d103      	bne.n	8003786 <xQueueGenericSendFromISR+0x6e>
 800377e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <xQueueGenericSendFromISR+0x72>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <xQueueGenericSendFromISR+0x74>
 800378a:	2300      	movs	r3, #0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10b      	bne.n	80037a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	623b      	str	r3, [r7, #32]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037a8:	f001 ff46 	bl	8005638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80037ac:	f3ef 8211 	mrs	r2, BASEPRI
 80037b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	61fa      	str	r2, [r7, #28]
 80037c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <xQueueGenericSendFromISR+0xc2>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d12f      	bne.n	800383a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80037f0:	f000 f912 	bl	8003a18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d112      	bne.n	8003824 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	3324      	adds	r3, #36	@ 0x24
 800380a:	4618      	mov	r0, r3
 800380c:	f000 ff04 	bl	8004618 <xTaskRemoveFromEventList>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003824:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003828:	3301      	adds	r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	b25a      	sxtb	r2, r3
 800382e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003834:	2301      	movs	r3, #1
 8003836:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003838:	e001      	b.n	800383e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800383a:	2300      	movs	r3, #0
 800383c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003840:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003848:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800384a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800384c:	4618      	mov	r0, r3
 800384e:	3740      	adds	r7, #64	@ 0x40
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	@ 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003860:	2300      	movs	r3, #0
 8003862:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <xQueueReceive+0x32>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	623b      	str	r3, [r7, #32]
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d103      	bne.n	8003894 <xQueueReceive+0x40>
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <xQueueReceive+0x44>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <xQueueReceive+0x46>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <xQueueReceive+0x62>
	__asm volatile
 800389e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	61fb      	str	r3, [r7, #28]
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	e7fd      	b.n	80038b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038b6:	f001 f875 	bl	80049a4 <xTaskGetSchedulerState>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <xQueueReceive+0x72>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xQueueReceive+0x76>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueReceive+0x78>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <xQueueReceive+0x94>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	61bb      	str	r3, [r7, #24]
}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038e8:	f001 fdc6 	bl	8005478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01f      	beq.n	8003938 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038fc:	f000 f8f6 	bl	8003aec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	1e5a      	subs	r2, r3, #1
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00f      	beq.n	8003930 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	3310      	adds	r3, #16
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fe7f 	bl	8004618 <xTaskRemoveFromEventList>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003920:	4b3c      	ldr	r3, [pc, #240]	@ (8003a14 <xQueueReceive+0x1c0>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003930:	f001 fdd4 	bl	80054dc <vPortExitCritical>
				return pdPASS;
 8003934:	2301      	movs	r3, #1
 8003936:	e069      	b.n	8003a0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800393e:	f001 fdcd 	bl	80054dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003942:	2300      	movs	r3, #0
 8003944:	e062      	b.n	8003a0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800394c:	f107 0310 	add.w	r3, r7, #16
 8003950:	4618      	mov	r0, r3
 8003952:	f000 fec5 	bl	80046e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003956:	2301      	movs	r3, #1
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800395a:	f001 fdbf 	bl	80054dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800395e:	f000 fc2d 	bl	80041bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003962:	f001 fd89 	bl	8005478 <vPortEnterCritical>
 8003966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800396c:	b25b      	sxtb	r3, r3
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d103      	bne.n	800397c <xQueueReceive+0x128>
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003982:	b25b      	sxtb	r3, r3
 8003984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003988:	d103      	bne.n	8003992 <xQueueReceive+0x13e>
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003992:	f001 fda3 	bl	80054dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003996:	1d3a      	adds	r2, r7, #4
 8003998:	f107 0310 	add.w	r3, r7, #16
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 feb4 	bl	800470c <xTaskCheckForTimeOut>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d123      	bne.n	80039f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039ac:	f000 f916 	bl	8003bdc <prvIsQueueEmpty>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d017      	beq.n	80039e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b8:	3324      	adds	r3, #36	@ 0x24
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fdd8 	bl	8004574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039c6:	f000 f8b7 	bl	8003b38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039ca:	f000 fc05 	bl	80041d8 <xTaskResumeAll>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d189      	bne.n	80038e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80039d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <xQueueReceive+0x1c0>)
 80039d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	e780      	b.n	80038e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039e8:	f000 f8a6 	bl	8003b38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039ec:	f000 fbf4 	bl	80041d8 <xTaskResumeAll>
 80039f0:	e77a      	b.n	80038e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039f4:	f000 f8a0 	bl	8003b38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039f8:	f000 fbee 	bl	80041d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039fe:	f000 f8ed 	bl	8003bdc <prvIsQueueEmpty>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f43f af6f 	beq.w	80038e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3730      	adds	r7, #48	@ 0x30
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	e000ed04 	.word	0xe000ed04

08003a18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d14d      	bne.n	8003ada <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 ffcc 	bl	80049e0 <xTaskPriorityDisinherit>
 8003a48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	e043      	b.n	8003ada <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d119      	bne.n	8003a8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6858      	ldr	r0, [r3, #4]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	461a      	mov	r2, r3
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	f002 f89c 	bl	8005ba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	441a      	add	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d32b      	bcc.n	8003ada <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	e026      	b.n	8003ada <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68d8      	ldr	r0, [r3, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	461a      	mov	r2, r3
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	f002 f882 	bl	8005ba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d207      	bcs.n	8003ac8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac0:	425b      	negs	r3, r3
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d105      	bne.n	8003ada <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003ae2:	697b      	ldr	r3, [r7, #20]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d303      	bcc.n	8003b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68d9      	ldr	r1, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f002 f838 	bl	8005ba0 <memcpy>
	}
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003b40:	f001 fc9a 	bl	8005478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b4c:	e011      	b.n	8003b72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3324      	adds	r3, #36	@ 0x24
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fd5c 	bl	8004618 <xTaskRemoveFromEventList>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003b66:	f000 fe35 	bl	80047d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	dce9      	bgt.n	8003b4e <prvUnlockQueue+0x16>
 8003b7a:	e000      	b.n	8003b7e <prvUnlockQueue+0x46>
					break;
 8003b7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	22ff      	movs	r2, #255	@ 0xff
 8003b82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b86:	f001 fca9 	bl	80054dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b8a:	f001 fc75 	bl	8005478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b96:	e011      	b.n	8003bbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3310      	adds	r3, #16
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fd37 	bl	8004618 <xTaskRemoveFromEventList>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003bb0:	f000 fe10 	bl	80047d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003bb4:	7bbb      	ldrb	r3, [r7, #14]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	dce9      	bgt.n	8003b98 <prvUnlockQueue+0x60>
 8003bc4:	e000      	b.n	8003bc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003bc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	22ff      	movs	r2, #255	@ 0xff
 8003bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003bd0:	f001 fc84 	bl	80054dc <vPortExitCritical>
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003be4:	f001 fc48 	bl	8005478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e001      	b.n	8003bfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bfa:	f001 fc6f 	bl	80054dc <vPortExitCritical>

	return xReturn;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003c10:	f001 fc32 	bl	8005478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d102      	bne.n	8003c26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003c20:	2301      	movs	r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	e001      	b.n	8003c2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 fc57 	bl	80054dc <vPortExitCritical>

	return xReturn;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	e014      	b.n	8003c72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003c48:	4a0f      	ldr	r2, [pc, #60]	@ (8003c88 <vQueueAddToRegistry+0x50>)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003c54:	490c      	ldr	r1, [pc, #48]	@ (8003c88 <vQueueAddToRegistry+0x50>)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c88 <vQueueAddToRegistry+0x50>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003c6a:	e006      	b.n	8003c7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b07      	cmp	r3, #7
 8003c76:	d9e7      	bls.n	8003c48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000854 	.word	0x20000854

08003c8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c9c:	f001 fbec 	bl	8005478 <vPortEnterCritical>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d103      	bne.n	8003cb6 <vQueueWaitForMessageRestricted+0x2a>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cbc:	b25b      	sxtb	r3, r3
 8003cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc2:	d103      	bne.n	8003ccc <vQueueWaitForMessageRestricted+0x40>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ccc:	f001 fc06 	bl	80054dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	3324      	adds	r3, #36	@ 0x24
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fc6d 	bl	80045c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f7ff ff26 	bl	8003b38 <prvUnlockQueue>
	}
 8003cec:	bf00      	nop
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b08e      	sub	sp, #56	@ 0x38
 8003cf8:	af04      	add	r7, sp, #16
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	623b      	str	r3, [r7, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	61fb      	str	r3, [r7, #28]
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003d3e:	23a8      	movs	r3, #168	@ 0xa8
 8003d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2ba8      	cmp	r3, #168	@ 0xa8
 8003d46:	d00b      	beq.n	8003d60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	61bb      	str	r3, [r7, #24]
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003d60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01e      	beq.n	8003da6 <xTaskCreateStatic+0xb2>
 8003d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01b      	beq.n	8003da6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d80:	2300      	movs	r3, #0
 8003d82:	9303      	str	r3, [sp, #12]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	9302      	str	r3, [sp, #8]
 8003d88:	f107 0314 	add.w	r3, r7, #20
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f851 	bl	8003e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003da0:	f000 f8f6 	bl	8003f90 <prvAddNewTaskToReadyList>
 8003da4:	e001      	b.n	8003daa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003daa:	697b      	ldr	r3, [r7, #20]
	}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	@ 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	@ 0x30
 8003db8:	af04      	add	r7, sp, #16
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fc77 	bl	80056bc <pvPortMalloc>
 8003dce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003dd6:	20a8      	movs	r0, #168	@ 0xa8
 8003dd8:	f001 fc70 	bl	80056bc <pvPortMalloc>
 8003ddc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dea:	e005      	b.n	8003df8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003dec:	6978      	ldr	r0, [r7, #20]
 8003dee:	f001 fd33 	bl	8005858 <vPortFree>
 8003df2:	e001      	b.n	8003df8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9303      	str	r3, [sp, #12]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	9302      	str	r3, [sp, #8]
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f80f 	bl	8003e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e22:	69f8      	ldr	r0, [r7, #28]
 8003e24:	f000 f8b4 	bl	8003f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e002      	b.n	8003e34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003e34:	69bb      	ldr	r3, [r7, #24]
	}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	461a      	mov	r2, r3
 8003e58:	21a5      	movs	r1, #165	@ 0xa5
 8003e5a:	f001 fe1d 	bl	8005a98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	617b      	str	r3, [r7, #20]
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01f      	beq.n	8003ee0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	e012      	b.n	8003ecc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	4413      	add	r3, r2
 8003eac:	7819      	ldrb	r1, [r3, #0]
 8003eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3334      	adds	r3, #52	@ 0x34
 8003eb6:	460a      	mov	r2, r1
 8003eb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b0f      	cmp	r3, #15
 8003ed0:	d9e9      	bls.n	8003ea6 <prvInitialiseNewTask+0x66>
 8003ed2:	e000      	b.n	8003ed6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003ed4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ede:	e003      	b.n	8003ee8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	2b37      	cmp	r3, #55	@ 0x37
 8003eec:	d901      	bls.n	8003ef2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003eee:	2337      	movs	r3, #55	@ 0x37
 8003ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003efc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	2200      	movs	r2, #0
 8003f02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f06:	3304      	adds	r3, #4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff f965 	bl	80031d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f10:	3318      	adds	r3, #24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f960 	bl	80031d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f40:	3354      	adds	r3, #84	@ 0x54
 8003f42:	224c      	movs	r2, #76	@ 0x4c
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fda6 	bl	8005a98 <memset>
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003f84 <prvInitialiseNewTask+0x144>)
 8003f50:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f54:	4a0c      	ldr	r2, [pc, #48]	@ (8003f88 <prvInitialiseNewTask+0x148>)
 8003f56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f8c <prvInitialiseNewTask+0x14c>)
 8003f5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	69b8      	ldr	r0, [r7, #24]
 8003f64:	f001 f95a 	bl	800521c <pxPortInitialiseStack>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f7a:	bf00      	nop
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20004ae8 	.word	0x20004ae8
 8003f88:	20004b50 	.word	0x20004b50
 8003f8c:	20004bb8 	.word	0x20004bb8

08003f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f98:	f001 fa6e 	bl	8005478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <prvAddNewTaskToReadyList+0xc4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8004054 <prvAddNewTaskToReadyList+0xc4>)
 8003fa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004058 <prvAddNewTaskToReadyList+0xc8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003fae:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <prvAddNewTaskToReadyList+0xc8>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003fb4:	4b27      	ldr	r3, [pc, #156]	@ (8004054 <prvAddNewTaskToReadyList+0xc4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d110      	bne.n	8003fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003fbc:	f000 fc2e 	bl	800481c <prvInitialiseTaskLists>
 8003fc0:	e00d      	b.n	8003fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003fc2:	4b26      	ldr	r3, [pc, #152]	@ (800405c <prvAddNewTaskToReadyList+0xcc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003fca:	4b23      	ldr	r3, [pc, #140]	@ (8004058 <prvAddNewTaskToReadyList+0xc8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d802      	bhi.n	8003fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004058 <prvAddNewTaskToReadyList+0xc8>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003fde:	4b20      	ldr	r3, [pc, #128]	@ (8004060 <prvAddNewTaskToReadyList+0xd0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8004060 <prvAddNewTaskToReadyList+0xd0>)
 8003fe6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <prvAddNewTaskToReadyList+0xd0>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8004064 <prvAddNewTaskToReadyList+0xd4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d903      	bls.n	8004004 <prvAddNewTaskToReadyList+0x74>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	4a18      	ldr	r2, [pc, #96]	@ (8004064 <prvAddNewTaskToReadyList+0xd4>)
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4a15      	ldr	r2, [pc, #84]	@ (8004068 <prvAddNewTaskToReadyList+0xd8>)
 8004012:	441a      	add	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3304      	adds	r3, #4
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f7ff f8e9 	bl	80031f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004020:	f001 fa5c 	bl	80054dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <prvAddNewTaskToReadyList+0xcc>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800402c:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <prvAddNewTaskToReadyList+0xc8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	429a      	cmp	r2, r3
 8004038:	d207      	bcs.n	800404a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800403a:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <prvAddNewTaskToReadyList+0xdc>)
 800403c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000d68 	.word	0x20000d68
 8004058:	20000894 	.word	0x20000894
 800405c:	20000d74 	.word	0x20000d74
 8004060:	20000d84 	.word	0x20000d84
 8004064:	20000d70 	.word	0x20000d70
 8004068:	20000898 	.word	0x20000898
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d018      	beq.n	80040b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <vTaskDelay+0x64>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <vTaskDelay+0x32>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60bb      	str	r3, [r7, #8]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040a2:	f000 f88b 	bl	80041bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040a6:	2100      	movs	r1, #0
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fd09 	bl	8004ac0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80040ae:	f000 f893 	bl	80041d8 <xTaskResumeAll>
 80040b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80040ba:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <vTaskDelay+0x68>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000d90 	.word	0x20000d90
 80040d8:	e000ed04 	.word	0xe000ed04

080040dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08a      	sub	sp, #40	@ 0x28
 80040e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80040ea:	463a      	mov	r2, r7
 80040ec:	1d39      	adds	r1, r7, #4
 80040ee:	f107 0308 	add.w	r3, r7, #8
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff f81c 	bl	8003130 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	9202      	str	r2, [sp, #8]
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2300      	movs	r3, #0
 8004108:	460a      	mov	r2, r1
 800410a:	4924      	ldr	r1, [pc, #144]	@ (800419c <vTaskStartScheduler+0xc0>)
 800410c:	4824      	ldr	r0, [pc, #144]	@ (80041a0 <vTaskStartScheduler+0xc4>)
 800410e:	f7ff fdf1 	bl	8003cf4 <xTaskCreateStatic>
 8004112:	4603      	mov	r3, r0
 8004114:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <vTaskStartScheduler+0xc8>)
 8004116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004118:	4b22      	ldr	r3, [pc, #136]	@ (80041a4 <vTaskStartScheduler+0xc8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004120:	2301      	movs	r3, #1
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	e001      	b.n	800412a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004126:	2300      	movs	r3, #0
 8004128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d102      	bne.n	8004136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004130:	f000 fd1a 	bl	8004b68 <xTimerCreateTimerTask>
 8004134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d11b      	bne.n	8004174 <vTaskStartScheduler+0x98>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	613b      	str	r3, [r7, #16]
}
 800414e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004150:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <vTaskStartScheduler+0xcc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3354      	adds	r3, #84	@ 0x54
 8004156:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <vTaskStartScheduler+0xd0>)
 8004158:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800415a:	4b15      	ldr	r3, [pc, #84]	@ (80041b0 <vTaskStartScheduler+0xd4>)
 800415c:	f04f 32ff 	mov.w	r2, #4294967295
 8004160:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004162:	4b14      	ldr	r3, [pc, #80]	@ (80041b4 <vTaskStartScheduler+0xd8>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004168:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <vTaskStartScheduler+0xdc>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800416e:	f001 f8df 	bl	8005330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004172:	e00f      	b.n	8004194 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d10b      	bne.n	8004194 <vTaskStartScheduler+0xb8>
	__asm volatile
 800417c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	60fb      	str	r3, [r7, #12]
}
 800418e:	bf00      	nop
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <vTaskStartScheduler+0xb4>
}
 8004194:	bf00      	nop
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	08005cb0 	.word	0x08005cb0
 80041a0:	080047ed 	.word	0x080047ed
 80041a4:	20000d8c 	.word	0x20000d8c
 80041a8:	20000894 	.word	0x20000894
 80041ac:	20000010 	.word	0x20000010
 80041b0:	20000d88 	.word	0x20000d88
 80041b4:	20000d74 	.word	0x20000d74
 80041b8:	20000d6c 	.word	0x20000d6c

080041bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80041c0:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <vTaskSuspendAll+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a03      	ldr	r2, [pc, #12]	@ (80041d4 <vTaskSuspendAll+0x18>)
 80041c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	20000d90 	.word	0x20000d90

080041d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80041e6:	4b42      	ldr	r3, [pc, #264]	@ (80042f0 <xTaskResumeAll+0x118>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <xTaskResumeAll+0x2e>
	__asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	e7fd      	b.n	8004202 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004206:	f001 f937 	bl	8005478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800420a:	4b39      	ldr	r3, [pc, #228]	@ (80042f0 <xTaskResumeAll+0x118>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3b01      	subs	r3, #1
 8004210:	4a37      	ldr	r2, [pc, #220]	@ (80042f0 <xTaskResumeAll+0x118>)
 8004212:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004214:	4b36      	ldr	r3, [pc, #216]	@ (80042f0 <xTaskResumeAll+0x118>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d162      	bne.n	80042e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800421c:	4b35      	ldr	r3, [pc, #212]	@ (80042f4 <xTaskResumeAll+0x11c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05e      	beq.n	80042e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004224:	e02f      	b.n	8004286 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004226:	4b34      	ldr	r3, [pc, #208]	@ (80042f8 <xTaskResumeAll+0x120>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3318      	adds	r3, #24
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff f83a 	bl	80032ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3304      	adds	r3, #4
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff f835 	bl	80032ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004246:	4b2d      	ldr	r3, [pc, #180]	@ (80042fc <xTaskResumeAll+0x124>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d903      	bls.n	8004256 <xTaskResumeAll+0x7e>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	4a2a      	ldr	r2, [pc, #168]	@ (80042fc <xTaskResumeAll+0x124>)
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4a27      	ldr	r2, [pc, #156]	@ (8004300 <xTaskResumeAll+0x128>)
 8004264:	441a      	add	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3304      	adds	r3, #4
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fe ffc0 	bl	80031f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	4b23      	ldr	r3, [pc, #140]	@ (8004304 <xTaskResumeAll+0x12c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004280:	4b21      	ldr	r3, [pc, #132]	@ (8004308 <xTaskResumeAll+0x130>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004286:	4b1c      	ldr	r3, [pc, #112]	@ (80042f8 <xTaskResumeAll+0x120>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1cb      	bne.n	8004226 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004294:	f000 fb66 	bl	8004964 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004298:	4b1c      	ldr	r3, [pc, #112]	@ (800430c <xTaskResumeAll+0x134>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80042a4:	f000 f846 	bl	8004334 <xTaskIncrementTick>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80042ae:	4b16      	ldr	r3, [pc, #88]	@ (8004308 <xTaskResumeAll+0x130>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f1      	bne.n	80042a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80042c0:	4b12      	ldr	r3, [pc, #72]	@ (800430c <xTaskResumeAll+0x134>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <xTaskResumeAll+0x130>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80042ce:	2301      	movs	r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80042d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004310 <xTaskResumeAll+0x138>)
 80042d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042e2:	f001 f8fb 	bl	80054dc <vPortExitCritical>

	return xAlreadyYielded;
 80042e6:	68bb      	ldr	r3, [r7, #8]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000d90 	.word	0x20000d90
 80042f4:	20000d68 	.word	0x20000d68
 80042f8:	20000d28 	.word	0x20000d28
 80042fc:	20000d70 	.word	0x20000d70
 8004300:	20000898 	.word	0x20000898
 8004304:	20000894 	.word	0x20000894
 8004308:	20000d7c 	.word	0x20000d7c
 800430c:	20000d78 	.word	0x20000d78
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800431a:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <xTaskGetTickCount+0x1c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004320:	687b      	ldr	r3, [r7, #4]
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000d6c 	.word	0x20000d6c

08004334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433e:	4b4f      	ldr	r3, [pc, #316]	@ (800447c <xTaskIncrementTick+0x148>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	f040 8090 	bne.w	8004468 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004348:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <xTaskIncrementTick+0x14c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004350:	4a4b      	ldr	r2, [pc, #300]	@ (8004480 <xTaskIncrementTick+0x14c>)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d121      	bne.n	80043a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800435c:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <xTaskIncrementTick+0x150>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	603b      	str	r3, [r7, #0]
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	e7fd      	b.n	800437a <xTaskIncrementTick+0x46>
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <xTaskIncrementTick+0x150>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	4b40      	ldr	r3, [pc, #256]	@ (8004488 <xTaskIncrementTick+0x154>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a3e      	ldr	r2, [pc, #248]	@ (8004484 <xTaskIncrementTick+0x150>)
 800438a:	6013      	str	r3, [r2, #0]
 800438c:	4a3e      	ldr	r2, [pc, #248]	@ (8004488 <xTaskIncrementTick+0x154>)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b3e      	ldr	r3, [pc, #248]	@ (800448c <xTaskIncrementTick+0x158>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3301      	adds	r3, #1
 8004398:	4a3c      	ldr	r2, [pc, #240]	@ (800448c <xTaskIncrementTick+0x158>)
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	f000 fae2 	bl	8004964 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80043a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <xTaskIncrementTick+0x15c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d349      	bcc.n	800443e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043aa:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <xTaskIncrementTick+0x150>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043b4:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <xTaskIncrementTick+0x15c>)
 80043b6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ba:	601a      	str	r2, [r3, #0]
					break;
 80043bc:	e03f      	b.n	800443e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043be:	4b31      	ldr	r3, [pc, #196]	@ (8004484 <xTaskIncrementTick+0x150>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d203      	bcs.n	80043de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80043d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004490 <xTaskIncrementTick+0x15c>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80043dc:	e02f      	b.n	800443e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe ff62 	bl	80032ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	3318      	adds	r3, #24
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe ff59 	bl	80032ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fe:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <xTaskIncrementTick+0x160>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d903      	bls.n	800440e <xTaskIncrementTick+0xda>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	4a22      	ldr	r2, [pc, #136]	@ (8004494 <xTaskIncrementTick+0x160>)
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4a1f      	ldr	r2, [pc, #124]	@ (8004498 <xTaskIncrementTick+0x164>)
 800441c:	441a      	add	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	3304      	adds	r3, #4
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7fe fee4 	bl	80031f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442e:	4b1b      	ldr	r3, [pc, #108]	@ (800449c <xTaskIncrementTick+0x168>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	429a      	cmp	r2, r3
 8004436:	d3b8      	bcc.n	80043aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800443c:	e7b5      	b.n	80043aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800443e:	4b17      	ldr	r3, [pc, #92]	@ (800449c <xTaskIncrementTick+0x168>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004444:	4914      	ldr	r1, [pc, #80]	@ (8004498 <xTaskIncrementTick+0x164>)
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d901      	bls.n	800445a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800445a:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <xTaskIncrementTick+0x16c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e004      	b.n	8004472 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004468:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <xTaskIncrementTick+0x170>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	4a0d      	ldr	r2, [pc, #52]	@ (80044a4 <xTaskIncrementTick+0x170>)
 8004470:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004472:	697b      	ldr	r3, [r7, #20]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000d90 	.word	0x20000d90
 8004480:	20000d6c 	.word	0x20000d6c
 8004484:	20000d20 	.word	0x20000d20
 8004488:	20000d24 	.word	0x20000d24
 800448c:	20000d80 	.word	0x20000d80
 8004490:	20000d88 	.word	0x20000d88
 8004494:	20000d70 	.word	0x20000d70
 8004498:	20000898 	.word	0x20000898
 800449c:	20000894 	.word	0x20000894
 80044a0:	20000d7c 	.word	0x20000d7c
 80044a4:	20000d78 	.word	0x20000d78

080044a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80044ae:	4b2b      	ldr	r3, [pc, #172]	@ (800455c <vTaskSwitchContext+0xb4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80044b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004560 <vTaskSwitchContext+0xb8>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80044bc:	e047      	b.n	800454e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80044be:	4b28      	ldr	r3, [pc, #160]	@ (8004560 <vTaskSwitchContext+0xb8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c4:	4b27      	ldr	r3, [pc, #156]	@ (8004564 <vTaskSwitchContext+0xbc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e011      	b.n	80044f0 <vTaskSwitchContext+0x48>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <vTaskSwitchContext+0x42>
	__asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	607b      	str	r3, [r7, #4]
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <vTaskSwitchContext+0x3e>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	491d      	ldr	r1, [pc, #116]	@ (8004568 <vTaskSwitchContext+0xc0>)
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0e3      	beq.n	80044cc <vTaskSwitchContext+0x24>
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4a16      	ldr	r2, [pc, #88]	@ (8004568 <vTaskSwitchContext+0xc0>)
 8004510:	4413      	add	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	605a      	str	r2, [r3, #4]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3308      	adds	r3, #8
 8004526:	429a      	cmp	r2, r3
 8004528:	d104      	bne.n	8004534 <vTaskSwitchContext+0x8c>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	605a      	str	r2, [r3, #4]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4a0c      	ldr	r2, [pc, #48]	@ (800456c <vTaskSwitchContext+0xc4>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <vTaskSwitchContext+0xbc>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004544:	4b09      	ldr	r3, [pc, #36]	@ (800456c <vTaskSwitchContext+0xc4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3354      	adds	r3, #84	@ 0x54
 800454a:	4a09      	ldr	r2, [pc, #36]	@ (8004570 <vTaskSwitchContext+0xc8>)
 800454c:	6013      	str	r3, [r2, #0]
}
 800454e:	bf00      	nop
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000d90 	.word	0x20000d90
 8004560:	20000d7c 	.word	0x20000d7c
 8004564:	20000d70 	.word	0x20000d70
 8004568:	20000898 	.word	0x20000898
 800456c:	20000894 	.word	0x20000894
 8004570:	20000010 	.word	0x20000010

08004574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60fb      	str	r3, [r7, #12]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800459c:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <vTaskPlaceOnEventList+0x48>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3318      	adds	r3, #24
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fe fe48 	bl	800323a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80045aa:	2101      	movs	r1, #1
 80045ac:	6838      	ldr	r0, [r7, #0]
 80045ae:	f000 fa87 	bl	8004ac0 <prvAddCurrentTaskToDelayedList>
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000894 	.word	0x20000894

080045c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	617b      	str	r3, [r7, #20]
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	e7fd      	b.n	80045e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <vTaskPlaceOnEventListRestricted+0x54>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3318      	adds	r3, #24
 80045f0:	4619      	mov	r1, r3
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7fe fdfd 	bl	80031f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80045fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004602:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	68b8      	ldr	r0, [r7, #8]
 8004608:	f000 fa5a 	bl	8004ac0 <prvAddCurrentTaskToDelayedList>
	}
 800460c:	bf00      	nop
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000894 	.word	0x20000894

08004618 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60fb      	str	r3, [r7, #12]
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3318      	adds	r3, #24
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fe2e 	bl	80032ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004650:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <xTaskRemoveFromEventList+0xb0>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11d      	bne.n	8004694 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	3304      	adds	r3, #4
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fe25 	bl	80032ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004666:	4b19      	ldr	r3, [pc, #100]	@ (80046cc <xTaskRemoveFromEventList+0xb4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d903      	bls.n	8004676 <xTaskRemoveFromEventList+0x5e>
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004672:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <xTaskRemoveFromEventList+0xb4>)
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a13      	ldr	r2, [pc, #76]	@ (80046d0 <xTaskRemoveFromEventList+0xb8>)
 8004684:	441a      	add	r2, r3
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe fdb0 	bl	80031f2 <vListInsertEnd>
 8004692:	e005      	b.n	80046a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3318      	adds	r3, #24
 8004698:	4619      	mov	r1, r3
 800469a:	480e      	ldr	r0, [pc, #56]	@ (80046d4 <xTaskRemoveFromEventList+0xbc>)
 800469c:	f7fe fda9 	bl	80031f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a4:	4b0c      	ldr	r3, [pc, #48]	@ (80046d8 <xTaskRemoveFromEventList+0xc0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d905      	bls.n	80046ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046ae:	2301      	movs	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <xTaskRemoveFromEventList+0xc4>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e001      	b.n	80046be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046be:	697b      	ldr	r3, [r7, #20]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000d90 	.word	0x20000d90
 80046cc:	20000d70 	.word	0x20000d70
 80046d0:	20000898 	.word	0x20000898
 80046d4:	20000d28 	.word	0x20000d28
 80046d8:	20000894 	.word	0x20000894
 80046dc:	20000d7c 	.word	0x20000d7c

080046e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80046e8:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <vTaskInternalSetTimeOutState+0x24>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <vTaskInternalSetTimeOutState+0x28>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	605a      	str	r2, [r3, #4]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	20000d80 	.word	0x20000d80
 8004708:	20000d6c 	.word	0x20000d6c

0800470c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800471c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004720:	f383 8811 	msr	BASEPRI, r3
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	613b      	str	r3, [r7, #16]
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	e7fd      	b.n	8004730 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	60fb      	str	r3, [r7, #12]
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	e7fd      	b.n	800474e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004752:	f000 fe91 	bl	8005478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004756:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <xTaskCheckForTimeOut+0xc0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d102      	bne.n	8004776 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	e023      	b.n	80047be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <xTaskCheckForTimeOut+0xc4>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d007      	beq.n	8004792 <xTaskCheckForTimeOut+0x86>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d302      	bcc.n	8004792 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e015      	b.n	80047be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	d20b      	bcs.n	80047b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff99 	bl	80046e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	e004      	b.n	80047be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80047be:	f000 fe8d 	bl	80054dc <vPortExitCritical>

	return xReturn;
 80047c2:	69fb      	ldr	r3, [r7, #28]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20000d6c 	.word	0x20000d6c
 80047d0:	20000d80 	.word	0x20000d80

080047d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80047d8:	4b03      	ldr	r3, [pc, #12]	@ (80047e8 <vTaskMissedYield+0x14>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
}
 80047de:	bf00      	nop
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	20000d7c 	.word	0x20000d7c

080047ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80047f4:	f000 f852 	bl	800489c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047f8:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <prvIdleTask+0x28>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d9f9      	bls.n	80047f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004800:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <prvIdleTask+0x2c>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004810:	e7f0      	b.n	80047f4 <prvIdleTask+0x8>
 8004812:	bf00      	nop
 8004814:	20000898 	.word	0x20000898
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004822:	2300      	movs	r3, #0
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	e00c      	b.n	8004842 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4a12      	ldr	r2, [pc, #72]	@ (800487c <prvInitialiseTaskLists+0x60>)
 8004834:	4413      	add	r3, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fcae 	bl	8003198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3301      	adds	r3, #1
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b37      	cmp	r3, #55	@ 0x37
 8004846:	d9ef      	bls.n	8004828 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004848:	480d      	ldr	r0, [pc, #52]	@ (8004880 <prvInitialiseTaskLists+0x64>)
 800484a:	f7fe fca5 	bl	8003198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800484e:	480d      	ldr	r0, [pc, #52]	@ (8004884 <prvInitialiseTaskLists+0x68>)
 8004850:	f7fe fca2 	bl	8003198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004854:	480c      	ldr	r0, [pc, #48]	@ (8004888 <prvInitialiseTaskLists+0x6c>)
 8004856:	f7fe fc9f 	bl	8003198 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800485a:	480c      	ldr	r0, [pc, #48]	@ (800488c <prvInitialiseTaskLists+0x70>)
 800485c:	f7fe fc9c 	bl	8003198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004860:	480b      	ldr	r0, [pc, #44]	@ (8004890 <prvInitialiseTaskLists+0x74>)
 8004862:	f7fe fc99 	bl	8003198 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <prvInitialiseTaskLists+0x78>)
 8004868:	4a05      	ldr	r2, [pc, #20]	@ (8004880 <prvInitialiseTaskLists+0x64>)
 800486a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <prvInitialiseTaskLists+0x7c>)
 800486e:	4a05      	ldr	r2, [pc, #20]	@ (8004884 <prvInitialiseTaskLists+0x68>)
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000898 	.word	0x20000898
 8004880:	20000cf8 	.word	0x20000cf8
 8004884:	20000d0c 	.word	0x20000d0c
 8004888:	20000d28 	.word	0x20000d28
 800488c:	20000d3c 	.word	0x20000d3c
 8004890:	20000d54 	.word	0x20000d54
 8004894:	20000d20 	.word	0x20000d20
 8004898:	20000d24 	.word	0x20000d24

0800489c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048a2:	e019      	b.n	80048d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80048a4:	f000 fde8 	bl	8005478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a8:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <prvCheckTasksWaitingTermination+0x50>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fcf9 	bl	80032ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <prvCheckTasksWaitingTermination+0x54>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	4a0b      	ldr	r2, [pc, #44]	@ (80048f0 <prvCheckTasksWaitingTermination+0x54>)
 80048c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <prvCheckTasksWaitingTermination+0x58>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	4a0a      	ldr	r2, [pc, #40]	@ (80048f4 <prvCheckTasksWaitingTermination+0x58>)
 80048cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80048ce:	f000 fe05 	bl	80054dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f810 	bl	80048f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048d8:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <prvCheckTasksWaitingTermination+0x58>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e1      	bne.n	80048a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000d3c 	.word	0x20000d3c
 80048f0:	20000d68 	.word	0x20000d68
 80048f4:	20000d50 	.word	0x20000d50

080048f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3354      	adds	r3, #84	@ 0x54
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f8cf 	bl	8005aa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004910:	2b00      	cmp	r3, #0
 8004912:	d108      	bne.n	8004926 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004918:	4618      	mov	r0, r3
 800491a:	f000 ff9d 	bl	8005858 <vPortFree>
				vPortFree( pxTCB );
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 ff9a 	bl	8005858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004924:	e019      	b.n	800495a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800492c:	2b01      	cmp	r3, #1
 800492e:	d103      	bne.n	8004938 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 ff91 	bl	8005858 <vPortFree>
	}
 8004936:	e010      	b.n	800495a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800493e:	2b02      	cmp	r3, #2
 8004940:	d00b      	beq.n	800495a <prvDeleteTCB+0x62>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <prvDeleteTCB+0x5e>
	}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496a:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <prvResetNextTaskUnblockTime+0x38>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d104      	bne.n	800497e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004974:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <prvResetNextTaskUnblockTime+0x3c>)
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800497c:	e008      	b.n	8004990 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497e:	4b07      	ldr	r3, [pc, #28]	@ (800499c <prvResetNextTaskUnblockTime+0x38>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a04      	ldr	r2, [pc, #16]	@ (80049a0 <prvResetNextTaskUnblockTime+0x3c>)
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000d20 	.word	0x20000d20
 80049a0:	20000d88 	.word	0x20000d88

080049a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049aa:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <xTaskGetSchedulerState+0x34>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049b2:	2301      	movs	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	e008      	b.n	80049ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b8:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <xTaskGetSchedulerState+0x38>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049c0:	2302      	movs	r3, #2
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	e001      	b.n	80049ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ca:	687b      	ldr	r3, [r7, #4]
	}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	20000d74 	.word	0x20000d74
 80049dc:	20000d90 	.word	0x20000d90

080049e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d058      	beq.n	8004aa8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049f6:	4b2f      	ldr	r3, [pc, #188]	@ (8004ab4 <xTaskPriorityDisinherit+0xd4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d00b      	beq.n	8004a18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
}
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60bb      	str	r3, [r7, #8]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a3c:	1e5a      	subs	r2, r3, #1
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d02c      	beq.n	8004aa8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d128      	bne.n	8004aa8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fe fc26 	bl	80032ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a78:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <xTaskPriorityDisinherit+0xd8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d903      	bls.n	8004a88 <xTaskPriorityDisinherit+0xa8>
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a84:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab8 <xTaskPriorityDisinherit+0xd8>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <xTaskPriorityDisinherit+0xdc>)
 8004a96:	441a      	add	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f7fe fba7 	bl	80031f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004aa8:	697b      	ldr	r3, [r7, #20]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000894 	.word	0x20000894
 8004ab8:	20000d70 	.word	0x20000d70
 8004abc:	20000898 	.word	0x20000898

08004ac0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004aca:	4b21      	ldr	r3, [pc, #132]	@ (8004b50 <prvAddCurrentTaskToDelayedList+0x90>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ad0:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fbe8 	bl	80032ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d10a      	bne.n	8004afa <prvAddCurrentTaskToDelayedList+0x3a>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aea:	4b1a      	ldr	r3, [pc, #104]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3304      	adds	r3, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4819      	ldr	r0, [pc, #100]	@ (8004b58 <prvAddCurrentTaskToDelayedList+0x98>)
 8004af4:	f7fe fb7d 	bl	80031f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004af8:	e026      	b.n	8004b48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4413      	add	r3, r2
 8004b00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d209      	bcs.n	8004b26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b0f      	ldr	r3, [pc, #60]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fe fb8b 	bl	800323a <vListInsert>
}
 8004b24:	e010      	b.n	8004b48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b26:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004b54 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	4610      	mov	r0, r2
 8004b34:	f7fe fb81 	bl	800323a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b38:	4b0a      	ldr	r3, [pc, #40]	@ (8004b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d202      	bcs.n	8004b48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b42:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000d6c 	.word	0x20000d6c
 8004b54:	20000894 	.word	0x20000894
 8004b58:	20000d54 	.word	0x20000d54
 8004b5c:	20000d24 	.word	0x20000d24
 8004b60:	20000d20 	.word	0x20000d20
 8004b64:	20000d88 	.word	0x20000d88

08004b68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	@ 0x28
 8004b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b72:	f000 fb13 	bl	800519c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b76:	4b1d      	ldr	r3, [pc, #116]	@ (8004bec <xTimerCreateTimerTask+0x84>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d021      	beq.n	8004bc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b86:	1d3a      	adds	r2, r7, #4
 8004b88:	f107 0108 	add.w	r1, r7, #8
 8004b8c:	f107 030c 	add.w	r3, r7, #12
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fe fae7 	bl	8003164 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	9202      	str	r2, [sp, #8]
 8004b9e:	9301      	str	r3, [sp, #4]
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	4911      	ldr	r1, [pc, #68]	@ (8004bf0 <xTimerCreateTimerTask+0x88>)
 8004baa:	4812      	ldr	r0, [pc, #72]	@ (8004bf4 <xTimerCreateTimerTask+0x8c>)
 8004bac:	f7ff f8a2 	bl	8003cf4 <xTaskCreateStatic>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a11      	ldr	r2, [pc, #68]	@ (8004bf8 <xTimerCreateTimerTask+0x90>)
 8004bb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bb6:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <xTimerCreateTimerTask+0x90>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	613b      	str	r3, [r7, #16]
}
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	e7fd      	b.n	8004bdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004be0:	697b      	ldr	r3, [r7, #20]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000dc4 	.word	0x20000dc4
 8004bf0:	08005cb8 	.word	0x08005cb8
 8004bf4:	08004d35 	.word	0x08004d35
 8004bf8:	20000dc8 	.word	0x20000dc8

08004bfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10b      	bne.n	8004c2c <xTimerGenericCommand+0x30>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	623b      	str	r3, [r7, #32]
}
 8004c26:	bf00      	nop
 8004c28:	bf00      	nop
 8004c2a:	e7fd      	b.n	8004c28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c2c:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <xTimerGenericCommand+0x98>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02a      	beq.n	8004c8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	dc18      	bgt.n	8004c78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c46:	f7ff fead 	bl	80049a4 <xTaskGetSchedulerState>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d109      	bne.n	8004c64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c50:	4b10      	ldr	r3, [pc, #64]	@ (8004c94 <xTimerGenericCommand+0x98>)
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	f107 0110 	add.w	r1, r7, #16
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5c:	f7fe fc5a 	bl	8003514 <xQueueGenericSend>
 8004c60:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c62:	e012      	b.n	8004c8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c64:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <xTimerGenericCommand+0x98>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	f107 0110 	add.w	r1, r7, #16
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f7fe fc50 	bl	8003514 <xQueueGenericSend>
 8004c74:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c76:	e008      	b.n	8004c8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c78:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <xTimerGenericCommand+0x98>)
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	f107 0110 	add.w	r1, r7, #16
 8004c80:	2300      	movs	r3, #0
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	f7fe fd48 	bl	8003718 <xQueueGenericSendFromISR>
 8004c88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3728      	adds	r7, #40	@ 0x28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000dc4 	.word	0x20000dc4

08004c98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ca2:	4b23      	ldr	r3, [pc, #140]	@ (8004d30 <prvProcessExpiredTimer+0x98>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe fafb 	bl	80032ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d023      	beq.n	8004d0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	18d1      	adds	r1, r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	6978      	ldr	r0, [r7, #20]
 8004cd2:	f000 f8d5 	bl	8004e80 <prvInsertTimerInActiveList>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	6978      	ldr	r0, [r7, #20]
 8004ce8:	f7ff ff88 	bl	8004bfc <xTimerGenericCommand>
 8004cec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d114      	bne.n	8004d1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60fb      	str	r3, [r7, #12]
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	4798      	blx	r3
}
 8004d26:	bf00      	nop
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000dbc 	.word	0x20000dbc

08004d34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f859 	bl	8004df8 <prvGetNextExpireTime>
 8004d46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 f805 	bl	8004d5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d52:	f000 f8d7 	bl	8004f04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d56:	bf00      	nop
 8004d58:	e7f0      	b.n	8004d3c <prvTimerTask+0x8>
	...

08004d5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d66:	f7ff fa29 	bl	80041bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f866 	bl	8004e40 <prvSampleTimeNow>
 8004d74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d130      	bne.n	8004dde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <prvProcessTimerOrBlockTask+0x3c>
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d806      	bhi.n	8004d98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d8a:	f7ff fa25 	bl	80041d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff81 	bl	8004c98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d96:	e024      	b.n	8004de2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <prvProcessTimerOrBlockTask+0x90>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <prvProcessTimerOrBlockTask+0x50>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <prvProcessTimerOrBlockTask+0x52>
 8004dac:	2300      	movs	r3, #0
 8004dae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004db0:	4b0f      	ldr	r3, [pc, #60]	@ (8004df0 <prvProcessTimerOrBlockTask+0x94>)
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f7fe ff65 	bl	8003c8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dc2:	f7ff fa09 	bl	80041d8 <xTaskResumeAll>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004dcc:	4b09      	ldr	r3, [pc, #36]	@ (8004df4 <prvProcessTimerOrBlockTask+0x98>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
}
 8004ddc:	e001      	b.n	8004de2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dde:	f7ff f9fb 	bl	80041d8 <xTaskResumeAll>
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000dc0 	.word	0x20000dc0
 8004df0:	20000dc4 	.word	0x20000dc4
 8004df4:	e000ed04 	.word	0xe000ed04

08004df8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e00:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <prvGetNextExpireTime+0x44>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <prvGetNextExpireTime+0x16>
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	e000      	b.n	8004e10 <prvGetNextExpireTime+0x18>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e1c:	4b07      	ldr	r3, [pc, #28]	@ (8004e3c <prvGetNextExpireTime+0x44>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	e001      	b.n	8004e2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000dbc 	.word	0x20000dbc

08004e40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e48:	f7ff fa64 	bl	8004314 <xTaskGetTickCount>
 8004e4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <prvSampleTimeNow+0x3c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d205      	bcs.n	8004e64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e58:	f000 f93a 	bl	80050d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e002      	b.n	8004e6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e6a:	4a04      	ldr	r2, [pc, #16]	@ (8004e7c <prvSampleTimeNow+0x3c>)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e70:	68fb      	ldr	r3, [r7, #12]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000dcc 	.word	0x20000dcc

08004e80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d812      	bhi.n	8004ecc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e01b      	b.n	8004ef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004eba:	4b10      	ldr	r3, [pc, #64]	@ (8004efc <prvInsertTimerInActiveList+0x7c>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fe f9b8 	bl	800323a <vListInsert>
 8004eca:	e012      	b.n	8004ef2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d206      	bcs.n	8004ee2 <prvInsertTimerInActiveList+0x62>
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d302      	bcc.n	8004ee2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004edc:	2301      	movs	r3, #1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e007      	b.n	8004ef2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ee2:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <prvInsertTimerInActiveList+0x80>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe f9a4 	bl	800323a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ef2:	697b      	ldr	r3, [r7, #20]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000dc0 	.word	0x20000dc0
 8004f00:	20000dbc 	.word	0x20000dbc

08004f04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	@ 0x38
 8004f08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f0a:	e0ce      	b.n	80050aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da19      	bge.n	8004f46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f12:	1d3b      	adds	r3, r7, #4
 8004f14:	3304      	adds	r3, #4
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	61fb      	str	r3, [r7, #28]
}
 8004f30:	bf00      	nop
 8004f32:	bf00      	nop
 8004f34:	e7fd      	b.n	8004f32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f3c:	6850      	ldr	r0, [r2, #4]
 8004f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f2c0 80ae 	blt.w	80050aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe f9a4 	bl	80032ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f64:	463b      	mov	r3, r7
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ff6a 	bl	8004e40 <prvSampleTimeNow>
 8004f6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b09      	cmp	r3, #9
 8004f72:	f200 8097 	bhi.w	80050a4 <prvProcessReceivedCommands+0x1a0>
 8004f76:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <prvProcessReceivedCommands+0x78>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004fa5 	.word	0x08004fa5
 8004f80:	08004fa5 	.word	0x08004fa5
 8004f84:	08004fa5 	.word	0x08004fa5
 8004f88:	0800501b 	.word	0x0800501b
 8004f8c:	0800502f 	.word	0x0800502f
 8004f90:	0800507b 	.word	0x0800507b
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fa5 	.word	0x08004fa5
 8004f9c:	0800501b 	.word	0x0800501b
 8004fa0:	0800502f 	.word	0x0800502f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	18d1      	adds	r1, r2, r3
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fc4:	f7ff ff5c 	bl	8004e80 <prvInsertTimerInActiveList>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d06c      	beq.n	80050a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d061      	beq.n	80050a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	441a      	add	r2, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff6:	f7ff fe01 	bl	8004bfc <xTimerGenericCommand>
 8004ffa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d152      	bne.n	80050a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61bb      	str	r3, [r7, #24]
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	e7fd      	b.n	8005016 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005020:	f023 0301 	bic.w	r3, r3, #1
 8005024:	b2da      	uxtb	r2, r3
 8005026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005028:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800502c:	e03d      	b.n	80050aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800502e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10b      	bne.n	8005066 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	617b      	str	r3, [r7, #20]
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	e7fd      	b.n	8005062 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	18d1      	adds	r1, r2, r3
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005074:	f7ff ff04 	bl	8004e80 <prvInsertTimerInActiveList>
					break;
 8005078:	e017      	b.n	80050aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800508a:	f000 fbe5 	bl	8005858 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800508e:	e00c      	b.n	80050aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80050a2:	e002      	b.n	80050aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80050a4:	bf00      	nop
 80050a6:	e000      	b.n	80050aa <prvProcessReceivedCommands+0x1a6>
					break;
 80050a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050aa:	4b08      	ldr	r3, [pc, #32]	@ (80050cc <prvProcessReceivedCommands+0x1c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1d39      	adds	r1, r7, #4
 80050b0:	2200      	movs	r2, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fbce 	bl	8003854 <xQueueReceive>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f47f af26 	bne.w	8004f0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	3730      	adds	r7, #48	@ 0x30
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000dc4 	.word	0x20000dc4

080050d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050d6:	e049      	b.n	800516c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050d8:	4b2e      	ldr	r3, [pc, #184]	@ (8005194 <prvSwitchTimerLists+0xc4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005194 <prvSwitchTimerLists+0xc4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3304      	adds	r3, #4
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe f8db 	bl	80032ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02f      	beq.n	800516c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4413      	add	r3, r2
 8005114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	429a      	cmp	r2, r3
 800511c:	d90e      	bls.n	800513c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800512a:	4b1a      	ldr	r3, [pc, #104]	@ (8005194 <prvSwitchTimerLists+0xc4>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe f880 	bl	800323a <vListInsert>
 800513a:	e017      	b.n	800516c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	2100      	movs	r1, #0
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f7ff fd58 	bl	8004bfc <xTimerGenericCommand>
 800514c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	603b      	str	r3, [r7, #0]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800516c:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <prvSwitchTimerLists+0xc4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1b0      	bne.n	80050d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005176:	4b07      	ldr	r3, [pc, #28]	@ (8005194 <prvSwitchTimerLists+0xc4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <prvSwitchTimerLists+0xc8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a04      	ldr	r2, [pc, #16]	@ (8005194 <prvSwitchTimerLists+0xc4>)
 8005182:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005184:	4a04      	ldr	r2, [pc, #16]	@ (8005198 <prvSwitchTimerLists+0xc8>)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6013      	str	r3, [r2, #0]
}
 800518a:	bf00      	nop
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000dbc 	.word	0x20000dbc
 8005198:	20000dc0 	.word	0x20000dc0

0800519c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051a2:	f000 f969 	bl	8005478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051a6:	4b15      	ldr	r3, [pc, #84]	@ (80051fc <prvCheckForValidListAndQueue+0x60>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d120      	bne.n	80051f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051ae:	4814      	ldr	r0, [pc, #80]	@ (8005200 <prvCheckForValidListAndQueue+0x64>)
 80051b0:	f7fd fff2 	bl	8003198 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051b4:	4813      	ldr	r0, [pc, #76]	@ (8005204 <prvCheckForValidListAndQueue+0x68>)
 80051b6:	f7fd ffef 	bl	8003198 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051ba:	4b13      	ldr	r3, [pc, #76]	@ (8005208 <prvCheckForValidListAndQueue+0x6c>)
 80051bc:	4a10      	ldr	r2, [pc, #64]	@ (8005200 <prvCheckForValidListAndQueue+0x64>)
 80051be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051c0:	4b12      	ldr	r3, [pc, #72]	@ (800520c <prvCheckForValidListAndQueue+0x70>)
 80051c2:	4a10      	ldr	r2, [pc, #64]	@ (8005204 <prvCheckForValidListAndQueue+0x68>)
 80051c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051c6:	2300      	movs	r3, #0
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	4b11      	ldr	r3, [pc, #68]	@ (8005210 <prvCheckForValidListAndQueue+0x74>)
 80051cc:	4a11      	ldr	r2, [pc, #68]	@ (8005214 <prvCheckForValidListAndQueue+0x78>)
 80051ce:	2110      	movs	r1, #16
 80051d0:	200a      	movs	r0, #10
 80051d2:	f7fe f8ff 	bl	80033d4 <xQueueGenericCreateStatic>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <prvCheckForValidListAndQueue+0x60>)
 80051da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051dc:	4b07      	ldr	r3, [pc, #28]	@ (80051fc <prvCheckForValidListAndQueue+0x60>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051e4:	4b05      	ldr	r3, [pc, #20]	@ (80051fc <prvCheckForValidListAndQueue+0x60>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	490b      	ldr	r1, [pc, #44]	@ (8005218 <prvCheckForValidListAndQueue+0x7c>)
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fd24 	bl	8003c38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051f0:	f000 f974 	bl	80054dc <vPortExitCritical>
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000dc4 	.word	0x20000dc4
 8005200:	20000d94 	.word	0x20000d94
 8005204:	20000da8 	.word	0x20000da8
 8005208:	20000dbc 	.word	0x20000dbc
 800520c:	20000dc0 	.word	0x20000dc0
 8005210:	20000e70 	.word	0x20000e70
 8005214:	20000dd0 	.word	0x20000dd0
 8005218:	08005cc0 	.word	0x08005cc0

0800521c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3b04      	subs	r3, #4
 800522c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3b04      	subs	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0201 	bic.w	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b04      	subs	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800524c:	4a0c      	ldr	r2, [pc, #48]	@ (8005280 <pxPortInitialiseStack+0x64>)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3b14      	subs	r3, #20
 8005256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3b04      	subs	r3, #4
 8005262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f06f 0202 	mvn.w	r2, #2
 800526a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3b20      	subs	r3, #32
 8005270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005272:	68fb      	ldr	r3, [r7, #12]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	08005285 	.word	0x08005285

08005284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800528e:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <prvTaskExitError+0x58>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d00b      	beq.n	80052b0 <prvTaskExitError+0x2c>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60fb      	str	r3, [r7, #12]
}
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	e7fd      	b.n	80052ac <prvTaskExitError+0x28>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	60bb      	str	r3, [r7, #8]
}
 80052c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052c4:	bf00      	nop
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0fc      	beq.n	80052c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	2000000c 	.word	0x2000000c

080052e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052e0:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <pxCurrentTCBConst2>)
 80052e2:	6819      	ldr	r1, [r3, #0]
 80052e4:	6808      	ldr	r0, [r1, #0]
 80052e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ea:	f380 8809 	msr	PSP, r0
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f04f 0000 	mov.w	r0, #0
 80052f6:	f380 8811 	msr	BASEPRI, r0
 80052fa:	4770      	bx	lr
 80052fc:	f3af 8000 	nop.w

08005300 <pxCurrentTCBConst2>:
 8005300:	20000894 	.word	0x20000894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005308:	4808      	ldr	r0, [pc, #32]	@ (800532c <prvPortStartFirstTask+0x24>)
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	6800      	ldr	r0, [r0, #0]
 800530e:	f380 8808 	msr	MSP, r0
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f380 8814 	msr	CONTROL, r0
 800531a:	b662      	cpsie	i
 800531c:	b661      	cpsie	f
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	df00      	svc	0
 8005328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800532a:	bf00      	nop
 800532c:	e000ed08 	.word	0xe000ed08

08005330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005336:	4b47      	ldr	r3, [pc, #284]	@ (8005454 <xPortStartScheduler+0x124>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a47      	ldr	r2, [pc, #284]	@ (8005458 <xPortStartScheduler+0x128>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10b      	bne.n	8005358 <xPortStartScheduler+0x28>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005358:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <xPortStartScheduler+0x124>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a3f      	ldr	r2, [pc, #252]	@ (800545c <xPortStartScheduler+0x12c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10b      	bne.n	800537a <xPortStartScheduler+0x4a>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60fb      	str	r3, [r7, #12]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800537a:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <xPortStartScheduler+0x130>)
 800537c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	22ff      	movs	r2, #255	@ 0xff
 800538a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <xPortStartScheduler+0x134>)
 80053a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80053a2:	4b31      	ldr	r3, [pc, #196]	@ (8005468 <xPortStartScheduler+0x138>)
 80053a4:	2207      	movs	r2, #7
 80053a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053a8:	e009      	b.n	80053be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80053aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005468 <xPortStartScheduler+0x138>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005468 <xPortStartScheduler+0x138>)
 80053b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b80      	cmp	r3, #128	@ 0x80
 80053c8:	d0ef      	beq.n	80053aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053ca:	4b27      	ldr	r3, [pc, #156]	@ (8005468 <xPortStartScheduler+0x138>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f1c3 0307 	rsb	r3, r3, #7
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d00b      	beq.n	80053ee <xPortStartScheduler+0xbe>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	e7fd      	b.n	80053ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005468 <xPortStartScheduler+0x138>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005468 <xPortStartScheduler+0x138>)
 80053f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005468 <xPortStartScheduler+0x138>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005400:	4a19      	ldr	r2, [pc, #100]	@ (8005468 <xPortStartScheduler+0x138>)
 8005402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800540c:	4b17      	ldr	r3, [pc, #92]	@ (800546c <xPortStartScheduler+0x13c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a16      	ldr	r2, [pc, #88]	@ (800546c <xPortStartScheduler+0x13c>)
 8005412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005418:	4b14      	ldr	r3, [pc, #80]	@ (800546c <xPortStartScheduler+0x13c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a13      	ldr	r2, [pc, #76]	@ (800546c <xPortStartScheduler+0x13c>)
 800541e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005424:	f000 f8da 	bl	80055dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005428:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <xPortStartScheduler+0x140>)
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800542e:	f000 f8f9 	bl	8005624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005432:	4b10      	ldr	r3, [pc, #64]	@ (8005474 <xPortStartScheduler+0x144>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0f      	ldr	r2, [pc, #60]	@ (8005474 <xPortStartScheduler+0x144>)
 8005438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800543c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800543e:	f7ff ff63 	bl	8005308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005442:	f7ff f831 	bl	80044a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005446:	f7ff ff1d 	bl	8005284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	e000ed00 	.word	0xe000ed00
 8005458:	410fc271 	.word	0x410fc271
 800545c:	410fc270 	.word	0x410fc270
 8005460:	e000e400 	.word	0xe000e400
 8005464:	20000ec0 	.word	0x20000ec0
 8005468:	20000ec4 	.word	0x20000ec4
 800546c:	e000ed20 	.word	0xe000ed20
 8005470:	2000000c 	.word	0x2000000c
 8005474:	e000ef34 	.word	0xe000ef34

08005478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
	__asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	607b      	str	r3, [r7, #4]
}
 8005490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005492:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <vPortEnterCritical+0x5c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	4a0e      	ldr	r2, [pc, #56]	@ (80054d4 <vPortEnterCritical+0x5c>)
 800549a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800549c:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <vPortEnterCritical+0x5c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d110      	bne.n	80054c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80054a4:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <vPortEnterCritical+0x60>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	603b      	str	r3, [r7, #0]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vPortEnterCritical+0x4a>
	}
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	2000000c 	.word	0x2000000c
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054e2:	4b12      	ldr	r3, [pc, #72]	@ (800552c <vPortExitCritical+0x50>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <vPortExitCritical+0x26>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	607b      	str	r3, [r7, #4]
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	e7fd      	b.n	80054fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005502:	4b0a      	ldr	r3, [pc, #40]	@ (800552c <vPortExitCritical+0x50>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3b01      	subs	r3, #1
 8005508:	4a08      	ldr	r2, [pc, #32]	@ (800552c <vPortExitCritical+0x50>)
 800550a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800550c:	4b07      	ldr	r3, [pc, #28]	@ (800552c <vPortExitCritical+0x50>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <vPortExitCritical+0x44>
 8005514:	2300      	movs	r3, #0
 8005516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f383 8811 	msr	BASEPRI, r3
}
 800551e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000000c 	.word	0x2000000c

08005530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005530:	f3ef 8009 	mrs	r0, PSP
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	4b15      	ldr	r3, [pc, #84]	@ (8005590 <pxCurrentTCBConst>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	f01e 0f10 	tst.w	lr, #16
 8005540:	bf08      	it	eq
 8005542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554a:	6010      	str	r0, [r2, #0]
 800554c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005554:	f380 8811 	msr	BASEPRI, r0
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f7fe ffa2 	bl	80044a8 <vTaskSwitchContext>
 8005564:	f04f 0000 	mov.w	r0, #0
 8005568:	f380 8811 	msr	BASEPRI, r0
 800556c:	bc09      	pop	{r0, r3}
 800556e:	6819      	ldr	r1, [r3, #0]
 8005570:	6808      	ldr	r0, [r1, #0]
 8005572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005576:	f01e 0f10 	tst.w	lr, #16
 800557a:	bf08      	it	eq
 800557c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005580:	f380 8809 	msr	PSP, r0
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	f3af 8000 	nop.w

08005590 <pxCurrentTCBConst>:
 8005590:	20000894 	.word	0x20000894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop

08005598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	607b      	str	r3, [r7, #4]
}
 80055b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055b2:	f7fe febf 	bl	8004334 <xTaskIncrementTick>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <xPortSysTickHandler+0x40>)
 80055be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f383 8811 	msr	BASEPRI, r3
}
 80055ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <vPortSetupTimerInterrupt+0x34>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <vPortSetupTimerInterrupt+0x38>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <vPortSetupTimerInterrupt+0x3c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	@ (800561c <vPortSetupTimerInterrupt+0x40>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	099b      	lsrs	r3, r3, #6
 80055f8:	4a09      	ldr	r2, [pc, #36]	@ (8005620 <vPortSetupTimerInterrupt+0x44>)
 80055fa:	3b01      	subs	r3, #1
 80055fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055fe:	4b04      	ldr	r3, [pc, #16]	@ (8005610 <vPortSetupTimerInterrupt+0x34>)
 8005600:	2207      	movs	r2, #7
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	e000e010 	.word	0xe000e010
 8005614:	e000e018 	.word	0xe000e018
 8005618:	20000000 	.word	0x20000000
 800561c:	10624dd3 	.word	0x10624dd3
 8005620:	e000e014 	.word	0xe000e014

08005624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005634 <vPortEnableVFP+0x10>
 8005628:	6801      	ldr	r1, [r0, #0]
 800562a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800562e:	6001      	str	r1, [r0, #0]
 8005630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005632:	bf00      	nop
 8005634:	e000ed88 	.word	0xe000ed88

08005638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800563e:	f3ef 8305 	mrs	r3, IPSR
 8005642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b0f      	cmp	r3, #15
 8005648:	d915      	bls.n	8005676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800564a:	4a18      	ldr	r2, [pc, #96]	@ (80056ac <vPortValidateInterruptPriority+0x74>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005654:	4b16      	ldr	r3, [pc, #88]	@ (80056b0 <vPortValidateInterruptPriority+0x78>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	7afa      	ldrb	r2, [r7, #11]
 800565a:	429a      	cmp	r2, r3
 800565c:	d20b      	bcs.n	8005676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	607b      	str	r3, [r7, #4]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005676:	4b0f      	ldr	r3, [pc, #60]	@ (80056b4 <vPortValidateInterruptPriority+0x7c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800567e:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <vPortValidateInterruptPriority+0x80>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d90b      	bls.n	800569e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	603b      	str	r3, [r7, #0]
}
 8005698:	bf00      	nop
 800569a:	bf00      	nop
 800569c:	e7fd      	b.n	800569a <vPortValidateInterruptPriority+0x62>
	}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	e000e3f0 	.word	0xe000e3f0
 80056b0:	20000ec0 	.word	0x20000ec0
 80056b4:	e000ed0c 	.word	0xe000ed0c
 80056b8:	20000ec4 	.word	0x20000ec4

080056bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	@ 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056c8:	f7fe fd78 	bl	80041bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005840 <pvPortMalloc+0x184>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056d4:	f000 f924 	bl	8005920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005844 <pvPortMalloc+0x188>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f040 8095 	bne.w	8005810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01e      	beq.n	800572a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80056ec:	2208      	movs	r2, #8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f023 0307 	bic.w	r3, r3, #7
 8005704:	3308      	adds	r3, #8
 8005706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <pvPortMalloc+0x6e>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	617b      	str	r3, [r7, #20]
}
 8005724:	bf00      	nop
 8005726:	bf00      	nop
 8005728:	e7fd      	b.n	8005726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d06f      	beq.n	8005810 <pvPortMalloc+0x154>
 8005730:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <pvPortMalloc+0x18c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	429a      	cmp	r2, r3
 8005738:	d86a      	bhi.n	8005810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800573a:	4b44      	ldr	r3, [pc, #272]	@ (800584c <pvPortMalloc+0x190>)
 800573c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800573e:	4b43      	ldr	r3, [pc, #268]	@ (800584c <pvPortMalloc+0x190>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005744:	e004      	b.n	8005750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d903      	bls.n	8005762 <pvPortMalloc+0xa6>
 800575a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1f1      	bne.n	8005746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005762:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <pvPortMalloc+0x184>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005768:	429a      	cmp	r2, r3
 800576a:	d051      	beq.n	8005810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	4413      	add	r3, r2
 8005774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1ad2      	subs	r2, r2, r3
 8005786:	2308      	movs	r3, #8
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	429a      	cmp	r2, r3
 800578c:	d920      	bls.n	80057d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4413      	add	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <pvPortMalloc+0xfc>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	e7fd      	b.n	80057b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad2      	subs	r2, r2, r3
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057ca:	69b8      	ldr	r0, [r7, #24]
 80057cc:	f000 f90a 	bl	80059e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005848 <pvPortMalloc+0x18c>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	4a1b      	ldr	r2, [pc, #108]	@ (8005848 <pvPortMalloc+0x18c>)
 80057dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057de:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <pvPortMalloc+0x18c>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005850 <pvPortMalloc+0x194>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d203      	bcs.n	80057f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057ea:	4b17      	ldr	r3, [pc, #92]	@ (8005848 <pvPortMalloc+0x18c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <pvPortMalloc+0x194>)
 80057f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <pvPortMalloc+0x188>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005806:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <pvPortMalloc+0x198>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	4a11      	ldr	r2, [pc, #68]	@ (8005854 <pvPortMalloc+0x198>)
 800580e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005810:	f7fe fce2 	bl	80041d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <pvPortMalloc+0x17a>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	60fb      	str	r3, [r7, #12]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <pvPortMalloc+0x176>
	return pvReturn;
 8005836:	69fb      	ldr	r3, [r7, #28]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3728      	adds	r7, #40	@ 0x28
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20004ad0 	.word	0x20004ad0
 8005844:	20004ae4 	.word	0x20004ae4
 8005848:	20004ad4 	.word	0x20004ad4
 800584c:	20004ac8 	.word	0x20004ac8
 8005850:	20004ad8 	.word	0x20004ad8
 8005854:	20004adc 	.word	0x20004adc

08005858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d04f      	beq.n	800590a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800586a:	2308      	movs	r3, #8
 800586c:	425b      	negs	r3, r3
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	4413      	add	r3, r2
 8005872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <vPortFree+0xbc>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <vPortFree+0x46>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	60fb      	str	r3, [r7, #12]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <vPortFree+0x66>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60bb      	str	r3, [r7, #8]
}
 80058b8:	bf00      	nop
 80058ba:	bf00      	nop
 80058bc:	e7fd      	b.n	80058ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	4b14      	ldr	r3, [pc, #80]	@ (8005914 <vPortFree+0xbc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01e      	beq.n	800590a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11a      	bne.n	800590a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005914 <vPortFree+0xbc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	43db      	mvns	r3, r3
 80058de:	401a      	ands	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058e4:	f7fe fc6a 	bl	80041bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005918 <vPortFree+0xc0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4413      	add	r3, r2
 80058f2:	4a09      	ldr	r2, [pc, #36]	@ (8005918 <vPortFree+0xc0>)
 80058f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058f6:	6938      	ldr	r0, [r7, #16]
 80058f8:	f000 f874 	bl	80059e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <vPortFree+0xc4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	4a06      	ldr	r2, [pc, #24]	@ (800591c <vPortFree+0xc4>)
 8005904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005906:	f7fe fc67 	bl	80041d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800590a:	bf00      	nop
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20004ae4 	.word	0x20004ae4
 8005918:	20004ad4 	.word	0x20004ad4
 800591c:	20004ae0 	.word	0x20004ae0

08005920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005926:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800592a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800592c:	4b27      	ldr	r3, [pc, #156]	@ (80059cc <prvHeapInit+0xac>)
 800592e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00c      	beq.n	8005954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3307      	adds	r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0307 	bic.w	r3, r3, #7
 8005946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	4a1f      	ldr	r2, [pc, #124]	@ (80059cc <prvHeapInit+0xac>)
 8005950:	4413      	add	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005958:	4a1d      	ldr	r2, [pc, #116]	@ (80059d0 <prvHeapInit+0xb0>)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800595e:	4b1c      	ldr	r3, [pc, #112]	@ (80059d0 <prvHeapInit+0xb0>)
 8005960:	2200      	movs	r2, #0
 8005962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	4413      	add	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800596c:	2208      	movs	r2, #8
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1a9b      	subs	r3, r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0307 	bic.w	r3, r3, #7
 800597a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <prvHeapInit+0xb4>)
 8005980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005982:	4b14      	ldr	r3, [pc, #80]	@ (80059d4 <prvHeapInit+0xb4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2200      	movs	r2, #0
 8005988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800598a:	4b12      	ldr	r3, [pc, #72]	@ (80059d4 <prvHeapInit+0xb4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059a0:	4b0c      	ldr	r3, [pc, #48]	@ (80059d4 <prvHeapInit+0xb4>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a0a      	ldr	r2, [pc, #40]	@ (80059d8 <prvHeapInit+0xb8>)
 80059ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a09      	ldr	r2, [pc, #36]	@ (80059dc <prvHeapInit+0xbc>)
 80059b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059b8:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <prvHeapInit+0xc0>)
 80059ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80059be:	601a      	str	r2, [r3, #0]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000ec8 	.word	0x20000ec8
 80059d0:	20004ac8 	.word	0x20004ac8
 80059d4:	20004ad0 	.word	0x20004ad0
 80059d8:	20004ad8 	.word	0x20004ad8
 80059dc:	20004ad4 	.word	0x20004ad4
 80059e0:	20004ae4 	.word	0x20004ae4

080059e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059ec:	4b28      	ldr	r3, [pc, #160]	@ (8005a90 <prvInsertBlockIntoFreeList+0xac>)
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e002      	b.n	80059f8 <prvInsertBlockIntoFreeList+0x14>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d8f7      	bhi.n	80059f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d108      	bne.n	8005a26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	441a      	add	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	441a      	add	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d118      	bne.n	8005a6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b15      	ldr	r3, [pc, #84]	@ (8005a94 <prvInsertBlockIntoFreeList+0xb0>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d00d      	beq.n	8005a62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	e008      	b.n	8005a74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a62:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <prvInsertBlockIntoFreeList+0xb0>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e003      	b.n	8005a74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d002      	beq.n	8005a82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20004ac8 	.word	0x20004ac8
 8005a94:	20004ad0 	.word	0x20004ad0

08005a98 <memset>:
 8005a98:	4402      	add	r2, r0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d100      	bne.n	8005aa2 <memset+0xa>
 8005aa0:	4770      	bx	lr
 8005aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa6:	e7f9      	b.n	8005a9c <memset+0x4>

08005aa8 <_reclaim_reent>:
 8005aa8:	4b29      	ldr	r3, [pc, #164]	@ (8005b50 <_reclaim_reent+0xa8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4283      	cmp	r3, r0
 8005aae:	b570      	push	{r4, r5, r6, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	d04b      	beq.n	8005b4c <_reclaim_reent+0xa4>
 8005ab4:	69c3      	ldr	r3, [r0, #28]
 8005ab6:	b1ab      	cbz	r3, 8005ae4 <_reclaim_reent+0x3c>
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	b16b      	cbz	r3, 8005ad8 <_reclaim_reent+0x30>
 8005abc:	2500      	movs	r5, #0
 8005abe:	69e3      	ldr	r3, [r4, #28]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	5959      	ldr	r1, [r3, r5]
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	d13b      	bne.n	8005b40 <_reclaim_reent+0x98>
 8005ac8:	3504      	adds	r5, #4
 8005aca:	2d80      	cmp	r5, #128	@ 0x80
 8005acc:	d1f7      	bne.n	8005abe <_reclaim_reent+0x16>
 8005ace:	69e3      	ldr	r3, [r4, #28]
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	68d9      	ldr	r1, [r3, #12]
 8005ad4:	f000 f872 	bl	8005bbc <_free_r>
 8005ad8:	69e3      	ldr	r3, [r4, #28]
 8005ada:	6819      	ldr	r1, [r3, #0]
 8005adc:	b111      	cbz	r1, 8005ae4 <_reclaim_reent+0x3c>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f000 f86c 	bl	8005bbc <_free_r>
 8005ae4:	6961      	ldr	r1, [r4, #20]
 8005ae6:	b111      	cbz	r1, 8005aee <_reclaim_reent+0x46>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f867 	bl	8005bbc <_free_r>
 8005aee:	69e1      	ldr	r1, [r4, #28]
 8005af0:	b111      	cbz	r1, 8005af8 <_reclaim_reent+0x50>
 8005af2:	4620      	mov	r0, r4
 8005af4:	f000 f862 	bl	8005bbc <_free_r>
 8005af8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005afa:	b111      	cbz	r1, 8005b02 <_reclaim_reent+0x5a>
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 f85d 	bl	8005bbc <_free_r>
 8005b02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b04:	b111      	cbz	r1, 8005b0c <_reclaim_reent+0x64>
 8005b06:	4620      	mov	r0, r4
 8005b08:	f000 f858 	bl	8005bbc <_free_r>
 8005b0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b0e:	b111      	cbz	r1, 8005b16 <_reclaim_reent+0x6e>
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 f853 	bl	8005bbc <_free_r>
 8005b16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b18:	b111      	cbz	r1, 8005b20 <_reclaim_reent+0x78>
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f84e 	bl	8005bbc <_free_r>
 8005b20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b22:	b111      	cbz	r1, 8005b2a <_reclaim_reent+0x82>
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 f849 	bl	8005bbc <_free_r>
 8005b2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b2c:	b111      	cbz	r1, 8005b34 <_reclaim_reent+0x8c>
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 f844 	bl	8005bbc <_free_r>
 8005b34:	6a23      	ldr	r3, [r4, #32]
 8005b36:	b14b      	cbz	r3, 8005b4c <_reclaim_reent+0xa4>
 8005b38:	4620      	mov	r0, r4
 8005b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b3e:	4718      	bx	r3
 8005b40:	680e      	ldr	r6, [r1, #0]
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 f83a 	bl	8005bbc <_free_r>
 8005b48:	4631      	mov	r1, r6
 8005b4a:	e7bb      	b.n	8005ac4 <_reclaim_reent+0x1c>
 8005b4c:	bd70      	pop	{r4, r5, r6, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000010 	.word	0x20000010

08005b54 <__libc_init_array>:
 8005b54:	b570      	push	{r4, r5, r6, lr}
 8005b56:	4d0d      	ldr	r5, [pc, #52]	@ (8005b8c <__libc_init_array+0x38>)
 8005b58:	4c0d      	ldr	r4, [pc, #52]	@ (8005b90 <__libc_init_array+0x3c>)
 8005b5a:	1b64      	subs	r4, r4, r5
 8005b5c:	10a4      	asrs	r4, r4, #2
 8005b5e:	2600      	movs	r6, #0
 8005b60:	42a6      	cmp	r6, r4
 8005b62:	d109      	bne.n	8005b78 <__libc_init_array+0x24>
 8005b64:	4d0b      	ldr	r5, [pc, #44]	@ (8005b94 <__libc_init_array+0x40>)
 8005b66:	4c0c      	ldr	r4, [pc, #48]	@ (8005b98 <__libc_init_array+0x44>)
 8005b68:	f000 f87e 	bl	8005c68 <_init>
 8005b6c:	1b64      	subs	r4, r4, r5
 8005b6e:	10a4      	asrs	r4, r4, #2
 8005b70:	2600      	movs	r6, #0
 8005b72:	42a6      	cmp	r6, r4
 8005b74:	d105      	bne.n	8005b82 <__libc_init_array+0x2e>
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7c:	4798      	blx	r3
 8005b7e:	3601      	adds	r6, #1
 8005b80:	e7ee      	b.n	8005b60 <__libc_init_array+0xc>
 8005b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b86:	4798      	blx	r3
 8005b88:	3601      	adds	r6, #1
 8005b8a:	e7f2      	b.n	8005b72 <__libc_init_array+0x1e>
 8005b8c:	08005d28 	.word	0x08005d28
 8005b90:	08005d28 	.word	0x08005d28
 8005b94:	08005d28 	.word	0x08005d28
 8005b98:	08005d2c 	.word	0x08005d2c

08005b9c <__retarget_lock_acquire_recursive>:
 8005b9c:	4770      	bx	lr

08005b9e <__retarget_lock_release_recursive>:
 8005b9e:	4770      	bx	lr

08005ba0 <memcpy>:
 8005ba0:	440a      	add	r2, r1
 8005ba2:	4291      	cmp	r1, r2
 8005ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ba8:	d100      	bne.n	8005bac <memcpy+0xc>
 8005baa:	4770      	bx	lr
 8005bac:	b510      	push	{r4, lr}
 8005bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb6:	4291      	cmp	r1, r2
 8005bb8:	d1f9      	bne.n	8005bae <memcpy+0xe>
 8005bba:	bd10      	pop	{r4, pc}

08005bbc <_free_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	2900      	cmp	r1, #0
 8005bc2:	d041      	beq.n	8005c48 <_free_r+0x8c>
 8005bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc8:	1f0c      	subs	r4, r1, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bfb8      	it	lt
 8005bce:	18e4      	addlt	r4, r4, r3
 8005bd0:	f000 f83e 	bl	8005c50 <__malloc_lock>
 8005bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c4c <_free_r+0x90>)
 8005bd6:	6813      	ldr	r3, [r2, #0]
 8005bd8:	b933      	cbnz	r3, 8005be8 <_free_r+0x2c>
 8005bda:	6063      	str	r3, [r4, #4]
 8005bdc:	6014      	str	r4, [r2, #0]
 8005bde:	4628      	mov	r0, r5
 8005be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be4:	f000 b83a 	b.w	8005c5c <__malloc_unlock>
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d908      	bls.n	8005bfe <_free_r+0x42>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	1821      	adds	r1, r4, r0
 8005bf0:	428b      	cmp	r3, r1
 8005bf2:	bf01      	itttt	eq
 8005bf4:	6819      	ldreq	r1, [r3, #0]
 8005bf6:	685b      	ldreq	r3, [r3, #4]
 8005bf8:	1809      	addeq	r1, r1, r0
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	e7ed      	b.n	8005bda <_free_r+0x1e>
 8005bfe:	461a      	mov	r2, r3
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b10b      	cbz	r3, 8005c08 <_free_r+0x4c>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d9fa      	bls.n	8005bfe <_free_r+0x42>
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	1850      	adds	r0, r2, r1
 8005c0c:	42a0      	cmp	r0, r4
 8005c0e:	d10b      	bne.n	8005c28 <_free_r+0x6c>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	4401      	add	r1, r0
 8005c14:	1850      	adds	r0, r2, r1
 8005c16:	4283      	cmp	r3, r0
 8005c18:	6011      	str	r1, [r2, #0]
 8005c1a:	d1e0      	bne.n	8005bde <_free_r+0x22>
 8005c1c:	6818      	ldr	r0, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	6053      	str	r3, [r2, #4]
 8005c22:	4408      	add	r0, r1
 8005c24:	6010      	str	r0, [r2, #0]
 8005c26:	e7da      	b.n	8005bde <_free_r+0x22>
 8005c28:	d902      	bls.n	8005c30 <_free_r+0x74>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	602b      	str	r3, [r5, #0]
 8005c2e:	e7d6      	b.n	8005bde <_free_r+0x22>
 8005c30:	6820      	ldr	r0, [r4, #0]
 8005c32:	1821      	adds	r1, r4, r0
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf04      	itt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	6063      	str	r3, [r4, #4]
 8005c3e:	bf04      	itt	eq
 8005c40:	1809      	addeq	r1, r1, r0
 8005c42:	6021      	streq	r1, [r4, #0]
 8005c44:	6054      	str	r4, [r2, #4]
 8005c46:	e7ca      	b.n	8005bde <_free_r+0x22>
 8005c48:	bd38      	pop	{r3, r4, r5, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20004c24 	.word	0x20004c24

08005c50 <__malloc_lock>:
 8005c50:	4801      	ldr	r0, [pc, #4]	@ (8005c58 <__malloc_lock+0x8>)
 8005c52:	f7ff bfa3 	b.w	8005b9c <__retarget_lock_acquire_recursive>
 8005c56:	bf00      	nop
 8005c58:	20004c20 	.word	0x20004c20

08005c5c <__malloc_unlock>:
 8005c5c:	4801      	ldr	r0, [pc, #4]	@ (8005c64 <__malloc_unlock+0x8>)
 8005c5e:	f7ff bf9e 	b.w	8005b9e <__retarget_lock_release_recursive>
 8005c62:	bf00      	nop
 8005c64:	20004c20 	.word	0x20004c20

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
