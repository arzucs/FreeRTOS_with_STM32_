
freeRTOS_SEGGER_alma_DMU_CanBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006778  08006778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006908  08006908  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006908  08006908  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007298  20000060  08006970  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200072f8  08006970  000272f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017979  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031ad  00000000  00000000  00037a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  0003ac00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e32  00000000  00000000  0003beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004162  00000000  00000000  0003cce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014db3  00000000  00000000  00040e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5676  00000000  00000000  00055bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050ec  00000000  00000000  0013b270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000be  00000000  00000000  0014035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006760 	.word	0x08006760

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006760 	.word	0x08006760

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20004be4 	.word	0x20004be4

080002a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	SEGGER_SYSVIEW_Conf();
 80002aa:	f004 fccd 	bl	8004c48 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80002ae:	f005 fc61 	bl	8005b74 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fbb5 	bl	8000a20 <HAL_Init>

  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
SystemCoreClockUpdate();
 80002b6:	f000 fb09 	bl	80008cc <SystemCoreClockUpdate>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f931 	bl	8000520 <MX_GPIO_Init>
  MX_CAN1_Init();
 80002be:	f000 f8cf 	bl	8000460 <MX_CAN1_Init>
  MX_ADC1_Init();
 80002c2:	f000 f87b 	bl	80003bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    // start can communication
  HAL_CAN_Start(&hcan1);
 80002c6:	4834      	ldr	r0, [pc, #208]	; (8000398 <main+0xf4>)
 80002c8:	f001 f86a 	bl	80013a0 <HAL_CAN_Start>

  /* Start the CAN peripheral */

  /* Activate CAN RX notification */
    // set transmit parameter
  amp1.pTxHeader.DLC =8; // 8 bit =1byte
 80002cc:	4b33      	ldr	r3, [pc, #204]	; (800039c <main+0xf8>)
 80002ce:	2208      	movs	r2, #8
 80002d0:	611a      	str	r2, [r3, #16]
  amp1.pTxHeader.IDE = CAN_ID_STD ;
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <main+0xf8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  amp1.pTxHeader.RTR = CAN_RTR_DATA;
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <main+0xf8>)
 80002da:	2200      	movs	r2, #0
 80002dc:	60da      	str	r2, [r3, #12]
  amp1.pTxHeader.StdId = 0x0000;
 80002de:	4b2f      	ldr	r3, [pc, #188]	; (800039c <main+0xf8>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]

  amp1.RxHeader.StdId=0x0000;
 80002e4:	4b2d      	ldr	r3, [pc, #180]	; (800039c <main+0xf8>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	619a      	str	r2, [r3, #24]
  amp1.RxHeader.DLC=8;
 80002ea:	4b2c      	ldr	r3, [pc, #176]	; (800039c <main+0xf8>)
 80002ec:	2208      	movs	r2, #8
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
  amp1.RxHeader.IDE=CAN_ID_STD;
 80002f0:	4b2a      	ldr	r3, [pc, #168]	; (800039c <main+0xf8>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	621a      	str	r2, [r3, #32]
  amp1.RxHeader.RTR=CAN_RTR_DATA;
 80002f6:	4b29      	ldr	r3, [pc, #164]	; (800039c <main+0xf8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002fc:	2102      	movs	r1, #2
 80002fe:	4826      	ldr	r0, [pc, #152]	; (8000398 <main+0xf4>)
 8000300:	f001 f9a4 	bl	800164c <HAL_CAN_ActivateNotification>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000304:	2102      	movs	r1, #2
 8000306:	4824      	ldr	r0, [pc, #144]	; (8000398 <main+0xf4>)
 8000308:	f001 f9a0 	bl	800164c <HAL_CAN_ActivateNotification>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <main+0x72>
  {
    Error_Handler();
 8000312:	f000 f9d5 	bl	80006c0 <Error_Handler>
  }
  sFilterConfig.FilterBank = 0;
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <main+0xfc>)
 8000318:	2200      	movs	r2, #0
 800031a:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800031c:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <main+0xfc>)
 800031e:	2200      	movs	r2, #0
 8000320:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <main+0xfc>)
 8000324:	2201      	movs	r2, #1
 8000326:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000328:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <main+0xfc>)
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <main+0xfc>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh =0x0000; // 0xFFF0- 0x0150 dersek yine aynı şeyi yapar
 8000334:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <main+0xfc>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <main+0xfc>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <main+0xfc>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000346:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <main+0xfc>)
 8000348:	2201      	movs	r2, #1
 800034a:	621a      	str	r2, [r3, #32]
//  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800034c:	4914      	ldr	r1, [pc, #80]	; (80003a0 <main+0xfc>)
 800034e:	4812      	ldr	r0, [pc, #72]	; (8000398 <main+0xf4>)
 8000350:	f000 ff46 	bl	80011e0 <HAL_CAN_ConfigFilter>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <main+0xba>
  {
    Error_Handler();
 800035a:	f000 f9b1 	bl	80006c0 <Error_Handler>
  }
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800035e:	4910      	ldr	r1, [pc, #64]	; (80003a0 <main+0xfc>)
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <main+0xf4>)
 8000362:	f000 ff3d 	bl	80011e0 <HAL_CAN_ConfigFilter>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000366:	f001 fe87 	bl	8002078 <osKernelInitialize>
  /* creation of myTask03 */
//  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(StartDefaultTask,"myTask01",configMINIMAL_STACK_SIZE, NULL, 4, &defaultTask_attributes);
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <main+0x100>)
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2304      	movs	r3, #4
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	2300      	movs	r3, #0
 8000374:	2280      	movs	r2, #128	; 0x80
 8000376:	490c      	ldr	r1, [pc, #48]	; (80003a8 <main+0x104>)
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <main+0x108>)
 800037a:	f002 fd68 	bl	8002e4e <xTaskCreate>
  xTaskCreate(StartTask02,"myTask02",configMINIMAL_STACK_SIZE, NULL, 4, &myTask02_attributes);
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <main+0x10c>)
 8000380:	9301      	str	r3, [sp, #4]
 8000382:	2304      	movs	r3, #4
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2300      	movs	r3, #0
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	490a      	ldr	r1, [pc, #40]	; (80003b4 <main+0x110>)
 800038c:	480a      	ldr	r0, [pc, #40]	; (80003b8 <main+0x114>)
 800038e:	f002 fd5e 	bl	8002e4e <xTaskCreate>
  /* Start scheduler */

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 8000392:	f002 ff0d 	bl	80031b0 <vTaskStartScheduler>

  while (1)
 8000396:	e7fe      	b.n	8000396 <main+0xf2>
 8000398:	200000ec 	.word	0x200000ec
 800039c:	20000114 	.word	0x20000114
 80003a0:	2000007c 	.word	0x2000007c
 80003a4:	08006888 	.word	0x08006888
 80003a8:	0800679c 	.word	0x0800679c
 80003ac:	08000689 	.word	0x08000689
 80003b0:	080068ac 	.word	0x080068ac
 80003b4:	08006784 	.word	0x08006784
 80003b8:	08000695 	.word	0x08000695

080003bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_ADC1_Init+0x98>)
 80003d0:	4a21      	ldr	r2, [pc, #132]	; (8000458 <MX_ADC1_Init+0x9c>)
 80003d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003d4:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <MX_ADC1_Init+0x98>)
 80003d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <MX_ADC1_Init+0x98>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <MX_ADC1_Init+0x98>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <MX_ADC1_Init+0x98>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ee:	4b19      	ldr	r3, [pc, #100]	; (8000454 <MX_ADC1_Init+0x98>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <MX_ADC1_Init+0x98>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_ADC1_Init+0x98>)
 80003fe:	4a17      	ldr	r2, [pc, #92]	; (800045c <MX_ADC1_Init+0xa0>)
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_ADC1_Init+0x98>)
 8000404:	2200      	movs	r2, #0
 8000406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_ADC1_Init+0x98>)
 800040a:	2201      	movs	r2, #1
 800040c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_ADC1_Init+0x98>)
 8000410:	2200      	movs	r2, #0
 8000412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_ADC1_Init+0x98>)
 8000418:	2201      	movs	r2, #1
 800041a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800041c:	480d      	ldr	r0, [pc, #52]	; (8000454 <MX_ADC1_Init+0x98>)
 800041e:	f000 fb71 	bl	8000b04 <HAL_ADC_Init>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000428:	f000 f94a 	bl	80006c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800042c:	2300      	movs	r3, #0
 800042e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000430:	2301      	movs	r3, #1
 8000432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000434:	2300      	movs	r3, #0
 8000436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	4619      	mov	r1, r3
 800043c:	4805      	ldr	r0, [pc, #20]	; (8000454 <MX_ADC1_Init+0x98>)
 800043e:	f000 fba5 	bl	8000b8c <HAL_ADC_ConfigChannel>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000448:	f000 f93a 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044c:	bf00      	nop
 800044e:	3710      	adds	r7, #16
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	200000a4 	.word	0x200000a4
 8000458:	40012000 	.word	0x40012000
 800045c:	0f000001 	.word	0x0f000001

08000460 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000464:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_CAN1_Init+0xb4>)
 8000466:	4a2c      	ldr	r2, [pc, #176]	; (8000518 <MX_CAN1_Init+0xb8>)
 8000468:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <MX_CAN1_Init+0xb4>)
 800046c:	220c      	movs	r2, #12
 800046e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_CAN1_Init+0xb4>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000476:	4b27      	ldr	r3, [pc, #156]	; (8000514 <MX_CAN1_Init+0xb4>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 800047c:	4b25      	ldr	r3, [pc, #148]	; (8000514 <MX_CAN1_Init+0xb4>)
 800047e:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000482:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000484:	4b23      	ldr	r3, [pc, #140]	; (8000514 <MX_CAN1_Init+0xb4>)
 8000486:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800048a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800048c:	4b21      	ldr	r3, [pc, #132]	; (8000514 <MX_CAN1_Init+0xb4>)
 800048e:	2200      	movs	r2, #0
 8000490:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000492:	4b20      	ldr	r3, [pc, #128]	; (8000514 <MX_CAN1_Init+0xb4>)
 8000494:	2200      	movs	r2, #0
 8000496:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_CAN1_Init+0xb4>)
 800049a:	2200      	movs	r2, #0
 800049c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800049e:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <MX_CAN1_Init+0xb4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_CAN1_Init+0xb4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80004aa:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <MX_CAN1_Init+0xb4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80004b0:	4818      	ldr	r0, [pc, #96]	; (8000514 <MX_CAN1_Init+0xb4>)
 80004b2:	f000 fd99 	bl	8000fe8 <HAL_CAN_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80004bc:	f000 f900 	bl	80006c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	sFilterConfig.FilterBank = 0;                            // value between 0 to 13 for JUST Master Mode (CAN1)
 80004c0:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_CAN1_Init+0xbc>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;       // for filtering Identifiers
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <MX_CAN1_Init+0xbc>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;     // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <MX_CAN1_Init+0xbc>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh =0;         				  // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_CAN1_Init+0xbc>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;                   	 // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 80004d8:	4b10      	ldr	r3, [pc, #64]	; (800051c <MX_CAN1_Init+0xbc>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0;                 // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_CAN1_Init+0xbc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0;                 // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <MX_CAN1_Init+0xbc>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;// specify FIFO0 or FIFO1
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <MX_CAN1_Init+0xbc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;		 // Enable filtering
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <MX_CAN1_Init+0xbc>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_CAN1_Init+0xbc>)
 80004f8:	220e      	movs	r2, #14
 80004fa:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80004fc:	4907      	ldr	r1, [pc, #28]	; (800051c <MX_CAN1_Init+0xbc>)
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <MX_CAN1_Init+0xb4>)
 8000500:	f000 fe6e 	bl	80011e0 <HAL_CAN_ConfigFilter>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_CAN1_Init+0xae>
	  {
	    Error_Handler();
 800050a:	f000 f8d9 	bl	80006c0 <Error_Handler>
	  }

  /* USER CODE END CAN1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000ec 	.word	0x200000ec
 8000518:	40006400 	.word	0x40006400
 800051c:	2000007c 	.word	0x2000007c

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08c      	sub	sp, #48	; 0x30
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
 800053a:	4b45      	ldr	r3, [pc, #276]	; (8000650 <MX_GPIO_Init+0x130>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a44      	ldr	r2, [pc, #272]	; (8000650 <MX_GPIO_Init+0x130>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b42      	ldr	r3, [pc, #264]	; (8000650 <MX_GPIO_Init+0x130>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	61bb      	str	r3, [r7, #24]
 8000550:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <MX_GPIO_Init+0x130>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a3d      	ldr	r2, [pc, #244]	; (8000650 <MX_GPIO_Init+0x130>)
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <MX_GPIO_Init+0x130>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0320 	and.w	r3, r3, #32
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <MX_GPIO_Init+0x130>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a36      	ldr	r2, [pc, #216]	; (8000650 <MX_GPIO_Init+0x130>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b34      	ldr	r3, [pc, #208]	; (8000650 <MX_GPIO_Init+0x130>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000586:	613b      	str	r3, [r7, #16]
 8000588:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <MX_GPIO_Init+0x130>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2f      	ldr	r2, [pc, #188]	; (8000650 <MX_GPIO_Init+0x130>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_GPIO_Init+0x130>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_GPIO_Init+0x130>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a28      	ldr	r2, [pc, #160]	; (8000650 <MX_GPIO_Init+0x130>)
 80005b0:	f043 0310 	orr.w	r3, r3, #16
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_GPIO_Init+0x130>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0310 	and.w	r3, r3, #16
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MX_GPIO_Init+0x130>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a21      	ldr	r2, [pc, #132]	; (8000650 <MX_GPIO_Init+0x130>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_GPIO_Init+0x130>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <MX_GPIO_Init+0x134>)
 80005e6:	f001 fd2d 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2107      	movs	r1, #7
 80005ee:	481a      	ldr	r0, [pc, #104]	; (8000658 <MX_GPIO_Init+0x138>)
 80005f0:	f001 fd28 	bl	8002044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	4619      	mov	r1, r3
 800060c:	4811      	ldr	r0, [pc, #68]	; (8000654 <MX_GPIO_Init+0x134>)
 800060e:	f001 fb85 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000612:	2307      	movs	r3, #7
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <MX_GPIO_Init+0x138>)
 800062a:	f001 fb77 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800062e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <MX_GPIO_Init+0x13c>)
 8000644:	f001 fb6a 	bl	8001d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000648:	bf00      	nop
 800064a:	3730      	adds	r7, #48	; 0x30
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40020800 	.word	0x40020800
 8000658:	40021400 	.word	0x40021400
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData) == HAL_OK)
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800066a:	4a05      	ldr	r2, [pc, #20]	; (8000680 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800066c:	2100      	movs	r1, #0
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000670:	f000 feda 	bl	8001428 <HAL_CAN_GetRxMessage>
////		  HAL_Delay(500);
////		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
////		  HAL_Delay(500);
//
  }
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000150 	.word	0x20000150
 8000680:	2000012c 	.word	0x2000012c
 8000684:	200000ec 	.word	0x200000ec

08000688 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
 8000690:	e7fe      	b.n	8000690 <StartDefaultTask+0x8>
	...

08000694 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
//    HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);

//  /* Infinite loop */
  for(;;)
  {
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <StartTask02+0x20>)
 800069e:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <StartTask02+0x24>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4806      	ldr	r0, [pc, #24]	; (80006bc <StartTask02+0x28>)
 80006a4:	f000 fec0 	bl	8001428 <HAL_CAN_GetRxMessage>

  osDelay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f001 fd08 	bl	80020c0 <osDelay>
	  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);
 80006b0:	e7f4      	b.n	800069c <StartTask02+0x8>
 80006b2:	bf00      	nop
 80006b4:	20000150 	.word	0x20000150
 80006b8:	2000012c 	.word	0x2000012c
 80006bc:	200000ec 	.word	0x200000ec

080006c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c4:	b672      	cpsid	i
}
 80006c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006c8:	e7fe      	b.n	80006c8 <Error_Handler+0x8>
	...

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_MspInit+0x54>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <HAL_MspInit+0x54>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6453      	str	r3, [r2, #68]	; 0x44
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x54>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_MspInit+0x54>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <HAL_MspInit+0x54>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_MspInit+0x54>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	210f      	movs	r1, #15
 800070e:	f06f 0001 	mvn.w	r0, #1
 8000712:	f001 facc 	bl	8001cae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_ADC_MspInit+0x7c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d127      	bne.n	8000796 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <HAL_ADC_MspInit+0x80>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a15      	ldr	r2, [pc, #84]	; (80007a4 <HAL_ADC_MspInit+0x80>)
 8000750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <HAL_ADC_MspInit+0x80>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_ADC_MspInit+0x80>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_ADC_MspInit+0x80>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_ADC_MspInit+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800077e:	2301      	movs	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000782:	2303      	movs	r3, #3
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <HAL_ADC_MspInit+0x84>)
 8000792:	f001 fac3 	bl	8001d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012000 	.word	0x40012000
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020000 	.word	0x40020000

080007ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <HAL_CAN_MspInit+0x94>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d134      	bne.n	8000838 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <HAL_CAN_MspInit+0x98>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <HAL_CAN_MspInit+0x98>)
 80007d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <HAL_CAN_MspInit+0x98>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_CAN_MspInit+0x98>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_CAN_MspInit+0x98>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_CAN_MspInit+0x98>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800080a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000818:	2309      	movs	r3, #9
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <HAL_CAN_MspInit+0x9c>)
 8000824:	f001 fa7a 	bl	8001d1c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2105      	movs	r1, #5
 800082c:	2014      	movs	r0, #20
 800082e:	f001 fa3e 	bl	8001cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000832:	2014      	movs	r0, #20
 8000834:	f001 fa57 	bl	8001ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40006400 	.word	0x40006400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f922 	bl	8000ac4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000880:	f003 f966 	bl	8003b50 <xTaskGetSchedulerState>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d001      	beq.n	800088e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800088a:	f003 ff55 	bl	8004738 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <CAN1_RX0_IRQHandler+0x10>)
 800089a:	f000 fefd 	bl	8001698 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000ec 	.word	0x200000ec

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b087      	sub	sp, #28
 80008d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	2302      	movs	r3, #2
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	2302      	movs	r3, #2
 80008e4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80008e6:	4b34      	ldr	r3, [pc, #208]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f003 030c 	and.w	r3, r3, #12
 80008ee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d011      	beq.n	800091a <SystemCoreClockUpdate+0x4e>
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d844      	bhi.n	8000986 <SystemCoreClockUpdate+0xba>
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <SystemCoreClockUpdate+0x3e>
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d004      	beq.n	8000912 <SystemCoreClockUpdate+0x46>
 8000908:	e03d      	b.n	8000986 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800090a:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <SystemCoreClockUpdate+0xf0>)
 800090c:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <SystemCoreClockUpdate+0xf4>)
 800090e:	601a      	str	r2, [r3, #0]
      break;
 8000910:	e03d      	b.n	800098e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000912:	4b2a      	ldr	r3, [pc, #168]	; (80009bc <SystemCoreClockUpdate+0xf0>)
 8000914:	4a2b      	ldr	r2, [pc, #172]	; (80009c4 <SystemCoreClockUpdate+0xf8>)
 8000916:	601a      	str	r2, [r3, #0]
      break;
 8000918:	e039      	b.n	800098e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800091a:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	0d9b      	lsrs	r3, r3, #22
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800092e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d00c      	beq.n	8000950 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000936:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <SystemCoreClockUpdate+0xf8>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 8000940:	6852      	ldr	r2, [r2, #4]
 8000942:	0992      	lsrs	r2, r2, #6
 8000944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e00b      	b.n	8000968 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000950:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <SystemCoreClockUpdate+0xf4>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	fbb2 f3f3 	udiv	r3, r2, r3
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 800095a:	6852      	ldr	r2, [r2, #4]
 800095c:	0992      	lsrs	r2, r2, #6
 800095e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	0c1b      	lsrs	r3, r3, #16
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	3301      	adds	r3, #1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000978:	697a      	ldr	r2, [r7, #20]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <SystemCoreClockUpdate+0xf0>)
 8000982:	6013      	str	r3, [r2, #0]
      break;
 8000984:	e003      	b.n	800098e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <SystemCoreClockUpdate+0xf0>)
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <SystemCoreClockUpdate+0xf4>)
 800098a:	601a      	str	r2, [r3, #0]
      break;
 800098c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <SystemCoreClockUpdate+0xec>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	091b      	lsrs	r3, r3, #4
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <SystemCoreClockUpdate+0xfc>)
 800099a:	5cd3      	ldrb	r3, [r2, r3]
 800099c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <SystemCoreClockUpdate+0xf0>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	fa22 f303 	lsr.w	r3, r2, r3
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <SystemCoreClockUpdate+0xf0>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	371c      	adds	r7, #28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40023800 	.word	0x40023800
 80009bc:	20000000 	.word	0x20000000
 80009c0:	00f42400 	.word	0x00f42400
 80009c4:	007a1200 	.word	0x007a1200
 80009c8:	080068d0 	.word	0x080068d0

080009cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e8:	4c0b      	ldr	r4, [pc, #44]	; (8000a18 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009f6:	f7ff ff57 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fa:	f005 fe25 	bl	8006648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fe:	f7ff fc51 	bl	80002a4 <main>
  bx  lr    
 8000a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a0c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a10:	08006910 	.word	0x08006910
  ldr r2, =_sbss
 8000a14:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a18:	200072f8 	.word	0x200072f8

08000a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <ADC_IRQHandler>
	...

08000a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_Init+0x40>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_Init+0x40>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <HAL_Init+0x40>)
 8000a36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_Init+0x40>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f001 f925 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4e:	200f      	movs	r0, #15
 8000a50:	f000 f808 	bl	8000a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a54:	f7ff fe3a 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023c00 	.word	0x40023c00

08000a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x54>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x58>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f93d 	bl	8001d02 <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f001 f905 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x5c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000004 	.word	0x20000004

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000154 	.word	0x20000154

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000154 	.word	0x20000154

08000b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e033      	b.n	8000b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d109      	bne.n	8000b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fdfe 	bl	8000724 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 0310 	and.w	r3, r3, #16
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d118      	bne.n	8000b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4a:	f023 0302 	bic.w	r3, r3, #2
 8000b4e:	f043 0202 	orr.w	r2, r3, #2
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f94a 	bl	8000df0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f023 0303 	bic.w	r3, r3, #3
 8000b6a:	f043 0201 	orr.w	r2, r3, #1
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	641a      	str	r2, [r3, #64]	; 0x40
 8000b72:	e001      	b.n	8000b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ADC_ConfigChannel+0x1c>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e113      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x244>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	d925      	bls.n	8000c04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	68d9      	ldr	r1, [r3, #12]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	3b1e      	subs	r3, #30
 8000bce:	2207      	movs	r2, #7
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43da      	mvns	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	400a      	ands	r2, r1
 8000bdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68d9      	ldr	r1, [r3, #12]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4403      	add	r3, r0
 8000bf6:	3b1e      	subs	r3, #30
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	e022      	b.n	8000c4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6919      	ldr	r1, [r3, #16]
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	2207      	movs	r2, #7
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	400a      	ands	r2, r1
 8000c26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6919      	ldr	r1, [r3, #16]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4403      	add	r3, r0
 8000c40:	409a      	lsls	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d824      	bhi.n	8000c9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	3b05      	subs	r3, #5
 8000c64:	221f      	movs	r2, #31
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	3b05      	subs	r3, #5
 8000c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9a:	e04c      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b0c      	cmp	r3, #12
 8000ca2:	d824      	bhi.n	8000cee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	3b23      	subs	r3, #35	; 0x23
 8000cb6:	221f      	movs	r2, #31
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b23      	subs	r3, #35	; 0x23
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
 8000cec:	e023      	b.n	8000d36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	4413      	add	r3, r2
 8000cfe:	3b41      	subs	r3, #65	; 0x41
 8000d00:	221f      	movs	r2, #31
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	400a      	ands	r2, r1
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	3b41      	subs	r3, #65	; 0x41
 8000d2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_ADC_ConfigChannel+0x250>)
 8000d38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <HAL_ADC_ConfigChannel+0x254>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d10f      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x1d8>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b12      	cmp	r3, #18
 8000d4a:	d10b      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1d      	ldr	r2, [pc, #116]	; (8000de0 <HAL_ADC_ConfigChannel+0x254>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12b      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x23a>
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1c      	ldr	r2, [pc, #112]	; (8000de4 <HAL_ADC_ConfigChannel+0x258>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d003      	beq.n	8000d80 <HAL_ADC_ConfigChannel+0x1f4>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b11      	cmp	r3, #17
 8000d7e:	d122      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_ADC_ConfigChannel+0x258>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d111      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_ADC_ConfigChannel+0x25c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a11      	ldr	r2, [pc, #68]	; (8000dec <HAL_ADC_ConfigChannel+0x260>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9a      	lsrs	r2, r3, #18
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000db8:	e002      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40012300 	.word	0x40012300
 8000de0:	40012000 	.word	0x40012000
 8000de4:	10000012 	.word	0x10000012
 8000de8:	20000000 	.word	0x20000000
 8000dec:	431bde83 	.word	0x431bde83

08000df0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000df8:	4b79      	ldr	r3, [pc, #484]	; (8000fe0 <ADC_Init+0x1f0>)
 8000dfa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6859      	ldr	r1, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	021a      	lsls	r2, r3, #8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	430a      	orrs	r2, r1
 8000e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6899      	ldr	r1, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68da      	ldr	r2, [r3, #12]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e82:	4a58      	ldr	r2, [pc, #352]	; (8000fe4 <ADC_Init+0x1f4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d022      	beq.n	8000ece <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6899      	ldr	r1, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	430a      	orrs	r2, r1
 8000ea8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6899      	ldr	r1, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	e00f      	b.n	8000eee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0202 	bic.w	r2, r2, #2
 8000efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6899      	ldr	r1, [r3, #8]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e1b      	ldrb	r3, [r3, #24]
 8000f08:	005a      	lsls	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d01b      	beq.n	8000f54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6859      	ldr	r1, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	3b01      	subs	r3, #1
 8000f48:	035a      	lsls	r2, r3, #13
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	e007      	b.n	8000f64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	051a      	lsls	r2, r3, #20
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6899      	ldr	r1, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fa6:	025a      	lsls	r2, r3, #9
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6899      	ldr	r1, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	029a      	lsls	r2, r3, #10
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	609a      	str	r2, [r3, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40012300 	.word	0x40012300
 8000fe4:	0f000001 	.word	0x0f000001

08000fe8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0ed      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fbd0 	bl	80007ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff fd66 	bl	8000aec <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001022:	e012      	b.n	800104a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001024:	f7ff fd62 	bl	8000aec <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b0a      	cmp	r3, #10
 8001030:	d90b      	bls.n	800104a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2205      	movs	r2, #5
 8001042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0c5      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0e5      	beq.n	8001024 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0202 	bic.w	r2, r2, #2
 8001066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001068:	f7ff fd40 	bl	8000aec <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800106e:	e012      	b.n	8001096 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001070:	f7ff fd3c 	bl	8000aec <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b0a      	cmp	r3, #10
 800107c:	d90b      	bls.n	8001096 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2205      	movs	r2, #5
 800108e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e09f      	b.n	80011d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e5      	bne.n	8001070 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7e1b      	ldrb	r3, [r3, #24]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d108      	bne.n	80010be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e007      	b.n	80010ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7e5b      	ldrb	r3, [r3, #25]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e007      	b.n	80010f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7e9b      	ldrb	r3, [r3, #26]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d108      	bne.n	8001112 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0220 	orr.w	r2, r2, #32
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e007      	b.n	8001122 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0220 	bic.w	r2, r2, #32
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7edb      	ldrb	r3, [r3, #27]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0210 	bic.w	r2, r2, #16
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e007      	b.n	800114c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0210 	orr.w	r2, r2, #16
 800114a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7f1b      	ldrb	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0208 	orr.w	r2, r2, #8
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0208 	bic.w	r2, r2, #8
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7f5b      	ldrb	r3, [r3, #29]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	ea42 0103 	orr.w	r1, r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80011f8:	7cfb      	ldrb	r3, [r7, #19]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d003      	beq.n	8001206 <HAL_CAN_ConfigFilter+0x26>
 80011fe:	7cfb      	ldrb	r3, [r7, #19]
 8001200:	2b02      	cmp	r3, #2
 8001202:	f040 80be 	bne.w	8001382 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_CAN_ConfigFilter+0x1bc>)
 8001208:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001220:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	2201      	movs	r2, #1
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d123      	bne.n	80012b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800128a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3248      	adds	r2, #72	; 0x48
 8001290:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012a6:	6979      	ldr	r1, [r7, #20]
 80012a8:	3348      	adds	r3, #72	; 0x48
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d122      	bne.n	80012fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3248      	adds	r2, #72	; 0x48
 80012de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012f4:	6979      	ldr	r1, [r7, #20]
 80012f6:	3348      	adds	r3, #72	; 0x48
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	440b      	add	r3, r1
 80012fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d109      	bne.n	800131a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	401a      	ands	r2, r3
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001318:	e007      	b.n	800132a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	431a      	orrs	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	401a      	ands	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001344:	e007      	b.n	8001356 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	431a      	orrs	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d107      	bne.n	800136e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	431a      	orrs	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001374:	f023 0201 	bic.w	r2, r3, #1
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e006      	b.n	8001390 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40006400 	.word	0x40006400

080013a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d12e      	bne.n	8001412 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2202      	movs	r2, #2
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0201 	bic.w	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fb8e 	bl	8000aec <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013d2:	e012      	b.n	80013fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d4:	f7ff fb8a 	bl	8000aec <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b0a      	cmp	r3, #10
 80013e0:	d90b      	bls.n	80013fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2205      	movs	r2, #5
 80013f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e012      	b.n	8001420 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e5      	bne.n	80013d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e006      	b.n	8001420 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
  }
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d003      	beq.n	800144c <HAL_CAN_GetRxMessage+0x24>
 8001444:	7dfb      	ldrb	r3, [r7, #23]
 8001446:	2b02      	cmp	r3, #2
 8001448:	f040 80f3 	bne.w	8001632 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10e      	bne.n	8001470 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0303 	and.w	r3, r3, #3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d116      	bne.n	800148e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0e7      	b.n	8001640 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0d8      	b.n	8001640 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	331b      	adds	r3, #27
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	4413      	add	r3, r2
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0204 	and.w	r2, r3, #4
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10c      	bne.n	80014c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	331b      	adds	r3, #27
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0d5b      	lsrs	r3, r3, #21
 80014bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	e00b      	b.n	80014de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	331b      	adds	r3, #27
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	331b      	adds	r3, #27
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0202 	and.w	r2, r3, #2
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	331b      	adds	r3, #27
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	4413      	add	r3, r2
 8001500:	3304      	adds	r3, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 020f 	and.w	r2, r3, #15
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	331b      	adds	r3, #27
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	b2da      	uxtb	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	331b      	adds	r3, #27
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	3304      	adds	r3, #4
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	4413      	add	r3, r2
 800155c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	0a1a      	lsrs	r2, r3, #8
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	4413      	add	r3, r2
 8001576:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0c1a      	lsrs	r2, r3, #16
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3302      	adds	r3, #2
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0e1a      	lsrs	r2, r3, #24
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3303      	adds	r3, #3
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3304      	adds	r3, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0a1a      	lsrs	r2, r3, #8
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3305      	adds	r3, #5
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	0c1a      	lsrs	r2, r3, #16
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3306      	adds	r3, #6
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0e1a      	lsrs	r2, r3, #24
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	3307      	adds	r3, #7
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0220 	orr.w	r2, r2, #32
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	e007      	b.n	800162e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e006      	b.n	8001640 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d002      	beq.n	800166a <HAL_CAN_ActivateNotification+0x1e>
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d109      	bne.n	800167e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6959      	ldr	r1, [r3, #20]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e006      	b.n	800168c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d07c      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f983 	bl	8001a06 <HAL_CAN_TxMailbox0CompleteCallback>
 8001700:	e016      	b.n	8001730 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e00c      	b.n	8001730 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d004      	beq.n	800172a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
 8001728:	e002      	b.n	8001730 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f989 	bl	8001a42 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d024      	beq.n	8001784 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001742:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f963 	bl	8001a1a <HAL_CAN_TxMailbox1CompleteCallback>
 8001754:	e016      	b.n	8001784 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
 8001768:	e00c      	b.n	8001784 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001770:	2b00      	cmp	r3, #0
 8001772:	d004      	beq.n	800177e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
 800177c:	e002      	b.n	8001784 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f969 	bl	8001a56 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d024      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001796:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f943 	bl	8001a2e <HAL_CAN_TxMailbox2CompleteCallback>
 80017a8:	e016      	b.n	80017d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e00c      	b.n	80017d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	e002      	b.n	80017d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f949 	bl	8001a6a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00c      	beq.n	80017fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2210      	movs	r2, #16
 80017fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2208      	movs	r2, #8
 8001816:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f930 	bl	8001a7e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe ff12 	bl	8000660 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f912 	bl	8001aa6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d002      	beq.n	80018a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f8f9 	bl	8001a92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2210      	movs	r2, #16
 80018ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8fc 	bl	8001aba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2208      	movs	r2, #8
 80018dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f8f5 	bl	8001ace <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d07b      	beq.n	80019e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d072      	beq.n	80019de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f8:	6a3b      	ldr	r3, [r7, #32]
 80018fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f043 0302 	orr.w	r3, r3, #2
 800192e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001952:	2b00      	cmp	r3, #0
 8001954:	d043      	beq.n	80019de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03e      	beq.n	80019de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001966:	2b60      	cmp	r3, #96	; 0x60
 8001968:	d02b      	beq.n	80019c2 <HAL_CAN_IRQHandler+0x32a>
 800196a:	2b60      	cmp	r3, #96	; 0x60
 800196c:	d82e      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 800196e:	2b50      	cmp	r3, #80	; 0x50
 8001970:	d022      	beq.n	80019b8 <HAL_CAN_IRQHandler+0x320>
 8001972:	2b50      	cmp	r3, #80	; 0x50
 8001974:	d82a      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d019      	beq.n	80019ae <HAL_CAN_IRQHandler+0x316>
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d826      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 800197e:	2b30      	cmp	r3, #48	; 0x30
 8001980:	d010      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x30c>
 8001982:	2b30      	cmp	r3, #48	; 0x30
 8001984:	d822      	bhi.n	80019cc <HAL_CAN_IRQHandler+0x334>
 8001986:	2b10      	cmp	r3, #16
 8001988:	d002      	beq.n	8001990 <HAL_CAN_IRQHandler+0x2f8>
 800198a:	2b20      	cmp	r3, #32
 800198c:	d005      	beq.n	800199a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800198e:	e01d      	b.n	80019cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001998:	e019      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019a2:	e014      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	f043 0320 	orr.w	r3, r3, #32
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ac:	e00f      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019b6:	e00a      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019c0:	e005      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019ca:	e000      	b.n	80019ce <HAL_CAN_IRQHandler+0x336>
            break;
 80019cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699a      	ldr	r2, [r3, #24]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80019dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f872 	bl	8001ae2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
	...

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4907      	ldr	r1, [pc, #28]	; (8001b94 <__NVIC_EnableIRQ+0x38>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	; (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	; (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	; 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff8e 	bl	8001b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff29 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff3e 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff8e 	bl	8001bec <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff31 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ffa2 	bl	8001c54 <SysTick_Config>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e165      	b.n	8002004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8154 	bne.w	8001ffe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80ae 	beq.w	8001ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_GPIO_Init+0x300>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a5c      	ldr	r2, [pc, #368]	; (800201c <HAL_GPIO_Init+0x300>)
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b5a      	ldr	r3, [pc, #360]	; (800201c <HAL_GPIO_Init+0x300>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ebe:	4a58      	ldr	r2, [pc, #352]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	; (8002024 <HAL_GPIO_Init+0x308>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d025      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4e      	ldr	r2, [pc, #312]	; (8002028 <HAL_GPIO_Init+0x30c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01f      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4d      	ldr	r2, [pc, #308]	; (800202c <HAL_GPIO_Init+0x310>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d019      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4c      	ldr	r2, [pc, #304]	; (8002030 <HAL_GPIO_Init+0x314>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4b      	ldr	r2, [pc, #300]	; (8002034 <HAL_GPIO_Init+0x318>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00d      	beq.n	8001f26 <HAL_GPIO_Init+0x20a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a4a      	ldr	r2, [pc, #296]	; (8002038 <HAL_GPIO_Init+0x31c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_GPIO_Init+0x206>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_GPIO_Init+0x320>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_GPIO_Init+0x202>
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	e00c      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f1e:	2307      	movs	r3, #7
 8001f20:	e00a      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f22:	2305      	movs	r3, #5
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_Init+0x21c>
 8001f36:	2300      	movs	r3, #0
 8001f38:	69fa      	ldr	r2, [r7, #28]
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f48:	4935      	ldr	r1, [pc, #212]	; (8002020 <HAL_GPIO_Init+0x304>)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f7a:	4a31      	ldr	r2, [pc, #196]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff8:	4a11      	ldr	r2, [pc, #68]	; (8002040 <HAL_GPIO_Init+0x324>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3301      	adds	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	f67f ae96 	bls.w	8001d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800200c:	bf00      	nop
 800200e:	bf00      	nop
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	40013800 	.word	0x40013800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	40020800 	.word	0x40020800
 8002030:	40020c00 	.word	0x40020c00
 8002034:	40021000 	.word	0x40021000
 8002038:	40021400 	.word	0x40021400
 800203c:	40021800 	.word	0x40021800
 8002040:	40013c00 	.word	0x40013c00

08002044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	807b      	strh	r3, [r7, #2]
 8002050:	4613      	mov	r3, r2
 8002052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002054:	787b      	ldrb	r3, [r7, #1]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002060:	e003      	b.n	800206a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	041a      	lsls	r2, r3, #16
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	619a      	str	r2, [r3, #24]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800207e:	f3ef 8305 	mrs	r3, IPSR
 8002082:	603b      	str	r3, [r7, #0]
  return(result);
 8002084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800208a:	f06f 0305 	mvn.w	r3, #5
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	e00c      	b.n	80020ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <osKernelInitialize+0x44>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <osKernelInitialize+0x44>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	e002      	b.n	80020ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000158 	.word	0x20000158

080020c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c8:	f3ef 8305 	mrs	r3, IPSR
 80020cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80020ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <osDelay+0x1c>
    stat = osErrorISR;
 80020d4:	f06f 0305 	mvn.w	r3, #5
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e007      	b.n	80020ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f001 f82a 	bl	8003140 <vTaskDelay>
    }
  }

  return (stat);
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <vApplicationGetIdleTaskMemory+0x2c>)
 8002108:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <vApplicationGetIdleTaskMemory+0x30>)
 800210e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2280      	movs	r2, #128	; 0x80
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	2000015c 	.word	0x2000015c
 8002128:	20000204 	.word	0x20000204

0800212c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a07      	ldr	r2, [pc, #28]	; (8002158 <vApplicationGetTimerTaskMemory+0x2c>)
 800213c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <vApplicationGetTimerTaskMemory+0x30>)
 8002142:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20000404 	.word	0x20000404
 800215c:	200004ac 	.word	0x200004ac

08002160 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0208 	add.w	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f103 0208 	add.w	r2, r3, #8
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f103 0208 	add.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021ba:	b480      	push	{r7}
 80021bc:	b085      	sub	sp, #20
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d103      	bne.n	8002222 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e00c      	b.n	800223c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3308      	adds	r3, #8
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e002      	b.n	8002230 <vListInsert+0x2e>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	429a      	cmp	r2, r3
 800223a:	d2f6      	bcs.n	800222a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	601a      	str	r2, [r3, #0]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6892      	ldr	r2, [r2, #8]
 800228a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6852      	ldr	r2, [r2, #4]
 8002294:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	d103      	bne.n	80022a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	1e5a      	subs	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022f2:	f002 f98f 	bl	8004614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	68f9      	ldr	r1, [r7, #12]
 8002300:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	441a      	add	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	3b01      	subs	r3, #1
 8002324:	68f9      	ldr	r1, [r7, #12]
 8002326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	441a      	add	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	22ff      	movs	r2, #255	; 0xff
 8002336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	22ff      	movs	r2, #255	; 0xff
 800233e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d114      	bne.n	8002372 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01a      	beq.n	8002386 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	3310      	adds	r3, #16
 8002354:	4618      	mov	r0, r3
 8002356:	f001 f9fd 	bl	8003754 <xTaskRemoveFromEventList>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d012      	beq.n	8002386 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <xQueueGenericReset+0xcc>)
 8002362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	e009      	b.n	8002386 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3310      	adds	r3, #16
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fef2 	bl	8002160 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3324      	adds	r3, #36	; 0x24
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff feed 	bl	8002160 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002386:	f002 f975 	bl	8004674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	e000ed04 	.word	0xe000ed04

08002398 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08e      	sub	sp, #56	; 0x38
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023be:	bf00      	nop
 80023c0:	e7fe      	b.n	80023c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10a      	bne.n	80023de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023da:	bf00      	nop
 80023dc:	e7fe      	b.n	80023dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <xQueueGenericCreateStatic+0x52>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <xQueueGenericCreateStatic+0x56>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <xQueueGenericCreateStatic+0x58>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	623b      	str	r3, [r7, #32]
}
 8002406:	bf00      	nop
 8002408:	e7fe      	b.n	8002408 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <xQueueGenericCreateStatic+0x7e>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <xQueueGenericCreateStatic+0x82>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <xQueueGenericCreateStatic+0x84>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	61fb      	str	r3, [r7, #28]
}
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002436:	2350      	movs	r3, #80	; 0x50
 8002438:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b50      	cmp	r3, #80	; 0x50
 800243e:	d00a      	beq.n	8002456 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	61bb      	str	r3, [r7, #24]
}
 8002452:	bf00      	nop
 8002454:	e7fe      	b.n	8002454 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002456:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800246a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f805 	bl	8002488 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e002      	b.n	80024aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024b6:	2101      	movs	r1, #1
 80024b8:	69b8      	ldr	r0, [r7, #24]
 80024ba:	f7ff ff05 	bl	80022c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	2073      	movs	r0, #115	; 0x73
 80024ce:	f003 fa49 	bl	8005964 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b090      	sub	sp, #64	; 0x40
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
 80024e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10a      	bne.n	800250e <xQueueGenericSend+0x32>
	__asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800250a:	bf00      	nop
 800250c:	e7fe      	b.n	800250c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <xQueueGenericSend+0x40>
 8002514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <xQueueGenericSend+0x44>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <xQueueGenericSend+0x46>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <xQueueGenericSend+0x60>
	__asm volatile
 8002526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252a:	f383 8811 	msr	BASEPRI, r3
 800252e:	f3bf 8f6f 	isb	sy
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002538:	bf00      	nop
 800253a:	e7fe      	b.n	800253a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d103      	bne.n	800254a <xQueueGenericSend+0x6e>
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <xQueueGenericSend+0x72>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <xQueueGenericSend+0x74>
 800254e:	2300      	movs	r3, #0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <xQueueGenericSend+0x8e>
	__asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	623b      	str	r3, [r7, #32]
}
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800256a:	f001 faf1 	bl	8003b50 <xTaskGetSchedulerState>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <xQueueGenericSend+0x9e>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <xQueueGenericSend+0xa2>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <xQueueGenericSend+0xa4>
 800257e:	2300      	movs	r3, #0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueGenericSend+0xbe>
	__asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	61fb      	str	r3, [r7, #28]
}
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800259a:	f002 f83b 	bl	8004614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <xQueueGenericSend+0xd4>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d136      	bne.n	800261e <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 80025b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fe88 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	460b      	mov	r3, r1
 80025c2:	4601      	mov	r1, r0
 80025c4:	205a      	movs	r0, #90	; 0x5a
 80025c6:	f003 fa43 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d0:	f000 fa6a 	bl	8002aa8 <prvCopyDataToQueue>
 80025d4:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d010      	beq.n	8002600 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	3324      	adds	r3, #36	; 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 f8b6 	bl	8003754 <xTaskRemoveFromEventList>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d013      	beq.n	8002616 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025ee:	4b4d      	ldr	r3, [pc, #308]	; (8002724 <xQueueGenericSend+0x248>)
 80025f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f3bf 8f4f 	dsb	sy
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	e00a      	b.n	8002616 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002606:	4b47      	ldr	r3, [pc, #284]	; (8002724 <xQueueGenericSend+0x248>)
 8002608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002616:	f002 f82d 	bl	8004674 <vPortExitCritical>
				return pdPASS;
 800261a:	2301      	movs	r3, #1
 800261c:	e07d      	b.n	800271a <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d110      	bne.n	8002646 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002624:	f002 f826 	bl	8004674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fe4c 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	460b      	mov	r3, r1
 800263a:	4601      	mov	r1, r0
 800263c:	205a      	movs	r0, #90	; 0x5a
 800263e:	f003 fa07 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002642:	2300      	movs	r3, #0
 8002644:	e069      	b.n	800271a <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f8e7 	bl	8003824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002656:	2301      	movs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800265a:	f002 f80b 	bl	8004674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800265e:	f000 fe25 	bl	80032ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002662:	f001 ffd7 	bl	8004614 <vPortEnterCritical>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800266c:	b25b      	sxtb	r3, r3
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d103      	bne.n	800267c <xQueueGenericSend+0x1a0>
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <xQueueGenericSend+0x1b6>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002692:	f001 ffef 	bl	8004674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f8d6 	bl	8003850 <xTaskCheckForTimeOut>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d124      	bne.n	80026f4 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ac:	f000 faf4 	bl	8002c98 <prvIsQueueFull>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3310      	adds	r3, #16
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fff6 	bl	80036b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c6:	f000 fa7f 	bl	8002bc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026ca:	f000 fdfd 	bl	80032c8 <xTaskResumeAll>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f af62 	bne.w	800259a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <xQueueGenericSend+0x248>)
 80026d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	e758      	b.n	800259a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f000 fa6d 	bl	8002bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ee:	f000 fdeb 	bl	80032c8 <xTaskResumeAll>
 80026f2:	e752      	b.n	800259a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f6:	f000 fa67 	bl	8002bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026fa:	f000 fde5 	bl	80032c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fde1 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	460b      	mov	r3, r1
 8002710:	4601      	mov	r1, r0
 8002712:	205a      	movs	r0, #90	; 0x5a
 8002714:	f003 f99c 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8002718:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800271a:	4618      	mov	r0, r3
 800271c:	3738      	adds	r7, #56	; 0x38
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000ed04 	.word	0xe000ed04

08002728 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b090      	sub	sp, #64	; 0x40
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002752:	bf00      	nop
 8002754:	e7fe      	b.n	8002754 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <xQueueGenericSendFromISR+0x3c>
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <xQueueGenericSendFromISR+0x40>
 8002764:	2301      	movs	r3, #1
 8002766:	e000      	b.n	800276a <xQueueGenericSendFromISR+0x42>
 8002768:	2300      	movs	r3, #0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002780:	bf00      	nop
 8002782:	e7fe      	b.n	8002782 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d103      	bne.n	8002792 <xQueueGenericSendFromISR+0x6a>
 800278a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <xQueueGenericSendFromISR+0x6e>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <xQueueGenericSendFromISR+0x70>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10a      	bne.n	80027b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800279c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a0:	f383 8811 	msr	BASEPRI, r3
 80027a4:	f3bf 8f6f 	isb	sy
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	623b      	str	r3, [r7, #32]
}
 80027ae:	bf00      	nop
 80027b0:	e7fe      	b.n	80027b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027b2:	f002 f811 	bl	80047d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80027b6:	f3ef 8211 	mrs	r2, BASEPRI
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	61fa      	str	r2, [r7, #28]
 80027cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80027ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d302      	bcc.n	80027e4 <xQueueGenericSendFromISR+0xbc>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d139      	bne.n	8002858 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 fd66 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80027fc:	4601      	mov	r1, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	461a      	mov	r2, r3
 8002802:	2060      	movs	r0, #96	; 0x60
 8002804:	f003 f854 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800280e:	f000 f94b 	bl	8002aa8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002812:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d112      	bne.n	8002842 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d016      	beq.n	8002852 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002826:	3324      	adds	r3, #36	; 0x24
 8002828:	4618      	mov	r0, r3
 800282a:	f000 ff93 	bl	8003754 <xTaskRemoveFromEventList>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00e      	beq.n	8002852 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	e007      	b.n	8002852 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002842:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002846:	3301      	adds	r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	b25a      	sxtb	r2, r3
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002852:	2301      	movs	r3, #1
 8002854:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002856:	e00b      	b.n	8002870 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285a:	4618      	mov	r0, r3
 800285c:	f003 fd34 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002860:	4601      	mov	r1, r0
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	461a      	mov	r2, r3
 8002866:	2060      	movs	r0, #96	; 0x60
 8002868:	f003 f822 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800286c:	2300      	movs	r3, #0
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002872:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800287a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800287c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800287e:	4618      	mov	r0, r3
 8002880:	3740      	adds	r7, #64	; 0x40
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08f      	sub	sp, #60	; 0x3c
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10a      	bne.n	80028b8 <xQueueReceive+0x30>
	__asm volatile
 80028a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a6:	f383 8811 	msr	BASEPRI, r3
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	623b      	str	r3, [r7, #32]
}
 80028b4:	bf00      	nop
 80028b6:	e7fe      	b.n	80028b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <xQueueReceive+0x3e>
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <xQueueReceive+0x42>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <xQueueReceive+0x44>
 80028ca:	2300      	movs	r3, #0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10a      	bne.n	80028e6 <xQueueReceive+0x5e>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	61fb      	str	r3, [r7, #28]
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028e6:	f001 f933 	bl	8003b50 <xTaskGetSchedulerState>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d102      	bne.n	80028f6 <xQueueReceive+0x6e>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <xQueueReceive+0x72>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <xQueueReceive+0x74>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueReceive+0x8e>
	__asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	61bb      	str	r3, [r7, #24]
}
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002916:	f001 fe7d 	bl	8004614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02f      	beq.n	8002986 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800292a:	f000 f927 	bl	8002b7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fcc9 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002936:	4604      	mov	r4, r0
 8002938:	2000      	movs	r0, #0
 800293a:	f003 fcc5 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2101      	movs	r1, #1
 8002944:	9100      	str	r1, [sp, #0]
 8002946:	4621      	mov	r1, r4
 8002948:	205c      	movs	r0, #92	; 0x5c
 800294a:	f003 f881 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1e5a      	subs	r2, r3, #1
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00f      	beq.n	800297e <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	3310      	adds	r3, #16
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fef6 	bl	8003754 <xTaskRemoveFromEventList>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800296e:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <xQueueReceive+0x21c>)
 8002970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800297e:	f001 fe79 	bl	8004674 <vPortExitCritical>
				return pdPASS;
 8002982:	2301      	movs	r3, #1
 8002984:	e08a      	b.n	8002a9c <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d113      	bne.n	80029b4 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800298c:	f001 fe72 	bl	8004674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fc98 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002998:	4604      	mov	r4, r0
 800299a:	2000      	movs	r0, #0
 800299c:	f003 fc94 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2101      	movs	r1, #1
 80029a6:	9100      	str	r1, [sp, #0]
 80029a8:	4621      	mov	r1, r4
 80029aa:	205c      	movs	r0, #92	; 0x5c
 80029ac:	f003 f850 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e073      	b.n	8002a9c <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 ff30 	bl	8003824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029c8:	f001 fe54 	bl	8004674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029cc:	f000 fc6e 	bl	80032ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029d0:	f001 fe20 	bl	8004614 <vPortEnterCritical>
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d103      	bne.n	80029ea <xQueueReceive+0x162>
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f0:	b25b      	sxtb	r3, r3
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d103      	bne.n	8002a00 <xQueueReceive+0x178>
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a00:	f001 fe38 	bl	8004674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a04:	1d3a      	adds	r2, r7, #4
 8002a06:	f107 0310 	add.w	r3, r7, #16
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 ff1f 	bl	8003850 <xTaskCheckForTimeOut>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d124      	bne.n	8002a62 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a1a:	f000 f927 	bl	8002c6c <prvIsQueueEmpty>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d018      	beq.n	8002a56 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	3324      	adds	r3, #36	; 0x24
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fe3f 	bl	80036b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a34:	f000 f8c8 	bl	8002bc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a38:	f000 fc46 	bl	80032c8 <xTaskResumeAll>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f af69 	bne.w	8002916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <xQueueReceive+0x21c>)
 8002a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	e75f      	b.n	8002916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a58:	f000 f8b6 	bl	8002bc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a5c:	f000 fc34 	bl	80032c8 <xTaskResumeAll>
 8002a60:	e759      	b.n	8002916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a64:	f000 f8b0 	bl	8002bc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a68:	f000 fc2e 	bl	80032c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a6e:	f000 f8fd 	bl	8002c6c <prvIsQueueEmpty>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f43f af4e 	beq.w	8002916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fc23 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002a82:	4604      	mov	r4, r0
 8002a84:	2000      	movs	r0, #0
 8002a86:	f003 fc1f 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	9100      	str	r1, [sp, #0]
 8002a92:	4621      	mov	r1, r4
 8002a94:	205c      	movs	r0, #92	; 0x5c
 8002a96:	f002 ffdb 	bl	8005a50 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002a9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3734      	adds	r7, #52	; 0x34
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d14d      	bne.n	8002b6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f85a 	bl	8003b8c <xTaskPriorityDisinherit>
 8002ad8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	e043      	b.n	8002b6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d119      	bne.n	8002b1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6858      	ldr	r0, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	461a      	mov	r2, r3
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	f003 fdce 	bl	8006694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	441a      	add	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d32b      	bcc.n	8002b6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e026      	b.n	8002b6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	68d8      	ldr	r0, [r3, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	461a      	mov	r2, r3
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	f003 fdb4 	bl	8006694 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	425b      	negs	r3, r3
 8002b36:	441a      	add	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	425b      	negs	r3, r3
 8002b52:	441a      	add	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d105      	bne.n	8002b6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b72:	697b      	ldr	r3, [r7, #20]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d018      	beq.n	8002bc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d303      	bcc.n	8002bb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68d9      	ldr	r1, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	f003 fd6a 	bl	8006694 <memcpy>
	}
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bd0:	f001 fd20 	bl	8004614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bdc:	e011      	b.n	8002c02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3324      	adds	r3, #36	; 0x24
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fdb2 	bl	8003754 <xTaskRemoveFromEventList>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bf6:	f000 fe8d 	bl	8003914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	dce9      	bgt.n	8002bde <prvUnlockQueue+0x16>
 8002c0a:	e000      	b.n	8002c0e <prvUnlockQueue+0x46>
					break;
 8002c0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	22ff      	movs	r2, #255	; 0xff
 8002c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c16:	f001 fd2d 	bl	8004674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c1a:	f001 fcfb 	bl	8004614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c26:	e011      	b.n	8002c4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d012      	beq.n	8002c56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3310      	adds	r3, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fd8d 	bl	8003754 <xTaskRemoveFromEventList>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c40:	f000 fe68 	bl	8003914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c44:	7bbb      	ldrb	r3, [r7, #14]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	dce9      	bgt.n	8002c28 <prvUnlockQueue+0x60>
 8002c54:	e000      	b.n	8002c58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c60:	f001 fd08 	bl	8004674 <vPortExitCritical>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c74:	f001 fcce 	bl	8004614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e001      	b.n	8002c8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c8a:	f001 fcf3 	bl	8004674 <vPortExitCritical>

	return xReturn;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ca0:	f001 fcb8 	bl	8004614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d102      	bne.n	8002cb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e001      	b.n	8002cba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cba:	f001 fcdb 	bl	8004674 <vPortExitCritical>

	return xReturn;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	e01e      	b.n	8002d16 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cd8:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <vQueueAddToRegistry+0x60>)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d115      	bne.n	8002d10 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ce4:	4910      	ldr	r1, [pc, #64]	; (8002d28 <vQueueAddToRegistry+0x60>)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <vQueueAddToRegistry+0x60>)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 fae3 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002d02:	4601      	mov	r1, r0
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	2071      	movs	r0, #113	; 0x71
 8002d0a:	f002 fdd1 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8002d0e:	e006      	b.n	8002d1e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3301      	adds	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b07      	cmp	r3, #7
 8002d1a:	d9dd      	bls.n	8002cd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200008ac 	.word	0x200008ac

08002d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d3c:	f001 fc6a 	bl	8004614 <vPortEnterCritical>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d46:	b25b      	sxtb	r3, r3
 8002d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4c:	d103      	bne.n	8002d56 <vQueueWaitForMessageRestricted+0x2a>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d103      	bne.n	8002d6c <vQueueWaitForMessageRestricted+0x40>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d6c:	f001 fc82 	bl	8004674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3324      	adds	r3, #36	; 0x24
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fcb9 	bl	80036f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff1e 	bl	8002bc8 <prvUnlockQueue>
	}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08e      	sub	sp, #56	; 0x38
 8002d98:	af04      	add	r7, sp, #16
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <xTaskCreateStatic+0x2a>
	__asm volatile
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	623b      	str	r3, [r7, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	e7fe      	b.n	8002dbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xTaskCreateStatic+0x46>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61fb      	str	r3, [r7, #28]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dda:	23a8      	movs	r3, #168	; 0xa8
 8002ddc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2ba8      	cmp	r3, #168	; 0xa8
 8002de2:	d00a      	beq.n	8002dfa <xTaskCreateStatic+0x66>
	__asm volatile
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61bb      	str	r3, [r7, #24]
}
 8002df6:	bf00      	nop
 8002df8:	e7fe      	b.n	8002df8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01e      	beq.n	8002e40 <xTaskCreateStatic+0xac>
 8002e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9303      	str	r3, [sp, #12]
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 f850 	bl	8002ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e3a:	f000 f8f3 	bl	8003024 <prvAddNewTaskToReadyList>
 8002e3e:	e001      	b.n	8002e44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e44:	697b      	ldr	r3, [r7, #20]
	}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08c      	sub	sp, #48	; 0x30
 8002e52:	af04      	add	r7, sp, #16
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f001 fcf8 	bl	8004858 <pvPortMalloc>
 8002e68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e70:	20a8      	movs	r0, #168	; 0xa8
 8002e72:	f001 fcf1 	bl	8004858 <pvPortMalloc>
 8002e76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
 8002e84:	e005      	b.n	8002e92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f001 fdb2 	bl	80049f0 <vPortFree>
 8002e8c:	e001      	b.n	8002e92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d017      	beq.n	8002ec8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9303      	str	r3, [sp, #12]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	9302      	str	r3, [sp, #8]
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	9301      	str	r3, [sp, #4]
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f80e 	bl	8002ed8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ebc:	69f8      	ldr	r0, [r7, #28]
 8002ebe:	f000 f8b1 	bl	8003024 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	e002      	b.n	8002ece <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ece:	69bb      	ldr	r3, [r7, #24]
	}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
 8002ee4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	461a      	mov	r2, r3
 8002ef0:	21a5      	movs	r1, #165	; 0xa5
 8002ef2:	f003 fb4b 	bl	800658c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f00:	3b01      	subs	r3, #1
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	f023 0307 	bic.w	r3, r3, #7
 8002f0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	617b      	str	r3, [r7, #20]
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d01f      	beq.n	8002f76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	e012      	b.n	8002f62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	4413      	add	r3, r2
 8002f42:	7819      	ldrb	r1, [r3, #0]
 8002f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	3334      	adds	r3, #52	; 0x34
 8002f4c:	460a      	mov	r2, r1
 8002f4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	4413      	add	r3, r2
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d006      	beq.n	8002f6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d9e9      	bls.n	8002f3c <prvInitialiseNewTask+0x64>
 8002f68:	e000      	b.n	8002f6c <prvInitialiseNewTask+0x94>
			{
				break;
 8002f6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f74:	e003      	b.n	8002f7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	2b37      	cmp	r3, #55	; 0x37
 8002f82:	d901      	bls.n	8002f88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f84:	2337      	movs	r3, #55	; 0x37
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f96:	2200      	movs	r2, #0
 8002f98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f8fe 	bl	80021a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f8f9 	bl	80021a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	3354      	adds	r3, #84	; 0x54
 8002fd8:	224c      	movs	r2, #76	; 0x4c
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fad5 	bl	800658c <memset>
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <prvInitialiseNewTask+0x140>)
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <prvInitialiseNewTask+0x144>)
 8002fec:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <prvInitialiseNewTask+0x148>)
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	69b8      	ldr	r0, [r7, #24]
 8002ffa:	f001 f9df 	bl	80043bc <pxPortInitialiseStack>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003010:	bf00      	nop
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200071b8 	.word	0x200071b8
 800301c:	20007220 	.word	0x20007220
 8003020:	20007288 	.word	0x20007288

08003024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003024:	b5b0      	push	{r4, r5, r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af02      	add	r7, sp, #8
 800302a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800302c:	f001 faf2 	bl	8004614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003030:	4b3c      	ldr	r3, [pc, #240]	; (8003124 <prvAddNewTaskToReadyList+0x100>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	4a3b      	ldr	r2, [pc, #236]	; (8003124 <prvAddNewTaskToReadyList+0x100>)
 8003038:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <prvAddNewTaskToReadyList+0x104>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003042:	4a39      	ldr	r2, [pc, #228]	; (8003128 <prvAddNewTaskToReadyList+0x104>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <prvAddNewTaskToReadyList+0x100>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d110      	bne.n	8003072 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003050:	f000 fc84 	bl	800395c <prvInitialiseTaskLists>
 8003054:	e00d      	b.n	8003072 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003056:	4b35      	ldr	r3, [pc, #212]	; (800312c <prvAddNewTaskToReadyList+0x108>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800305e:	4b32      	ldr	r3, [pc, #200]	; (8003128 <prvAddNewTaskToReadyList+0x104>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	429a      	cmp	r2, r3
 800306a:	d802      	bhi.n	8003072 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800306c:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <prvAddNewTaskToReadyList+0x104>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003072:	4b2f      	ldr	r3, [pc, #188]	; (8003130 <prvAddNewTaskToReadyList+0x10c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <prvAddNewTaskToReadyList+0x10c>)
 800307a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800307c:	4b2c      	ldr	r3, [pc, #176]	; (8003130 <prvAddNewTaskToReadyList+0x10c>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <prvAddNewTaskToReadyList+0x94>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 f855 	bl	800613c <SEGGER_SYSVIEW_OnTaskCreate>
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	461d      	mov	r5, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461c      	mov	r4, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	1ae3      	subs	r3, r4, r3
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	462b      	mov	r3, r5
 80030b4:	f001 fe80 	bl	8004db8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 f8c2 	bl	8006244 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	4b1b      	ldr	r3, [pc, #108]	; (8003134 <prvAddNewTaskToReadyList+0x110>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d903      	bls.n	80030d4 <prvAddNewTaskToReadyList+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <prvAddNewTaskToReadyList+0x110>)
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4a15      	ldr	r2, [pc, #84]	; (8003138 <prvAddNewTaskToReadyList+0x114>)
 80030e2:	441a      	add	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7ff f865 	bl	80021ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80030f0:	f001 fac0 	bl	8004674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <prvAddNewTaskToReadyList+0x108>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvAddNewTaskToReadyList+0x104>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	429a      	cmp	r2, r3
 8003108:	d207      	bcs.n	800311a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <prvAddNewTaskToReadyList+0x118>)
 800310c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bdb0      	pop	{r4, r5, r7, pc}
 8003122:	bf00      	nop
 8003124:	20000dc0 	.word	0x20000dc0
 8003128:	200008ec 	.word	0x200008ec
 800312c:	20000dcc 	.word	0x20000dcc
 8003130:	20000ddc 	.word	0x20000ddc
 8003134:	20000dc8 	.word	0x20000dc8
 8003138:	200008f0 	.word	0x200008f0
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d01b      	beq.n	800318a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003152:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <vTaskDelay+0x68>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <vTaskDelay+0x30>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	60bb      	str	r3, [r7, #8]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003170:	f000 f89c 	bl	80032ac <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	2023      	movs	r0, #35	; 0x23
 8003178:	f002 fb5e 	bl	8005838 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800317c:	2100      	movs	r1, #0
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fd7a 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003184:	f000 f8a0 	bl	80032c8 <xTaskResumeAll>
 8003188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <vTaskDelay+0x6c>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000de8 	.word	0x20000de8
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031be:	463a      	mov	r2, r7
 80031c0:	1d39      	adds	r1, r7, #4
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe ff96 	bl	80020f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031cc:	6839      	ldr	r1, [r7, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	9202      	str	r2, [sp, #8]
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	460a      	mov	r2, r1
 80031de:	492b      	ldr	r1, [pc, #172]	; (800328c <vTaskStartScheduler+0xdc>)
 80031e0:	482b      	ldr	r0, [pc, #172]	; (8003290 <vTaskStartScheduler+0xe0>)
 80031e2:	f7ff fdd7 	bl	8002d94 <xTaskCreateStatic>
 80031e6:	4603      	mov	r3, r0
 80031e8:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <vTaskStartScheduler+0xe4>)
 80031ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031ec:	4b29      	ldr	r3, [pc, #164]	; (8003294 <vTaskStartScheduler+0xe4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031f4:	2301      	movs	r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e001      	b.n	80031fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d102      	bne.n	800320a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003204:	f000 fd8c 	bl	8003d20 <xTimerCreateTimerTask>
 8003208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d129      	bne.n	8003264 <vTaskStartScheduler+0xb4>
	__asm volatile
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	613b      	str	r3, [r7, #16]
}
 8003222:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003224:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <vTaskStartScheduler+0xe8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3354      	adds	r3, #84	; 0x54
 800322a:	4a1c      	ldr	r2, [pc, #112]	; (800329c <vTaskStartScheduler+0xec>)
 800322c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800322e:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <vTaskStartScheduler+0xf0>)
 8003230:	f04f 32ff 	mov.w	r2, #4294967295
 8003234:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <vTaskStartScheduler+0xf4>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800323c:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <vTaskStartScheduler+0xf8>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <vTaskStartScheduler+0xe8>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <vTaskStartScheduler+0xe4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d102      	bne.n	8003254 <vTaskStartScheduler+0xa4>
 800324e:	f002 ff59 	bl	8006104 <SEGGER_SYSVIEW_OnIdle>
 8003252:	e004      	b.n	800325e <vTaskStartScheduler+0xae>
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <vTaskStartScheduler+0xe8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f002 ffb1 	bl	80061c0 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800325e:	f001 f937 	bl	80044d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003262:	e00e      	b.n	8003282 <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d10a      	bne.n	8003282 <vTaskStartScheduler+0xd2>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <vTaskStartScheduler+0xd0>
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	080067a8 	.word	0x080067a8
 8003290:	0800392d 	.word	0x0800392d
 8003294:	20000de4 	.word	0x20000de4
 8003298:	200008ec 	.word	0x200008ec
 800329c:	2000005c 	.word	0x2000005c
 80032a0:	20000de0 	.word	0x20000de0
 80032a4:	20000dcc 	.word	0x20000dcc
 80032a8:	20000dc4 	.word	0x20000dc4

080032ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <vTaskSuspendAll+0x18>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a03      	ldr	r2, [pc, #12]	; (80032c4 <vTaskSuspendAll+0x18>)
 80032b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000de8 	.word	0x20000de8

080032c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <xTaskResumeAll+0x120>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	603b      	str	r3, [r7, #0]
}
 80032f0:	bf00      	nop
 80032f2:	e7fe      	b.n	80032f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80032f4:	f001 f98e 	bl	8004614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032f8:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <xTaskResumeAll+0x120>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	4a3a      	ldr	r2, [pc, #232]	; (80033e8 <xTaskResumeAll+0x120>)
 8003300:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <xTaskResumeAll+0x120>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d166      	bne.n	80033d8 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <xTaskResumeAll+0x124>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d062      	beq.n	80033d8 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003312:	e033      	b.n	800337c <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003314:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <xTaskResumeAll+0x128>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3318      	adds	r3, #24
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ffa7 	bl	8002274 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3304      	adds	r3, #4
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe ffa2 	bl	8002274 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4618      	mov	r0, r3
 8003334:	f002 ff86 	bl	8006244 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <xTaskResumeAll+0x12c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d903      	bls.n	800334c <xTaskResumeAll+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <xTaskResumeAll+0x12c>)
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <xTaskResumeAll+0x130>)
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3304      	adds	r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7fe ff29 	bl	80021ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4b23      	ldr	r3, [pc, #140]	; (80033fc <xTaskResumeAll+0x134>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <xTaskResumeAll+0x138>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337c:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <xTaskResumeAll+0x128>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1c7      	bne.n	8003314 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800338a:	f000 fbc1 	bl	8003b10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <xTaskResumeAll+0x13c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800339a:	f000 f859 	bl	8003450 <xTaskIncrementTick>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <xTaskResumeAll+0x138>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f1      	bne.n	800339a <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <xTaskResumeAll+0x13c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <xTaskResumeAll+0x138>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <xTaskResumeAll+0x140>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033d8:	f001 f94c 	bl	8004674 <vPortExitCritical>

	return xAlreadyYielded;
 80033dc:	68bb      	ldr	r3, [r7, #8]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000de8 	.word	0x20000de8
 80033ec:	20000dc0 	.word	0x20000dc0
 80033f0:	20000d80 	.word	0x20000d80
 80033f4:	20000dc8 	.word	0x20000dc8
 80033f8:	200008f0 	.word	0x200008f0
 80033fc:	200008ec 	.word	0x200008ec
 8003400:	20000dd4 	.word	0x20000dd4
 8003404:	20000dd0 	.word	0x20000dd0
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <xTaskGetTickCount+0x1c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000dc4 	.word	0x20000dc4

0800342c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003432:	f001 f9d1 	bl	80047d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003436:	2300      	movs	r3, #0
 8003438:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800343a:	4b04      	ldr	r3, [pc, #16]	; (800344c <xTaskGetTickCountFromISR+0x20>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003440:	683b      	ldr	r3, [r7, #0]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000dc4 	.word	0x20000dc4

08003450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800345a:	4b51      	ldr	r3, [pc, #324]	; (80035a0 <xTaskIncrementTick+0x150>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 8093 	bne.w	800358a <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003464:	4b4f      	ldr	r3, [pc, #316]	; (80035a4 <xTaskIncrementTick+0x154>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3301      	adds	r3, #1
 800346a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800346c:	4a4d      	ldr	r2, [pc, #308]	; (80035a4 <xTaskIncrementTick+0x154>)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d120      	bne.n	80034ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003478:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <xTaskIncrementTick+0x158>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <xTaskIncrementTick+0x48>
	__asm volatile
 8003482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003486:	f383 8811 	msr	BASEPRI, r3
 800348a:	f3bf 8f6f 	isb	sy
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	603b      	str	r3, [r7, #0]
}
 8003494:	bf00      	nop
 8003496:	e7fe      	b.n	8003496 <xTaskIncrementTick+0x46>
 8003498:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <xTaskIncrementTick+0x158>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <xTaskIncrementTick+0x15c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a41      	ldr	r2, [pc, #260]	; (80035a8 <xTaskIncrementTick+0x158>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4a41      	ldr	r2, [pc, #260]	; (80035ac <xTaskIncrementTick+0x15c>)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	4b40      	ldr	r3, [pc, #256]	; (80035b0 <xTaskIncrementTick+0x160>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a3f      	ldr	r2, [pc, #252]	; (80035b0 <xTaskIncrementTick+0x160>)
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	f000 fb2b 	bl	8003b10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80034ba:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <xTaskIncrementTick+0x164>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d34d      	bcc.n	8003560 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <xTaskIncrementTick+0x158>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d104      	bne.n	80034d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <xTaskIncrementTick+0x164>)
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	601a      	str	r2, [r3, #0]
					break;
 80034d6:	e043      	b.n	8003560 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <xTaskIncrementTick+0x158>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d203      	bcs.n	80034f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034f0:	4a30      	ldr	r2, [pc, #192]	; (80035b4 <xTaskIncrementTick+0x164>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034f6:	e033      	b.n	8003560 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	3304      	adds	r3, #4
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe feb9 	bl	8002274 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3318      	adds	r3, #24
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe feb0 	bl	8002274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 fe94 	bl	8006244 <SEGGER_SYSVIEW_OnTaskStartReady>
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <xTaskIncrementTick+0x168>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d903      	bls.n	8003530 <xTaskIncrementTick+0xe0>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <xTaskIncrementTick+0x168>)
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4a1f      	ldr	r2, [pc, #124]	; (80035bc <xTaskIncrementTick+0x16c>)
 800353e:	441a      	add	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3304      	adds	r3, #4
 8003544:	4619      	mov	r1, r3
 8003546:	4610      	mov	r0, r2
 8003548:	f7fe fe37 	bl	80021ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <xTaskIncrementTick+0x170>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	429a      	cmp	r2, r3
 8003558:	d3b4      	bcc.n	80034c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800355a:	2301      	movs	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800355e:	e7b1      	b.n	80034c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003560:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <xTaskIncrementTick+0x170>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4915      	ldr	r1, [pc, #84]	; (80035bc <xTaskIncrementTick+0x16c>)
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d901      	bls.n	800357c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <xTaskIncrementTick+0x174>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8003584:	2301      	movs	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	e004      	b.n	8003594 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <xTaskIncrementTick+0x178>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3301      	adds	r3, #1
 8003590:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <xTaskIncrementTick+0x178>)
 8003592:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003594:	697b      	ldr	r3, [r7, #20]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000de8 	.word	0x20000de8
 80035a4:	20000dc4 	.word	0x20000dc4
 80035a8:	20000d78 	.word	0x20000d78
 80035ac:	20000d7c 	.word	0x20000d7c
 80035b0:	20000dd8 	.word	0x20000dd8
 80035b4:	20000de0 	.word	0x20000de0
 80035b8:	20000dc8 	.word	0x20000dc8
 80035bc:	200008f0 	.word	0x200008f0
 80035c0:	200008ec 	.word	0x200008ec
 80035c4:	20000dd4 	.word	0x20000dd4
 80035c8:	20000dd0 	.word	0x20000dd0

080035cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035d2:	4b30      	ldr	r3, [pc, #192]	; (8003694 <vTaskSwitchContext+0xc8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80035da:	4b2f      	ldr	r3, [pc, #188]	; (8003698 <vTaskSwitchContext+0xcc>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035e0:	e054      	b.n	800368c <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 80035e2:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <vTaskSwitchContext+0xcc>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e8:	4b2c      	ldr	r3, [pc, #176]	; (800369c <vTaskSwitchContext+0xd0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	e010      	b.n	8003612 <vTaskSwitchContext+0x46>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10a      	bne.n	800360c <vTaskSwitchContext+0x40>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	607b      	str	r3, [r7, #4]
}
 8003608:	bf00      	nop
 800360a:	e7fe      	b.n	800360a <vTaskSwitchContext+0x3e>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3b01      	subs	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	4923      	ldr	r1, [pc, #140]	; (80036a0 <vTaskSwitchContext+0xd4>)
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0e4      	beq.n	80035f0 <vTaskSwitchContext+0x24>
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <vTaskSwitchContext+0xd4>)
 8003632:	4413      	add	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3308      	adds	r3, #8
 8003648:	429a      	cmp	r2, r3
 800364a:	d104      	bne.n	8003656 <vTaskSwitchContext+0x8a>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a11      	ldr	r2, [pc, #68]	; (80036a4 <vTaskSwitchContext+0xd8>)
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <vTaskSwitchContext+0xd0>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <vTaskSwitchContext+0xd8>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <vTaskSwitchContext+0xdc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d102      	bne.n	8003678 <vTaskSwitchContext+0xac>
 8003672:	f002 fd47 	bl	8006104 <SEGGER_SYSVIEW_OnIdle>
 8003676:	e004      	b.n	8003682 <vTaskSwitchContext+0xb6>
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <vTaskSwitchContext+0xd8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fd9f 	bl	80061c0 <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003682:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <vTaskSwitchContext+0xd8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	3354      	adds	r3, #84	; 0x54
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <vTaskSwitchContext+0xe0>)
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000de8 	.word	0x20000de8
 8003698:	20000dd4 	.word	0x20000dd4
 800369c:	20000dc8 	.word	0x20000dc8
 80036a0:	200008f0 	.word	0x200008f0
 80036a4:	200008ec 	.word	0x200008ec
 80036a8:	20000de4 	.word	0x20000de4
 80036ac:	2000005c 	.word	0x2000005c

080036b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	60fb      	str	r3, [r7, #12]
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <vTaskPlaceOnEventList+0x44>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3318      	adds	r3, #24
 80036dc:	4619      	mov	r1, r3
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fe fd8f 	bl	8002202 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036e4:	2101      	movs	r1, #1
 80036e6:	6838      	ldr	r0, [r7, #0]
 80036e8:	f000 fac6 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200008ec 	.word	0x200008ec

080036f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	617b      	str	r3, [r7, #20]
}
 800371c:	bf00      	nop
 800371e:	e7fe      	b.n	800371e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <vTaskPlaceOnEventListRestricted+0x58>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3318      	adds	r3, #24
 8003726:	4619      	mov	r1, r3
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7fe fd46 	bl	80021ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
 8003738:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800373a:	2024      	movs	r0, #36	; 0x24
 800373c:	f002 f85e 	bl	80057fc <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	68b8      	ldr	r0, [r7, #8]
 8003744:	f000 fa98 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
	}
 8003748:	bf00      	nop
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200008ec 	.word	0x200008ec

08003754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60fb      	str	r3, [r7, #12]
}
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	3318      	adds	r3, #24
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fd75 	bl	8002274 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <xTaskRemoveFromEventList+0xb8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d121      	bne.n	80037d6 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fd6c 	bl	8002274 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4618      	mov	r0, r3
 80037a0:	f002 fd50 	bl	8006244 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <xTaskRemoveFromEventList+0xbc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d903      	bls.n	80037b8 <xTaskRemoveFromEventList+0x64>
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	4a16      	ldr	r2, [pc, #88]	; (8003810 <xTaskRemoveFromEventList+0xbc>)
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4a13      	ldr	r2, [pc, #76]	; (8003814 <xTaskRemoveFromEventList+0xc0>)
 80037c6:	441a      	add	r2, r3
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4619      	mov	r1, r3
 80037ce:	4610      	mov	r0, r2
 80037d0:	f7fe fcf3 	bl	80021ba <vListInsertEnd>
 80037d4:	e005      	b.n	80037e2 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3318      	adds	r3, #24
 80037da:	4619      	mov	r1, r3
 80037dc:	480e      	ldr	r0, [pc, #56]	; (8003818 <xTaskRemoveFromEventList+0xc4>)
 80037de:	f7fe fcec 	bl	80021ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <xTaskRemoveFromEventList+0xc8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d905      	bls.n	80037fc <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <xTaskRemoveFromEventList+0xcc>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e001      	b.n	8003800 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003800:	697b      	ldr	r3, [r7, #20]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000de8 	.word	0x20000de8
 8003810:	20000dc8 	.word	0x20000dc8
 8003814:	200008f0 	.word	0x200008f0
 8003818:	20000d80 	.word	0x20000d80
 800381c:	200008ec 	.word	0x200008ec
 8003820:	20000dd4 	.word	0x20000dd4

08003824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <vTaskInternalSetTimeOutState+0x24>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <vTaskInternalSetTimeOutState+0x28>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	605a      	str	r2, [r3, #4]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	20000dd8 	.word	0x20000dd8
 800384c:	20000dc4 	.word	0x20000dc4

08003850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	613b      	str	r3, [r7, #16]
}
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003880:	f383 8811 	msr	BASEPRI, r3
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	60fb      	str	r3, [r7, #12]
}
 800388e:	bf00      	nop
 8003890:	e7fe      	b.n	8003890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003892:	f000 febf 	bl	8004614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <xTaskCheckForTimeOut+0xbc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d102      	bne.n	80038b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e023      	b.n	80038fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	4b15      	ldr	r3, [pc, #84]	; (8003910 <xTaskCheckForTimeOut+0xc0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d007      	beq.n	80038d2 <xTaskCheckForTimeOut+0x82>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038cc:	2301      	movs	r3, #1
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e015      	b.n	80038fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d20b      	bcs.n	80038f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	1ad2      	subs	r2, r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff9b 	bl	8003824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e004      	b.n	80038fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038fe:	f000 feb9 	bl	8004674 <vPortExitCritical>

	return xReturn;
 8003902:	69fb      	ldr	r3, [r7, #28]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20000dc4 	.word	0x20000dc4
 8003910:	20000dd8 	.word	0x20000dd8

08003914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <vTaskMissedYield+0x14>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	bf00      	nop
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	20000dd4 	.word	0x20000dd4

0800392c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003934:	f000 f852 	bl	80039dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <prvIdleTask+0x28>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d9f9      	bls.n	8003934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003940:	4b05      	ldr	r3, [pc, #20]	; (8003958 <prvIdleTask+0x2c>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003950:	e7f0      	b.n	8003934 <prvIdleTask+0x8>
 8003952:	bf00      	nop
 8003954:	200008f0 	.word	0x200008f0
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	e00c      	b.n	8003982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <prvInitialiseTaskLists+0x60>)
 8003974:	4413      	add	r3, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fbf2 	bl	8002160 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3301      	adds	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b37      	cmp	r3, #55	; 0x37
 8003986:	d9ef      	bls.n	8003968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003988:	480d      	ldr	r0, [pc, #52]	; (80039c0 <prvInitialiseTaskLists+0x64>)
 800398a:	f7fe fbe9 	bl	8002160 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800398e:	480d      	ldr	r0, [pc, #52]	; (80039c4 <prvInitialiseTaskLists+0x68>)
 8003990:	f7fe fbe6 	bl	8002160 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003994:	480c      	ldr	r0, [pc, #48]	; (80039c8 <prvInitialiseTaskLists+0x6c>)
 8003996:	f7fe fbe3 	bl	8002160 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800399a:	480c      	ldr	r0, [pc, #48]	; (80039cc <prvInitialiseTaskLists+0x70>)
 800399c:	f7fe fbe0 	bl	8002160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039a0:	480b      	ldr	r0, [pc, #44]	; (80039d0 <prvInitialiseTaskLists+0x74>)
 80039a2:	f7fe fbdd 	bl	8002160 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <prvInitialiseTaskLists+0x78>)
 80039a8:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <prvInitialiseTaskLists+0x64>)
 80039aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <prvInitialiseTaskLists+0x7c>)
 80039ae:	4a05      	ldr	r2, [pc, #20]	; (80039c4 <prvInitialiseTaskLists+0x68>)
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	200008f0 	.word	0x200008f0
 80039c0:	20000d50 	.word	0x20000d50
 80039c4:	20000d64 	.word	0x20000d64
 80039c8:	20000d80 	.word	0x20000d80
 80039cc:	20000d94 	.word	0x20000d94
 80039d0:	20000dac 	.word	0x20000dac
 80039d4:	20000d78 	.word	0x20000d78
 80039d8:	20000d7c 	.word	0x20000d7c

080039dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039e2:	e019      	b.n	8003a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039e4:	f000 fe16 	bl	8004614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <prvCheckTasksWaitingTermination+0x50>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fe fc3d 	bl	8002274 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <prvCheckTasksWaitingTermination+0x54>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <prvCheckTasksWaitingTermination+0x54>)
 8003a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <prvCheckTasksWaitingTermination+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <prvCheckTasksWaitingTermination+0x58>)
 8003a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a0e:	f000 fe31 	bl	8004674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f848 	bl	8003aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <prvCheckTasksWaitingTermination+0x58>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e1      	bne.n	80039e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a20:	bf00      	nop
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000d94 	.word	0x20000d94
 8003a30:	20000dc0 	.word	0x20000dc0
 8003a34:	20000da8 	.word	0x20000da8

08003a38 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003a44:	e005      	b.n	8003a52 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2ba5      	cmp	r3, #165	; 0xa5
 8003a58:	d0f5      	beq.n	8003a46 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	b29b      	uxth	r3, r3
	}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <uxTaskGetStackHighWaterMark+0x14>
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <uxTaskGetStackHighWaterMark+0x34>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	e000      	b.n	8003a86 <uxTaskGetStackHighWaterMark+0x16>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003a8e:	6938      	ldr	r0, [r7, #16]
 8003a90:	f7ff ffd2 	bl	8003a38 <prvTaskCheckFreeStackSpace>
 8003a94:	4603      	mov	r3, r0
 8003a96:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8003a98:	68fb      	ldr	r3, [r7, #12]
	}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200008ec 	.word	0x200008ec

08003aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3354      	adds	r3, #84	; 0x54
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f002 fd71 	bl	800659c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 ff91 	bl	80049f0 <vPortFree>
				vPortFree( pxTCB );
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 ff8e 	bl	80049f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ad4:	e018      	b.n	8003b08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d103      	bne.n	8003ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 ff85 	bl	80049f0 <vPortFree>
	}
 8003ae6:	e00f      	b.n	8003b08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d00a      	beq.n	8003b08 <prvDeleteTCB+0x60>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60fb      	str	r3, [r7, #12]
}
 8003b04:	bf00      	nop
 8003b06:	e7fe      	b.n	8003b06 <prvDeleteTCB+0x5e>
	}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <prvResetNextTaskUnblockTime+0x38>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d104      	bne.n	8003b2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <prvResetNextTaskUnblockTime+0x3c>)
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295
 8003b26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b28:	e008      	b.n	8003b3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <prvResetNextTaskUnblockTime+0x38>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a04      	ldr	r2, [pc, #16]	; (8003b4c <prvResetNextTaskUnblockTime+0x3c>)
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	20000d78 	.word	0x20000d78
 8003b4c:	20000de0 	.word	0x20000de0

08003b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <xTaskGetSchedulerState+0x34>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	e008      	b.n	8003b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <xTaskGetSchedulerState+0x38>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e001      	b.n	8003b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b76:	687b      	ldr	r3, [r7, #4]
	}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	20000dcc 	.word	0x20000dcc
 8003b88:	20000de8 	.word	0x20000de8

08003b8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d05f      	beq.n	8003c62 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ba2:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <xTaskPriorityDisinherit+0xe0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d00a      	beq.n	8003bc2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	60fb      	str	r3, [r7, #12]
}
 8003bbe:	bf00      	nop
 8003bc0:	e7fe      	b.n	8003bc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	60bb      	str	r3, [r7, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	e7fe      	b.n	8003bde <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	1e5a      	subs	r2, r3, #1
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d035      	beq.n	8003c62 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d131      	bne.n	8003c62 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fb36 	bl	8002274 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	204a      	movs	r0, #74	; 0x4a
 8003c0e:	f001 fe13 	bl	8005838 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 fb0b 	bl	8006244 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <xTaskPriorityDisinherit+0xe4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d903      	bls.n	8003c42 <xTaskPriorityDisinherit+0xb6>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <xTaskPriorityDisinherit+0xe4>)
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <xTaskPriorityDisinherit+0xe8>)
 8003c50:	441a      	add	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f7fe faae 	bl	80021ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c62:	697b      	ldr	r3, [r7, #20]
	}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200008ec 	.word	0x200008ec
 8003c70:	20000dc8 	.word	0x20000dc8
 8003c74:	200008f0 	.word	0x200008f0

08003c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe faf0 	bl	8002274 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d10a      	bne.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4819      	ldr	r0, [pc, #100]	; (8003d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cac:	f7fe fa85 	bl	80021ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cb0:	e026      	b.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d209      	bcs.n	8003cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cca:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	f7fe fa93 	bl	8002202 <vListInsert>
}
 8003cdc:	e010      	b.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4610      	mov	r0, r2
 8003cec:	f7fe fa89 	bl	8002202 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d202      	bcs.n	8003d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003cfa:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000dc4 	.word	0x20000dc4
 8003d0c:	200008ec 	.word	0x200008ec
 8003d10:	20000dac 	.word	0x20000dac
 8003d14:	20000d7c 	.word	0x20000d7c
 8003d18:	20000d78 	.word	0x20000d78
 8003d1c:	20000de0 	.word	0x20000de0

08003d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08a      	sub	sp, #40	; 0x28
 8003d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d2a:	f000 fb07 	bl	800433c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d2e:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <xTimerCreateTimerTask+0x80>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d021      	beq.n	8003d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d3e:	1d3a      	adds	r2, r7, #4
 8003d40:	f107 0108 	add.w	r1, r7, #8
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe f9ef 	bl	800212c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	9202      	str	r2, [sp, #8]
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	2302      	movs	r3, #2
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	460a      	mov	r2, r1
 8003d60:	4910      	ldr	r1, [pc, #64]	; (8003da4 <xTimerCreateTimerTask+0x84>)
 8003d62:	4811      	ldr	r0, [pc, #68]	; (8003da8 <xTimerCreateTimerTask+0x88>)
 8003d64:	f7ff f816 	bl	8002d94 <xTaskCreateStatic>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a10      	ldr	r2, [pc, #64]	; (8003dac <xTimerCreateTimerTask+0x8c>)
 8003d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xTimerCreateTimerTask+0x8c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d76:	2301      	movs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	613b      	str	r3, [r7, #16]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003d96:	697b      	ldr	r3, [r7, #20]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000e1c 	.word	0x20000e1c
 8003da4:	080067b0 	.word	0x080067b0
 8003da8:	08003ee5 	.word	0x08003ee5
 8003dac:	20000e20 	.word	0x20000e20

08003db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xTimerGenericCommand+0x2e>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	623b      	str	r3, [r7, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dde:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02a      	beq.n	8003e3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	dc18      	bgt.n	8003e2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003df8:	f7ff feaa 	bl	8003b50 <xTaskGetSchedulerState>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d109      	bne.n	8003e16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e04:	6818      	ldr	r0, [r3, #0]
 8003e06:	f107 0110 	add.w	r1, r7, #16
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0e:	f7fe fb65 	bl	80024dc <xQueueGenericSend>
 8003e12:	6278      	str	r0, [r7, #36]	; 0x24
 8003e14:	e012      	b.n	8003e3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f107 0110 	add.w	r1, r7, #16
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2200      	movs	r2, #0
 8003e22:	f7fe fb5b 	bl	80024dc <xQueueGenericSend>
 8003e26:	6278      	str	r0, [r7, #36]	; 0x24
 8003e28:	e008      	b.n	8003e3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e2a:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <xTimerGenericCommand+0x98>)
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f107 0110 	add.w	r1, r7, #16
 8003e32:	2300      	movs	r3, #0
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	f7fe fc77 	bl	8002728 <xQueueGenericSendFromISR>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000e1c 	.word	0x20000e1c

08003e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e56:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <prvProcessExpiredTimer+0x94>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fa05 	bl	8002274 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d022      	beq.n	8003ebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	18d1      	adds	r1, r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	6978      	ldr	r0, [r7, #20]
 8003e86:	f000 f8d1 	bl	800402c <prvInsertTimerInActiveList>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01f      	beq.n	8003ed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e90:	2300      	movs	r3, #0
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7ff ff88 	bl	8003db0 <xTimerGenericCommand>
 8003ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d113      	bne.n	8003ed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	60fb      	str	r3, [r7, #12]
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	6978      	ldr	r0, [r7, #20]
 8003ed6:	4798      	blx	r3
}
 8003ed8:	bf00      	nop
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000e14 	.word	0x20000e14

08003ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eec:	f107 0308 	add.w	r3, r7, #8
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f857 	bl	8003fa4 <prvGetNextExpireTime>
 8003ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f803 	bl	8003f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f02:	f000 f8d5 	bl	80040b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f06:	e7f1      	b.n	8003eec <prvTimerTask+0x8>

08003f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f12:	f7ff f9cb 	bl	80032ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f866 	bl	8003fec <prvSampleTimeNow>
 8003f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d130      	bne.n	8003f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <prvProcessTimerOrBlockTask+0x3c>
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d806      	bhi.n	8003f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f36:	f7ff f9c7 	bl	80032c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff ff85 	bl	8003e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f42:	e024      	b.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <prvProcessTimerOrBlockTask+0x90>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <prvProcessTimerOrBlockTask+0x50>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <prvProcessTimerOrBlockTask+0x52>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <prvProcessTimerOrBlockTask+0x94>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f7fe fedf 	bl	8002d2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f6e:	f7ff f9ab 	bl	80032c8 <xTaskResumeAll>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <prvProcessTimerOrBlockTask+0x98>)
 8003f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	f3bf 8f4f 	dsb	sy
 8003f84:	f3bf 8f6f 	isb	sy
}
 8003f88:	e001      	b.n	8003f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f8a:	f7ff f99d 	bl	80032c8 <xTaskResumeAll>
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000e18 	.word	0x20000e18
 8003f9c:	20000e1c 	.word	0x20000e1c
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <prvGetNextExpireTime+0x44>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <prvGetNextExpireTime+0x16>
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	e000      	b.n	8003fbc <prvGetNextExpireTime+0x18>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <prvGetNextExpireTime+0x44>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	e001      	b.n	8003fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000e14 	.word	0x20000e14

08003fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003ff4:	f7ff fa0a 	bl	800340c <xTaskGetTickCount>
 8003ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <prvSampleTimeNow+0x3c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	429a      	cmp	r2, r3
 8004002:	d205      	bcs.n	8004010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004004:	f000 f936 	bl	8004274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e002      	b.n	8004016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <prvSampleTimeNow+0x3c>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800401c:	68fb      	ldr	r3, [r7, #12]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000e24 	.word	0x20000e24

0800402c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	d812      	bhi.n	8004078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	e01b      	b.n	800409e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <prvInsertTimerInActiveList+0x7c>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3304      	adds	r3, #4
 800406e:	4619      	mov	r1, r3
 8004070:	4610      	mov	r0, r2
 8004072:	f7fe f8c6 	bl	8002202 <vListInsert>
 8004076:	e012      	b.n	800409e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d206      	bcs.n	800408e <prvInsertTimerInActiveList+0x62>
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d302      	bcc.n	800408e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e007      	b.n	800409e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800408e:	4b07      	ldr	r3, [pc, #28]	; (80040ac <prvInsertTimerInActiveList+0x80>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3304      	adds	r3, #4
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f7fe f8b2 	bl	8002202 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000e18 	.word	0x20000e18
 80040ac:	20000e14 	.word	0x20000e14

080040b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08e      	sub	sp, #56	; 0x38
 80040b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b6:	e0ca      	b.n	800424e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	da18      	bge.n	80040f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	3304      	adds	r3, #4
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	61fb      	str	r3, [r7, #28]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	6850      	ldr	r0, [r2, #4]
 80040e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ea:	6892      	ldr	r2, [r2, #8]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f2c0 80ab 	blt.w	800424e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	3304      	adds	r3, #4
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe f8b3 	bl	8002274 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800410e:	463b      	mov	r3, r7
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff ff6b 	bl	8003fec <prvSampleTimeNow>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b09      	cmp	r3, #9
 800411c:	f200 8096 	bhi.w	800424c <prvProcessReceivedCommands+0x19c>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <prvProcessReceivedCommands+0x78>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004151 	.word	0x08004151
 800412c:	08004151 	.word	0x08004151
 8004130:	08004151 	.word	0x08004151
 8004134:	080041c5 	.word	0x080041c5
 8004138:	080041d9 	.word	0x080041d9
 800413c:	08004223 	.word	0x08004223
 8004140:	08004151 	.word	0x08004151
 8004144:	08004151 	.word	0x08004151
 8004148:	080041c5 	.word	0x080041c5
 800414c:	080041d9 	.word	0x080041d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	18d1      	adds	r1, r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004170:	f7ff ff5c 	bl	800402c <prvInsertTimerInActiveList>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d069      	beq.n	800424e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d05e      	beq.n	800424e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	441a      	add	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2300      	movs	r3, #0
 800419e:	2100      	movs	r1, #0
 80041a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a2:	f7ff fe05 	bl	8003db0 <xTimerGenericCommand>
 80041a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d14f      	bne.n	800424e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	61bb      	str	r3, [r7, #24]
}
 80041c0:	bf00      	nop
 80041c2:	e7fe      	b.n	80041c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80041d6:	e03a      	b.n	800424e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	617b      	str	r3, [r7, #20]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800420e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	18d1      	adds	r1, r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421c:	f7ff ff06 	bl	800402c <prvInsertTimerInActiveList>
					break;
 8004220:	e015      	b.n	800424e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d103      	bne.n	8004238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004232:	f000 fbdd 	bl	80049f0 <vPortFree>
 8004236:	e00a      	b.n	800424e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800424a:	e000      	b.n	800424e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800424c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <prvProcessReceivedCommands+0x1c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	1d39      	adds	r1, r7, #4
 8004254:	2200      	movs	r2, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f7fe fb16 	bl	8002888 <xQueueReceive>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f af2a 	bne.w	80040b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3730      	adds	r7, #48	; 0x30
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000e1c 	.word	0x20000e1c

08004274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800427a:	e048      	b.n	800430e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800427c:	4b2d      	ldr	r3, [pc, #180]	; (8004334 <prvSwitchTimerLists+0xc0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004286:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <prvSwitchTimerLists+0xc0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fd ffed 	bl	8002274 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02e      	beq.n	800430e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90e      	bls.n	80042e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ce:	4b19      	ldr	r3, [pc, #100]	; (8004334 <prvSwitchTimerLists+0xc0>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7fd ff92 	bl	8002202 <vListInsert>
 80042de:	e016      	b.n	800430e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042e0:	2300      	movs	r3, #0
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	2300      	movs	r3, #0
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	2100      	movs	r1, #0
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff fd60 	bl	8003db0 <xTimerGenericCommand>
 80042f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	603b      	str	r3, [r7, #0]
}
 800430a:	bf00      	nop
 800430c:	e7fe      	b.n	800430c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvSwitchTimerLists+0xc0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1b1      	bne.n	800427c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <prvSwitchTimerLists+0xc0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800431e:	4b06      	ldr	r3, [pc, #24]	; (8004338 <prvSwitchTimerLists+0xc4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a04      	ldr	r2, [pc, #16]	; (8004334 <prvSwitchTimerLists+0xc0>)
 8004324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <prvSwitchTimerLists+0xc4>)
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6013      	str	r3, [r2, #0]
}
 800432c:	bf00      	nop
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000e14 	.word	0x20000e14
 8004338:	20000e18 	.word	0x20000e18

0800433c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004342:	f000 f967 	bl	8004614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004346:	4b15      	ldr	r3, [pc, #84]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d120      	bne.n	8004390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800434e:	4814      	ldr	r0, [pc, #80]	; (80043a0 <prvCheckForValidListAndQueue+0x64>)
 8004350:	f7fd ff06 	bl	8002160 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004354:	4813      	ldr	r0, [pc, #76]	; (80043a4 <prvCheckForValidListAndQueue+0x68>)
 8004356:	f7fd ff03 	bl	8002160 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800435a:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <prvCheckForValidListAndQueue+0x6c>)
 800435c:	4a10      	ldr	r2, [pc, #64]	; (80043a0 <prvCheckForValidListAndQueue+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <prvCheckForValidListAndQueue+0x70>)
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <prvCheckForValidListAndQueue+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004366:	2300      	movs	r3, #0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	4b11      	ldr	r3, [pc, #68]	; (80043b0 <prvCheckForValidListAndQueue+0x74>)
 800436c:	4a11      	ldr	r2, [pc, #68]	; (80043b4 <prvCheckForValidListAndQueue+0x78>)
 800436e:	2110      	movs	r1, #16
 8004370:	200a      	movs	r0, #10
 8004372:	f7fe f811 	bl	8002398 <xQueueGenericCreateStatic>
 8004376:	4603      	mov	r3, r0
 8004378:	4a08      	ldr	r2, [pc, #32]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 800437a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <prvCheckForValidListAndQueue+0x60>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	490b      	ldr	r1, [pc, #44]	; (80043b8 <prvCheckForValidListAndQueue+0x7c>)
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe fc9c 	bl	8002cc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004390:	f000 f970 	bl	8004674 <vPortExitCritical>
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000e1c 	.word	0x20000e1c
 80043a0:	20000dec 	.word	0x20000dec
 80043a4:	20000e00 	.word	0x20000e00
 80043a8:	20000e14 	.word	0x20000e14
 80043ac:	20000e18 	.word	0x20000e18
 80043b0:	20000ec8 	.word	0x20000ec8
 80043b4:	20000e28 	.word	0x20000e28
 80043b8:	080067b8 	.word	0x080067b8

080043bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b04      	subs	r3, #4
 80043cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b04      	subs	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0201 	bic.w	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3b04      	subs	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043ec:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <pxPortInitialiseStack+0x64>)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3b14      	subs	r3, #20
 80043f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b04      	subs	r3, #4
 8004402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f06f 0202 	mvn.w	r2, #2
 800440a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3b20      	subs	r3, #32
 8004410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	08004425 	.word	0x08004425

08004424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <prvTaskExitError+0x54>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004436:	d00a      	beq.n	800444e <prvTaskExitError+0x2a>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <prvTaskExitError+0x28>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60bb      	str	r3, [r7, #8]
}
 8004460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004462:	bf00      	nop
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0fc      	beq.n	8004464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800446a:	bf00      	nop
 800446c:	bf00      	nop
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	2000000c 	.word	0x2000000c
 800447c:	00000000 	.word	0x00000000

08004480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004480:	4b07      	ldr	r3, [pc, #28]	; (80044a0 <pxCurrentTCBConst2>)
 8004482:	6819      	ldr	r1, [r3, #0]
 8004484:	6808      	ldr	r0, [r1, #0]
 8004486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	f380 8809 	msr	PSP, r0
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	4770      	bx	lr
 800449c:	f3af 8000 	nop.w

080044a0 <pxCurrentTCBConst2>:
 80044a0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop

080044a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044a8:	4808      	ldr	r0, [pc, #32]	; (80044cc <prvPortStartFirstTask+0x24>)
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	f380 8808 	msr	MSP, r0
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f380 8814 	msr	CONTROL, r0
 80044ba:	b662      	cpsie	i
 80044bc:	b661      	cpsie	f
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	df00      	svc	0
 80044c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044ca:	bf00      	nop
 80044cc:	e000ed08 	.word	0xe000ed08

080044d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044d6:	4b46      	ldr	r3, [pc, #280]	; (80045f0 <xPortStartScheduler+0x120>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a46      	ldr	r2, [pc, #280]	; (80045f4 <xPortStartScheduler+0x124>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10a      	bne.n	80044f6 <xPortStartScheduler+0x26>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <xPortStartScheduler+0x120>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <xPortStartScheduler+0x128>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d10a      	bne.n	8004516 <xPortStartScheduler+0x46>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60fb      	str	r3, [r7, #12]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004516:	4b39      	ldr	r3, [pc, #228]	; (80045fc <xPortStartScheduler+0x12c>)
 8004518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <xPortStartScheduler+0x130>)
 800453c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <xPortStartScheduler+0x134>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004544:	e009      	b.n	800455a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	4a2d      	ldr	r2, [pc, #180]	; (8004604 <xPortStartScheduler+0x134>)
 800454e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d0ef      	beq.n	8004546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <xPortStartScheduler+0x134>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1c3 0307 	rsb	r3, r3, #7
 800456e:	2b04      	cmp	r3, #4
 8004570:	d00a      	beq.n	8004588 <xPortStartScheduler+0xb8>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	60bb      	str	r3, [r7, #8]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <xPortStartScheduler+0x134>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <xPortStartScheduler+0x134>)
 8004590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004592:	4b1c      	ldr	r3, [pc, #112]	; (8004604 <xPortStartScheduler+0x134>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <xPortStartScheduler+0x134>)
 800459c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <xPortStartScheduler+0x138>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a17      	ldr	r2, [pc, #92]	; (8004608 <xPortStartScheduler+0x138>)
 80045ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <xPortStartScheduler+0x138>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a14      	ldr	r2, [pc, #80]	; (8004608 <xPortStartScheduler+0x138>)
 80045b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045be:	f000 f8dd 	bl	800477c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <xPortStartScheduler+0x13c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045c8:	f000 f8fc 	bl	80047c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045cc:	4b10      	ldr	r3, [pc, #64]	; (8004610 <xPortStartScheduler+0x140>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <xPortStartScheduler+0x140>)
 80045d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045d8:	f7ff ff66 	bl	80044a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045dc:	f7fe fff6 	bl	80035cc <vTaskSwitchContext>
	prvTaskExitError();
 80045e0:	f7ff ff20 	bl	8004424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000ed00 	.word	0xe000ed00
 80045f4:	410fc271 	.word	0x410fc271
 80045f8:	410fc270 	.word	0x410fc270
 80045fc:	e000e400 	.word	0xe000e400
 8004600:	20000f18 	.word	0x20000f18
 8004604:	20000f1c 	.word	0x20000f1c
 8004608:	e000ed20 	.word	0xe000ed20
 800460c:	2000000c 	.word	0x2000000c
 8004610:	e000ef34 	.word	0xe000ef34

08004614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	607b      	str	r3, [r7, #4]
}
 800462c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <vPortEnterCritical+0x58>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a0d      	ldr	r2, [pc, #52]	; (800466c <vPortEnterCritical+0x58>)
 8004636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <vPortEnterCritical+0x58>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d10f      	bne.n	8004660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <vPortEnterCritical+0x5c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <vPortEnterCritical+0x4c>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	603b      	str	r3, [r7, #0]
}
 800465c:	bf00      	nop
 800465e:	e7fe      	b.n	800465e <vPortEnterCritical+0x4a>
	}
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	2000000c 	.word	0x2000000c
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <vPortExitCritical+0x50>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <vPortExitCritical+0x24>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
}
 8004694:	bf00      	nop
 8004696:	e7fe      	b.n	8004696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <vPortExitCritical+0x50>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <vPortExitCritical+0x50>)
 80046a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046a2:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <vPortExitCritical+0x50>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <vPortExitCritical+0x42>
 80046aa:	2300      	movs	r3, #0
 80046ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	f383 8811 	msr	BASEPRI, r3
}
 80046b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c
	...

080046d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046d0:	f3ef 8009 	mrs	r0, PSP
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <pxCurrentTCBConst>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	f01e 0f10 	tst.w	lr, #16
 80046e0:	bf08      	it	eq
 80046e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	6010      	str	r0, [r2, #0]
 80046ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046f4:	f380 8811 	msr	BASEPRI, r0
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f7fe ff64 	bl	80035cc <vTaskSwitchContext>
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f380 8811 	msr	BASEPRI, r0
 800470c:	bc09      	pop	{r0, r3}
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	6808      	ldr	r0, [r1, #0]
 8004712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004716:	f01e 0f10 	tst.w	lr, #16
 800471a:	bf08      	it	eq
 800471c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004720:	f380 8809 	msr	PSP, r0
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	f3af 8000 	nop.w

08004730 <pxCurrentTCBConst>:
 8004730:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop

08004738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
}
 8004750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004752:	f7fe fe7d 	bl	8003450 <xTaskIncrementTick>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <xPortSysTickHandler+0x40>)
 800475e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	2300      	movs	r3, #0
 8004766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f383 8811 	msr	BASEPRI, r3
}
 800476e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <vPortSetupTimerInterrupt+0x38>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800478c:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <vPortSetupTimerInterrupt+0x3c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <vPortSetupTimerInterrupt+0x40>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <vPortSetupTimerInterrupt+0x44>)
 800479a:	3b01      	subs	r3, #1
 800479c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <vPortSetupTimerInterrupt+0x34>)
 80047a0:	2207      	movs	r2, #7
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000e010 	.word	0xe000e010
 80047b4:	e000e018 	.word	0xe000e018
 80047b8:	20000000 	.word	0x20000000
 80047bc:	10624dd3 	.word	0x10624dd3
 80047c0:	e000e014 	.word	0xe000e014

080047c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047d4 <vPortEnableVFP+0x10>
 80047c8:	6801      	ldr	r1, [r0, #0]
 80047ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ce:	6001      	str	r1, [r0, #0]
 80047d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047d2:	bf00      	nop
 80047d4:	e000ed88 	.word	0xe000ed88

080047d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047de:	f3ef 8305 	mrs	r3, IPSR
 80047e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	d914      	bls.n	8004814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ea:	4a17      	ldr	r2, [pc, #92]	; (8004848 <vPortValidateInterruptPriority+0x70>)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <vPortValidateInterruptPriority+0x74>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	7afa      	ldrb	r2, [r7, #11]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d20a      	bcs.n	8004814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <vPortValidateInterruptPriority+0x78>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <vPortValidateInterruptPriority+0x7c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d90a      	bls.n	800483a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	603b      	str	r3, [r7, #0]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <vPortValidateInterruptPriority+0x60>
	}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	e000e3f0 	.word	0xe000e3f0
 800484c:	20000f18 	.word	0x20000f18
 8004850:	e000ed0c 	.word	0xe000ed0c
 8004854:	20000f1c 	.word	0x20000f1c

08004858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004860:	2300      	movs	r3, #0
 8004862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004864:	f7fe fd22 	bl	80032ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004868:	4b5b      	ldr	r3, [pc, #364]	; (80049d8 <pvPortMalloc+0x180>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004870:	f000 f920 	bl	8004ab4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004874:	4b59      	ldr	r3, [pc, #356]	; (80049dc <pvPortMalloc+0x184>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8093 	bne.w	80049a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01d      	beq.n	80048c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004888:	2208      	movs	r2, #8
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	2b00      	cmp	r3, #0
 8004898:	d014      	beq.n	80048c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f023 0307 	bic.w	r3, r3, #7
 80048a0:	3308      	adds	r3, #8
 80048a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <pvPortMalloc+0x6c>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	617b      	str	r3, [r7, #20]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d06e      	beq.n	80049a8 <pvPortMalloc+0x150>
 80048ca:	4b45      	ldr	r3, [pc, #276]	; (80049e0 <pvPortMalloc+0x188>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d869      	bhi.n	80049a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048d4:	4b43      	ldr	r3, [pc, #268]	; (80049e4 <pvPortMalloc+0x18c>)
 80048d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048d8:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <pvPortMalloc+0x18c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048de:	e004      	b.n	80048ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d903      	bls.n	80048fc <pvPortMalloc+0xa4>
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1f1      	bne.n	80048e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <pvPortMalloc+0x180>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004902:	429a      	cmp	r2, r3
 8004904:	d050      	beq.n	80049a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2208      	movs	r2, #8
 800490c:	4413      	add	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	1ad2      	subs	r2, r2, r3
 8004920:	2308      	movs	r3, #8
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	429a      	cmp	r2, r3
 8004926:	d91f      	bls.n	8004968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4413      	add	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <pvPortMalloc+0xf8>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	613b      	str	r3, [r7, #16]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1ad2      	subs	r2, r2, r3
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004962:	69b8      	ldr	r0, [r7, #24]
 8004964:	f000 f908 	bl	8004b78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <pvPortMalloc+0x188>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	4a1b      	ldr	r2, [pc, #108]	; (80049e0 <pvPortMalloc+0x188>)
 8004974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <pvPortMalloc+0x188>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <pvPortMalloc+0x190>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d203      	bcs.n	800498a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <pvPortMalloc+0x188>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <pvPortMalloc+0x190>)
 8004988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4b13      	ldr	r3, [pc, #76]	; (80049dc <pvPortMalloc+0x184>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	431a      	orrs	r2, r3
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800499e:	4b13      	ldr	r3, [pc, #76]	; (80049ec <pvPortMalloc+0x194>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3301      	adds	r3, #1
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <pvPortMalloc+0x194>)
 80049a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049a8:	f7fe fc8e 	bl	80032c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <pvPortMalloc+0x174>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60fb      	str	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <pvPortMalloc+0x172>
	return pvReturn;
 80049cc:	69fb      	ldr	r3, [r7, #28]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3728      	adds	r7, #40	; 0x28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20004b28 	.word	0x20004b28
 80049dc:	20004b3c 	.word	0x20004b3c
 80049e0:	20004b2c 	.word	0x20004b2c
 80049e4:	20004b20 	.word	0x20004b20
 80049e8:	20004b30 	.word	0x20004b30
 80049ec:	20004b34 	.word	0x20004b34

080049f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04d      	beq.n	8004a9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a02:	2308      	movs	r3, #8
 8004a04:	425b      	negs	r3, r3
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4413      	add	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <vPortFree+0xb8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <vPortFree+0x44>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <vPortFree+0x62>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60bb      	str	r3, [r7, #8]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <vPortFree+0xb8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01e      	beq.n	8004a9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d11a      	bne.n	8004a9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4b0e      	ldr	r3, [pc, #56]	; (8004aa8 <vPortFree+0xb8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	401a      	ands	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a78:	f7fe fc18 	bl	80032ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <vPortFree+0xbc>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4413      	add	r3, r2
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <vPortFree+0xbc>)
 8004a88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a8a:	6938      	ldr	r0, [r7, #16]
 8004a8c:	f000 f874 	bl	8004b78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <vPortFree+0xc0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	4a06      	ldr	r2, [pc, #24]	; (8004ab0 <vPortFree+0xc0>)
 8004a98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a9a:	f7fe fc15 	bl	80032c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20004b3c 	.word	0x20004b3c
 8004aac:	20004b2c 	.word	0x20004b2c
 8004ab0:	20004b38 	.word	0x20004b38

08004ab4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004abe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <prvHeapInit+0xac>)
 8004ac2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00c      	beq.n	8004ae8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3307      	adds	r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0307 	bic.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <prvHeapInit+0xac>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004aec:	4a1d      	ldr	r2, [pc, #116]	; (8004b64 <prvHeapInit+0xb0>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <prvHeapInit+0xb0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b00:	2208      	movs	r2, #8
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0307 	bic.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4a15      	ldr	r2, [pc, #84]	; (8004b68 <prvHeapInit+0xb4>)
 8004b14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <prvHeapInit+0xb4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b1e:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <prvHeapInit+0xb4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <prvHeapInit+0xb4>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <prvHeapInit+0xb8>)
 8004b42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4a09      	ldr	r2, [pc, #36]	; (8004b70 <prvHeapInit+0xbc>)
 8004b4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b4c:	4b09      	ldr	r3, [pc, #36]	; (8004b74 <prvHeapInit+0xc0>)
 8004b4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000f20 	.word	0x20000f20
 8004b64:	20004b20 	.word	0x20004b20
 8004b68:	20004b28 	.word	0x20004b28
 8004b6c:	20004b30 	.word	0x20004b30
 8004b70:	20004b2c 	.word	0x20004b2c
 8004b74:	20004b3c 	.word	0x20004b3c

08004b78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b80:	4b28      	ldr	r3, [pc, #160]	; (8004c24 <prvInsertBlockIntoFreeList+0xac>)
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e002      	b.n	8004b8c <prvInsertBlockIntoFreeList+0x14>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d8f7      	bhi.n	8004b86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d108      	bne.n	8004bba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d118      	bne.n	8004c00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <prvInsertBlockIntoFreeList+0xb0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d00d      	beq.n	8004bf6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e008      	b.n	8004c08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bf6:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <prvInsertBlockIntoFreeList+0xb0>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e003      	b.n	8004c08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d002      	beq.n	8004c16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20004b20 	.word	0x20004b20
 8004c28:	20004b28 	.word	0x20004b28

08004c2c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c30:	4803      	ldr	r0, [pc, #12]	; (8004c40 <_cbSendSystemDesc+0x14>)
 8004c32:	f001 fa11 	bl	8006058 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c36:	4803      	ldr	r0, [pc, #12]	; (8004c44 <_cbSendSystemDesc+0x18>)
 8004c38:	f001 fa0e 	bl	8006058 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	080067c0 	.word	0x080067c0
 8004c44:	08006804 	.word	0x08006804

08004c48 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <SEGGER_SYSVIEW_Conf+0x20>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <SEGGER_SYSVIEW_Conf+0x24>)
 8004c56:	4a06      	ldr	r2, [pc, #24]	; (8004c70 <SEGGER_SYSVIEW_Conf+0x28>)
 8004c58:	f000 fd7c 	bl	8005754 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c5c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004c60:	f000 fdbc 	bl	80057dc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	08004c2d 	.word	0x08004c2d
 8004c70:	080068e0 	.word	0x080068e0

08004c74 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	e048      	b.n	8004d12 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8004c80:	4929      	ldr	r1, [pc, #164]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe feed 	bl	8003a70 <uxTaskGetStackHighWaterMark>
 8004c96:	4601      	mov	r1, r0
 8004c98:	4823      	ldr	r0, [pc, #140]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4403      	add	r3, r0
 8004ca6:	3310      	adds	r3, #16
 8004ca8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004caa:	491f      	ldr	r1, [pc, #124]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	491b      	ldr	r1, [pc, #108]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3304      	adds	r3, #4
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	4c16      	ldr	r4, [pc, #88]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4423      	add	r3, r4
 8004cda:	3308      	adds	r3, #8
 8004cdc:	681c      	ldr	r4, [r3, #0]
 8004cde:	4d12      	ldr	r5, [pc, #72]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	442b      	add	r3, r5
 8004cec:	330c      	adds	r3, #12
 8004cee:	681d      	ldr	r5, [r3, #0]
 8004cf0:	4e0d      	ldr	r6, [pc, #52]	; (8004d28 <_cbSendTaskList+0xb4>)
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4433      	add	r3, r6
 8004cfe:	3310      	adds	r3, #16
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	462b      	mov	r3, r5
 8004d06:	4622      	mov	r2, r4
 8004d08:	f000 f8be 	bl	8004e88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <_cbSendTaskList+0xb8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d3b1      	bcc.n	8004c80 <_cbSendTaskList+0xc>
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d26:	bf00      	nop
 8004d28:	20004b40 	.word	0x20004b40
 8004d2c:	20004be0 	.word	0x20004be0

08004d30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d38:	f7fe fb78 	bl	800342c <xTaskGetTickCountFromISR>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2200      	movs	r2, #0
 8004d40:	469a      	mov	sl, r3
 8004d42:	4693      	mov	fp, r2
 8004d44:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	f04f 0a00 	mov.w	sl, #0
 8004d54:	f04f 0b00 	mov.w	fp, #0
 8004d58:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d5c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004d60:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004d64:	4652      	mov	r2, sl
 8004d66:	465b      	mov	r3, fp
 8004d68:	1a14      	subs	r4, r2, r0
 8004d6a:	eb63 0501 	sbc.w	r5, r3, r1
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	00ab      	lsls	r3, r5, #2
 8004d78:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004d7c:	00a2      	lsls	r2, r4, #2
 8004d7e:	4614      	mov	r4, r2
 8004d80:	461d      	mov	r5, r3
 8004d82:	eb14 0800 	adds.w	r8, r4, r0
 8004d86:	eb45 0901 	adc.w	r9, r5, r1
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d9e:	4690      	mov	r8, r2
 8004da0:	4699      	mov	r9, r3
 8004da2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004da6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004db8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004dc6:	2205      	movs	r2, #5
 8004dc8:	492b      	ldr	r1, [pc, #172]	; (8004e78 <SYSVIEW_AddTask+0xc0>)
 8004dca:	68b8      	ldr	r0, [r7, #8]
 8004dcc:	f001 fbce 	bl	800656c <memcmp>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d04b      	beq.n	8004e6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004dd6:	4b29      	ldr	r3, [pc, #164]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b07      	cmp	r3, #7
 8004ddc:	d903      	bls.n	8004de6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004dde:	4828      	ldr	r0, [pc, #160]	; (8004e80 <SYSVIEW_AddTask+0xc8>)
 8004de0:	f001 fb68 	bl	80064b4 <SEGGER_SYSVIEW_Warn>
    return;
 8004de4:	e044      	b.n	8004e70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004de6:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4926      	ldr	r1, [pc, #152]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004dfa:	4b20      	ldr	r3, [pc, #128]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4921      	ldr	r1, [pc, #132]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e00:	4613      	mov	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	491b      	ldr	r1, [pc, #108]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3308      	adds	r3, #8
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4916      	ldr	r1, [pc, #88]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	330c      	adds	r3, #12
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4910      	ldr	r1, [pc, #64]	; (8004e84 <SYSVIEW_AddTask+0xcc>)
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3310      	adds	r3, #16
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3301      	adds	r3, #1
 8004e58:	4a08      	ldr	r2, [pc, #32]	; (8004e7c <SYSVIEW_AddTask+0xc4>)
 8004e5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f80e 	bl	8004e88 <SYSVIEW_SendTaskInfo>
 8004e6c:	e000      	b.n	8004e70 <SYSVIEW_AddTask+0xb8>
    return;
 8004e6e:	bf00      	nop

}
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	08006814 	.word	0x08006814
 8004e7c:	20004be0 	.word	0x20004be0
 8004e80:	0800681c 	.word	0x0800681c
 8004e84:	20004b40 	.word	0x20004b40

08004e88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004e96:	f107 0310 	add.w	r3, r7, #16
 8004e9a:	2218      	movs	r2, #24
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fb74 	bl	800658c <memset>
  TaskInfo.TaskID     = TaskID;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 ffd3 	bl	8005e68 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ec2:	bf00      	nop
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
	...

08004ecc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004ed2:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <_DoInit+0xa0>)
 8004ed4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004ed6:	22a8      	movs	r2, #168	; 0xa8
 8004ed8:	2100      	movs	r1, #0
 8004eda:	6838      	ldr	r0, [r7, #0]
 8004edc:	f001 fb56 	bl	800658c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <_DoInit+0xa4>)
 8004ef0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <_DoInit+0xa8>)
 8004ef6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <_DoInit+0xa4>)
 8004f16:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	4a17      	ldr	r2, [pc, #92]	; (8004f78 <_DoInit+0xac>)
 8004f1c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2210      	movs	r2, #16
 8004f22:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004f36:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	e00c      	b.n	8004f5a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f1c3 030f 	rsb	r3, r3, #15
 8004f46:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <_DoInit+0xb0>)
 8004f48:	5cd1      	ldrb	r1, [r2, r3]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4413      	add	r3, r2
 8004f50:	460a      	mov	r2, r1
 8004f52:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3301      	adds	r3, #1
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b0f      	cmp	r3, #15
 8004f5e:	d9ef      	bls.n	8004f40 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004f60:	f3bf 8f5f 	dmb	sy
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20004be4 	.word	0x20004be4
 8004f70:	0800686c 	.word	0x0800686c
 8004f74:	20004c8c 	.word	0x20004c8c
 8004f78:	2000508c 	.word	0x2000508c
 8004f7c:	080068e8 	.word	0x080068e8

08004f80 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f8c:	4b3e      	ldr	r3, [pc, #248]	; (8005088 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f8e:	623b      	str	r3, [r7, #32]
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b53      	cmp	r3, #83	; 0x53
 8004f98:	d001      	beq.n	8004f9e <SEGGER_RTT_ReadNoLock+0x1e>
 8004f9a:	f7ff ff97 	bl	8004ecc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	3360      	adds	r3, #96	; 0x60
 8004faa:	4a37      	ldr	r2, [pc, #220]	; (8005088 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fac:	4413      	add	r3, r2
 8004fae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d92b      	bls.n	8005024 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	bf28      	it	cs
 8004fde:	4613      	movcs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	4413      	add	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	6939      	ldr	r1, [r7, #16]
 8004ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ff2:	f001 fb4f 	bl	8006694 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800500e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501c:	429a      	cmp	r2, r3
 800501e:	d101      	bne.n	8005024 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005020:	2300      	movs	r3, #0
 8005022:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4293      	cmp	r3, r2
 8005032:	bf28      	it	cs
 8005034:	4613      	movcs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d019      	beq.n	8005072 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	4413      	add	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800504e:	f001 fb21 	bl	8006694 <memcpy>
    NumBytesRead += NumBytesRem;
 8005052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800506a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005080:	4618      	mov	r0, r3
 8005082:	3730      	adds	r7, #48	; 0x30
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20004be4 	.word	0x20004be4

0800508c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800509a:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b53      	cmp	r3, #83	; 0x53
 80050a6:	d001      	beq.n	80050ac <SEGGER_RTT_AllocUpBuffer+0x20>
 80050a8:	f7ff ff10 	bl	8004ecc <_DoInit>
  SEGGER_RTT_LOCK();
 80050ac:	f3ef 8311 	mrs	r3, BASEPRI
 80050b0:	f04f 0120 	mov.w	r1, #32
 80050b4:	f381 8811 	msr	BASEPRI, r1
 80050b8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050ba:	4b35      	ldr	r3, [pc, #212]	; (8005190 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80050bc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80050c2:	6939      	ldr	r1, [r7, #16]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	00db      	lsls	r3, r3, #3
 80050d0:	440b      	add	r3, r1
 80050d2:	3304      	adds	r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	3301      	adds	r3, #1
 80050de:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	dbeb      	blt.n	80050c2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80050ea:	e000      	b.n	80050ee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80050ec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	da3f      	bge.n	8005178 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050f8:	6939      	ldr	r1, [r7, #16]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	4613      	mov	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	4413      	add	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	440b      	add	r3, r1
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800510c:	6939      	ldr	r1, [r7, #16]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	4613      	mov	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3304      	adds	r3, #4
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005122:	6939      	ldr	r1, [r7, #16]
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	440b      	add	r3, r1
 8005130:	3320      	adds	r3, #32
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	4613      	mov	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	4413      	add	r3, r2
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	440b      	add	r3, r1
 8005144:	3328      	adds	r3, #40	; 0x28
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800514a:	6939      	ldr	r1, [r7, #16]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	440b      	add	r3, r1
 8005158:	3324      	adds	r3, #36	; 0x24
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800515e:	6939      	ldr	r1, [r7, #16]
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	4613      	mov	r3, r2
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	332c      	adds	r3, #44	; 0x2c
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005172:	f3bf 8f5f 	dmb	sy
 8005176:	e002      	b.n	800517e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005184:	69fb      	ldr	r3, [r7, #28]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20004be4 	.word	0x20004be4

08005194 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	; 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80051a2:	4b21      	ldr	r3, [pc, #132]	; (8005228 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b53      	cmp	r3, #83	; 0x53
 80051ae:	d001      	beq.n	80051b4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80051b0:	f7ff fe8c 	bl	8004ecc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80051b6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d82c      	bhi.n	8005218 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80051be:	f3ef 8311 	mrs	r3, BASEPRI
 80051c2:	f04f 0120 	mov.w	r1, #32
 80051c6:	f381 8811 	msr	BASEPRI, r1
 80051ca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	3360      	adds	r3, #96	; 0x60
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00e      	beq.n	8005202 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005208:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005212:	2300      	movs	r3, #0
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	e002      	b.n	800521e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005218:	f04f 33ff 	mov.w	r3, #4294967295
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005220:	4618      	mov	r0, r3
 8005222:	3728      	adds	r7, #40	; 0x28
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20004be4 	.word	0x20004be4

0800522c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800522c:	b480      	push	{r7}
 800522e:	b087      	sub	sp, #28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d105      	bne.n	800524a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	60fa      	str	r2, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	e022      	b.n	8005290 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	60fa      	str	r2, [r7, #12]
 8005254:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b80      	cmp	r3, #128	; 0x80
 800525a:	d90a      	bls.n	8005272 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005260:	e007      	b.n	8005272 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	1c53      	adds	r3, r2, #1
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	1c59      	adds	r1, r3, #1
 800526c:	60f9      	str	r1, [r7, #12]
 800526e:	7812      	ldrb	r2, [r2, #0]
 8005270:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <_EncodeStr+0x58>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1ee      	bne.n	8005262 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	b2da      	uxtb	r2, r3
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005290:	68fb      	ldr	r3, [r7, #12]
}
 8005292:	4618      	mov	r0, r3
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800529e:	b480      	push	{r7}
 80052a0:	b083      	sub	sp, #12
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3307      	adds	r3, #7
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80052be:	4b34      	ldr	r3, [pc, #208]	; (8005390 <_HandleIncomingPacket+0xd8>)
 80052c0:	7e1b      	ldrb	r3, [r3, #24]
 80052c2:	4618      	mov	r0, r3
 80052c4:	1cfb      	adds	r3, r7, #3
 80052c6:	2201      	movs	r2, #1
 80052c8:	4619      	mov	r1, r3
 80052ca:	f7ff fe59 	bl	8004f80 <SEGGER_RTT_ReadNoLock>
 80052ce:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d057      	beq.n	8005386 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	2b80      	cmp	r3, #128	; 0x80
 80052da:	d031      	beq.n	8005340 <_HandleIncomingPacket+0x88>
 80052dc:	2b80      	cmp	r3, #128	; 0x80
 80052de:	dc40      	bgt.n	8005362 <_HandleIncomingPacket+0xaa>
 80052e0:	2b07      	cmp	r3, #7
 80052e2:	dc15      	bgt.n	8005310 <_HandleIncomingPacket+0x58>
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dd3c      	ble.n	8005362 <_HandleIncomingPacket+0xaa>
 80052e8:	3b01      	subs	r3, #1
 80052ea:	2b06      	cmp	r3, #6
 80052ec:	d839      	bhi.n	8005362 <_HandleIncomingPacket+0xaa>
 80052ee:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <_HandleIncomingPacket+0x3c>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005317 	.word	0x08005317
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005323 	.word	0x08005323
 8005300:	08005329 	.word	0x08005329
 8005304:	0800532f 	.word	0x0800532f
 8005308:	08005335 	.word	0x08005335
 800530c:	0800533b 	.word	0x0800533b
 8005310:	2b7f      	cmp	r3, #127	; 0x7f
 8005312:	d033      	beq.n	800537c <_HandleIncomingPacket+0xc4>
 8005314:	e025      	b.n	8005362 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005316:	f000 fc2d 	bl	8005b74 <SEGGER_SYSVIEW_Start>
      break;
 800531a:	e034      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800531c:	f000 fce4 	bl	8005ce8 <SEGGER_SYSVIEW_Stop>
      break;
 8005320:	e031      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005322:	f000 febd 	bl	80060a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005326:	e02e      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005328:	f000 fe82 	bl	8006030 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800532c:	e02b      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800532e:	f000 fd01 	bl	8005d34 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005332:	e028      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005334:	f001 f880 	bl	8006438 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005338:	e025      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800533a:	f001 f85f 	bl	80063fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800533e:	e022      	b.n	8005386 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005340:	4b13      	ldr	r3, [pc, #76]	; (8005390 <_HandleIncomingPacket+0xd8>)
 8005342:	7e1b      	ldrb	r3, [r3, #24]
 8005344:	4618      	mov	r0, r3
 8005346:	1cfb      	adds	r3, r7, #3
 8005348:	2201      	movs	r2, #1
 800534a:	4619      	mov	r1, r3
 800534c:	f7ff fe18 	bl	8004f80 <SEGGER_RTT_ReadNoLock>
 8005350:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d013      	beq.n	8005380 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	4618      	mov	r0, r3
 800535c:	f000 ffc4 	bl	80062e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005360:	e00e      	b.n	8005380 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	b25b      	sxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	da0c      	bge.n	8005384 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <_HandleIncomingPacket+0xd8>)
 800536c:	7e1b      	ldrb	r3, [r3, #24]
 800536e:	4618      	mov	r0, r3
 8005370:	1cfb      	adds	r3, r7, #3
 8005372:	2201      	movs	r2, #1
 8005374:	4619      	mov	r1, r3
 8005376:	f7ff fe03 	bl	8004f80 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800537a:	e003      	b.n	8005384 <_HandleIncomingPacket+0xcc>
      break;
 800537c:	bf00      	nop
 800537e:	e002      	b.n	8005386 <_HandleIncomingPacket+0xce>
      break;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <_HandleIncomingPacket+0xce>
      break;
 8005384:	bf00      	nop
    }
  }
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200070a4 	.word	0x200070a4

08005394 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800539a:	2301      	movs	r3, #1
 800539c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	3301      	adds	r3, #1
 80053a2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a8:	4b31      	ldr	r3, [pc, #196]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ae:	e00b      	b.n	80053c8 <_TrySendOverflowPacket+0x34>
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	09db      	lsrs	r3, r3, #7
 80053c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d8f0      	bhi.n	80053b0 <_TrySendOverflowPacket+0x1c>
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053dc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <_TrySendOverflowPacket+0xe0>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80053e4:	4b22      	ldr	r3, [pc, #136]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	623b      	str	r3, [r7, #32]
 80053f6:	e00b      	b.n	8005410 <_TrySendOverflowPacket+0x7c>
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	6279      	str	r1, [r7, #36]	; 0x24
 8005402:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	09db      	lsrs	r3, r3, #7
 800540e:	623b      	str	r3, [r7, #32]
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	2b7f      	cmp	r3, #127	; 0x7f
 8005414:	d8f0      	bhi.n	80053f8 <_TrySendOverflowPacket+0x64>
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	627a      	str	r2, [r7, #36]	; 0x24
 800541c:	6a3a      	ldr	r2, [r7, #32]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	4618      	mov	r0, r3
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	461a      	mov	r2, r3
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	4619      	mov	r1, r3
 8005438:	f7fa feea 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800543c:	4603      	mov	r3, r0
 800543e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d009      	beq.n	800545a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800544c:	4b08      	ldr	r3, [pc, #32]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	3b01      	subs	r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e004      	b.n	8005464 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	3301      	adds	r3, #1
 8005460:	4a03      	ldr	r2, [pc, #12]	; (8005470 <_TrySendOverflowPacket+0xdc>)
 8005462:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005464:	693b      	ldr	r3, [r7, #16]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3730      	adds	r7, #48	; 0x30
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200070a4 	.word	0x200070a4
 8005474:	e0001004 	.word	0xe0001004

08005478 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005484:	4b98      	ldr	r3, [pc, #608]	; (80056e8 <_SendPacket+0x270>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d010      	beq.n	80054ae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800548c:	4b96      	ldr	r3, [pc, #600]	; (80056e8 <_SendPacket+0x270>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 812d 	beq.w	80056f0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005496:	4b94      	ldr	r3, [pc, #592]	; (80056e8 <_SendPacket+0x270>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d109      	bne.n	80054b2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800549e:	f7ff ff79 	bl	8005394 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054a2:	4b91      	ldr	r3, [pc, #580]	; (80056e8 <_SendPacket+0x270>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	f040 8124 	bne.w	80056f4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80054ac:	e001      	b.n	80054b2 <_SendPacket+0x3a>
    goto Send;
 80054ae:	bf00      	nop
 80054b0:	e000      	b.n	80054b4 <_SendPacket+0x3c>
Send:
 80054b2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b1f      	cmp	r3, #31
 80054b8:	d809      	bhi.n	80054ce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80054ba:	4b8b      	ldr	r3, [pc, #556]	; (80056e8 <_SendPacket+0x270>)
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f040 8115 	bne.w	80056f8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b17      	cmp	r3, #23
 80054d2:	d807      	bhi.n	80054e4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	e0c4      	b.n	800566e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b7f      	cmp	r3, #127	; 0x7f
 80054f0:	d912      	bls.n	8005518 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	09da      	lsrs	r2, r3, #7
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	3a01      	subs	r2, #1
 800550a:	60fa      	str	r2, [r7, #12]
 800550c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005510:	b2da      	uxtb	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e006      	b.n	8005526 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b7e      	cmp	r3, #126	; 0x7e
 800552a:	d807      	bhi.n	800553c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3b01      	subs	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	e098      	b.n	800566e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005542:	d212      	bcs.n	800556a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	09da      	lsrs	r2, r3, #7
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3b01      	subs	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	3a01      	subs	r2, #1
 800555c:	60fa      	str	r2, [r7, #12]
 800555e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e081      	b.n	800566e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005570:	d21d      	bcs.n	80055ae <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	0b9a      	lsrs	r2, r3, #14
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3b01      	subs	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	09db      	lsrs	r3, r3, #7
 8005586:	b2db      	uxtb	r3, r3
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	3a01      	subs	r2, #1
 800558c:	60fa      	str	r2, [r7, #12]
 800558e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005592:	b2da      	uxtb	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	3a01      	subs	r2, #1
 80055a0:	60fa      	str	r2, [r7, #12]
 80055a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e05f      	b.n	800566e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055b4:	d228      	bcs.n	8005608 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	0d5a      	lsrs	r2, r3, #21
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3b01      	subs	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0b9b      	lsrs	r3, r3, #14
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	60fa      	str	r2, [r7, #12]
 80055d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	09db      	lsrs	r3, r3, #7
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	3a01      	subs	r2, #1
 80055e6:	60fa      	str	r2, [r7, #12]
 80055e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	3a01      	subs	r2, #1
 80055fa:	60fa      	str	r2, [r7, #12]
 80055fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e032      	b.n	800566e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	0f1a      	lsrs	r2, r3, #28
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3b01      	subs	r3, #1
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0d5b      	lsrs	r3, r3, #21
 800561c:	b2db      	uxtb	r3, r3
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	3a01      	subs	r2, #1
 8005622:	60fa      	str	r2, [r7, #12]
 8005624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	0b9b      	lsrs	r3, r3, #14
 8005632:	b2db      	uxtb	r3, r3
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	3a01      	subs	r2, #1
 8005638:	60fa      	str	r2, [r7, #12]
 800563a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	09db      	lsrs	r3, r3, #7
 8005648:	b2db      	uxtb	r3, r3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	3a01      	subs	r2, #1
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	3a01      	subs	r2, #1
 8005662:	60fa      	str	r2, [r7, #12]
 8005664:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800566e:	4b1f      	ldr	r3, [pc, #124]	; (80056ec <_SendPacket+0x274>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005674:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <_SendPacket+0x270>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	e00b      	b.n	80056a0 <_SendPacket+0x228>
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	1c59      	adds	r1, r3, #1
 8005690:	6279      	str	r1, [r7, #36]	; 0x24
 8005692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	09db      	lsrs	r3, r3, #7
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	2b7f      	cmp	r3, #127	; 0x7f
 80056a4:	d8f0      	bhi.n	8005688 <_SendPacket+0x210>
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	627a      	str	r2, [r7, #36]	; 0x24
 80056ac:	6a3a      	ldr	r2, [r7, #32]
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80056b6:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <_SendPacket+0x270>)
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	4618      	mov	r0, r3
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	f7fa fda3 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056ca:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056d2:	4a05      	ldr	r2, [pc, #20]	; (80056e8 <_SendPacket+0x270>)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	60d3      	str	r3, [r2, #12]
 80056d8:	e00f      	b.n	80056fa <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80056da:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <_SendPacket+0x270>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	4b01      	ldr	r3, [pc, #4]	; (80056e8 <_SendPacket+0x270>)
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e008      	b.n	80056fa <_SendPacket+0x282>
 80056e8:	200070a4 	.word	0x200070a4
 80056ec:	e0001004 	.word	0xe0001004
    goto SendDone;
 80056f0:	bf00      	nop
 80056f2:	e002      	b.n	80056fa <_SendPacket+0x282>
      goto SendDone;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <_SendPacket+0x282>
      goto SendDone;
 80056f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056fa:	4b14      	ldr	r3, [pc, #80]	; (800574c <_SendPacket+0x2d4>)
 80056fc:	7e1b      	ldrb	r3, [r3, #24]
 80056fe:	4619      	mov	r1, r3
 8005700:	4a13      	ldr	r2, [pc, #76]	; (8005750 <_SendPacket+0x2d8>)
 8005702:	460b      	mov	r3, r1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	440b      	add	r3, r1
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	336c      	adds	r3, #108	; 0x6c
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b0e      	ldr	r3, [pc, #56]	; (800574c <_SendPacket+0x2d4>)
 8005712:	7e1b      	ldrb	r3, [r3, #24]
 8005714:	4618      	mov	r0, r3
 8005716:	490e      	ldr	r1, [pc, #56]	; (8005750 <_SendPacket+0x2d8>)
 8005718:	4603      	mov	r3, r0
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	4403      	add	r3, r0
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	440b      	add	r3, r1
 8005722:	3370      	adds	r3, #112	; 0x70
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d00b      	beq.n	8005742 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <_SendPacket+0x2d4>)
 800572c:	789b      	ldrb	r3, [r3, #2]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005732:	4b06      	ldr	r3, [pc, #24]	; (800574c <_SendPacket+0x2d4>)
 8005734:	2201      	movs	r2, #1
 8005736:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005738:	f7ff fdbe 	bl	80052b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <_SendPacket+0x2d4>)
 800573e:	2200      	movs	r2, #0
 8005740:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005742:	bf00      	nop
 8005744:	3728      	adds	r7, #40	; 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	200070a4 	.word	0x200070a4
 8005750:	20004be4 	.word	0x20004be4

08005754 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005762:	2300      	movs	r3, #0
 8005764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005768:	4917      	ldr	r1, [pc, #92]	; (80057c8 <SEGGER_SYSVIEW_Init+0x74>)
 800576a:	4818      	ldr	r0, [pc, #96]	; (80057cc <SEGGER_SYSVIEW_Init+0x78>)
 800576c:	f7ff fc8e 	bl	800508c <SEGGER_RTT_AllocUpBuffer>
 8005770:	4603      	mov	r3, r0
 8005772:	b2da      	uxtb	r2, r3
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005776:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005778:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800577a:	785a      	ldrb	r2, [r3, #1]
 800577c:	4b14      	ldr	r3, [pc, #80]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 800577e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005782:	7e1b      	ldrb	r3, [r3, #24]
 8005784:	4618      	mov	r0, r3
 8005786:	2300      	movs	r3, #0
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	2308      	movs	r3, #8
 800578c:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <SEGGER_SYSVIEW_Init+0x80>)
 800578e:	490f      	ldr	r1, [pc, #60]	; (80057cc <SEGGER_SYSVIEW_Init+0x78>)
 8005790:	f7ff fd00 	bl	8005194 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005794:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005796:	2200      	movs	r2, #0
 8005798:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <SEGGER_SYSVIEW_Init+0x84>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80057ae:	4a08      	ldr	r2, [pc, #32]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80057b4:	4a06      	ldr	r2, [pc, #24]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <SEGGER_SYSVIEW_Init+0x7c>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	2000509c 	.word	0x2000509c
 80057cc:	08006880 	.word	0x08006880
 80057d0:	200070a4 	.word	0x200070a4
 80057d4:	2000709c 	.word	0x2000709c
 80057d8:	e0001004 	.word	0xe0001004

080057dc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80057e4:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6113      	str	r3, [r2, #16]
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200070a4 	.word	0x200070a4

080057fc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005804:	f3ef 8311 	mrs	r3, BASEPRI
 8005808:	f04f 0120 	mov.w	r1, #32
 800580c:	f381 8811 	msr	BASEPRI, r1
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	4808      	ldr	r0, [pc, #32]	; (8005834 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005814:	f7ff fd43 	bl	800529e <_PreparePacket>
 8005818:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68b8      	ldr	r0, [r7, #8]
 8005820:	f7ff fe2a 	bl	8005478 <_SendPacket>
  RECORD_END();
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f383 8811 	msr	BASEPRI, r3
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200070d4 	.word	0x200070d4

08005838 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005842:	f3ef 8311 	mrs	r3, BASEPRI
 8005846:	f04f 0120 	mov.w	r1, #32
 800584a:	f381 8811 	msr	BASEPRI, r1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	4816      	ldr	r0, [pc, #88]	; (80058ac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005852:	f7ff fd24 	bl	800529e <_PreparePacket>
 8005856:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	61fb      	str	r3, [r7, #28]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	e00b      	b.n	800587e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	1c59      	adds	r1, r3, #1
 800586e:	61f9      	str	r1, [r7, #28]
 8005870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	09db      	lsrs	r3, r3, #7
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b7f      	cmp	r3, #127	; 0x7f
 8005882:	d8f0      	bhi.n	8005866 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	61fa      	str	r2, [r7, #28]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	6938      	ldr	r0, [r7, #16]
 800589a:	f7ff fded 	bl	8005478 <_SendPacket>
  RECORD_END();
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f383 8811 	msr	BASEPRI, r3
}
 80058a4:	bf00      	nop
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	200070d4 	.word	0x200070d4

080058b0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80058bc:	f3ef 8311 	mrs	r3, BASEPRI
 80058c0:	f04f 0120 	mov.w	r1, #32
 80058c4:	f381 8811 	msr	BASEPRI, r1
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	4825      	ldr	r0, [pc, #148]	; (8005960 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058cc:	f7ff fce7 	bl	800529e <_PreparePacket>
 80058d0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058de:	e00b      	b.n	80058f8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	09db      	lsrs	r3, r3, #7
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	2b7f      	cmp	r3, #127	; 0x7f
 80058fc:	d8f0      	bhi.n	80058e0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	623b      	str	r3, [r7, #32]
 8005916:	e00b      	b.n	8005930 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	b2da      	uxtb	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	1c59      	adds	r1, r3, #1
 8005920:	6279      	str	r1, [r7, #36]	; 0x24
 8005922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	09db      	lsrs	r3, r3, #7
 800592e:	623b      	str	r3, [r7, #32]
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	2b7f      	cmp	r3, #127	; 0x7f
 8005934:	d8f0      	bhi.n	8005918 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	627a      	str	r2, [r7, #36]	; 0x24
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	69b8      	ldr	r0, [r7, #24]
 800594c:	f7ff fd94 	bl	8005478 <_SendPacket>
  RECORD_END();
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f383 8811 	msr	BASEPRI, r3
}
 8005956:	bf00      	nop
 8005958:	3730      	adds	r7, #48	; 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	200070d4 	.word	0x200070d4

08005964 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b08e      	sub	sp, #56	; 0x38
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005972:	f3ef 8311 	mrs	r3, BASEPRI
 8005976:	f04f 0120 	mov.w	r1, #32
 800597a:	f381 8811 	msr	BASEPRI, r1
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	4832      	ldr	r0, [pc, #200]	; (8005a4c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005982:	f7ff fc8c 	bl	800529e <_PreparePacket>
 8005986:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	633b      	str	r3, [r7, #48]	; 0x30
 8005994:	e00b      	b.n	80059ae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6379      	str	r1, [r7, #52]	; 0x34
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	633b      	str	r3, [r7, #48]	; 0x30
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80059b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	637a      	str	r2, [r7, #52]	; 0x34
 80059ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80059cc:	e00b      	b.n	80059e6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	09db      	lsrs	r3, r3, #7
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ea:	d8f0      	bhi.n	80059ce <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	e00b      	b.n	8005a1e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	1c59      	adds	r1, r3, #1
 8005a0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	09db      	lsrs	r3, r3, #7
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b7f      	cmp	r3, #127	; 0x7f
 8005a22:	d8f0      	bhi.n	8005a06 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	627a      	str	r2, [r7, #36]	; 0x24
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	b2d2      	uxtb	r2, r2
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	f7ff fd1d 	bl	8005478 <_SendPacket>
  RECORD_END();
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	f383 8811 	msr	BASEPRI, r3
}
 8005a44:	bf00      	nop
 8005a46:	3738      	adds	r7, #56	; 0x38
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200070d4 	.word	0x200070d4

08005a50 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b090      	sub	sp, #64	; 0x40
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a62:	f04f 0120 	mov.w	r1, #32
 8005a66:	f381 8811 	msr	BASEPRI, r1
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	4840      	ldr	r0, [pc, #256]	; (8005b70 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a6e:	f7ff fc16 	bl	800529e <_PreparePacket>
 8005a72:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a80:	e00b      	b.n	8005a9a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	09db      	lsrs	r3, r3, #7
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9e:	d8f0      	bhi.n	8005a82 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab8:	e00b      	b.n	8005ad2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac0:	1c59      	adds	r1, r3, #1
 8005ac2:	6379      	str	r1, [r7, #52]	; 0x34
 8005ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	09db      	lsrs	r3, r3, #7
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad6:	d8f0      	bhi.n	8005aba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	637a      	str	r2, [r7, #52]	; 0x34
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af0:	e00b      	b.n	8005b0a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	1c59      	adds	r1, r3, #1
 8005afa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	701a      	strb	r2, [r3, #0]
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	09db      	lsrs	r3, r3, #7
 8005b08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0e:	d8f0      	bhi.n	8005af2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	623b      	str	r3, [r7, #32]
 8005b28:	e00b      	b.n	8005b42 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	1c59      	adds	r1, r3, #1
 8005b32:	6279      	str	r1, [r7, #36]	; 0x24
 8005b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	09db      	lsrs	r3, r3, #7
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	2b7f      	cmp	r3, #127	; 0x7f
 8005b46:	d8f0      	bhi.n	8005b2a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b4e:	6a3a      	ldr	r2, [r7, #32]
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	6979      	ldr	r1, [r7, #20]
 8005b5c:	69b8      	ldr	r0, [r7, #24]
 8005b5e:	f7ff fc8b 	bl	8005478 <_SendPacket>
  RECORD_END();
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f383 8811 	msr	BASEPRI, r3
}
 8005b68:	bf00      	nop
 8005b6a:	3740      	adds	r7, #64	; 0x40
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	200070d4 	.word	0x200070d4

08005b74 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b7a:	4b58      	ldr	r3, [pc, #352]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b80:	f3ef 8311 	mrs	r3, BASEPRI
 8005b84:	f04f 0120 	mov.w	r1, #32
 8005b88:	f381 8811 	msr	BASEPRI, r1
 8005b8c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b8e:	4b53      	ldr	r3, [pc, #332]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	220a      	movs	r2, #10
 8005b94:	4952      	ldr	r1, [pc, #328]	; (8005ce0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fa fb3a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ba2:	200a      	movs	r0, #10
 8005ba4:	f7ff fe2a 	bl	80057fc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bac:	f04f 0120 	mov.w	r1, #32
 8005bb0:	f381 8811 	msr	BASEPRI, r1
 8005bb4:	60bb      	str	r3, [r7, #8]
 8005bb6:	484b      	ldr	r0, [pc, #300]	; (8005ce4 <SEGGER_SYSVIEW_Start+0x170>)
 8005bb8:	f7ff fb71 	bl	800529e <_PreparePacket>
 8005bbc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bc6:	4b45      	ldr	r3, [pc, #276]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bcc:	e00b      	b.n	8005be6 <SEGGER_SYSVIEW_Start+0x72>
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	1c59      	adds	r1, r3, #1
 8005bd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	09db      	lsrs	r3, r3, #7
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bea:	d8f0      	bhi.n	8005bce <SEGGER_SYSVIEW_Start+0x5a>
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf4:	b2d2      	uxtb	r2, r2
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005c00:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	e00b      	b.n	8005c20 <SEGGER_SYSVIEW_Start+0xac>
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	6279      	str	r1, [r7, #36]	; 0x24
 8005c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2b7f      	cmp	r3, #127	; 0x7f
 8005c24:	d8f0      	bhi.n	8005c08 <SEGGER_SYSVIEW_Start+0x94>
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e00b      	b.n	8005c5a <SEGGER_SYSVIEW_Start+0xe6>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	1c59      	adds	r1, r3, #1
 8005c4a:	61f9      	str	r1, [r7, #28]
 8005c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	09db      	lsrs	r3, r3, #7
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5e:	d8f0      	bhi.n	8005c42 <SEGGER_SYSVIEW_Start+0xce>
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	e00b      	b.n	8005c92 <SEGGER_SYSVIEW_Start+0x11e>
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1c59      	adds	r1, r3, #1
 8005c82:	6179      	str	r1, [r7, #20]
 8005c84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	09db      	lsrs	r3, r3, #7
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b7f      	cmp	r3, #127	; 0x7f
 8005c96:	d8f0      	bhi.n	8005c7a <SEGGER_SYSVIEW_Start+0x106>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	617a      	str	r2, [r7, #20]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ca8:	2218      	movs	r2, #24
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fbe3 	bl	8005478 <_SendPacket>
      RECORD_END();
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005cc0:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <SEGGER_SYSVIEW_Start+0x168>)
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005cc6:	f000 f9eb 	bl	80060a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005cca:	f000 f9b1 	bl	8006030 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005cce:	f000 fbb3 	bl	8006438 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005cd2:	bf00      	nop
 8005cd4:	3730      	adds	r7, #48	; 0x30
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200070a4 	.word	0x200070a4
 8005ce0:	080068fc 	.word	0x080068fc
 8005ce4:	200070d4 	.word	0x200070d4

08005ce8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cee:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf2:	f04f 0120 	mov.w	r1, #32
 8005cf6:	f381 8811 	msr	BASEPRI, r1
 8005cfa:	607b      	str	r3, [r7, #4]
 8005cfc:	480b      	ldr	r0, [pc, #44]	; (8005d2c <SEGGER_SYSVIEW_Stop+0x44>)
 8005cfe:	f7ff face 	bl	800529e <_PreparePacket>
 8005d02:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d04:	4b0a      	ldr	r3, [pc, #40]	; (8005d30 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d0c:	220b      	movs	r2, #11
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6838      	ldr	r0, [r7, #0]
 8005d12:	f7ff fbb1 	bl	8005478 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <SEGGER_SYSVIEW_Stop+0x48>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f383 8811 	msr	BASEPRI, r3
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	200070d4 	.word	0x200070d4
 8005d30:	200070a4 	.word	0x200070a4

08005d34 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d3a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d3e:	f04f 0120 	mov.w	r1, #32
 8005d42:	f381 8811 	msr	BASEPRI, r1
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	4845      	ldr	r0, [pc, #276]	; (8005e60 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005d4a:	f7ff faa8 	bl	800529e <_PreparePacket>
 8005d4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d58:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5e:	e00b      	b.n	8005d78 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	09db      	lsrs	r3, r3, #7
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7c:	d8f0      	bhi.n	8005d60 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
 8005d92:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	623b      	str	r3, [r7, #32]
 8005d98:	e00b      	b.n	8005db2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	1c59      	adds	r1, r3, #1
 8005da2:	6279      	str	r1, [r7, #36]	; 0x24
 8005da4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	09db      	lsrs	r3, r3, #7
 8005db0:	623b      	str	r3, [r7, #32]
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	2b7f      	cmp	r3, #127	; 0x7f
 8005db6:	d8f0      	bhi.n	8005d9a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	627a      	str	r2, [r7, #36]	; 0x24
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e00b      	b.n	8005dec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	1c59      	adds	r1, r3, #1
 8005ddc:	61f9      	str	r1, [r7, #28]
 8005dde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	09db      	lsrs	r3, r3, #7
 8005dea:	61bb      	str	r3, [r7, #24]
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b7f      	cmp	r3, #127	; 0x7f
 8005df0:	d8f0      	bhi.n	8005dd4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	61fa      	str	r2, [r7, #28]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	2300      	movs	r3, #0
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	e00b      	b.n	8005e24 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1c59      	adds	r1, r3, #1
 8005e14:	6179      	str	r1, [r7, #20]
 8005e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	09db      	lsrs	r3, r3, #7
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b7f      	cmp	r3, #127	; 0x7f
 8005e28:	d8f0      	bhi.n	8005e0c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	617a      	str	r2, [r7, #20]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	68b8      	ldr	r0, [r7, #8]
 8005e40:	f7ff fb1a 	bl	8005478 <_SendPacket>
  RECORD_END();
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005e52:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	4798      	blx	r3
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3730      	adds	r7, #48	; 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200070d4 	.word	0x200070d4
 8005e64:	200070a4 	.word	0x200070a4

08005e68 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b092      	sub	sp, #72	; 0x48
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e70:	f3ef 8311 	mrs	r3, BASEPRI
 8005e74:	f04f 0120 	mov.w	r1, #32
 8005e78:	f381 8811 	msr	BASEPRI, r1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	486a      	ldr	r0, [pc, #424]	; (8006028 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e80:	f7ff fa0d 	bl	800529e <_PreparePacket>
 8005e84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b66      	ldr	r3, [pc, #408]	; (800602c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	e00b      	b.n	8005eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea2:	1c59      	adds	r1, r3, #1
 8005ea4:	6479      	str	r1, [r7, #68]	; 0x44
 8005ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb0:	09db      	lsrs	r3, r3, #7
 8005eb2:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb8:	d8f0      	bhi.n	8005e9c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed4:	e00b      	b.n	8005eee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	1c59      	adds	r1, r3, #1
 8005ede:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef2:	d8f0      	bhi.n	8005ed6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f7ff f98d 	bl	800522c <_EncodeStr>
 8005f12:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f14:	2209      	movs	r2, #9
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6938      	ldr	r0, [r7, #16]
 8005f1a:	f7ff faad 	bl	8005478 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	637b      	str	r3, [r7, #52]	; 0x34
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	4b40      	ldr	r3, [pc, #256]	; (800602c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	633b      	str	r3, [r7, #48]	; 0x30
 8005f32:	e00b      	b.n	8005f4c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	1c59      	adds	r1, r3, #1
 8005f3c:	6379      	str	r1, [r7, #52]	; 0x34
 8005f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	09db      	lsrs	r3, r3, #7
 8005f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f50:	d8f0      	bhi.n	8005f34 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	637a      	str	r2, [r7, #52]	; 0x34
 8005f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6c:	e00b      	b.n	8005f86 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d8f0      	bhi.n	8005f6e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	e00b      	b.n	8005fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	09db      	lsrs	r3, r3, #7
 8005fbe:	623b      	str	r3, [r7, #32]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc4:	d8f0      	bhi.n	8005fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	627a      	str	r2, [r7, #36]	; 0x24
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	e00b      	b.n	8005ffa <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	61f9      	str	r1, [r7, #28]
 8005fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	61fa      	str	r2, [r7, #28]
 8006006:	69ba      	ldr	r2, [r7, #24]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006010:	2215      	movs	r2, #21
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	6938      	ldr	r0, [r7, #16]
 8006016:	f7ff fa2f 	bl	8005478 <_SendPacket>
  RECORD_END();
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f383 8811 	msr	BASEPRI, r3
}
 8006020:	bf00      	nop
 8006022:	3748      	adds	r7, #72	; 0x48
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	200070d4 	.word	0x200070d4
 800602c:	200070a4 	.word	0x200070a4

08006030 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006034:	4b07      	ldr	r3, [pc, #28]	; (8006054 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4798      	blx	r3
  }
}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	200070a4 	.word	0x200070a4

08006058 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006060:	f3ef 8311 	mrs	r3, BASEPRI
 8006064:	f04f 0120 	mov.w	r1, #32
 8006068:	f381 8811 	msr	BASEPRI, r1
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	480b      	ldr	r0, [pc, #44]	; (800609c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006070:	f7ff f915 	bl	800529e <_PreparePacket>
 8006074:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006076:	2280      	movs	r2, #128	; 0x80
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	6938      	ldr	r0, [r7, #16]
 800607c:	f7ff f8d6 	bl	800522c <_EncodeStr>
 8006080:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006082:	220e      	movs	r2, #14
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	6938      	ldr	r0, [r7, #16]
 8006088:	f7ff f9f6 	bl	8005478 <_SendPacket>
  RECORD_END();
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f383 8811 	msr	BASEPRI, r3
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200070d4 	.word	0x200070d4

080060a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80060a0:	b590      	push	{r4, r7, lr}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80060a6:	4b15      	ldr	r3, [pc, #84]	; (80060fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01a      	beq.n	80060e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d015      	beq.n	80060e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80060b8:	4b10      	ldr	r3, [pc, #64]	; (80060fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4798      	blx	r3
 80060c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80060c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	000a      	movs	r2, r1
 80060d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060d6:	4613      	mov	r3, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	4621      	mov	r1, r4
 80060dc:	200d      	movs	r0, #13
 80060de:	f7ff fbe7 	bl	80058b0 <SEGGER_SYSVIEW_RecordU32x2>
 80060e2:	e006      	b.n	80060f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	200c      	movs	r0, #12
 80060ec:	f7ff fba4 	bl	8005838 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80060f0:	bf00      	nop
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	bf00      	nop
 80060fc:	200070a4 	.word	0x200070a4
 8006100:	e0001004 	.word	0xe0001004

08006104 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800610a:	f3ef 8311 	mrs	r3, BASEPRI
 800610e:	f04f 0120 	mov.w	r1, #32
 8006112:	f381 8811 	msr	BASEPRI, r1
 8006116:	607b      	str	r3, [r7, #4]
 8006118:	4807      	ldr	r0, [pc, #28]	; (8006138 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800611a:	f7ff f8c0 	bl	800529e <_PreparePacket>
 800611e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006120:	2211      	movs	r2, #17
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6838      	ldr	r0, [r7, #0]
 8006126:	f7ff f9a7 	bl	8005478 <_SendPacket>
  RECORD_END();
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f383 8811 	msr	BASEPRI, r3
}
 8006130:	bf00      	nop
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	200070d4 	.word	0x200070d4

0800613c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006144:	f3ef 8311 	mrs	r3, BASEPRI
 8006148:	f04f 0120 	mov.w	r1, #32
 800614c:	f381 8811 	msr	BASEPRI, r1
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	4819      	ldr	r0, [pc, #100]	; (80061b8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006154:	f7ff f8a3 	bl	800529e <_PreparePacket>
 8006158:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800615e:	4b17      	ldr	r3, [pc, #92]	; (80061bc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	61bb      	str	r3, [r7, #24]
 8006170:	e00b      	b.n	800618a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	b2da      	uxtb	r2, r3
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	1c59      	adds	r1, r3, #1
 800617a:	61f9      	str	r1, [r7, #28]
 800617c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006180:	b2d2      	uxtb	r2, r2
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	09db      	lsrs	r3, r3, #7
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b7f      	cmp	r3, #127	; 0x7f
 800618e:	d8f0      	bhi.n	8006172 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061a0:	2208      	movs	r2, #8
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	6938      	ldr	r0, [r7, #16]
 80061a6:	f7ff f967 	bl	8005478 <_SendPacket>
  RECORD_END();
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f383 8811 	msr	BASEPRI, r3
}
 80061b0:	bf00      	nop
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	200070d4 	.word	0x200070d4
 80061bc:	200070a4 	.word	0x200070a4

080061c0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061c8:	f3ef 8311 	mrs	r3, BASEPRI
 80061cc:	f04f 0120 	mov.w	r1, #32
 80061d0:	f381 8811 	msr	BASEPRI, r1
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	4819      	ldr	r0, [pc, #100]	; (800623c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80061d8:	f7ff f861 	bl	800529e <_PreparePacket>
 80061dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061e2:	4b17      	ldr	r3, [pc, #92]	; (8006240 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	61bb      	str	r3, [r7, #24]
 80061f4:	e00b      	b.n	800620e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	61f9      	str	r1, [r7, #28]
 8006200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b7f      	cmp	r3, #127	; 0x7f
 8006212:	d8f0      	bhi.n	80061f6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	61fa      	str	r2, [r7, #28]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006224:	2204      	movs	r2, #4
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6938      	ldr	r0, [r7, #16]
 800622a:	f7ff f925 	bl	8005478 <_SendPacket>
  RECORD_END();
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f383 8811 	msr	BASEPRI, r3
}
 8006234:	bf00      	nop
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200070d4 	.word	0x200070d4
 8006240:	200070a4 	.word	0x200070a4

08006244 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800624c:	f3ef 8311 	mrs	r3, BASEPRI
 8006250:	f04f 0120 	mov.w	r1, #32
 8006254:	f381 8811 	msr	BASEPRI, r1
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	4819      	ldr	r0, [pc, #100]	; (80062c0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800625c:	f7ff f81f 	bl	800529e <_PreparePacket>
 8006260:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006266:	4b17      	ldr	r3, [pc, #92]	; (80062c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	61fb      	str	r3, [r7, #28]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	e00b      	b.n	8006292 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	61f9      	str	r1, [r7, #28]
 8006284:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	09db      	lsrs	r3, r3, #7
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b7f      	cmp	r3, #127	; 0x7f
 8006296:	d8f0      	bhi.n	800627a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062a8:	2206      	movs	r2, #6
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	6938      	ldr	r0, [r7, #16]
 80062ae:	f7ff f8e3 	bl	8005478 <_SendPacket>
  RECORD_END();
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f383 8811 	msr	BASEPRI, r3
}
 80062b8:	bf00      	nop
 80062ba:	3720      	adds	r7, #32
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	200070d4 	.word	0x200070d4
 80062c4:	200070a4 	.word	0x200070a4

080062c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	1ad3      	subs	r3, r2, r3
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	200070a4 	.word	0x200070a4

080062e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80062f2:	4b40      	ldr	r3, [pc, #256]	; (80063f4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d077      	beq.n	80063ea <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80062fa:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006300:	2300      	movs	r3, #0
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
 8006304:	e008      	b.n	8006318 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	3301      	adds	r3, #1
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631c:	429a      	cmp	r2, r3
 800631e:	d3f2      	bcc.n	8006306 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006320:	e000      	b.n	8006324 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006322:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d055      	beq.n	80063d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800632a:	f3ef 8311 	mrs	r3, BASEPRI
 800632e:	f04f 0120 	mov.w	r1, #32
 8006332:	f381 8811 	msr	BASEPRI, r1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	482f      	ldr	r0, [pc, #188]	; (80063f8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800633a:	f7fe ffb0 	bl	800529e <_PreparePacket>
 800633e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	e00b      	b.n	8006366 <SEGGER_SYSVIEW_SendModule+0x7e>
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	6279      	str	r1, [r7, #36]	; 0x24
 8006358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	2b7f      	cmp	r3, #127	; 0x7f
 800636a:	d8f0      	bhi.n	800634e <SEGGER_SYSVIEW_SendModule+0x66>
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	627a      	str	r2, [r7, #36]	; 0x24
 8006372:	6a3a      	ldr	r2, [r7, #32]
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	61f9      	str	r1, [r7, #28]
 8006392:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b7f      	cmp	r3, #127	; 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_SendModule+0xa0>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	61fa      	str	r2, [r7, #28]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2280      	movs	r2, #128	; 0x80
 80063bc:	4619      	mov	r1, r3
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7fe ff34 	bl	800522c <_EncodeStr>
 80063c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80063c6:	2216      	movs	r2, #22
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	6938      	ldr	r0, [r7, #16]
 80063cc:	f7ff f854 	bl	8005478 <_SendPacket>
      RECORD_END();
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d006      	beq.n	80063ea <SEGGER_SYSVIEW_SendModule+0x102>
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4798      	blx	r3
    }
  }
}
 80063ea:	bf00      	nop
 80063ec:	3730      	adds	r7, #48	; 0x30
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	200070cc 	.word	0x200070cc
 80063f8:	200070d4 	.word	0x200070d4

080063fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006402:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00f      	beq.n	800642a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800640a:	4b0a      	ldr	r3, [pc, #40]	; (8006434 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d002      	beq.n	800641e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f2      	bne.n	8006410 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	200070cc 	.word	0x200070cc

08006438 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800643e:	f3ef 8311 	mrs	r3, BASEPRI
 8006442:	f04f 0120 	mov.w	r1, #32
 8006446:	f381 8811 	msr	BASEPRI, r1
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	4817      	ldr	r0, [pc, #92]	; (80064ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800644e:	f7fe ff26 	bl	800529e <_PreparePacket>
 8006452:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	4b14      	ldr	r3, [pc, #80]	; (80064b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	e00b      	b.n	800647c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	6179      	str	r1, [r7, #20]
 800646e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	09db      	lsrs	r3, r3, #7
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b7f      	cmp	r3, #127	; 0x7f
 8006480:	d8f0      	bhi.n	8006464 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	617a      	str	r2, [r7, #20]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006492:	221b      	movs	r2, #27
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	68b8      	ldr	r0, [r7, #8]
 8006498:	f7fe ffee 	bl	8005478 <_SendPacket>
  RECORD_END();
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f383 8811 	msr	BASEPRI, r3
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200070d4 	.word	0x200070d4
 80064b0:	200070d0 	.word	0x200070d0

080064b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064bc:	f3ef 8311 	mrs	r3, BASEPRI
 80064c0:	f04f 0120 	mov.w	r1, #32
 80064c4:	f381 8811 	msr	BASEPRI, r1
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	4827      	ldr	r0, [pc, #156]	; (8006568 <SEGGER_SYSVIEW_Warn+0xb4>)
 80064cc:	f7fe fee7 	bl	800529e <_PreparePacket>
 80064d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	6938      	ldr	r0, [r7, #16]
 80064d8:	f7fe fea8 	bl	800522c <_EncodeStr>
 80064dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
 80064e2:	2301      	movs	r3, #1
 80064e4:	623b      	str	r3, [r7, #32]
 80064e6:	e00b      	b.n	8006500 <SEGGER_SYSVIEW_Warn+0x4c>
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	b2da      	uxtb	r2, r3
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	6279      	str	r1, [r7, #36]	; 0x24
 80064f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	623b      	str	r3, [r7, #32]
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2b7f      	cmp	r3, #127	; 0x7f
 8006504:	d8f0      	bhi.n	80064e8 <SEGGER_SYSVIEW_Warn+0x34>
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	627a      	str	r2, [r7, #36]	; 0x24
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
 800651e:	e00b      	b.n	8006538 <SEGGER_SYSVIEW_Warn+0x84>
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	b2da      	uxtb	r2, r3
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1c59      	adds	r1, r3, #1
 8006528:	61f9      	str	r1, [r7, #28]
 800652a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	09db      	lsrs	r3, r3, #7
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	2b7f      	cmp	r3, #127	; 0x7f
 800653c:	d8f0      	bhi.n	8006520 <SEGGER_SYSVIEW_Warn+0x6c>
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	61fa      	str	r2, [r7, #28]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800654e:	221a      	movs	r2, #26
 8006550:	68f9      	ldr	r1, [r7, #12]
 8006552:	6938      	ldr	r0, [r7, #16]
 8006554:	f7fe ff90 	bl	8005478 <_SendPacket>
  RECORD_END();
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
 8006560:	3728      	adds	r7, #40	; 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	200070d4 	.word	0x200070d4

0800656c <memcmp>:
 800656c:	b510      	push	{r4, lr}
 800656e:	3901      	subs	r1, #1
 8006570:	4402      	add	r2, r0
 8006572:	4290      	cmp	r0, r2
 8006574:	d101      	bne.n	800657a <memcmp+0xe>
 8006576:	2000      	movs	r0, #0
 8006578:	e005      	b.n	8006586 <memcmp+0x1a>
 800657a:	7803      	ldrb	r3, [r0, #0]
 800657c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006580:	42a3      	cmp	r3, r4
 8006582:	d001      	beq.n	8006588 <memcmp+0x1c>
 8006584:	1b18      	subs	r0, r3, r4
 8006586:	bd10      	pop	{r4, pc}
 8006588:	3001      	adds	r0, #1
 800658a:	e7f2      	b.n	8006572 <memcmp+0x6>

0800658c <memset>:
 800658c:	4402      	add	r2, r0
 800658e:	4603      	mov	r3, r0
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	f803 1b01 	strb.w	r1, [r3], #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <_reclaim_reent>:
 800659c:	4b29      	ldr	r3, [pc, #164]	; (8006644 <_reclaim_reent+0xa8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4283      	cmp	r3, r0
 80065a2:	b570      	push	{r4, r5, r6, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	d04b      	beq.n	8006640 <_reclaim_reent+0xa4>
 80065a8:	69c3      	ldr	r3, [r0, #28]
 80065aa:	b143      	cbz	r3, 80065be <_reclaim_reent+0x22>
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d144      	bne.n	800663c <_reclaim_reent+0xa0>
 80065b2:	69e3      	ldr	r3, [r4, #28]
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	b111      	cbz	r1, 80065be <_reclaim_reent+0x22>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 f879 	bl	80066b0 <_free_r>
 80065be:	6961      	ldr	r1, [r4, #20]
 80065c0:	b111      	cbz	r1, 80065c8 <_reclaim_reent+0x2c>
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f874 	bl	80066b0 <_free_r>
 80065c8:	69e1      	ldr	r1, [r4, #28]
 80065ca:	b111      	cbz	r1, 80065d2 <_reclaim_reent+0x36>
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 f86f 	bl	80066b0 <_free_r>
 80065d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80065d4:	b111      	cbz	r1, 80065dc <_reclaim_reent+0x40>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f86a 	bl	80066b0 <_free_r>
 80065dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065de:	b111      	cbz	r1, 80065e6 <_reclaim_reent+0x4a>
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 f865 	bl	80066b0 <_free_r>
 80065e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80065e8:	b111      	cbz	r1, 80065f0 <_reclaim_reent+0x54>
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 f860 	bl	80066b0 <_free_r>
 80065f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80065f2:	b111      	cbz	r1, 80065fa <_reclaim_reent+0x5e>
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 f85b 	bl	80066b0 <_free_r>
 80065fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80065fc:	b111      	cbz	r1, 8006604 <_reclaim_reent+0x68>
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f856 	bl	80066b0 <_free_r>
 8006604:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006606:	b111      	cbz	r1, 800660e <_reclaim_reent+0x72>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f851 	bl	80066b0 <_free_r>
 800660e:	6a23      	ldr	r3, [r4, #32]
 8006610:	b1b3      	cbz	r3, 8006640 <_reclaim_reent+0xa4>
 8006612:	4620      	mov	r0, r4
 8006614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006618:	4718      	bx	r3
 800661a:	5949      	ldr	r1, [r1, r5]
 800661c:	b941      	cbnz	r1, 8006630 <_reclaim_reent+0x94>
 800661e:	3504      	adds	r5, #4
 8006620:	69e3      	ldr	r3, [r4, #28]
 8006622:	2d80      	cmp	r5, #128	; 0x80
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	d1f8      	bne.n	800661a <_reclaim_reent+0x7e>
 8006628:	4620      	mov	r0, r4
 800662a:	f000 f841 	bl	80066b0 <_free_r>
 800662e:	e7c0      	b.n	80065b2 <_reclaim_reent+0x16>
 8006630:	680e      	ldr	r6, [r1, #0]
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f83c 	bl	80066b0 <_free_r>
 8006638:	4631      	mov	r1, r6
 800663a:	e7ef      	b.n	800661c <_reclaim_reent+0x80>
 800663c:	2500      	movs	r5, #0
 800663e:	e7ef      	b.n	8006620 <_reclaim_reent+0x84>
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	bf00      	nop
 8006644:	2000005c 	.word	0x2000005c

08006648 <__libc_init_array>:
 8006648:	b570      	push	{r4, r5, r6, lr}
 800664a:	4d0d      	ldr	r5, [pc, #52]	; (8006680 <__libc_init_array+0x38>)
 800664c:	4c0d      	ldr	r4, [pc, #52]	; (8006684 <__libc_init_array+0x3c>)
 800664e:	1b64      	subs	r4, r4, r5
 8006650:	10a4      	asrs	r4, r4, #2
 8006652:	2600      	movs	r6, #0
 8006654:	42a6      	cmp	r6, r4
 8006656:	d109      	bne.n	800666c <__libc_init_array+0x24>
 8006658:	4d0b      	ldr	r5, [pc, #44]	; (8006688 <__libc_init_array+0x40>)
 800665a:	4c0c      	ldr	r4, [pc, #48]	; (800668c <__libc_init_array+0x44>)
 800665c:	f000 f880 	bl	8006760 <_init>
 8006660:	1b64      	subs	r4, r4, r5
 8006662:	10a4      	asrs	r4, r4, #2
 8006664:	2600      	movs	r6, #0
 8006666:	42a6      	cmp	r6, r4
 8006668:	d105      	bne.n	8006676 <__libc_init_array+0x2e>
 800666a:	bd70      	pop	{r4, r5, r6, pc}
 800666c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006670:	4798      	blx	r3
 8006672:	3601      	adds	r6, #1
 8006674:	e7ee      	b.n	8006654 <__libc_init_array+0xc>
 8006676:	f855 3b04 	ldr.w	r3, [r5], #4
 800667a:	4798      	blx	r3
 800667c:	3601      	adds	r6, #1
 800667e:	e7f2      	b.n	8006666 <__libc_init_array+0x1e>
 8006680:	08006908 	.word	0x08006908
 8006684:	08006908 	.word	0x08006908
 8006688:	08006908 	.word	0x08006908
 800668c:	0800690c 	.word	0x0800690c

08006690 <__retarget_lock_acquire_recursive>:
 8006690:	4770      	bx	lr

08006692 <__retarget_lock_release_recursive>:
 8006692:	4770      	bx	lr

08006694 <memcpy>:
 8006694:	440a      	add	r2, r1
 8006696:	4291      	cmp	r1, r2
 8006698:	f100 33ff 	add.w	r3, r0, #4294967295
 800669c:	d100      	bne.n	80066a0 <memcpy+0xc>
 800669e:	4770      	bx	lr
 80066a0:	b510      	push	{r4, lr}
 80066a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066aa:	4291      	cmp	r1, r2
 80066ac:	d1f9      	bne.n	80066a2 <memcpy+0xe>
 80066ae:	bd10      	pop	{r4, pc}

080066b0 <_free_r>:
 80066b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066b2:	2900      	cmp	r1, #0
 80066b4:	d044      	beq.n	8006740 <_free_r+0x90>
 80066b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066ba:	9001      	str	r0, [sp, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f1a1 0404 	sub.w	r4, r1, #4
 80066c2:	bfb8      	it	lt
 80066c4:	18e4      	addlt	r4, r4, r3
 80066c6:	f000 f83f 	bl	8006748 <__malloc_lock>
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <_free_r+0x94>)
 80066cc:	9801      	ldr	r0, [sp, #4]
 80066ce:	6813      	ldr	r3, [r2, #0]
 80066d0:	b933      	cbnz	r3, 80066e0 <_free_r+0x30>
 80066d2:	6063      	str	r3, [r4, #4]
 80066d4:	6014      	str	r4, [r2, #0]
 80066d6:	b003      	add	sp, #12
 80066d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066dc:	f000 b83a 	b.w	8006754 <__malloc_unlock>
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d908      	bls.n	80066f6 <_free_r+0x46>
 80066e4:	6825      	ldr	r5, [r4, #0]
 80066e6:	1961      	adds	r1, r4, r5
 80066e8:	428b      	cmp	r3, r1
 80066ea:	bf01      	itttt	eq
 80066ec:	6819      	ldreq	r1, [r3, #0]
 80066ee:	685b      	ldreq	r3, [r3, #4]
 80066f0:	1949      	addeq	r1, r1, r5
 80066f2:	6021      	streq	r1, [r4, #0]
 80066f4:	e7ed      	b.n	80066d2 <_free_r+0x22>
 80066f6:	461a      	mov	r2, r3
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	b10b      	cbz	r3, 8006700 <_free_r+0x50>
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	d9fa      	bls.n	80066f6 <_free_r+0x46>
 8006700:	6811      	ldr	r1, [r2, #0]
 8006702:	1855      	adds	r5, r2, r1
 8006704:	42a5      	cmp	r5, r4
 8006706:	d10b      	bne.n	8006720 <_free_r+0x70>
 8006708:	6824      	ldr	r4, [r4, #0]
 800670a:	4421      	add	r1, r4
 800670c:	1854      	adds	r4, r2, r1
 800670e:	42a3      	cmp	r3, r4
 8006710:	6011      	str	r1, [r2, #0]
 8006712:	d1e0      	bne.n	80066d6 <_free_r+0x26>
 8006714:	681c      	ldr	r4, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	6053      	str	r3, [r2, #4]
 800671a:	440c      	add	r4, r1
 800671c:	6014      	str	r4, [r2, #0]
 800671e:	e7da      	b.n	80066d6 <_free_r+0x26>
 8006720:	d902      	bls.n	8006728 <_free_r+0x78>
 8006722:	230c      	movs	r3, #12
 8006724:	6003      	str	r3, [r0, #0]
 8006726:	e7d6      	b.n	80066d6 <_free_r+0x26>
 8006728:	6825      	ldr	r5, [r4, #0]
 800672a:	1961      	adds	r1, r4, r5
 800672c:	428b      	cmp	r3, r1
 800672e:	bf04      	itt	eq
 8006730:	6819      	ldreq	r1, [r3, #0]
 8006732:	685b      	ldreq	r3, [r3, #4]
 8006734:	6063      	str	r3, [r4, #4]
 8006736:	bf04      	itt	eq
 8006738:	1949      	addeq	r1, r1, r5
 800673a:	6021      	streq	r1, [r4, #0]
 800673c:	6054      	str	r4, [r2, #4]
 800673e:	e7ca      	b.n	80066d6 <_free_r+0x26>
 8006740:	b003      	add	sp, #12
 8006742:	bd30      	pop	{r4, r5, pc}
 8006744:	200072f4 	.word	0x200072f4

08006748 <__malloc_lock>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__malloc_lock+0x8>)
 800674a:	f7ff bfa1 	b.w	8006690 <__retarget_lock_acquire_recursive>
 800674e:	bf00      	nop
 8006750:	200072f0 	.word	0x200072f0

08006754 <__malloc_unlock>:
 8006754:	4801      	ldr	r0, [pc, #4]	; (800675c <__malloc_unlock+0x8>)
 8006756:	f7ff bf9c 	b.w	8006692 <__retarget_lock_release_recursive>
 800675a:	bf00      	nop
 800675c:	200072f0 	.word	0x200072f0

08006760 <_init>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr

0800676c <_fini>:
 800676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676e:	bf00      	nop
 8006770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006772:	bc08      	pop	{r3}
 8006774:	469e      	mov	lr, r3
 8006776:	4770      	bx	lr
