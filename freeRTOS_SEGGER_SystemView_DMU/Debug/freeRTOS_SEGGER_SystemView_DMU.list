
freeRTOS_SEGGER_SystemView_DMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080074a0  080074a0  000084a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007658  08007658  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007660  08007660  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007660  08007660  00008660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007664  08007664  00008664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007668  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007258  20000064  080076cc  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200072bc  080076cc  000092bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c25b  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ada  00000000  00000000  000252ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  00028dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001261  00000000  00000000  0002a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004846  00000000  00000000  0002b809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbec  00000000  00000000  0003004f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebde4  00000000  00000000  0004bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137a1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067cc  00000000  00000000  00137a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bd  00000000  00000000  0013e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007488 	.word	0x08007488

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007488 	.word	0x08007488

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20004ba8 	.word	0x20004ba8

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	SEGGER_SYSVIEW_Conf();
 800059a:	f005 f9eb 	bl	8005974 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800059e:	f006 f97f 	bl	80068a0 <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc1d 	bl	8000de0 <HAL_Init>
//  osKernelInitialize();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f83f 	bl	8000628 <SystemClock_Config>
  SystemCoreClockUpdate();
 80005aa:	f000 fb6f 	bl	8000c8c <SystemCoreClockUpdate>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f8ef 	bl	8000790 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005b2:	f000 f89b 	bl	80006ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b6:	f002 fb97 	bl	8002ce8 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
  xTaskCreate(StartDefaultTask,"myTask01",configMINIMAL_STACK_SIZE, NULL, 4, &defaultTask_attributes);
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <main+0x70>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2304      	movs	r3, #4
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	4910      	ldr	r1, [pc, #64]	@ (8000608 <main+0x74>)
 80005c8:	4810      	ldr	r0, [pc, #64]	@ (800060c <main+0x78>)
 80005ca:	f003 fab1 	bl	8003b30 <xTaskCreate>
  /* creation of myTask02 */
//  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
  xTaskCreate(StartTask02, "myTask02", configMINIMAL_STACK_SIZE, NULL, 4, &myTask02_attributes);
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <main+0x7c>)
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	2304      	movs	r3, #4
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	490e      	ldr	r1, [pc, #56]	@ (8000614 <main+0x80>)
 80005dc:	480e      	ldr	r0, [pc, #56]	@ (8000618 <main+0x84>)
 80005de:	f003 faa7 	bl	8003b30 <xTaskCreate>
  /* creation of myTask03 */
//  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
  xTaskCreate(StartTask03, "myTask03", configMINIMAL_STACK_SIZE, NULL, 4, &myTask03_attributes);
 80005e2:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <main+0x88>)
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2304      	movs	r3, #4
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2280      	movs	r2, #128	@ 0x80
 80005ee:	490c      	ldr	r1, [pc, #48]	@ (8000620 <main+0x8c>)
 80005f0:	480c      	ldr	r0, [pc, #48]	@ (8000624 <main+0x90>)
 80005f2:	f003 fa9d 	bl	8003b30 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f6:	f002 fb9b 	bl	8002d30 <osKernelStart>
  vTaskStartScheduler();
 80005fa:	f003 fc4f 	bl	8003e9c <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x6a>
 8000602:	bf00      	nop
 8000604:	080075ac 	.word	0x080075ac
 8000608:	080074c4 	.word	0x080074c4
 800060c:	080008cd 	.word	0x080008cd
 8000610:	080075d0 	.word	0x080075d0
 8000614:	080074ac 	.word	0x080074ac
 8000618:	0800092d 	.word	0x0800092d
 800061c:	080075f4 	.word	0x080075f4
 8000620:	080074b8 	.word	0x080074b8
 8000624:	080009d5 	.word	0x080009d5

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2234      	movs	r2, #52	@ 0x34
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f006 fe3e 	bl	80072b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <SystemClock_Config+0xbc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a23      	ldr	r2, [pc, #140]	@ (80006e4 <SystemClock_Config+0xbc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <SystemClock_Config+0xbc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <SystemClock_Config+0xc0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000674:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <SystemClock_Config+0xc0>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <SystemClock_Config+0xc0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	2301      	movs	r3, #1
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2310      	movs	r3, #16
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fd9f 	bl	80021e0 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006a8:	f000 f9b8 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 faa6 	bl	8001c1c <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006d6:	f000 f9a1 	bl	8000a1c <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006f2:	463b      	mov	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fe:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <MX_ADC1_Init+0x9c>)
 8000702:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_ADC1_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000724:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800072a:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_ADC1_Init+0x98>)
 800072c:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_ADC1_Init+0xa0>)
 800072e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000738:	2201      	movs	r2, #1
 800073a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_ADC1_Init+0x98>)
 8000746:	2201      	movs	r2, #1
 8000748:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	@ (8000784 <MX_ADC1_Init+0x98>)
 800074c:	f000 fbae 	bl	8000eac <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000756:	f000 f961 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <MX_ADC1_Init+0x98>)
 800076c:	f000 fd80 	bl	8001270 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000776:	f000 f951 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000088 	.word	0x20000088
 8000788:	40012000 	.word	0x40012000
 800078c:	0f000001 	.word	0x0f000001

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	@ 0x28
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b44      	ldr	r3, [pc, #272]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a43      	ldr	r2, [pc, #268]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b41      	ldr	r3, [pc, #260]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b3d      	ldr	r3, [pc, #244]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a3c      	ldr	r2, [pc, #240]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b36      	ldr	r3, [pc, #216]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a35      	ldr	r2, [pc, #212]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b33      	ldr	r3, [pc, #204]	@ (80008bc <MX_GPIO_Init+0x12c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <MX_GPIO_Init+0x12c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a2e      	ldr	r2, [pc, #184]	@ (80008bc <MX_GPIO_Init+0x12c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_GPIO_Init+0x12c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_GPIO_Init+0x12c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a27      	ldr	r2, [pc, #156]	@ (80008bc <MX_GPIO_Init+0x12c>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_GPIO_Init+0x12c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0310 	and.w	r3, r3, #16
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000838:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <MX_GPIO_Init+0x130>)
 800083a:	f001 f9d5 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2103      	movs	r1, #3
 8000842:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <MX_GPIO_Init+0x134>)
 8000844:	f001 f9d0 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4817      	ldr	r0, [pc, #92]	@ (80008c0 <MX_GPIO_Init+0x130>)
 8000862:	f001 f815 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000866:	2303      	movs	r3, #3
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4811      	ldr	r0, [pc, #68]	@ (80008c4 <MX_GPIO_Init+0x134>)
 800087e:	f001 f807 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000882:	2304      	movs	r3, #4
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	@ (80008c4 <MX_GPIO_Init+0x134>)
 8000896:	f000 fffb 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_GPIO_Init+0x138>)
 80008b0:	f000 ffee 	bl	8001890 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	@ 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800
 80008c4:	40021400 	.word	0x40021400
 80008c8:	40021000 	.word	0x40021000

080008cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  if(acces_key == 1)
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <StartDefaultTask+0x54>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d01b      	beq.n	8000914 <StartDefaultTask+0x48>
	  {
		  acces_key =0;
 80008dc:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <StartDefaultTask+0x54>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2101      	movs	r1, #1
 80008e6:	480f      	ldr	r0, [pc, #60]	@ (8000924 <StartDefaultTask+0x58>)
 80008e8:	f001 f97e 	bl	8001be8 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80008ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f0:	f000 fab8 	bl	8000e64 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2101      	movs	r1, #1
 80008f8:	480a      	ldr	r0, [pc, #40]	@ (8000924 <StartDefaultTask+0x58>)
 80008fa:	f001 f975 	bl	8001be8 <HAL_GPIO_WritePin>
		  acces_key =1;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <StartDefaultTask+0x54>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
		  taskYIELD();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <StartDefaultTask+0x5c>)
 8000906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	f3bf 8f4f 	dsb	sy
 8000910:	f3bf 8f6f 	isb	sy
	  }
	    osDelay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000918:	f002 fa30 	bl	8002d7c <osDelay>
	  if(acces_key == 1)
 800091c:	e7da      	b.n	80008d4 <StartDefaultTask+0x8>
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000
 8000924:	40021400 	.word	0x40021400
 8000928:	e000ed04 	.word	0xe000ed04

0800092c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(digital_output == 0)
 8000934:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <StartTask02+0x90>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d12f      	bne.n	800099c <StartTask02+0x70>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000942:	481f      	ldr	r0, [pc, #124]	@ (80009c0 <StartTask02+0x94>)
 8000944:	f001 f950 	bl	8001be8 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8000948:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800094c:	f000 fa8a 	bl	8000e64 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000956:	481a      	ldr	r0, [pc, #104]	@ (80009c0 <StartTask02+0x94>)
 8000958:	f001 f946 	bl	8001be8 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2102      	movs	r1, #2
 8000960:	4818      	ldr	r0, [pc, #96]	@ (80009c4 <StartTask02+0x98>)
 8000962:	f001 f941 	bl	8001be8 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8000966:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800096a:	f000 fa7b 	bl	8000e64 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2102      	movs	r1, #2
 8000972:	4814      	ldr	r0, [pc, #80]	@ (80009c4 <StartTask02+0x98>)
 8000974:	f001 f938 	bl	8001be8 <HAL_GPIO_WritePin>

	  	  HAL_ADC_Start(&hadc1);  // ADC'yi başlat
 8000978:	4813      	ldr	r0, [pc, #76]	@ (80009c8 <StartTask02+0x9c>)
 800097a:	f000 fadb 	bl	8000f34 <HAL_ADC_Start>
	  	  if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 800097e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000982:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <StartTask02+0x9c>)
 8000984:	f000 fbdb 	bl	800113e <HAL_ADC_PollForConversion>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <StartTask02+0x70>
	  	  {
	  		  TxData=HAL_ADC_GetValue(&hadc1);
 800098e:	480e      	ldr	r0, [pc, #56]	@ (80009c8 <StartTask02+0x9c>)
 8000990:	f000 fc60 	bl	8001254 <HAL_ADC_GetValue>
 8000994:	4603      	mov	r3, r0
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <StartTask02+0xa0>)
 800099a:	701a      	strb	r2, [r3, #0]
	  	  }
	  }
	  HAL_ADC_Stop(&hadc1);
 800099c:	480a      	ldr	r0, [pc, #40]	@ (80009c8 <StartTask02+0x9c>)
 800099e:	f000 fb9b 	bl	80010d8 <HAL_ADC_Stop>
	  taskYIELD();
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <StartTask02+0xa4>)
 80009a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	f3bf 8f4f 	dsb	sy
 80009ae:	f3bf 8f6f 	isb	sy
	  osDelay(1000);
 80009b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009b6:	f002 f9e1 	bl	8002d7c <osDelay>
	  if(digital_output == 0)
 80009ba:	e7bb      	b.n	8000934 <StartTask02+0x8>
 80009bc:	20000084 	.word	0x20000084
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40021400 	.word	0x40021400
 80009c8:	20000088 	.word	0x20000088
 80009cc:	20000080 	.word	0x20000080
 80009d0:	e000ed04 	.word	0xe000ed04

080009d4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  digital_output=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 80009dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <StartTask03+0x1c>)
 80009e2:	f001 f8e9 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b02      	ldr	r3, [pc, #8]	@ (80009f4 <StartTask03+0x20>)
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e7f5      	b.n	80009dc <StartTask03+0x8>
 80009f0:	40021000 	.word	0x40021000
 80009f4:	20000084 	.word	0x20000084

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0a:	f000 fa0b 	bl	8000e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40001000 	.word	0x40001000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_MspInit+0x64>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <HAL_MspInit+0x64>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_MspInit+0x64>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x64>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <HAL_MspInit+0x64>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <HAL_MspInit+0x64>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	210f      	movs	r1, #15
 8000a6a:	f06f 0001 	mvn.w	r0, #1
 8000a6e:	f000 fee5 	bl	800183c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2105      	movs	r1, #5
 8000a76:	2005      	movs	r0, #5
 8000a78:	f000 fee0 	bl	800183c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a7c:	2005      	movs	r0, #5
 8000a7e:	f000 fef9 	bl	8001874 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a17      	ldr	r2, [pc, #92]	@ (8000b0c <HAL_ADC_MspInit+0x7c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d127      	bne.n	8000b02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a15      	ldr	r2, [pc, #84]	@ (8000b10 <HAL_ADC_MspInit+0x80>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <HAL_ADC_MspInit+0x80>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <HAL_ADC_MspInit+0x84>)
 8000afe:	f000 fec7 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40012000 	.word	0x40012000
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08e      	sub	sp, #56	@ 0x38
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4b33      	ldr	r3, [pc, #204]	@ (8000bfc <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b30:	4a32      	ldr	r2, [pc, #200]	@ (8000bfc <HAL_InitTick+0xe4>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b38:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <HAL_InitTick+0xe4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f003 0310 	and.w	r3, r3, #16
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 0210 	add.w	r2, r7, #16
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f96a 	bl	8001e28 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b54:	6a3b      	ldr	r3, [r7, #32]
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b5e:	f001 f94f 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8000b62:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b64:	e004      	b.n	8000b70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b66:	f001 f94b 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b72:	4a23      	ldr	r2, [pc, #140]	@ (8000c00 <HAL_InitTick+0xe8>)
 8000b74:	fba2 2303 	umull	r2, r3, r2, r3
 8000b78:	0c9b      	lsrs	r3, r3, #18
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <HAL_InitTick+0xec>)
 8000b80:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <HAL_InitTick+0xf0>)
 8000b82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <HAL_InitTick+0xec>)
 8000b86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c04 <HAL_InitTick+0xec>)
 8000b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <HAL_InitTick+0xec>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <HAL_InitTick+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <HAL_InitTick+0xec>)
 8000ba6:	f001 fdb9 	bl	800271c <HAL_TIM_Base_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11b      	bne.n	8000bf0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bb8:	4812      	ldr	r0, [pc, #72]	@ (8000c04 <HAL_InitTick+0xec>)
 8000bba:	f001 fe09 	bl	80027d0 <HAL_TIM_Base_Start_IT>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d111      	bne.n	8000bf0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bcc:	2036      	movs	r0, #54	@ 0x36
 8000bce:	f000 fe51 	bl	8001874 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d808      	bhi.n	8000bea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	2036      	movs	r0, #54	@ 0x36
 8000bde:	f000 fe2d 	bl	800183c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_InitTick+0xf4>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e002      	b.n	8000bf0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3738      	adds	r7, #56	@ 0x38
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	200000d0 	.word	0x200000d0
 8000c08:	40001000 	.word	0x40001000
 8000c0c:	20000008 	.word	0x20000008

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <TIM6_DAC_IRQHandler+0x10>)
 8000c5a:	f001 fe29 	bl	80028b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000d0 	.word	0x200000d0

08000c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	@ (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000ca6:	4b34      	ldr	r3, [pc, #208]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 030c 	and.w	r3, r3, #12
 8000cae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d011      	beq.n	8000cda <SystemCoreClockUpdate+0x4e>
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d844      	bhi.n	8000d46 <SystemCoreClockUpdate+0xba>
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d003      	beq.n	8000cca <SystemCoreClockUpdate+0x3e>
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d004      	beq.n	8000cd2 <SystemCoreClockUpdate+0x46>
 8000cc8:	e03d      	b.n	8000d46 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000cca:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <SystemCoreClockUpdate+0xf0>)
 8000ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8000d80 <SystemCoreClockUpdate+0xf4>)
 8000cce:	601a      	str	r2, [r3, #0]
      break;
 8000cd0:	e03d      	b.n	8000d4e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <SystemCoreClockUpdate+0xf0>)
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	@ (8000d84 <SystemCoreClockUpdate+0xf8>)
 8000cd6:	601a      	str	r2, [r3, #0]
      break;
 8000cd8:	e039      	b.n	8000d4e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000cda:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	0d9b      	lsrs	r3, r3, #22
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00c      	beq.n	8000d10 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000cf6:	4a23      	ldr	r2, [pc, #140]	@ (8000d84 <SystemCoreClockUpdate+0xf8>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000d00:	6852      	ldr	r2, [r2, #4]
 8000d02:	0992      	lsrs	r2, r2, #6
 8000d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e00b      	b.n	8000d28 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d10:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <SystemCoreClockUpdate+0xf4>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d18:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000d1a:	6852      	ldr	r2, [r2, #4]
 8000d1c:	0992      	lsrs	r2, r2, #6
 8000d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	0c1b      	lsrs	r3, r3, #16
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	3301      	adds	r3, #1
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d40:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <SystemCoreClockUpdate+0xf0>)
 8000d42:	6013      	str	r3, [r2, #0]
      break;
 8000d44:	e003      	b.n	8000d4e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <SystemCoreClockUpdate+0xf0>)
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <SystemCoreClockUpdate+0xf4>)
 8000d4a:	601a      	str	r2, [r3, #0]
      break;
 8000d4c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <SystemCoreClockUpdate+0xec>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <SystemCoreClockUpdate+0xfc>)
 8000d5a:	5cd3      	ldrb	r3, [r2, r3]
 8000d5c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <SystemCoreClockUpdate+0xf0>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <SystemCoreClockUpdate+0xf0>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	371c      	adds	r7, #28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	00f42400 	.word	0x00f42400
 8000d84:	017d7840 	.word	0x017d7840
 8000d88:	08007618 	.word	0x08007618

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d90:	f7ff ff6a 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 fadb 	bl	8007374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fbe9 	bl	8000594 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000dd0:	08007668 	.word	0x08007668
  ldr r2, =_sbss
 8000dd4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dd8:	200072bc 	.word	0x200072bc

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 fd0c 	bl	8001826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f7ff fe82 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fe08 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x20>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4413      	add	r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <HAL_IncTick+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000118 	.word	0x20000118

08000e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_GetTick+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000118 	.word	0x20000118

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff ffee 	bl	8000e4c <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffde 	bl	8000e4c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e033      	b.n	8000f2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff fde0 	bl	8000a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d118      	bne.n	8000f1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ef2:	f023 0302 	bic.w	r3, r3, #2
 8000ef6:	f043 0202 	orr.w	r2, r3, #2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 fae8 	bl	80014d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f023 0303 	bic.w	r3, r3, #3
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f1a:	e001      	b.n	8000f20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_Start+0x1a>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e0b2      	b.n	80010b4 <HAL_ADC_Start+0x180>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d018      	beq.n	8000f96 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f74:	4b52      	ldr	r3, [pc, #328]	@ (80010c0 <HAL_ADC_Start+0x18c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a52      	ldr	r2, [pc, #328]	@ (80010c4 <HAL_ADC_Start+0x190>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0c9a      	lsrs	r2, r3, #18
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f88:	e002      	b.n	8000f90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f9      	bne.n	8000f8a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d17a      	bne.n	800109a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000fac:	f023 0301 	bic.w	r3, r3, #1
 8000fb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe8:	f023 0206 	bic.w	r2, r3, #6
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ff0:	e002      	b.n	8000ff8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001000:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <HAL_ADC_Start+0x194>)
 8001002:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800100c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	2b00      	cmp	r3, #0
 8001018:	d12a      	bne.n	8001070 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a2b      	ldr	r2, [pc, #172]	@ (80010cc <HAL_ADC_Start+0x198>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d015      	beq.n	8001050 <HAL_ADC_Start+0x11c>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a29      	ldr	r2, [pc, #164]	@ (80010d0 <HAL_ADC_Start+0x19c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d105      	bne.n	800103a <HAL_ADC_Start+0x106>
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_ADC_Start+0x194>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a25      	ldr	r2, [pc, #148]	@ (80010d4 <HAL_ADC_Start+0x1a0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d136      	bne.n	80010b2 <HAL_ADC_Start+0x17e>
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <HAL_ADC_Start+0x194>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	2b00      	cmp	r3, #0
 800104e:	d130      	bne.n	80010b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d129      	bne.n	80010b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	e020      	b.n	80010b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a15      	ldr	r2, [pc, #84]	@ (80010cc <HAL_ADC_Start+0x198>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d11b      	bne.n	80010b2 <HAL_ADC_Start+0x17e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d114      	bne.n	80010b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	e00b      	b.n	80010b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f043 0210 	orr.w	r2, r3, #16
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	f043 0201 	orr.w	r2, r3, #1
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	20000004 	.word	0x20000004
 80010c4:	431bde83 	.word	0x431bde83
 80010c8:	40012300 	.word	0x40012300
 80010cc:	40012000 	.word	0x40012000
 80010d0:	40012100 	.word	0x40012100
 80010d4:	40012200 	.word	0x40012200

080010d8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Stop+0x16>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e021      	b.n	8001132 <HAL_ADC_Stop+0x5a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d109      	bne.n	8001128 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800111c:	f023 0301 	bic.w	r3, r3, #1
 8001120:	f043 0201 	orr.w	r2, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800115a:	d113      	bne.n	8001184 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800116a:	d10b      	bne.n	8001184 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f043 0220 	orr.w	r2, r3, #32
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e063      	b.n	800124c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001184:	f7ff fe62 	bl	8000e4c <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800118a:	e021      	b.n	80011d0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001192:	d01d      	beq.n	80011d0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <HAL_ADC_PollForConversion+0x6c>
 800119a:	f7ff fe57 	bl	8000e4c <HAL_GetTick>
 800119e:	4602      	mov	r2, r0
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d212      	bcs.n	80011d0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d00b      	beq.n	80011d0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f043 0204 	orr.w	r2, r3, #4
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e03d      	b.n	800124c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d1d6      	bne.n	800118c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f06f 0212 	mvn.w	r2, #18
 80011e6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d123      	bne.n	800124a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11f      	bne.n	800124a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001210:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001222:	2b00      	cmp	r3, #0
 8001224:	d111      	bne.n	800124a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <HAL_ADC_ConfigChannel+0x1c>
 8001288:	2302      	movs	r3, #2
 800128a:	e113      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x244>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2201      	movs	r2, #1
 8001290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b09      	cmp	r3, #9
 800129a:	d925      	bls.n	80012e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68d9      	ldr	r1, [r3, #12]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3b1e      	subs	r3, #30
 80012b2:	2207      	movs	r2, #7
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43da      	mvns	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	400a      	ands	r2, r1
 80012c0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68d9      	ldr	r1, [r3, #12]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	4603      	mov	r3, r0
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4403      	add	r3, r0
 80012da:	3b1e      	subs	r3, #30
 80012dc:	409a      	lsls	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	e022      	b.n	800132e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6919      	ldr	r1, [r3, #16]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	461a      	mov	r2, r3
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	2207      	movs	r2, #7
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	400a      	ands	r2, r1
 800130a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6919      	ldr	r1, [r3, #16]
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	4603      	mov	r3, r0
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4403      	add	r3, r0
 8001324:	409a      	lsls	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b06      	cmp	r3, #6
 8001334:	d824      	bhi.n	8001380 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b05      	subs	r3, #5
 8001348:	221f      	movs	r2, #31
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	400a      	ands	r2, r1
 8001356:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4618      	mov	r0, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3b05      	subs	r3, #5
 8001372:	fa00 f203 	lsl.w	r2, r0, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	@ 0x34
 800137e:	e04c      	b.n	800141a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d824      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b23      	subs	r3, #35	@ 0x23
 800139a:	221f      	movs	r2, #31
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43da      	mvns	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	400a      	ands	r2, r1
 80013a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	3b23      	subs	r3, #35	@ 0x23
 80013c4:	fa00 f203 	lsl.w	r2, r0, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80013d0:	e023      	b.n	800141a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b41      	subs	r3, #65	@ 0x41
 80013e4:	221f      	movs	r2, #31
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43da      	mvns	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	400a      	ands	r2, r1
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4618      	mov	r0, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	3b41      	subs	r3, #65	@ 0x41
 800140e:	fa00 f203 	lsl.w	r2, r0, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800141a:	4b29      	ldr	r3, [pc, #164]	@ (80014c0 <HAL_ADC_ConfigChannel+0x250>)
 800141c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <HAL_ADC_ConfigChannel+0x254>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d10f      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1d8>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b12      	cmp	r3, #18
 800142e:	d10b      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <HAL_ADC_ConfigChannel+0x254>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12b      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x23a>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <HAL_ADC_ConfigChannel+0x258>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d003      	beq.n	8001464 <HAL_ADC_ConfigChannel+0x1f4>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b11      	cmp	r3, #17
 8001462:	d122      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_ADC_ConfigChannel+0x258>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d111      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_ADC_ConfigChannel+0x25c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <HAL_ADC_ConfigChannel+0x260>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	0c9a      	lsrs	r2, r3, #18
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800149c:	e002      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f9      	bne.n	800149e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40012300 	.word	0x40012300
 80014c4:	40012000 	.word	0x40012000
 80014c8:	10000012 	.word	0x10000012
 80014cc:	20000004 	.word	0x20000004
 80014d0:	431bde83 	.word	0x431bde83

080014d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014dc:	4b79      	ldr	r3, [pc, #484]	@ (80016c4 <ADC_Init+0x1f0>)
 80014de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	431a      	orrs	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	021a      	lsls	r2, r3, #8
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800154e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	4a58      	ldr	r2, [pc, #352]	@ (80016c8 <ADC_Init+0x1f4>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800157a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800159c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e00f      	b.n	80015d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0202 	bic.w	r2, r2, #2
 80015e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e1b      	ldrb	r3, [r3, #24]
 80015ec:	005a      	lsls	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01b      	beq.n	8001638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800160e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800161e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	3b01      	subs	r3, #1
 800162c:	035a      	lsls	r2, r3, #13
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	430a      	orrs	r2, r1
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	e007      	b.n	8001648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001646:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	3b01      	subs	r3, #1
 8001664:	051a      	lsls	r2, r3, #20
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800167c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800168a:	025a      	lsls	r2, r3, #9
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	029a      	lsls	r2, r3, #10
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40012300 	.word	0x40012300
 80016c8:	0f000001 	.word	0x0f000001

080016cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e8:	4013      	ands	r3, r2
 80016ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <__NVIC_SetPriorityGrouping+0x44>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001718:	4b04      	ldr	r3, [pc, #16]	@ (800172c <__NVIC_GetPriorityGrouping+0x18>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	f003 0307 	and.w	r3, r3, #7
}
 8001722:	4618      	mov	r0, r3
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	2b00      	cmp	r3, #0
 8001740:	db0b      	blt.n	800175a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f003 021f 	and.w	r2, r3, #31
 8001748:	4907      	ldr	r1, [pc, #28]	@ (8001768 <__NVIC_EnableIRQ+0x38>)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	095b      	lsrs	r3, r3, #5
 8001750:	2001      	movs	r0, #1
 8001752:	fa00 f202 	lsl.w	r2, r0, r2
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ff4c 	bl	80016cc <__NVIC_SetPriorityGrouping>
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800184e:	f7ff ff61 	bl	8001714 <__NVIC_GetPriorityGrouping>
 8001852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68b9      	ldr	r1, [r7, #8]
 8001858:	6978      	ldr	r0, [r7, #20]
 800185a:	f7ff ffb1 	bl	80017c0 <NVIC_EncodePriority>
 800185e:	4602      	mov	r2, r0
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff80 	bl	800176c <__NVIC_SetPriority>
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff54 	bl	8001730 <__NVIC_EnableIRQ>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e165      	b.n	8001b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8154 	bne.w	8001b72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d130      	bne.n	8001944 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	2203      	movs	r2, #3
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 0201 	and.w	r2, r3, #1
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 0303 	and.w	r3, r3, #3
 800194c:	2b03      	cmp	r3, #3
 800194e:	d017      	beq.n	8001980 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80ae 	beq.w	8001b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b90 <HAL_GPIO_Init+0x300>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8001b90 <HAL_GPIO_Init+0x300>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a26:	4b5a      	ldr	r3, [pc, #360]	@ (8001b90 <HAL_GPIO_Init+0x300>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a58      	ldr	r2, [pc, #352]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	@ (8001b98 <HAL_GPIO_Init+0x308>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d025      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	@ (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <HAL_GPIO_Init+0x216>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba0 <HAL_GPIO_Init+0x310>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ba4 <HAL_GPIO_Init+0x314>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba8 <HAL_GPIO_Init+0x318>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x20a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	@ (8001bac <HAL_GPIO_Init+0x31c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x206>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a49      	ldr	r2, [pc, #292]	@ (8001bb0 <HAL_GPIO_Init+0x320>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x202>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4935      	ldr	r1, [pc, #212]	@ (8001b94 <HAL_GPIO_Init+0x304>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aee:	4a31      	ldr	r2, [pc, #196]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b18:	4a26      	ldr	r2, [pc, #152]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b42:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b6c:	4a11      	ldr	r2, [pc, #68]	@ (8001bb4 <HAL_GPIO_Init+0x324>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f ae96 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3724      	adds	r7, #36	@ 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40013800 	.word	0x40013800
 8001b98:	40020000 	.word	0x40020000
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40020c00 	.word	0x40020c00
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40021400 	.word	0x40021400
 8001bb0:	40021800 	.word	0x40021800
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cc      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d90c      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b65      	ldr	r3, [pc, #404]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b63      	ldr	r3, [pc, #396]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0b8      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c70:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a58      	ldr	r2, [pc, #352]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c88:	4b53      	ldr	r3, [pc, #332]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a52      	ldr	r2, [pc, #328]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c94:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	494d      	ldr	r1, [pc, #308]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d044      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b47      	ldr	r3, [pc, #284]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d119      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d109      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e067      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f023 0203 	bic.w	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4934      	ldr	r1, [pc, #208]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f89e 	bl	8000e4c <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d14:	f7ff f89a 	bl	8000e4c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04f      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 020c 	and.w	r2, r3, #12
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1eb      	bne.n	8001d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d20c      	bcs.n	8001d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d52:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e032      	b.n	8001dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d70:	4b19      	ldr	r3, [pc, #100]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4916      	ldr	r1, [pc, #88]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da2:	f000 f873 	bl	8001e8c <HAL_RCC_GetSysClockFreq>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	490a      	ldr	r1, [pc, #40]	@ (8001ddc <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dba:	4a09      	ldr	r2, [pc, #36]	@ (8001de0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fea8 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	08007618 	.word	0x08007618
 8001de0:	20000004 	.word	0x20000004
 8001de4:	20000008 	.word	0x20000008

08001de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	@ (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40023800 	.word	0x40023800
 8001e24:	08007628 	.word	0x08007628

08001e28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	220f      	movs	r2, #15
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <HAL_RCC_GetClockConfig+0x60>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	601a      	str	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e90:	b0a6      	sub	sp, #152	@ 0x98
 8001e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb2:	4bc8      	ldr	r3, [pc, #800]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b0c      	cmp	r3, #12
 8001ebc:	f200 817e 	bhi.w	80021bc <HAL_RCC_GetSysClockFreq+0x330>
 8001ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001efd 	.word	0x08001efd
 8001ecc:	080021bd 	.word	0x080021bd
 8001ed0:	080021bd 	.word	0x080021bd
 8001ed4:	080021bd 	.word	0x080021bd
 8001ed8:	08001f05 	.word	0x08001f05
 8001edc:	080021bd 	.word	0x080021bd
 8001ee0:	080021bd 	.word	0x080021bd
 8001ee4:	080021bd 	.word	0x080021bd
 8001ee8:	08001f0d 	.word	0x08001f0d
 8001eec:	080021bd 	.word	0x080021bd
 8001ef0:	080021bd 	.word	0x080021bd
 8001ef4:	080021bd 	.word	0x080021bd
 8001ef8:	08002077 	.word	0x08002077
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4bb6      	ldr	r3, [pc, #728]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8001f02:	e15f      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4bb5      	ldr	r3, [pc, #724]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x350>)
 8001f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001f0a:	e15b      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4bb1      	ldr	r3, [pc, #708]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f18:	4bae      	ldr	r3, [pc, #696]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d031      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f24:	4bab      	ldr	r3, [pc, #684]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f36:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f38:	2300      	movs	r3, #0
 8001f3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f3c:	4ba7      	ldr	r3, [pc, #668]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x350>)
 8001f3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001f42:	462a      	mov	r2, r5
 8001f44:	fb03 f202 	mul.w	r2, r3, r2
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	4aa2      	ldr	r2, [pc, #648]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x350>)
 8001f54:	4621      	mov	r1, r4
 8001f56:	fba1 1202 	umull	r1, r2, r1, r2
 8001f5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001f60:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001f62:	4413      	add	r3, r2
 8001f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001f6e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001f70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001f78:	f7fe f994 	bl	80002a4 <__aeabi_uldivmod>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4613      	mov	r3, r2
 8001f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f86:	e064      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f88:	4b92      	ldr	r3, [pc, #584]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	099b      	lsrs	r3, r3, #6
 8001f8e:	2200      	movs	r2, #0
 8001f90:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f92:	657a      	str	r2, [r7, #84]	@ 0x54
 8001f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fa0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001fa4:	4622      	mov	r2, r4
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	f04f 0000 	mov.w	r0, #0
 8001fac:	f04f 0100 	mov.w	r1, #0
 8001fb0:	0159      	lsls	r1, r3, #5
 8001fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb6:	0150      	lsls	r0, r2, #5
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	1a51      	subs	r1, r2, r1
 8001fc0:	6139      	str	r1, [r7, #16]
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	f04f 0200 	mov.w	r2, #0
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fd6:	4659      	mov	r1, fp
 8001fd8:	018b      	lsls	r3, r1, #6
 8001fda:	4651      	mov	r1, sl
 8001fdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fe0:	4651      	mov	r1, sl
 8001fe2:	018a      	lsls	r2, r1, #6
 8001fe4:	4651      	mov	r1, sl
 8001fe6:	ebb2 0801 	subs.w	r8, r2, r1
 8001fea:	4659      	mov	r1, fp
 8001fec:	eb63 0901 	sbc.w	r9, r3, r1
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ffc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002000:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002004:	4690      	mov	r8, r2
 8002006:	4699      	mov	r9, r3
 8002008:	4623      	mov	r3, r4
 800200a:	eb18 0303 	adds.w	r3, r8, r3
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	462b      	mov	r3, r5
 8002012:	eb49 0303 	adc.w	r3, r9, r3
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002024:	4629      	mov	r1, r5
 8002026:	028b      	lsls	r3, r1, #10
 8002028:	4621      	mov	r1, r4
 800202a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202e:	4621      	mov	r1, r4
 8002030:	028a      	lsls	r2, r1, #10
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800203a:	2200      	movs	r2, #0
 800203c:	643b      	str	r3, [r7, #64]	@ 0x40
 800203e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002040:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002044:	f7fe f92e 	bl	80002a4 <__aeabi_uldivmod>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4613      	mov	r3, r2
 800204e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002052:	4b60      	ldr	r3, [pc, #384]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	3301      	adds	r3, #1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8002064:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002068:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002074:	e0a6      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002076:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800207e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002082:	4b54      	ldr	r3, [pc, #336]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d02a      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208e:	4b51      	ldr	r3, [pc, #324]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	2200      	movs	r2, #0
 8002096:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002098:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800209a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020a0:	2100      	movs	r1, #0
 80020a2:	4b4e      	ldr	r3, [pc, #312]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x350>)
 80020a4:	fb03 f201 	mul.w	r2, r3, r1
 80020a8:	2300      	movs	r3, #0
 80020aa:	fb00 f303 	mul.w	r3, r0, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	4a4a      	ldr	r2, [pc, #296]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x350>)
 80020b2:	fba0 1202 	umull	r1, r2, r0, r2
 80020b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80020b8:	460a      	mov	r2, r1
 80020ba:	673a      	str	r2, [r7, #112]	@ 0x70
 80020bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80020be:	4413      	add	r3, r2
 80020c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80020c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c6:	2200      	movs	r2, #0
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80020cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020d0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80020d4:	f7fe f8e6 	bl	80002a4 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4613      	mov	r3, r2
 80020de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020e2:	e05b      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e4:	4b3b      	ldr	r3, [pc, #236]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	2200      	movs	r2, #0
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80020fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002100:	4642      	mov	r2, r8
 8002102:	464b      	mov	r3, r9
 8002104:	f04f 0000 	mov.w	r0, #0
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	0159      	lsls	r1, r3, #5
 800210e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002112:	0150      	lsls	r0, r2, #5
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4641      	mov	r1, r8
 800211a:	ebb2 0a01 	subs.w	sl, r2, r1
 800211e:	4649      	mov	r1, r9
 8002120:	eb63 0b01 	sbc.w	fp, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002130:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002134:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002138:	ebb2 040a 	subs.w	r4, r2, sl
 800213c:	eb63 050b 	sbc.w	r5, r3, fp
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	00eb      	lsls	r3, r5, #3
 800214a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800214e:	00e2      	lsls	r2, r4, #3
 8002150:	4614      	mov	r4, r2
 8002152:	461d      	mov	r5, r3
 8002154:	4643      	mov	r3, r8
 8002156:	18e3      	adds	r3, r4, r3
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	464b      	mov	r3, r9
 800215c:	eb45 0303 	adc.w	r3, r5, r3
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800216e:	4629      	mov	r1, r5
 8002170:	028b      	lsls	r3, r1, #10
 8002172:	4621      	mov	r1, r4
 8002174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002178:	4621      	mov	r1, r4
 800217a:	028a      	lsls	r2, r1, #10
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002184:	2200      	movs	r2, #0
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	61fa      	str	r2, [r7, #28]
 800218a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218e:	f7fe f889 	bl	80002a4 <__aeabi_uldivmod>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4613      	mov	r3, r2
 8002198:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800219c:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCC_GetSysClockFreq+0x348>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0f1b      	lsrs	r3, r3, #28
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 80021aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80021ba:	e003      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80021be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80021c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3798      	adds	r7, #152	@ 0x98
 80021cc:	46bd      	mov	sp, r7
 80021ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	00f42400 	.word	0x00f42400
 80021dc:	017d7840 	.word	0x017d7840

080021e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e28d      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8083 	beq.w	8002306 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002200:	4b94      	ldr	r3, [pc, #592]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	d019      	beq.n	8002240 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800220c:	4b91      	ldr	r3, [pc, #580]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002214:	2b08      	cmp	r3, #8
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002218:	4b8e      	ldr	r3, [pc, #568]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002220:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002224:	d00c      	beq.n	8002240 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b8b      	ldr	r3, [pc, #556]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d112      	bne.n	8002258 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002232:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800223e:	d10b      	bne.n	8002258 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	4b84      	ldr	r3, [pc, #528]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d05b      	beq.n	8002304 <HAL_RCC_OscConfig+0x124>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d157      	bne.n	8002304 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e25a      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002260:	d106      	bne.n	8002270 <HAL_RCC_OscConfig+0x90>
 8002262:	4b7c      	ldr	r3, [pc, #496]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7b      	ldr	r2, [pc, #492]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xcc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0xb4>
 800227a:	4b76      	ldr	r3, [pc, #472]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a75      	ldr	r2, [pc, #468]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b73      	ldr	r3, [pc, #460]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a72      	ldr	r2, [pc, #456]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xcc>
 8002294:	4b6f      	ldr	r3, [pc, #444]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6e      	ldr	r2, [pc, #440]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fdca 	bl	8000e4c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022bc:	f7fe fdc6 	bl	8000e4c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e21f      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b61      	ldr	r3, [pc, #388]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xdc>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fdb6 	bl	8000e4c <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe fdb2 	bl	8000e4c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e20b      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b57      	ldr	r3, [pc, #348]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x104>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d06f      	beq.n	80023f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002312:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d017      	beq.n	800234e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800231e:	4b4d      	ldr	r3, [pc, #308]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d105      	bne.n	8002336 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800232a:	4b4a      	ldr	r3, [pc, #296]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b47      	ldr	r3, [pc, #284]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800233e:	2b0c      	cmp	r3, #12
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b41      	ldr	r3, [pc, #260]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x186>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e1d3      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4937      	ldr	r1, [pc, #220]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e03a      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_OscConfig+0x278>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7fe fd5f 	bl	8000e4c <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002392:	f7fe fd5b 	bl	8000e4c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1b4      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b28      	ldr	r3, [pc, #160]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4925      	ldr	r1, [pc, #148]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_RCC_OscConfig+0x278>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd3e 	bl	8000e4c <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023d4:	f7fe fd3a 	bl	8000e4c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e193      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d036      	beq.n	800246c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_RCC_OscConfig+0x27c>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe fd1e 	bl	8000e4c <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fd1a 	bl	8000e4c <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e173      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <HAL_RCC_OscConfig+0x274>)
 8002428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x234>
 8002432:	e01b      	b.n	800246c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002434:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_RCC_OscConfig+0x27c>)
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fd07 	bl	8000e4c <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	e00e      	b.n	8002460 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002442:	f7fe fd03 	bl	8000e4c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d907      	bls.n	8002460 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e15c      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
 8002454:	40023800 	.word	0x40023800
 8002458:	42470000 	.word	0x42470000
 800245c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002460:	4b8a      	ldr	r3, [pc, #552]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ea      	bne.n	8002442 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8097 	beq.w	80025a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800247e:	4b83      	ldr	r3, [pc, #524]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10f      	bne.n	80024aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	4b7f      	ldr	r3, [pc, #508]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a7e      	ldr	r2, [pc, #504]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b7c      	ldr	r3, [pc, #496]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b79      	ldr	r3, [pc, #484]	@ (8002690 <HAL_RCC_OscConfig+0x4b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCC_OscConfig+0x4b0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	@ (8002690 <HAL_RCC_OscConfig+0x4b0>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fcc3 	bl	8000e4c <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ca:	f7fe fcbf 	bl	8000e4c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e118      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x4b0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x31e>
 80024f0:	4b66      	ldr	r3, [pc, #408]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 80024f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f4:	4a65      	ldr	r2, [pc, #404]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0x358>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x340>
 8002506:	4b61      	ldr	r3, [pc, #388]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	4a60      	ldr	r2, [pc, #384]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6713      	str	r3, [r2, #112]	@ 0x70
 8002512:	4b5e      	ldr	r3, [pc, #376]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	4a5d      	ldr	r2, [pc, #372]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6713      	str	r3, [r2, #112]	@ 0x70
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0x358>
 8002520:	4b5a      	ldr	r3, [pc, #360]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002524:	4a59      	ldr	r2, [pc, #356]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	@ 0x70
 800252c:	4b57      	ldr	r3, [pc, #348]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a56      	ldr	r2, [pc, #344]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002532:	f023 0304 	bic.w	r3, r3, #4
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d015      	beq.n	800256c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fc84 	bl	8000e4c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fc80 	bl	8000e4c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0d7      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255e:	4b4b      	ldr	r3, [pc, #300]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ee      	beq.n	8002548 <HAL_RCC_OscConfig+0x368>
 800256a:	e014      	b.n	8002596 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7fe fc6e 	bl	8000e4c <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002572:	e00a      	b.n	800258a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002574:	f7fe fc6a 	bl	8000e4c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0c1      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258a:	4b40      	ldr	r3, [pc, #256]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ee      	bne.n	8002574 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d105      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a0:	4a3a      	ldr	r2, [pc, #232]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80ad 	beq.w	800270c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b2:	4b36      	ldr	r3, [pc, #216]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d060      	beq.n	8002680 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d145      	bne.n	8002652 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	4b33      	ldr	r3, [pc, #204]	@ (8002694 <HAL_RCC_OscConfig+0x4b4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fc3e 	bl	8000e4c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fc3a 	bl	8000e4c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e093      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002600:	019b      	lsls	r3, r3, #6
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261c:	071b      	lsls	r3, r3, #28
 800261e:	491b      	ldr	r1, [pc, #108]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002624:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x4b4>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fc0f 	bl	8000e4c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fc0b 	bl	8000e4c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e064      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x452>
 8002650:	e05c      	b.n	800270c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <HAL_RCC_OscConfig+0x4b4>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fbf8 	bl	8000e4c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002660:	f7fe fbf4 	bl	8000e4c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e04d      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_RCC_OscConfig+0x4ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x480>
 800267e:	e045      	b.n	800270c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e040      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
 800268c:	40023800 	.word	0x40023800
 8002690:	40007000 	.word	0x40007000
 8002694:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002698:	4b1f      	ldr	r3, [pc, #124]	@ (8002718 <HAL_RCC_OscConfig+0x538>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d030      	beq.n	8002708 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d129      	bne.n	8002708 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d122      	bne.n	8002708 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d119      	bne.n	8002708 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10f      	bne.n	8002708 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e041      	b.n	80027b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f839 	bl	80027ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 f9c0 	bl	8002ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d001      	beq.n	80027e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e04e      	b.n	8002886 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a23      	ldr	r2, [pc, #140]	@ (8002894 <HAL_TIM_Base_Start_IT+0xc4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d022      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002812:	d01d      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	@ (8002898 <HAL_TIM_Base_Start_IT+0xc8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d018      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	@ (800289c <HAL_TIM_Base_Start_IT+0xcc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00e      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a19      	ldr	r2, [pc, #100]	@ (80028a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_TIM_Base_Start_IT+0x80>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a18      	ldr	r2, [pc, #96]	@ (80028ac <HAL_TIM_Base_Start_IT+0xdc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d111      	bne.n	8002874 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b06      	cmp	r3, #6
 8002860:	d010      	beq.n	8002884 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002872:	e007      	b.n	8002884 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40010000 	.word	0x40010000
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800
 80028a0:	40000c00 	.word	0x40000c00
 80028a4:	40010400 	.word	0x40010400
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40001800 	.word	0x40001800

080028b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0202 	mvn.w	r2, #2
 80028e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8d2 	bl	8002aa4 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8c4 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f8d5 	bl	8002ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0204 	mvn.w	r2, #4
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8ac 	bl	8002aa4 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f89e 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8af 	bl	8002ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0208 	mvn.w	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f886 	bl	8002aa4 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f878 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f889 	bl	8002ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0210 	mvn.w	r2, #16
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2208      	movs	r2, #8
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f860 	bl	8002aa4 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f852 	bl	8002a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f863 	bl	8002ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0201 	mvn.w	r2, #1
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fd ffee 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f906 	bl	8002c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f834 	bl	8002acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0220 	mvn.w	r2, #32
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8d8 	bl	8002c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a46      	ldr	r2, [pc, #280]	@ (8002c0c <TIM_Base_SetConfig+0x12c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d013      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002afe:	d00f      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a43      	ldr	r2, [pc, #268]	@ (8002c10 <TIM_Base_SetConfig+0x130>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a42      	ldr	r2, [pc, #264]	@ (8002c14 <TIM_Base_SetConfig+0x134>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d007      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a41      	ldr	r2, [pc, #260]	@ (8002c18 <TIM_Base_SetConfig+0x138>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_Base_SetConfig+0x40>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a40      	ldr	r2, [pc, #256]	@ (8002c1c <TIM_Base_SetConfig+0x13c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d108      	bne.n	8002b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a35      	ldr	r2, [pc, #212]	@ (8002c0c <TIM_Base_SetConfig+0x12c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02b      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b40:	d027      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a32      	ldr	r2, [pc, #200]	@ (8002c10 <TIM_Base_SetConfig+0x130>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d023      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a31      	ldr	r2, [pc, #196]	@ (8002c14 <TIM_Base_SetConfig+0x134>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a30      	ldr	r2, [pc, #192]	@ (8002c18 <TIM_Base_SetConfig+0x138>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01b      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002c1c <TIM_Base_SetConfig+0x13c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d017      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a2e      	ldr	r2, [pc, #184]	@ (8002c20 <TIM_Base_SetConfig+0x140>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d013      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c24 <TIM_Base_SetConfig+0x144>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00f      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a2c      	ldr	r2, [pc, #176]	@ (8002c28 <TIM_Base_SetConfig+0x148>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00b      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <TIM_Base_SetConfig+0x14c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <TIM_Base_SetConfig+0x150>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d003      	beq.n	8002b92 <TIM_Base_SetConfig+0xb2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a29      	ldr	r2, [pc, #164]	@ (8002c34 <TIM_Base_SetConfig+0x154>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d108      	bne.n	8002ba4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a10      	ldr	r2, [pc, #64]	@ (8002c0c <TIM_Base_SetConfig+0x12c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d003      	beq.n	8002bd8 <TIM_Base_SetConfig+0xf8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a12      	ldr	r2, [pc, #72]	@ (8002c1c <TIM_Base_SetConfig+0x13c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d103      	bne.n	8002be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f023 0201 	bic.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	611a      	str	r2, [r3, #16]
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800
 8002c18:	40000c00 	.word	0x40000c00
 8002c1c:	40010400 	.word	0x40010400
 8002c20:	40014000 	.word	0x40014000
 8002c24:	40014400 	.word	0x40014400
 8002c28:	40014800 	.word	0x40014800
 8002c2c:	40001800 	.word	0x40001800
 8002c30:	40001c00 	.word	0x40001c00
 8002c34:	40002000 	.word	0x40002000

08002c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <__NVIC_SetPriority>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	@ (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	@ (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002cb8:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <SysTick_Handler+0x1c>)
 8002cba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002cbc:	f001 fdc8 	bl	8004850 <xTaskGetSchedulerState>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d001      	beq.n	8002cca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002cc6:	f002 fbc7 	bl	8005458 <xPortSysTickHandler>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f06f 0004 	mvn.w	r0, #4
 8002cde:	f7ff ffbf 	bl	8002c60 <__NVIC_SetPriority>
#endif
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cee:	f3ef 8305 	mrs	r3, IPSR
 8002cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8002cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002cfa:	f06f 0305 	mvn.w	r3, #5
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	e00c      	b.n	8002d1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <osKernelInitialize+0x44>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d105      	bne.n	8002d16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <osKernelInitialize+0x44>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	e002      	b.n	8002d1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	2000011c 	.word	0x2000011c

08002d30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d36:	f3ef 8305 	mrs	r3, IPSR
 8002d3a:	603b      	str	r3, [r7, #0]
  return(result);
 8002d3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d42:	f06f 0305 	mvn.w	r3, #5
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	e010      	b.n	8002d6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <osKernelStart+0x48>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d109      	bne.n	8002d66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d52:	f7ff ffbf 	bl	8002cd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <osKernelStart+0x48>)
 8002d58:	2202      	movs	r2, #2
 8002d5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d5c:	f001 f89e 	bl	8003e9c <vTaskStartScheduler>
      stat = osOK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	e002      	b.n	8002d6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000011c 	.word	0x2000011c

08002d7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d84:	f3ef 8305 	mrs	r3, IPSR
 8002d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <osDelay+0x1c>
    stat = osErrorISR;
 8002d90:	f06f 0305 	mvn.w	r3, #5
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	e007      	b.n	8002da8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f001 f840 	bl	8003e28 <vTaskDelay>
    }
  }

  return (stat);
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	@ (8002de0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002dc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4a06      	ldr	r2, [pc, #24]	@ (8002de4 <vApplicationGetIdleTaskMemory+0x30>)
 8002dca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2280      	movs	r2, #128	@ 0x80
 8002dd0:	601a      	str	r2, [r3, #0]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000120 	.word	0x20000120
 8002de4:	200001c8 	.word	0x200001c8

08002de8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a07      	ldr	r2, [pc, #28]	@ (8002e14 <vApplicationGetTimerTaskMemory+0x2c>)
 8002df8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4a06      	ldr	r2, [pc, #24]	@ (8002e18 <vApplicationGetTimerTaskMemory+0x30>)
 8002dfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	200003c8 	.word	0x200003c8
 8002e18:	20000470 	.word	0x20000470

08002e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 0208 	add.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f103 0208 	add.w	r2, r3, #8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f103 0208 	add.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	683a      	ldr	r2, [r7, #0]
 8002ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d103      	bne.n	8002ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e00c      	b.n	8002ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e002      	b.n	8002eec <vListInsert+0x2e>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d2f6      	bcs.n	8002ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6892      	ldr	r2, [r2, #8]
 8002f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6852      	ldr	r2, [r2, #4]
 8002f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d103      	bne.n	8002f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002faa:	bf00      	nop
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fb0:	f002 f9c2 	bl	8005338 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbc:	68f9      	ldr	r1, [r7, #12]
 8002fbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	@ 0xff
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	22ff      	movs	r2, #255	@ 0xff
 8002ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d114      	bne.n	8003030 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01a      	beq.n	8003044 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	3310      	adds	r3, #16
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fa1a 	bl	800444c <xTaskRemoveFromEventList>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800301e:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <xQueueGenericReset+0xd0>)
 8003020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	e009      	b.n	8003044 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3310      	adds	r3, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fef1 	bl	8002e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	3324      	adds	r3, #36	@ 0x24
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff feec 	bl	8002e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003044:	f002 f9aa 	bl	800539c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	@ 0x38
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10b      	bne.n	8003084 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	e7fd      	b.n	8003080 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	e7fd      	b.n	800309e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <xQueueGenericCreateStatic+0x56>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <xQueueGenericCreateStatic+0x5a>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <xQueueGenericCreateStatic+0x5c>
 80030b2:	2300      	movs	r3, #0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	623b      	str	r3, [r7, #32]
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d102      	bne.n	80030dc <xQueueGenericCreateStatic+0x84>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <xQueueGenericCreateStatic+0x88>
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <xQueueGenericCreateStatic+0x8a>
 80030e0:	2300      	movs	r3, #0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10b      	bne.n	80030fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	61fb      	str	r3, [r7, #28]
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	e7fd      	b.n	80030fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030fe:	2350      	movs	r3, #80	@ 0x50
 8003100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b50      	cmp	r3, #80	@ 0x50
 8003106:	d00b      	beq.n	8003120 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61bb      	str	r3, [r7, #24]
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003120:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800312c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003134:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	4613      	mov	r3, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f805 	bl	8003152 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800314a:	4618      	mov	r0, r3
 800314c:	3730      	adds	r7, #48	@ 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	e002      	b.n	8003174 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003180:	2101      	movs	r1, #1
 8003182:	69b8      	ldr	r0, [r7, #24]
 8003184:	f7ff fefe 	bl	8002f84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	68f9      	ldr	r1, [r7, #12]
 8003196:	2073      	movs	r0, #115	@ 0x73
 8003198:	f003 fa7a 	bl	8006690 <SEGGER_SYSVIEW_RecordU32x3>
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b090      	sub	sp, #64	@ 0x40
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <xQueueGenericSend+0x34>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSend+0x42>
 80031de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <xQueueGenericSend+0x46>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueGenericSend+0x48>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <xQueueGenericSend+0x64>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d103      	bne.n	8003216 <xQueueGenericSend+0x72>
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <xQueueGenericSend+0x76>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <xQueueGenericSend+0x78>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <xQueueGenericSend+0x94>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	623b      	str	r3, [r7, #32]
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003238:	f001 fb0a 	bl	8004850 <xTaskGetSchedulerState>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <xQueueGenericSend+0xa4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <xQueueGenericSend+0xa8>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <xQueueGenericSend+0xaa>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <xQueueGenericSend+0xc6>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	61fb      	str	r3, [r7, #28]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800326a:	f002 f865 	bl	8005338 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <xQueueGenericSend+0xdc>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d136      	bne.n	80032ee <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	4618      	mov	r0, r3
 8003284:	f003 feb6 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	4601      	mov	r1, r0
 8003294:	205a      	movs	r0, #90	@ 0x5a
 8003296:	f003 fa71 	bl	800677c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032a0:	f000 fa70 	bl	8003784 <prvCopyDataToQueue>
 80032a4:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	3324      	adds	r3, #36	@ 0x24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f8ca 	bl	800444c <xTaskRemoveFromEventList>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d013      	beq.n	80032e6 <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032be:	4b4d      	ldr	r3, [pc, #308]	@ (80033f4 <xQueueGenericSend+0x250>)
 80032c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	e00a      	b.n	80032e6 <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032d6:	4b47      	ldr	r3, [pc, #284]	@ (80033f4 <xQueueGenericSend+0x250>)
 80032d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032e6:	f002 f859 	bl	800539c <vPortExitCritical>
				return pdPASS;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e07d      	b.n	80033ea <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d110      	bne.n	8003316 <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032f4:	f002 f852 	bl	800539c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fe7a 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	460b      	mov	r3, r1
 800330a:	4601      	mov	r1, r0
 800330c:	205a      	movs	r0, #90	@ 0x5a
 800330e:	f003 fa35 	bl	800677c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8003312:	2300      	movs	r3, #0
 8003314:	e069      	b.n	80033ea <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4618      	mov	r0, r3
 8003322:	f001 f8fb 	bl	800451c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003326:	2301      	movs	r3, #1
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800332a:	f002 f837 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800332e:	f000 fe33 	bl	8003f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003332:	f002 f801 	bl	8005338 <vPortEnterCritical>
 8003336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003338:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800333c:	b25b      	sxtb	r3, r3
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d103      	bne.n	800334c <xQueueGenericSend+0x1a8>
 8003344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003352:	b25b      	sxtb	r3, r3
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d103      	bne.n	8003362 <xQueueGenericSend+0x1be>
 800335a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003362:	f002 f81b 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003366:	1d3a      	adds	r2, r7, #4
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f001 f8ea 	bl	8004548 <xTaskCheckForTimeOut>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d124      	bne.n	80033c4 <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800337a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800337c:	f000 fafa 	bl	8003974 <prvIsQueueFull>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d018      	beq.n	80033b8 <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	3310      	adds	r3, #16
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4611      	mov	r1, r2
 800338e:	4618      	mov	r0, r3
 8003390:	f001 f806 	bl	80043a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003396:	f000 fa85 	bl	80038a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800339a:	f000 fe0b 	bl	8003fb4 <xTaskResumeAll>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f47f af62 	bne.w	800326a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033a6:	4b13      	ldr	r3, [pc, #76]	@ (80033f4 <xQueueGenericSend+0x250>)
 80033a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	e758      	b.n	800326a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ba:	f000 fa73 	bl	80038a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033be:	f000 fdf9 	bl	8003fb4 <xTaskResumeAll>
 80033c2:	e752      	b.n	800326a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033c6:	f000 fa6d 	bl	80038a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033ca:	f000 fdf3 	bl	8003fb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 fe0f 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	9300      	str	r3, [sp, #0]
 80033de:	460b      	mov	r3, r1
 80033e0:	4601      	mov	r1, r0
 80033e2:	205a      	movs	r0, #90	@ 0x5a
 80033e4:	f003 f9ca 	bl	800677c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80033e8:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3738      	adds	r7, #56	@ 0x38
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000ed04 	.word	0xe000ed04

080033f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b090      	sub	sp, #64	@ 0x40
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <xQueueGenericSendFromISR+0x3e>
 800342e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <xQueueGenericSendFromISR+0x42>
 8003436:	2301      	movs	r3, #1
 8003438:	e000      	b.n	800343c <xQueueGenericSendFromISR+0x44>
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d103      	bne.n	8003466 <xQueueGenericSendFromISR+0x6e>
 800345e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <xQueueGenericSendFromISR+0x72>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSendFromISR+0x74>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003488:	f002 f836 	bl	80054f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800348c:	f3ef 8211 	mrs	r2, BASEPRI
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	61fa      	str	r2, [r7, #28]
 80034a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <xQueueGenericSendFromISR+0xc2>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d139      	bne.n	800352e <xQueueGenericSendFromISR+0x136>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fd91 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 80034d2:	4601      	mov	r1, r0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	2060      	movs	r0, #96	@ 0x60
 80034da:	f003 f87f 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034e4:	f000 f94e 	bl	8003784 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80034ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f0:	d112      	bne.n	8003518 <xQueueGenericSendFromISR+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <xQueueGenericSendFromISR+0x130>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fc:	3324      	adds	r3, #36	@ 0x24
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 ffa4 	bl	800444c <xTaskRemoveFromEventList>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00e      	beq.n	8003528 <xQueueGenericSendFromISR+0x130>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <xQueueGenericSendFromISR+0x130>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	e007      	b.n	8003528 <xQueueGenericSendFromISR+0x130>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003518:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800351c:	3301      	adds	r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	b25a      	sxtb	r2, r3
 8003522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003528:	2301      	movs	r3, #1
 800352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800352c:	e00b      	b.n	8003546 <xQueueGenericSendFromISR+0x14e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fd5f 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003536:	4601      	mov	r1, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	461a      	mov	r2, r3
 800353c:	2060      	movs	r0, #96	@ 0x60
 800353e:	f003 f84d 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8003542:	2300      	movs	r3, #0
 8003544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003550:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003554:	4618      	mov	r0, r3
 8003556:	3740      	adds	r7, #64	@ 0x40
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b08f      	sub	sp, #60	@ 0x3c
 8003560:	af02      	add	r7, sp, #8
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003568:	2300      	movs	r3, #0
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <xQueueReceive+0x32>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	623b      	str	r3, [r7, #32]
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d103      	bne.n	800359c <xQueueReceive+0x40>
 8003594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <xQueueReceive+0x44>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <xQueueReceive+0x46>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <xQueueReceive+0x62>
	__asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	61fb      	str	r3, [r7, #28]
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	e7fd      	b.n	80035ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035be:	f001 f947 	bl	8004850 <xTaskGetSchedulerState>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <xQueueReceive+0x72>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xQueueReceive+0x76>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueReceive+0x78>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xQueueReceive+0x94>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	61bb      	str	r3, [r7, #24]
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035f0:	f001 fea2 	bl	8005338 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d02f      	beq.n	8003660 <xQueueReceive+0x104>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003604:	f000 f928 	bl	8003858 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8003608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fcf2 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003610:	4604      	mov	r4, r0
 8003612:	2000      	movs	r0, #0
 8003614:	f003 fcee 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003618:	4602      	mov	r2, r0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2101      	movs	r1, #1
 800361e:	9100      	str	r1, [sp, #0]
 8003620:	4621      	mov	r1, r4
 8003622:	205c      	movs	r0, #92	@ 0x5c
 8003624:	f003 f8aa 	bl	800677c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00f      	beq.n	8003658 <xQueueReceive+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	3310      	adds	r3, #16
 800363c:	4618      	mov	r0, r3
 800363e:	f000 ff05 	bl	800444c <xTaskRemoveFromEventList>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <xQueueReceive+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003648:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <xQueueReceive+0x224>)
 800364a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003658:	f001 fea0 	bl	800539c <vPortExitCritical>
				return pdPASS;
 800365c:	2301      	movs	r3, #1
 800365e:	e08a      	b.n	8003776 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d113      	bne.n	800368e <xQueueReceive+0x132>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003666:	f001 fe99 	bl	800539c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	4618      	mov	r0, r3
 800366e:	f003 fcc1 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003672:	4604      	mov	r4, r0
 8003674:	2000      	movs	r0, #0
 8003676:	f003 fcbd 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 800367a:	4602      	mov	r2, r0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2101      	movs	r1, #1
 8003680:	9100      	str	r1, [sp, #0]
 8003682:	4621      	mov	r1, r4
 8003684:	205c      	movs	r0, #92	@ 0x5c
 8003686:	f003 f879 	bl	800677c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800368a:	2300      	movs	r3, #0
 800368c:	e073      	b.n	8003776 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <xQueueReceive+0x146>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003694:	f107 0310 	add.w	r3, r7, #16
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ff3f 	bl	800451c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800369e:	2301      	movs	r3, #1
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036a2:	f001 fe7b 	bl	800539c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036a6:	f000 fc77 	bl	8003f98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036aa:	f001 fe45 	bl	8005338 <vPortEnterCritical>
 80036ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d103      	bne.n	80036c4 <xQueueReceive+0x168>
 80036bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d103      	bne.n	80036da <xQueueReceive+0x17e>
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036da:	f001 fe5f 	bl	800539c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036de:	1d3a      	adds	r2, r7, #4
 80036e0:	f107 0310 	add.w	r3, r7, #16
 80036e4:	4611      	mov	r1, r2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 ff2e 	bl	8004548 <xTaskCheckForTimeOut>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d124      	bne.n	800373c <xQueueReceive+0x1e0>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f4:	f000 f928 	bl	8003948 <prvIsQueueEmpty>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <xQueueReceive+0x1d4>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	3324      	adds	r3, #36	@ 0x24
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fe4a 	bl	80043a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800370c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800370e:	f000 f8c9 	bl	80038a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003712:	f000 fc4f 	bl	8003fb4 <xTaskResumeAll>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	f47f af69 	bne.w	80035f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800371e:	4b18      	ldr	r3, [pc, #96]	@ (8003780 <xQueueReceive+0x224>)
 8003720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	f3bf 8f6f 	isb	sy
 800372e:	e75f      	b.n	80035f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003732:	f000 f8b7 	bl	80038a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003736:	f000 fc3d 	bl	8003fb4 <xTaskResumeAll>
 800373a:	e759      	b.n	80035f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800373c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800373e:	f000 f8b1 	bl	80038a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003742:	f000 fc37 	bl	8003fb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003746:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003748:	f000 f8fe 	bl	8003948 <prvIsQueueEmpty>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	f43f af4e 	beq.w	80035f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fc4c 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 800375c:	4604      	mov	r4, r0
 800375e:	2000      	movs	r0, #0
 8003760:	f003 fc48 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2101      	movs	r1, #1
 800376a:	9100      	str	r1, [sp, #0]
 800376c:	4621      	mov	r1, r4
 800376e:	205c      	movs	r0, #92	@ 0x5c
 8003770:	f003 f804 	bl	800677c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8003774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003776:	4618      	mov	r0, r3
 8003778:	3734      	adds	r7, #52	@ 0x34
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}
 800377e:	bf00      	nop
 8003780:	e000ed04 	.word	0xe000ed04

08003784 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003798:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10d      	bne.n	80037be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d14d      	bne.n	8003846 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f86c 	bl	800488c <xTaskPriorityDisinherit>
 80037b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	e043      	b.n	8003846 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d119      	bne.n	80037f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6858      	ldr	r0, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	461a      	mov	r2, r3
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	f003 fdf6 	bl	80073c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d32b      	bcc.n	8003846 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	605a      	str	r2, [r3, #4]
 80037f6:	e026      	b.n	8003846 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	68d8      	ldr	r0, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	461a      	mov	r2, r3
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	f003 fddc 	bl	80073c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	425b      	negs	r3, r3
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68da      	ldr	r2, [r3, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	425b      	negs	r3, r3
 800382e:	441a      	add	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d105      	bne.n	8003846 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	3b01      	subs	r3, #1
 8003844:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800384e:	697b      	ldr	r3, [r7, #20]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d018      	beq.n	800389c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	441a      	add	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	429a      	cmp	r2, r3
 8003882:	d303      	bcc.n	800388c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68d9      	ldr	r1, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	461a      	mov	r2, r3
 8003896:	6838      	ldr	r0, [r7, #0]
 8003898:	f003 fd92 	bl	80073c0 <memcpy>
	}
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038ac:	f001 fd44 	bl	8005338 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038b8:	e011      	b.n	80038de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3324      	adds	r3, #36	@ 0x24
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fdc0 	bl	800444c <xTaskRemoveFromEventList>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038d2:	f000 fe9d 	bl	8004610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	3b01      	subs	r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	dce9      	bgt.n	80038ba <prvUnlockQueue+0x16>
 80038e6:	e000      	b.n	80038ea <prvUnlockQueue+0x46>
					break;
 80038e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	22ff      	movs	r2, #255	@ 0xff
 80038ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80038f2:	f001 fd53 	bl	800539c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038f6:	f001 fd1f 	bl	8005338 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003900:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003902:	e011      	b.n	8003928 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3310      	adds	r3, #16
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fd9b 	bl	800444c <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800391c:	f000 fe78 	bl	8004610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	3b01      	subs	r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003928:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dce9      	bgt.n	8003904 <prvUnlockQueue+0x60>
 8003930:	e000      	b.n	8003934 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003932:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	22ff      	movs	r2, #255	@ 0xff
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800393c:	f001 fd2e 	bl	800539c <vPortExitCritical>
}
 8003940:	bf00      	nop
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003950:	f001 fcf2 	bl	8005338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e001      	b.n	8003966 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003966:	f001 fd19 	bl	800539c <vPortExitCritical>

	return xReturn;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800397c:	f001 fcdc 	bl	8005338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	429a      	cmp	r2, r3
 800398a:	d102      	bne.n	8003992 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e001      	b.n	8003996 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003996:	f001 fd01 	bl	800539c <vPortExitCritical>

	return xReturn;
 800399a:	68fb      	ldr	r3, [r7, #12]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e01e      	b.n	80039f2 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039b4:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <vQueueAddToRegistry+0x60>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d115      	bne.n	80039ec <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039c0:	4910      	ldr	r1, [pc, #64]	@ (8003a04 <vQueueAddToRegistry+0x60>)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <vQueueAddToRegistry+0x60>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	f003 fb0b 	bl	8006ff4 <SEGGER_SYSVIEW_ShrinkId>
 80039de:	4601      	mov	r1, r0
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	2071      	movs	r0, #113	@ 0x71
 80039e6:	f002 fdf9 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80039ea:	e006      	b.n	80039fa <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3301      	adds	r3, #1
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b07      	cmp	r3, #7
 80039f6:	d9dd      	bls.n	80039b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000870 	.word	0x20000870

08003a08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a18:	f001 fc8e 	bl	8005338 <vPortEnterCritical>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d103      	bne.n	8003a32 <vQueueWaitForMessageRestricted+0x2a>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d103      	bne.n	8003a48 <vQueueWaitForMessageRestricted+0x40>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a48:	f001 fca8 	bl	800539c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3324      	adds	r3, #36	@ 0x24
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fcc5 	bl	80043ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a62:	6978      	ldr	r0, [r7, #20]
 8003a64:	f7ff ff1e 	bl	80038a4 <prvUnlockQueue>
	}
 8003a68:	bf00      	nop
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08e      	sub	sp, #56	@ 0x38
 8003a74:	af04      	add	r7, sp, #16
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	623b      	str	r3, [r7, #32]
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10b      	bne.n	8003aba <xTaskCreateStatic+0x4a>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	61fb      	str	r3, [r7, #28]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aba:	23a8      	movs	r3, #168	@ 0xa8
 8003abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2ba8      	cmp	r3, #168	@ 0xa8
 8003ac2:	d00b      	beq.n	8003adc <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	61bb      	str	r3, [r7, #24]
}
 8003ad6:	bf00      	nop
 8003ad8:	bf00      	nop
 8003ada:	e7fd      	b.n	8003ad8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003adc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01e      	beq.n	8003b22 <xTaskCreateStatic+0xb2>
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01b      	beq.n	8003b22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003afc:	2300      	movs	r3, #0
 8003afe:	9303      	str	r3, [sp, #12]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	9302      	str	r3, [sp, #8]
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f851 	bl	8003bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b1c:	f000 f8f6 	bl	8003d0c <prvAddNewTaskToReadyList>
 8003b20:	e001      	b.n	8003b26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b26:	697b      	ldr	r3, [r7, #20]
	}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3728      	adds	r7, #40	@ 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	@ 0x30
 8003b34:	af04      	add	r7, sp, #16
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 fd19 	bl	800557c <pvPortMalloc>
 8003b4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00e      	beq.n	8003b70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b52:	20a8      	movs	r0, #168	@ 0xa8
 8003b54:	f001 fd12 	bl	800557c <pvPortMalloc>
 8003b58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b66:	e005      	b.n	8003b74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b68:	6978      	ldr	r0, [r7, #20]
 8003b6a:	f001 fdd5 	bl	8005718 <vPortFree>
 8003b6e:	e001      	b.n	8003b74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d017      	beq.n	8003baa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9303      	str	r3, [sp, #12]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	9302      	str	r3, [sp, #8]
 8003b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f80f 	bl	8003bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b9e:	69f8      	ldr	r0, [r7, #28]
 8003ba0:	f000 f8b4 	bl	8003d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	61bb      	str	r3, [r7, #24]
 8003ba8:	e002      	b.n	8003bb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bb0:	69bb      	ldr	r3, [r7, #24]
	}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	21a5      	movs	r1, #165	@ 0xa5
 8003bd6:	f003 fb6f 	bl	80072b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003be4:	3b01      	subs	r3, #1
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f023 0307 	bic.w	r3, r3, #7
 8003bf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	617b      	str	r3, [r7, #20]
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	e7fd      	b.n	8003c12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01f      	beq.n	8003c5c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	e012      	b.n	8003c48 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	7819      	ldrb	r1, [r3, #0]
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3334      	adds	r3, #52	@ 0x34
 8003c32:	460a      	mov	r2, r1
 8003c34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d006      	beq.n	8003c50 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3301      	adds	r3, #1
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d9e9      	bls.n	8003c22 <prvInitialiseNewTask+0x66>
 8003c4e:	e000      	b.n	8003c52 <prvInitialiseNewTask+0x96>
			{
				break;
 8003c50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c5a:	e003      	b.n	8003c64 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c66:	2b37      	cmp	r3, #55	@ 0x37
 8003c68:	d901      	bls.n	8003c6e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c6a:	2337      	movs	r3, #55	@ 0x37
 8003c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	3304      	adds	r3, #4
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f8e9 	bl	8002e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f8e4 	bl	8002e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ca8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	3354      	adds	r3, #84	@ 0x54
 8003cbe:	224c      	movs	r2, #76	@ 0x4c
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 faf8 	bl	80072b8 <memset>
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	4a0d      	ldr	r2, [pc, #52]	@ (8003d00 <prvInitialiseNewTask+0x144>)
 8003ccc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d04 <prvInitialiseNewTask+0x148>)
 8003cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8003d08 <prvInitialiseNewTask+0x14c>)
 8003cd8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	68f9      	ldr	r1, [r7, #12]
 8003cde:	69b8      	ldr	r0, [r7, #24]
 8003ce0:	f001 f9fa 	bl	80050d8 <pxPortInitialiseStack>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cf6:	bf00      	nop
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	2000717c 	.word	0x2000717c
 8003d04:	200071e4 	.word	0x200071e4
 8003d08:	2000724c 	.word	0x2000724c

08003d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d0c:	b5b0      	push	{r4, r5, r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d14:	f001 fb10 	bl	8005338 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d18:	4b3c      	ldr	r3, [pc, #240]	@ (8003e0c <prvAddNewTaskToReadyList+0x100>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e0c <prvAddNewTaskToReadyList+0x100>)
 8003d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d22:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <prvAddNewTaskToReadyList+0x104>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d2a:	4a39      	ldr	r2, [pc, #228]	@ (8003e10 <prvAddNewTaskToReadyList+0x104>)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <prvAddNewTaskToReadyList+0x100>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d110      	bne.n	8003d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d38:	f000 fc8e 	bl	8004658 <prvInitialiseTaskLists>
 8003d3c:	e00d      	b.n	8003d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d3e:	4b35      	ldr	r3, [pc, #212]	@ (8003e14 <prvAddNewTaskToReadyList+0x108>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d109      	bne.n	8003d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d46:	4b32      	ldr	r3, [pc, #200]	@ (8003e10 <prvAddNewTaskToReadyList+0x104>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d802      	bhi.n	8003d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d54:	4a2e      	ldr	r2, [pc, #184]	@ (8003e10 <prvAddNewTaskToReadyList+0x104>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <prvAddNewTaskToReadyList+0x10c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	4a2d      	ldr	r2, [pc, #180]	@ (8003e18 <prvAddNewTaskToReadyList+0x10c>)
 8003d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d64:	4b2c      	ldr	r3, [pc, #176]	@ (8003e18 <prvAddNewTaskToReadyList+0x10c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d016      	beq.n	8003da0 <prvAddNewTaskToReadyList+0x94>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 f877 	bl	8006e68 <SEGGER_SYSVIEW_OnTaskCreate>
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461c      	mov	r4, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	1ae3      	subs	r3, r4, r3
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	462b      	mov	r3, r5
 8003d9c:	f001 fea2 	bl	8005ae4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 f8e4 	bl	8006f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dac:	4b1b      	ldr	r3, [pc, #108]	@ (8003e1c <prvAddNewTaskToReadyList+0x110>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d903      	bls.n	8003dbc <prvAddNewTaskToReadyList+0xb0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	4a18      	ldr	r2, [pc, #96]	@ (8003e1c <prvAddNewTaskToReadyList+0x110>)
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <prvAddNewTaskToReadyList+0x114>)
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	f7ff f84f 	bl	8002e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dd8:	f001 fae0 	bl	800539c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <prvAddNewTaskToReadyList+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00e      	beq.n	8003e02 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003de4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e10 <prvAddNewTaskToReadyList+0x104>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d207      	bcs.n	8003e02 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <prvAddNewTaskToReadyList+0x118>)
 8003df4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000d84 	.word	0x20000d84
 8003e10:	200008b0 	.word	0x200008b0
 8003e14:	20000d90 	.word	0x20000d90
 8003e18:	20000da0 	.word	0x20000da0
 8003e1c:	20000d8c 	.word	0x20000d8c
 8003e20:	200008b4 	.word	0x200008b4
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01c      	beq.n	8003e74 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e3a:	4b16      	ldr	r3, [pc, #88]	@ (8003e94 <vTaskDelay+0x6c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <vTaskDelay+0x32>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	60bb      	str	r3, [r7, #8]
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e5a:	f000 f89d 	bl	8003f98 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	2023      	movs	r0, #35	@ 0x23
 8003e62:	f002 fb7f 	bl	8006564 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e66:	2100      	movs	r1, #0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fd87 	bl	800497c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e6e:	f000 f8a1 	bl	8003fb4 <xTaskResumeAll>
 8003e72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d107      	bne.n	8003e8a <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 8003e7a:	4b07      	ldr	r3, [pc, #28]	@ (8003e98 <vTaskDelay+0x70>)
 8003e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e8a:	bf00      	nop
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	20000dac 	.word	0x20000dac
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	@ 0x28
 8003ea0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eaa:	463a      	mov	r2, r7
 8003eac:	1d39      	adds	r1, r7, #4
 8003eae:	f107 0308 	add.w	r3, r7, #8
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe ff7e 	bl	8002db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	9202      	str	r2, [sp, #8]
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	460a      	mov	r2, r1
 8003eca:	492b      	ldr	r1, [pc, #172]	@ (8003f78 <vTaskStartScheduler+0xdc>)
 8003ecc:	482b      	ldr	r0, [pc, #172]	@ (8003f7c <vTaskStartScheduler+0xe0>)
 8003ece:	f7ff fdcf 	bl	8003a70 <xTaskCreateStatic>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f80 <vTaskStartScheduler+0xe4>)
 8003ed6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ed8:	4b29      	ldr	r3, [pc, #164]	@ (8003f80 <vTaskStartScheduler+0xe4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	e001      	b.n	8003eea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ef0:	f000 fd98 	bl	8004a24 <xTimerCreateTimerTask>
 8003ef4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d129      	bne.n	8003f50 <vTaskStartScheduler+0xb4>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	613b      	str	r3, [r7, #16]
}
 8003f0e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f10:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <vTaskStartScheduler+0xe8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3354      	adds	r3, #84	@ 0x54
 8003f16:	4a1c      	ldr	r2, [pc, #112]	@ (8003f88 <vTaskStartScheduler+0xec>)
 8003f18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f8c <vTaskStartScheduler+0xf0>)
 8003f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f22:	4b1b      	ldr	r3, [pc, #108]	@ (8003f90 <vTaskStartScheduler+0xf4>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f28:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <vTaskStartScheduler+0xf8>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003f2e:	4b15      	ldr	r3, [pc, #84]	@ (8003f84 <vTaskStartScheduler+0xe8>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <vTaskStartScheduler+0xe4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d102      	bne.n	8003f40 <vTaskStartScheduler+0xa4>
 8003f3a:	f002 ff79 	bl	8006e30 <SEGGER_SYSVIEW_OnIdle>
 8003f3e:	e004      	b.n	8003f4a <vTaskStartScheduler+0xae>
 8003f40:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <vTaskStartScheduler+0xe8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f002 ffd1 	bl	8006eec <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f4a:	f001 f951 	bl	80051f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f4e:	e00f      	b.n	8003f70 <vTaskStartScheduler+0xd4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d10b      	bne.n	8003f70 <vTaskStartScheduler+0xd4>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60fb      	str	r3, [r7, #12]
}
 8003f6a:	bf00      	nop
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <vTaskStartScheduler+0xd0>
}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	080074d0 	.word	0x080074d0
 8003f7c:	08004629 	.word	0x08004629
 8003f80:	20000da8 	.word	0x20000da8
 8003f84:	200008b0 	.word	0x200008b0
 8003f88:	20000014 	.word	0x20000014
 8003f8c:	20000da4 	.word	0x20000da4
 8003f90:	20000d90 	.word	0x20000d90
 8003f94:	20000d88 	.word	0x20000d88

08003f98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f9c:	4b04      	ldr	r3, [pc, #16]	@ (8003fb0 <vTaskSuspendAll+0x18>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	4a03      	ldr	r2, [pc, #12]	@ (8003fb0 <vTaskSuspendAll+0x18>)
 8003fa4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fa6:	bf00      	nop
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	20000dac 	.word	0x20000dac

08003fb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fc2:	4b44      	ldr	r3, [pc, #272]	@ (80040d4 <xTaskResumeAll+0x120>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	603b      	str	r3, [r7, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fe2:	f001 f9a9 	bl	8005338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80040d4 <xTaskResumeAll+0x120>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	4a39      	ldr	r2, [pc, #228]	@ (80040d4 <xTaskResumeAll+0x120>)
 8003fee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff0:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <xTaskResumeAll+0x120>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d166      	bne.n	80040c6 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ff8:	4b37      	ldr	r3, [pc, #220]	@ (80040d8 <xTaskResumeAll+0x124>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d062      	beq.n	80040c6 <xTaskResumeAll+0x112>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004000:	e033      	b.n	800406a <xTaskResumeAll+0xb6>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004002:	4b36      	ldr	r3, [pc, #216]	@ (80040dc <xTaskResumeAll+0x128>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3318      	adds	r3, #24
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe ff8e 	bl	8002f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe ff89 	bl	8002f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4618      	mov	r0, r3
 8004022:	f002 ffa5 	bl	8006f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	4b2d      	ldr	r3, [pc, #180]	@ (80040e0 <xTaskResumeAll+0x12c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d903      	bls.n	800403a <xTaskResumeAll+0x86>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <xTaskResumeAll+0x12c>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4a27      	ldr	r2, [pc, #156]	@ (80040e4 <xTaskResumeAll+0x130>)
 8004048:	441a      	add	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3304      	adds	r3, #4
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7fe ff10 	bl	8002e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405a:	4b23      	ldr	r3, [pc, #140]	@ (80040e8 <xTaskResumeAll+0x134>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	429a      	cmp	r2, r3
 8004062:	d302      	bcc.n	800406a <xTaskResumeAll+0xb6>
					{
						xYieldPending = pdTRUE;
 8004064:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <xTaskResumeAll+0x138>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406a:	4b1c      	ldr	r3, [pc, #112]	@ (80040dc <xTaskResumeAll+0x128>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1c7      	bne.n	8004002 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <xTaskResumeAll+0xc8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004078:	f000 fbca 	bl	8004810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800407c:	4b1c      	ldr	r3, [pc, #112]	@ (80040f0 <xTaskResumeAll+0x13c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <xTaskResumeAll+0xf6>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004088:	f000 f858 	bl	800413c <xTaskIncrementTick>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <xTaskResumeAll+0xe4>
							{
								xYieldPending = pdTRUE;
 8004092:	4b16      	ldr	r3, [pc, #88]	@ (80040ec <xTaskResumeAll+0x138>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f1      	bne.n	8004088 <xTaskResumeAll+0xd4>

						xPendedTicks = 0;
 80040a4:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <xTaskResumeAll+0x13c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <xTaskResumeAll+0x138>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040b6:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <xTaskResumeAll+0x140>)
 80040b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040c6:	f001 f969 	bl	800539c <vPortExitCritical>

	return xAlreadyYielded;
 80040ca:	68bb      	ldr	r3, [r7, #8]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000dac 	.word	0x20000dac
 80040d8:	20000d84 	.word	0x20000d84
 80040dc:	20000d44 	.word	0x20000d44
 80040e0:	20000d8c 	.word	0x20000d8c
 80040e4:	200008b4 	.word	0x200008b4
 80040e8:	200008b0 	.word	0x200008b0
 80040ec:	20000d98 	.word	0x20000d98
 80040f0:	20000d94 	.word	0x20000d94
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <xTaskGetTickCount+0x1c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004104:	687b      	ldr	r3, [r7, #4]
}
 8004106:	4618      	mov	r0, r3
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000d88 	.word	0x20000d88

08004118 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800411e:	f001 f9eb 	bl	80054f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004126:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <xTaskGetTickCountFromISR+0x20>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800412c:	683b      	ldr	r3, [r7, #0]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000d88 	.word	0x20000d88

0800413c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004146:	4b51      	ldr	r3, [pc, #324]	@ (800428c <xTaskIncrementTick+0x150>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	f040 8094 	bne.w	8004278 <xTaskIncrementTick+0x13c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004150:	4b4f      	ldr	r3, [pc, #316]	@ (8004290 <xTaskIncrementTick+0x154>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3301      	adds	r3, #1
 8004156:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004158:	4a4d      	ldr	r2, [pc, #308]	@ (8004290 <xTaskIncrementTick+0x154>)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d121      	bne.n	80041a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004164:	4b4b      	ldr	r3, [pc, #300]	@ (8004294 <xTaskIncrementTick+0x158>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <xTaskIncrementTick+0x4a>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	603b      	str	r3, [r7, #0]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xTaskIncrementTick+0x46>
 8004186:	4b43      	ldr	r3, [pc, #268]	@ (8004294 <xTaskIncrementTick+0x158>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	4b42      	ldr	r3, [pc, #264]	@ (8004298 <xTaskIncrementTick+0x15c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a40      	ldr	r2, [pc, #256]	@ (8004294 <xTaskIncrementTick+0x158>)
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	4a40      	ldr	r2, [pc, #256]	@ (8004298 <xTaskIncrementTick+0x15c>)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b40      	ldr	r3, [pc, #256]	@ (800429c <xTaskIncrementTick+0x160>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <xTaskIncrementTick+0x160>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	f000 fb34 	bl	8004810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041a8:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <xTaskIncrementTick+0x164>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d34d      	bcc.n	800424e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b2:	4b38      	ldr	r3, [pc, #224]	@ (8004294 <xTaskIncrementTick+0x158>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041bc:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <xTaskIncrementTick+0x164>)
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	601a      	str	r2, [r3, #0]
					break;
 80041c4:	e043      	b.n	800424e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041c6:	4b33      	ldr	r3, [pc, #204]	@ (8004294 <xTaskIncrementTick+0x158>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d203      	bcs.n	80041e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041de:	4a30      	ldr	r2, [pc, #192]	@ (80042a0 <xTaskIncrementTick+0x164>)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041e4:	e033      	b.n	800424e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fea0 	bl	8002f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	3318      	adds	r3, #24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fe97 	bl	8002f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f002 feb3 	bl	8006f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420e:	4b25      	ldr	r3, [pc, #148]	@ (80042a4 <xTaskIncrementTick+0x168>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d903      	bls.n	800421e <xTaskIncrementTick+0xe2>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421a:	4a22      	ldr	r2, [pc, #136]	@ (80042a4 <xTaskIncrementTick+0x168>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4a1f      	ldr	r2, [pc, #124]	@ (80042a8 <xTaskIncrementTick+0x16c>)
 800422c:	441a      	add	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fe fe1e 	bl	8002e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ac <xTaskIncrementTick+0x170>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004244:	429a      	cmp	r2, r3
 8004246:	d3b4      	bcc.n	80041b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424c:	e7b1      	b.n	80041b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800424e:	4b17      	ldr	r3, [pc, #92]	@ (80042ac <xTaskIncrementTick+0x170>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	4914      	ldr	r1, [pc, #80]	@ (80042a8 <xTaskIncrementTick+0x16c>)
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d901      	bls.n	800426a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800426a:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <xTaskIncrementTick+0x174>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <xTaskIncrementTick+0x146>
			{
				xSwitchRequired = pdTRUE;
 8004272:	2301      	movs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e004      	b.n	8004282 <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <xTaskIncrementTick+0x178>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <xTaskIncrementTick+0x178>)
 8004280:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000dac 	.word	0x20000dac
 8004290:	20000d88 	.word	0x20000d88
 8004294:	20000d3c 	.word	0x20000d3c
 8004298:	20000d40 	.word	0x20000d40
 800429c:	20000d9c 	.word	0x20000d9c
 80042a0:	20000da4 	.word	0x20000da4
 80042a4:	20000d8c 	.word	0x20000d8c
 80042a8:	200008b4 	.word	0x200008b4
 80042ac:	200008b0 	.word	0x200008b0
 80042b0:	20000d98 	.word	0x20000d98
 80042b4:	20000d94 	.word	0x20000d94

080042b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042be:	4b31      	ldr	r3, [pc, #196]	@ (8004384 <vTaskSwitchContext+0xcc>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042c6:	4b30      	ldr	r3, [pc, #192]	@ (8004388 <vTaskSwitchContext+0xd0>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042cc:	e055      	b.n	800437a <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80042ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004388 <vTaskSwitchContext+0xd0>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d4:	4b2d      	ldr	r3, [pc, #180]	@ (800438c <vTaskSwitchContext+0xd4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	e011      	b.n	8004300 <vTaskSwitchContext+0x48>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <vTaskSwitchContext+0x42>
	__asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	607b      	str	r3, [r7, #4]
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	e7fd      	b.n	80042f6 <vTaskSwitchContext+0x3e>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	4923      	ldr	r1, [pc, #140]	@ (8004390 <vTaskSwitchContext+0xd8>)
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4613      	mov	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0e3      	beq.n	80042dc <vTaskSwitchContext+0x24>
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4a1c      	ldr	r2, [pc, #112]	@ (8004390 <vTaskSwitchContext+0xd8>)
 8004320:	4413      	add	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3308      	adds	r3, #8
 8004336:	429a      	cmp	r2, r3
 8004338:	d104      	bne.n	8004344 <vTaskSwitchContext+0x8c>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4a12      	ldr	r2, [pc, #72]	@ (8004394 <vTaskSwitchContext+0xdc>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4a0f      	ldr	r2, [pc, #60]	@ (800438c <vTaskSwitchContext+0xd4>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8004354:	4b0f      	ldr	r3, [pc, #60]	@ (8004394 <vTaskSwitchContext+0xdc>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b0f      	ldr	r3, [pc, #60]	@ (8004398 <vTaskSwitchContext+0xe0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d102      	bne.n	8004366 <vTaskSwitchContext+0xae>
 8004360:	f002 fd66 	bl	8006e30 <SEGGER_SYSVIEW_OnIdle>
 8004364:	e004      	b.n	8004370 <vTaskSwitchContext+0xb8>
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <vTaskSwitchContext+0xdc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f002 fdbe 	bl	8006eec <SEGGER_SYSVIEW_OnTaskStartExec>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <vTaskSwitchContext+0xdc>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3354      	adds	r3, #84	@ 0x54
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <vTaskSwitchContext+0xe4>)
 8004378:	6013      	str	r3, [r2, #0]
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000dac 	.word	0x20000dac
 8004388:	20000d98 	.word	0x20000d98
 800438c:	20000d8c 	.word	0x20000d8c
 8004390:	200008b4 	.word	0x200008b4
 8004394:	200008b0 	.word	0x200008b0
 8004398:	20000da8 	.word	0x20000da8
 800439c:	20000014 	.word	0x20000014

080043a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10b      	bne.n	80043c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	60fb      	str	r3, [r7, #12]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043c8:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <vTaskPlaceOnEventList+0x48>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3318      	adds	r3, #24
 80043ce:	4619      	mov	r1, r3
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fe fd74 	bl	8002ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043d6:	2101      	movs	r1, #1
 80043d8:	6838      	ldr	r0, [r7, #0]
 80043da:	f000 facf 	bl	800497c <prvAddCurrentTaskToDelayedList>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200008b0 	.word	0x200008b0

080043ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10b      	bne.n	8004416 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	617b      	str	r3, [r7, #20]
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	e7fd      	b.n	8004412 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004416:	4b0c      	ldr	r3, [pc, #48]	@ (8004448 <vTaskPlaceOnEventListRestricted+0x5c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3318      	adds	r3, #24
 800441c:	4619      	mov	r1, r3
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f7fe fd29 	bl	8002e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004430:	2024      	movs	r0, #36	@ 0x24
 8004432:	f002 f879 	bl	8006528 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68b8      	ldr	r0, [r7, #8]
 800443a:	f000 fa9f 	bl	800497c <prvAddCurrentTaskToDelayedList>
	}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200008b0 	.word	0x200008b0

0800444c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	60fb      	str	r3, [r7, #12]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3318      	adds	r3, #24
 800447e:	4618      	mov	r0, r3
 8004480:	f7fe fd56 	bl	8002f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004484:	4b1f      	ldr	r3, [pc, #124]	@ (8004504 <xTaskRemoveFromEventList+0xb8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d121      	bne.n	80044d0 <xTaskRemoveFromEventList+0x84>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3304      	adds	r3, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe fd4d 	bl	8002f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4618      	mov	r0, r3
 800449a:	f002 fd69 	bl	8006f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a2:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <xTaskRemoveFromEventList+0xbc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d903      	bls.n	80044b2 <xTaskRemoveFromEventList+0x66>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	4a16      	ldr	r2, [pc, #88]	@ (8004508 <xTaskRemoveFromEventList+0xbc>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4a13      	ldr	r2, [pc, #76]	@ (800450c <xTaskRemoveFromEventList+0xc0>)
 80044c0:	441a      	add	r2, r3
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7fe fcd4 	bl	8002e76 <vListInsertEnd>
 80044ce:	e005      	b.n	80044dc <xTaskRemoveFromEventList+0x90>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	3318      	adds	r3, #24
 80044d4:	4619      	mov	r1, r3
 80044d6:	480e      	ldr	r0, [pc, #56]	@ (8004510 <xTaskRemoveFromEventList+0xc4>)
 80044d8:	f7fe fccd 	bl	8002e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <xTaskRemoveFromEventList+0xc8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d905      	bls.n	80044f6 <xTaskRemoveFromEventList+0xaa>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <xTaskRemoveFromEventList+0xcc>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e001      	b.n	80044fa <xTaskRemoveFromEventList+0xae>
	}
	else
	{
		xReturn = pdFALSE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044fa:	697b      	ldr	r3, [r7, #20]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000dac 	.word	0x20000dac
 8004508:	20000d8c 	.word	0x20000d8c
 800450c:	200008b4 	.word	0x200008b4
 8004510:	20000d44 	.word	0x20000d44
 8004514:	200008b0 	.word	0x200008b0
 8004518:	20000d98 	.word	0x20000d98

0800451c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <vTaskInternalSetTimeOutState+0x24>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <vTaskInternalSetTimeOutState+0x28>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	20000d9c 	.word	0x20000d9c
 8004544:	20000d88 	.word	0x20000d88

08004548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	613b      	str	r3, [r7, #16]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	60fb      	str	r3, [r7, #12]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800458e:	f000 fed3 	bl	8005338 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004592:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <xTaskCheckForTimeOut+0xc0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d102      	bne.n	80045b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	e023      	b.n	80045fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	4b15      	ldr	r3, [pc, #84]	@ (800460c <xTaskCheckForTimeOut+0xc4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d007      	beq.n	80045ce <xTaskCheckForTimeOut+0x86>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045c8:	2301      	movs	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	e015      	b.n	80045fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d20b      	bcs.n	80045f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff99 	bl	800451c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e004      	b.n	80045fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045f6:	2301      	movs	r3, #1
 80045f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045fa:	f000 fecf 	bl	800539c <vPortExitCritical>

	return xReturn;
 80045fe:	69fb      	ldr	r3, [r7, #28]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20000d88 	.word	0x20000d88
 800460c:	20000d9c 	.word	0x20000d9c

08004610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <vTaskMissedYield+0x14>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	20000d98 	.word	0x20000d98

08004628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004630:	f000 f852 	bl	80046d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <prvIdleTask+0x28>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d9f9      	bls.n	8004630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800463c:	4b05      	ldr	r3, [pc, #20]	@ (8004654 <prvIdleTask+0x2c>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800464c:	e7f0      	b.n	8004630 <prvIdleTask+0x8>
 800464e:	bf00      	nop
 8004650:	200008b4 	.word	0x200008b4
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800465e:	2300      	movs	r3, #0
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e00c      	b.n	800467e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4a12      	ldr	r2, [pc, #72]	@ (80046b8 <prvInitialiseTaskLists+0x60>)
 8004670:	4413      	add	r3, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fbd2 	bl	8002e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3301      	adds	r3, #1
 800467c:	607b      	str	r3, [r7, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b37      	cmp	r3, #55	@ 0x37
 8004682:	d9ef      	bls.n	8004664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004684:	480d      	ldr	r0, [pc, #52]	@ (80046bc <prvInitialiseTaskLists+0x64>)
 8004686:	f7fe fbc9 	bl	8002e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800468a:	480d      	ldr	r0, [pc, #52]	@ (80046c0 <prvInitialiseTaskLists+0x68>)
 800468c:	f7fe fbc6 	bl	8002e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004690:	480c      	ldr	r0, [pc, #48]	@ (80046c4 <prvInitialiseTaskLists+0x6c>)
 8004692:	f7fe fbc3 	bl	8002e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004696:	480c      	ldr	r0, [pc, #48]	@ (80046c8 <prvInitialiseTaskLists+0x70>)
 8004698:	f7fe fbc0 	bl	8002e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800469c:	480b      	ldr	r0, [pc, #44]	@ (80046cc <prvInitialiseTaskLists+0x74>)
 800469e:	f7fe fbbd 	bl	8002e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <prvInitialiseTaskLists+0x78>)
 80046a4:	4a05      	ldr	r2, [pc, #20]	@ (80046bc <prvInitialiseTaskLists+0x64>)
 80046a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046a8:	4b0a      	ldr	r3, [pc, #40]	@ (80046d4 <prvInitialiseTaskLists+0x7c>)
 80046aa:	4a05      	ldr	r2, [pc, #20]	@ (80046c0 <prvInitialiseTaskLists+0x68>)
 80046ac:	601a      	str	r2, [r3, #0]
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	200008b4 	.word	0x200008b4
 80046bc:	20000d14 	.word	0x20000d14
 80046c0:	20000d28 	.word	0x20000d28
 80046c4:	20000d44 	.word	0x20000d44
 80046c8:	20000d58 	.word	0x20000d58
 80046cc:	20000d70 	.word	0x20000d70
 80046d0:	20000d3c 	.word	0x20000d3c
 80046d4:	20000d40 	.word	0x20000d40

080046d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046de:	e019      	b.n	8004714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046e0:	f000 fe2a 	bl	8005338 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e4:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <prvCheckTasksWaitingTermination+0x50>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fc1d 	bl	8002f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046f6:	4b0d      	ldr	r3, [pc, #52]	@ (800472c <prvCheckTasksWaitingTermination+0x54>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a0b      	ldr	r2, [pc, #44]	@ (800472c <prvCheckTasksWaitingTermination+0x54>)
 80046fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <prvCheckTasksWaitingTermination+0x58>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	4a0a      	ldr	r2, [pc, #40]	@ (8004730 <prvCheckTasksWaitingTermination+0x58>)
 8004708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800470a:	f000 fe47 	bl	800539c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f848 	bl	80047a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004714:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <prvCheckTasksWaitingTermination+0x58>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e1      	bne.n	80046e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20000d58 	.word	0x20000d58
 800472c:	20000d84 	.word	0x20000d84
 8004730:	20000d6c 	.word	0x20000d6c

08004734 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004740:	e005      	b.n	800474e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3301      	adds	r3, #1
 8004746:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	3301      	adds	r3, #1
 800474c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2ba5      	cmp	r3, #165	@ 0xa5
 8004754:	d0f5      	beq.n	8004742 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	089b      	lsrs	r3, r3, #2
 800475a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	b29b      	uxth	r3, r3
	}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <uxTaskGetStackHighWaterMark+0x14>
 800477a:	4b09      	ldr	r3, [pc, #36]	@ (80047a0 <uxTaskGetStackHighWaterMark+0x34>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	e000      	b.n	8004782 <uxTaskGetStackHighWaterMark+0x16>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f7ff ffd2 	bl	8004734 <prvTaskCheckFreeStackSpace>
 8004790:	4603      	mov	r3, r0
 8004792:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004794:	68fb      	ldr	r3, [r7, #12]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	200008b0 	.word	0x200008b0

080047a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3354      	adds	r3, #84	@ 0x54
 80047b0:	4618      	mov	r0, r3
 80047b2:	f002 fd89 	bl	80072c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d108      	bne.n	80047d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 ffa7 	bl	8005718 <vPortFree>
				vPortFree( pxTCB );
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 ffa4 	bl	8005718 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047d0:	e019      	b.n	8004806 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d103      	bne.n	80047e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 ff9b 	bl	8005718 <vPortFree>
	}
 80047e2:	e010      	b.n	8004806 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d00b      	beq.n	8004806 <prvDeleteTCB+0x62>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	60fb      	str	r3, [r7, #12]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <prvDeleteTCB+0x5e>
	}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <prvResetNextTaskUnblockTime+0x38>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004820:	4b0a      	ldr	r3, [pc, #40]	@ (800484c <prvResetNextTaskUnblockTime+0x3c>)
 8004822:	f04f 32ff 	mov.w	r2, #4294967295
 8004826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004828:	e008      	b.n	800483c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <prvResetNextTaskUnblockTime+0x38>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a04      	ldr	r2, [pc, #16]	@ (800484c <prvResetNextTaskUnblockTime+0x3c>)
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20000d3c 	.word	0x20000d3c
 800484c:	20000da4 	.word	0x20000da4

08004850 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <xTaskGetSchedulerState+0x34>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800485e:	2301      	movs	r3, #1
 8004860:	607b      	str	r3, [r7, #4]
 8004862:	e008      	b.n	8004876 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004864:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <xTaskGetSchedulerState+0x38>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800486c:	2302      	movs	r3, #2
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	e001      	b.n	8004876 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004872:	2300      	movs	r3, #0
 8004874:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004876:	687b      	ldr	r3, [r7, #4]
	}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	20000d90 	.word	0x20000d90
 8004888:	20000dac 	.word	0x20000dac

0800488c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d061      	beq.n	8004966 <xTaskPriorityDisinherit+0xda>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048a2:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <xTaskPriorityDisinherit+0xe4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d00b      	beq.n	80048c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	60fb      	str	r3, [r7, #12]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	60bb      	str	r3, [r7, #8]
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e8:	1e5a      	subs	r2, r3, #1
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d035      	beq.n	8004966 <xTaskPriorityDisinherit+0xda>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d131      	bne.n	8004966 <xTaskPriorityDisinherit+0xda>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	3304      	adds	r3, #4
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fb12 	bl	8002f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4619      	mov	r1, r3
 8004910:	204a      	movs	r0, #74	@ 0x4a
 8004912:	f001 fe27 	bl	8006564 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004922:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4618      	mov	r0, r3
 800492e:	f002 fb1f 	bl	8006f70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004936:	4b0f      	ldr	r3, [pc, #60]	@ (8004974 <xTaskPriorityDisinherit+0xe8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d903      	bls.n	8004946 <xTaskPriorityDisinherit+0xba>
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	4a0c      	ldr	r2, [pc, #48]	@ (8004974 <xTaskPriorityDisinherit+0xe8>)
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4a09      	ldr	r2, [pc, #36]	@ (8004978 <xTaskPriorityDisinherit+0xec>)
 8004954:	441a      	add	r2, r3
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f7fe fa8a 	bl	8002e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004966:	697b      	ldr	r3, [r7, #20]
	}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200008b0 	.word	0x200008b0
 8004974:	20000d8c 	.word	0x20000d8c
 8004978:	200008b4 	.word	0x200008b4

0800497c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004986:	4b21      	ldr	r3, [pc, #132]	@ (8004a0c <prvAddCurrentTaskToDelayedList+0x90>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800498c:	4b20      	ldr	r3, [pc, #128]	@ (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3304      	adds	r3, #4
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe facc 	bl	8002f30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d10a      	bne.n	80049b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4819      	ldr	r0, [pc, #100]	@ (8004a14 <prvAddCurrentTaskToDelayedList+0x98>)
 80049b0:	f7fe fa61 	bl	8002e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049b4:	e026      	b.n	8004a04 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4413      	add	r3, r2
 80049bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049be:	4b14      	ldr	r3, [pc, #80]	@ (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d209      	bcs.n	80049e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ce:	4b12      	ldr	r3, [pc, #72]	@ (8004a18 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe fa6f 	bl	8002ebe <vListInsert>
}
 80049e0:	e010      	b.n	8004a04 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a1c <prvAddCurrentTaskToDelayedList+0xa0>)
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <prvAddCurrentTaskToDelayedList+0x94>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7fe fa65 	bl	8002ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d202      	bcs.n	8004a04 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049fe:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	6013      	str	r3, [r2, #0]
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000d88 	.word	0x20000d88
 8004a10:	200008b0 	.word	0x200008b0
 8004a14:	20000d70 	.word	0x20000d70
 8004a18:	20000d40 	.word	0x20000d40
 8004a1c:	20000d3c 	.word	0x20000d3c
 8004a20:	20000da4 	.word	0x20000da4

08004a24 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a2e:	f000 fb13 	bl	8005058 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a32:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <xTimerCreateTimerTask+0x84>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d021      	beq.n	8004a7e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a42:	1d3a      	adds	r2, r7, #4
 8004a44:	f107 0108 	add.w	r1, r7, #8
 8004a48:	f107 030c 	add.w	r3, r7, #12
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7fe f9cb 	bl	8002de8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	9202      	str	r2, [sp, #8]
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2300      	movs	r3, #0
 8004a62:	460a      	mov	r2, r1
 8004a64:	4911      	ldr	r1, [pc, #68]	@ (8004aac <xTimerCreateTimerTask+0x88>)
 8004a66:	4812      	ldr	r0, [pc, #72]	@ (8004ab0 <xTimerCreateTimerTask+0x8c>)
 8004a68:	f7ff f802 	bl	8003a70 <xTaskCreateStatic>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4a11      	ldr	r2, [pc, #68]	@ (8004ab4 <xTimerCreateTimerTask+0x90>)
 8004a70:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a72:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <xTimerCreateTimerTask+0x90>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	613b      	str	r3, [r7, #16]
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a9c:	697b      	ldr	r3, [r7, #20]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000de0 	.word	0x20000de0
 8004aac:	080074d8 	.word	0x080074d8
 8004ab0:	08004bf1 	.word	0x08004bf1
 8004ab4:	20000de4 	.word	0x20000de4

08004ab8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	@ 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	623b      	str	r3, [r7, #32]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ae8:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <xTimerGenericCommand+0x98>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02a      	beq.n	8004b46 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	dc18      	bgt.n	8004b34 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b02:	f7ff fea5 	bl	8004850 <xTaskGetSchedulerState>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d109      	bne.n	8004b20 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b0c:	4b10      	ldr	r3, [pc, #64]	@ (8004b50 <xTimerGenericCommand+0x98>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	f107 0110 	add.w	r1, r7, #16
 8004b14:	2300      	movs	r3, #0
 8004b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b18:	f7fe fb44 	bl	80031a4 <xQueueGenericSend>
 8004b1c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b1e:	e012      	b.n	8004b46 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b20:	4b0b      	ldr	r3, [pc, #44]	@ (8004b50 <xTimerGenericCommand+0x98>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	f107 0110 	add.w	r1, r7, #16
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f7fe fb3a 	bl	80031a4 <xQueueGenericSend>
 8004b30:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b32:	e008      	b.n	8004b46 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b34:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <xTimerGenericCommand+0x98>)
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	f107 0110 	add.w	r1, r7, #16
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	f7fe fc5a 	bl	80033f8 <xQueueGenericSendFromISR>
 8004b44:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3728      	adds	r7, #40	@ 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	20000de0 	.word	0x20000de0

08004b54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af02      	add	r7, sp, #8
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5e:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <prvProcessExpiredTimer+0x98>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe f9df 	bl	8002f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d023      	beq.n	8004bc8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	699a      	ldr	r2, [r3, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	18d1      	adds	r1, r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f000 f8d5 	bl	8004d3c <prvInsertTimerInActiveList>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d020      	beq.n	8004bda <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b98:	2300      	movs	r3, #0
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	6978      	ldr	r0, [r7, #20]
 8004ba4:	f7ff ff88 	bl	8004ab8 <xTimerGenericCommand>
 8004ba8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d114      	bne.n	8004bda <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	4798      	blx	r3
}
 8004be2:	bf00      	nop
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000dd8 	.word	0x20000dd8

08004bf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bf8:	f107 0308 	add.w	r3, r7, #8
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f859 	bl	8004cb4 <prvGetNextExpireTime>
 8004c02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4619      	mov	r1, r3
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f805 	bl	8004c18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c0e:	f000 f8d7 	bl	8004dc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c12:	bf00      	nop
 8004c14:	e7f0      	b.n	8004bf8 <prvTimerTask+0x8>
	...

08004c18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c22:	f7ff f9b9 	bl	8003f98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f866 	bl	8004cfc <prvSampleTimeNow>
 8004c30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d130      	bne.n	8004c9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <prvProcessTimerOrBlockTask+0x3c>
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d806      	bhi.n	8004c54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c46:	f7ff f9b5 	bl	8003fb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c4a:	68f9      	ldr	r1, [r7, #12]
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff81 	bl	8004b54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c52:	e024      	b.n	8004c9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d008      	beq.n	8004c6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <prvProcessTimerOrBlockTask+0x90>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <prvProcessTimerOrBlockTask+0x50>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <prvProcessTimerOrBlockTask+0x52>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004cac <prvProcessTimerOrBlockTask+0x94>)
 8004c6e:	6818      	ldr	r0, [r3, #0]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	f7fe fec5 	bl	8003a08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c7e:	f7ff f999 	bl	8003fb4 <xTaskResumeAll>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c88:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <prvProcessTimerOrBlockTask+0x98>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
}
 8004c98:	e001      	b.n	8004c9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c9a:	f7ff f98b 	bl	8003fb4 <xTaskResumeAll>
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000ddc 	.word	0x20000ddc
 8004cac:	20000de0 	.word	0x20000de0
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <prvGetNextExpireTime+0x44>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <prvGetNextExpireTime+0x16>
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	e000      	b.n	8004ccc <prvGetNextExpireTime+0x18>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cd8:	4b07      	ldr	r3, [pc, #28]	@ (8004cf8 <prvGetNextExpireTime+0x44>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	e001      	b.n	8004ce8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000dd8 	.word	0x20000dd8

08004cfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d04:	f7ff f9f8 	bl	80040f8 <xTaskGetTickCount>
 8004d08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d38 <prvSampleTimeNow+0x3c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d205      	bcs.n	8004d20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d14:	f000 f93a 	bl	8004f8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	e002      	b.n	8004d26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d26:	4a04      	ldr	r2, [pc, #16]	@ (8004d38 <prvSampleTimeNow+0x3c>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000de8 	.word	0x20000de8

08004d3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d812      	bhi.n	8004d88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	1ad2      	subs	r2, r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d302      	bcc.n	8004d76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e01b      	b.n	8004dae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d76:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <prvInsertTimerInActiveList+0x7c>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7fe f89c 	bl	8002ebe <vListInsert>
 8004d86:	e012      	b.n	8004dae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d206      	bcs.n	8004d9e <prvInsertTimerInActiveList+0x62>
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d302      	bcc.n	8004d9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	e007      	b.n	8004dae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d9e:	4b07      	ldr	r3, [pc, #28]	@ (8004dbc <prvInsertTimerInActiveList+0x80>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f7fe f888 	bl	8002ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dae:	697b      	ldr	r3, [r7, #20]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000ddc 	.word	0x20000ddc
 8004dbc:	20000dd8 	.word	0x20000dd8

08004dc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08e      	sub	sp, #56	@ 0x38
 8004dc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dc6:	e0ce      	b.n	8004f66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	da19      	bge.n	8004e02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004dce:	1d3b      	adds	r3, r7, #4
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	61fb      	str	r3, [r7, #28]
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	e7fd      	b.n	8004dee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004df8:	6850      	ldr	r0, [r2, #4]
 8004dfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dfc:	6892      	ldr	r2, [r2, #8]
 8004dfe:	4611      	mov	r1, r2
 8004e00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f2c0 80ae 	blt.w	8004f66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe f888 	bl	8002f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e20:	463b      	mov	r3, r7
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff ff6a 	bl	8004cfc <prvSampleTimeNow>
 8004e28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b09      	cmp	r3, #9
 8004e2e:	f200 8097 	bhi.w	8004f60 <prvProcessReceivedCommands+0x1a0>
 8004e32:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <prvProcessReceivedCommands+0x78>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e61 	.word	0x08004e61
 8004e44:	08004ed7 	.word	0x08004ed7
 8004e48:	08004eeb 	.word	0x08004eeb
 8004e4c:	08004f37 	.word	0x08004f37
 8004e50:	08004e61 	.word	0x08004e61
 8004e54:	08004e61 	.word	0x08004e61
 8004e58:	08004ed7 	.word	0x08004ed7
 8004e5c:	08004eeb 	.word	0x08004eeb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	18d1      	adds	r1, r2, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e80:	f7ff ff5c 	bl	8004d3c <prvInsertTimerInActiveList>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d06c      	beq.n	8004f64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d061      	beq.n	8004f64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	2100      	movs	r1, #0
 8004eb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eb2:	f7ff fe01 	bl	8004ab8 <xTimerGenericCommand>
 8004eb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d152      	bne.n	8004f64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	61bb      	str	r3, [r7, #24]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ee8:	e03d      	b.n	8004f66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	617b      	str	r3, [r7, #20]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	18d1      	adds	r1, r2, r3
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f30:	f7ff ff04 	bl	8004d3c <prvInsertTimerInActiveList>
					break;
 8004f34:	e017      	b.n	8004f66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d103      	bne.n	8004f4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f46:	f000 fbe7 	bl	8005718 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f4a:	e00c      	b.n	8004f66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f5e:	e002      	b.n	8004f66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f60:	bf00      	nop
 8004f62:	e000      	b.n	8004f66 <prvProcessReceivedCommands+0x1a6>
					break;
 8004f64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f66:	4b08      	ldr	r3, [pc, #32]	@ (8004f88 <prvProcessReceivedCommands+0x1c8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	1d39      	adds	r1, r7, #4
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe faf4 	bl	800355c <xQueueReceive>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f47f af26 	bne.w	8004dc8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	3730      	adds	r7, #48	@ 0x30
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000de0 	.word	0x20000de0

08004f8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f92:	e049      	b.n	8005028 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f94:	4b2e      	ldr	r3, [pc, #184]	@ (8005050 <prvSwitchTimerLists+0xc4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8005050 <prvSwitchTimerLists+0xc4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3304      	adds	r3, #4
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fd ffbf 	bl	8002f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d02f      	beq.n	8005028 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d90e      	bls.n	8004ff8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <prvSwitchTimerLists+0xc4>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7fd ff64 	bl	8002ebe <vListInsert>
 8004ff6:	e017      	b.n	8005028 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	2100      	movs	r1, #0
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fd58 	bl	8004ab8 <xTimerGenericCommand>
 8005008:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	603b      	str	r3, [r7, #0]
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <prvSwitchTimerLists+0xc4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1b0      	bne.n	8004f94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005032:	4b07      	ldr	r3, [pc, #28]	@ (8005050 <prvSwitchTimerLists+0xc4>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005038:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <prvSwitchTimerLists+0xc8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <prvSwitchTimerLists+0xc4>)
 800503e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005040:	4a04      	ldr	r2, [pc, #16]	@ (8005054 <prvSwitchTimerLists+0xc8>)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6013      	str	r3, [r2, #0]
}
 8005046:	bf00      	nop
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000dd8 	.word	0x20000dd8
 8005054:	20000ddc 	.word	0x20000ddc

08005058 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800505e:	f000 f96b 	bl	8005338 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005062:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <prvCheckForValidListAndQueue+0x60>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d120      	bne.n	80050ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800506a:	4814      	ldr	r0, [pc, #80]	@ (80050bc <prvCheckForValidListAndQueue+0x64>)
 800506c:	f7fd fed6 	bl	8002e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005070:	4813      	ldr	r0, [pc, #76]	@ (80050c0 <prvCheckForValidListAndQueue+0x68>)
 8005072:	f7fd fed3 	bl	8002e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005076:	4b13      	ldr	r3, [pc, #76]	@ (80050c4 <prvCheckForValidListAndQueue+0x6c>)
 8005078:	4a10      	ldr	r2, [pc, #64]	@ (80050bc <prvCheckForValidListAndQueue+0x64>)
 800507a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800507c:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <prvCheckForValidListAndQueue+0x70>)
 800507e:	4a10      	ldr	r2, [pc, #64]	@ (80050c0 <prvCheckForValidListAndQueue+0x68>)
 8005080:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005082:	2300      	movs	r3, #0
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	4b11      	ldr	r3, [pc, #68]	@ (80050cc <prvCheckForValidListAndQueue+0x74>)
 8005088:	4a11      	ldr	r2, [pc, #68]	@ (80050d0 <prvCheckForValidListAndQueue+0x78>)
 800508a:	2110      	movs	r1, #16
 800508c:	200a      	movs	r0, #10
 800508e:	f7fd ffe3 	bl	8003058 <xQueueGenericCreateStatic>
 8005092:	4603      	mov	r3, r0
 8005094:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <prvCheckForValidListAndQueue+0x60>)
 8005096:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005098:	4b07      	ldr	r3, [pc, #28]	@ (80050b8 <prvCheckForValidListAndQueue+0x60>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050a0:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <prvCheckForValidListAndQueue+0x60>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	490b      	ldr	r1, [pc, #44]	@ (80050d4 <prvCheckForValidListAndQueue+0x7c>)
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fc7c 	bl	80039a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050ac:	f000 f976 	bl	800539c <vPortExitCritical>
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000de0 	.word	0x20000de0
 80050bc:	20000db0 	.word	0x20000db0
 80050c0:	20000dc4 	.word	0x20000dc4
 80050c4:	20000dd8 	.word	0x20000dd8
 80050c8:	20000ddc 	.word	0x20000ddc
 80050cc:	20000e8c 	.word	0x20000e8c
 80050d0:	20000dec 	.word	0x20000dec
 80050d4:	080074e0 	.word	0x080074e0

080050d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3b04      	subs	r3, #4
 80050e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3b04      	subs	r3, #4
 80050f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b04      	subs	r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005108:	4a0c      	ldr	r2, [pc, #48]	@ (800513c <pxPortInitialiseStack+0x64>)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3b14      	subs	r3, #20
 8005112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3b04      	subs	r3, #4
 800511e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f06f 0202 	mvn.w	r2, #2
 8005126:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3b20      	subs	r3, #32
 800512c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	08005141 	.word	0x08005141

08005140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800514a:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <prvTaskExitError+0x58>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d00b      	beq.n	800516c <prvTaskExitError+0x2c>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <prvTaskExitError+0x28>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	60bb      	str	r3, [r7, #8]
}
 800517e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005180:	bf00      	nop
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0fc      	beq.n	8005182 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000010 	.word	0x20000010
 800519c:	00000000 	.word	0x00000000

080051a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051a0:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <pxCurrentTCBConst2>)
 80051a2:	6819      	ldr	r1, [r3, #0]
 80051a4:	6808      	ldr	r0, [r1, #0]
 80051a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051aa:	f380 8809 	msr	PSP, r0
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f04f 0000 	mov.w	r0, #0
 80051b6:	f380 8811 	msr	BASEPRI, r0
 80051ba:	4770      	bx	lr
 80051bc:	f3af 8000 	nop.w

080051c0 <pxCurrentTCBConst2>:
 80051c0:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop

080051c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051c8:	4808      	ldr	r0, [pc, #32]	@ (80051ec <prvPortStartFirstTask+0x24>)
 80051ca:	6800      	ldr	r0, [r0, #0]
 80051cc:	6800      	ldr	r0, [r0, #0]
 80051ce:	f380 8808 	msr	MSP, r0
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f380 8814 	msr	CONTROL, r0
 80051da:	b662      	cpsie	i
 80051dc:	b661      	cpsie	f
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	df00      	svc	0
 80051e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051ea:	bf00      	nop
 80051ec:	e000ed08 	.word	0xe000ed08

080051f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051f6:	4b47      	ldr	r3, [pc, #284]	@ (8005314 <xPortStartScheduler+0x124>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a47      	ldr	r2, [pc, #284]	@ (8005318 <xPortStartScheduler+0x128>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10b      	bne.n	8005218 <xPortStartScheduler+0x28>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	613b      	str	r3, [r7, #16]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005218:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <xPortStartScheduler+0x124>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3f      	ldr	r2, [pc, #252]	@ (800531c <xPortStartScheduler+0x12c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10b      	bne.n	800523a <xPortStartScheduler+0x4a>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <xPortStartScheduler+0x130>)
 800523c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	22ff      	movs	r2, #255	@ 0xff
 800524a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4b31      	ldr	r3, [pc, #196]	@ (8005324 <xPortStartScheduler+0x134>)
 8005260:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005262:	4b31      	ldr	r3, [pc, #196]	@ (8005328 <xPortStartScheduler+0x138>)
 8005264:	2207      	movs	r2, #7
 8005266:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005268:	e009      	b.n	800527e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800526a:	4b2f      	ldr	r3, [pc, #188]	@ (8005328 <xPortStartScheduler+0x138>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3b01      	subs	r3, #1
 8005270:	4a2d      	ldr	r2, [pc, #180]	@ (8005328 <xPortStartScheduler+0x138>)
 8005272:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	2b80      	cmp	r3, #128	@ 0x80
 8005288:	d0ef      	beq.n	800526a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800528a:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <xPortStartScheduler+0x138>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1c3 0307 	rsb	r3, r3, #7
 8005292:	2b04      	cmp	r3, #4
 8005294:	d00b      	beq.n	80052ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	60bb      	str	r3, [r7, #8]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <xPortStartScheduler+0x138>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <xPortStartScheduler+0x138>)
 80052b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <xPortStartScheduler+0x138>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052c0:	4a19      	ldr	r2, [pc, #100]	@ (8005328 <xPortStartScheduler+0x138>)
 80052c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052cc:	4b17      	ldr	r3, [pc, #92]	@ (800532c <xPortStartScheduler+0x13c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	@ (800532c <xPortStartScheduler+0x13c>)
 80052d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052d8:	4b14      	ldr	r3, [pc, #80]	@ (800532c <xPortStartScheduler+0x13c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a13      	ldr	r2, [pc, #76]	@ (800532c <xPortStartScheduler+0x13c>)
 80052de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052e4:	f000 f8da 	bl	800549c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052e8:	4b11      	ldr	r3, [pc, #68]	@ (8005330 <xPortStartScheduler+0x140>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ee:	f000 f8f9 	bl	80054e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <xPortStartScheduler+0x144>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005334 <xPortStartScheduler+0x144>)
 80052f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052fe:	f7ff ff63 	bl	80051c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005302:	f7fe ffd9 	bl	80042b8 <vTaskSwitchContext>
	prvTaskExitError();
 8005306:	f7ff ff1b 	bl	8005140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed00 	.word	0xe000ed00
 8005318:	410fc271 	.word	0x410fc271
 800531c:	410fc270 	.word	0x410fc270
 8005320:	e000e400 	.word	0xe000e400
 8005324:	20000edc 	.word	0x20000edc
 8005328:	20000ee0 	.word	0x20000ee0
 800532c:	e000ed20 	.word	0xe000ed20
 8005330:	20000010 	.word	0x20000010
 8005334:	e000ef34 	.word	0xe000ef34

08005338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
}
 8005350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005352:	4b10      	ldr	r3, [pc, #64]	@ (8005394 <vPortEnterCritical+0x5c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a0e      	ldr	r2, [pc, #56]	@ (8005394 <vPortEnterCritical+0x5c>)
 800535a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <vPortEnterCritical+0x5c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d110      	bne.n	8005386 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005364:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <vPortEnterCritical+0x60>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00b      	beq.n	8005386 <vPortEnterCritical+0x4e>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	603b      	str	r3, [r7, #0]
}
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	e7fd      	b.n	8005382 <vPortEnterCritical+0x4a>
	}
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010
 8005398:	e000ed04 	.word	0xe000ed04

0800539c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053a2:	4b12      	ldr	r3, [pc, #72]	@ (80053ec <vPortExitCritical+0x50>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <vPortExitCritical+0x26>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	607b      	str	r3, [r7, #4]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vPortExitCritical+0x50>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <vPortExitCritical+0x50>)
 80053ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053cc:	4b07      	ldr	r3, [pc, #28]	@ (80053ec <vPortExitCritical+0x50>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <vPortExitCritical+0x44>
 80053d4:	2300      	movs	r3, #0
 80053d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	f383 8811 	msr	BASEPRI, r3
}
 80053de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	20000010 	.word	0x20000010

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f01e 0f10 	tst.w	lr, #16
 8005400:	bf08      	it	eq
 8005402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005414:	f380 8811 	msr	BASEPRI, r0
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f7fe ff4a 	bl	80042b8 <vTaskSwitchContext>
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f380 8811 	msr	BASEPRI, r0
 800542c:	bc09      	pop	{r0, r3}
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	6808      	ldr	r0, [r1, #0]
 8005432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005436:	f01e 0f10 	tst.w	lr, #16
 800543a:	bf08      	it	eq
 800543c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005440:	f380 8809 	msr	PSP, r0
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst>:
 8005450:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
}
 8005470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005472:	f7fe fe63 	bl	800413c <xTaskIncrementTick>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800547c:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <xPortSysTickHandler+0x40>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	2300      	movs	r3, #0
 8005486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f383 8811 	msr	BASEPRI, r3
}
 800548e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	e000ed04 	.word	0xe000ed04

0800549c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <vPortSetupTimerInterrupt+0x34>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <vPortSetupTimerInterrupt+0x38>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <vPortSetupTimerInterrupt+0x3c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <vPortSetupTimerInterrupt+0x40>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	099b      	lsrs	r3, r3, #6
 80054b8:	4a09      	ldr	r2, [pc, #36]	@ (80054e0 <vPortSetupTimerInterrupt+0x44>)
 80054ba:	3b01      	subs	r3, #1
 80054bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054be:	4b04      	ldr	r3, [pc, #16]	@ (80054d0 <vPortSetupTimerInterrupt+0x34>)
 80054c0:	2207      	movs	r2, #7
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e010 	.word	0xe000e010
 80054d4:	e000e018 	.word	0xe000e018
 80054d8:	20000004 	.word	0x20000004
 80054dc:	10624dd3 	.word	0x10624dd3
 80054e0:	e000e014 	.word	0xe000e014

080054e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054f4 <vPortEnableVFP+0x10>
 80054e8:	6801      	ldr	r1, [r0, #0]
 80054ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054ee:	6001      	str	r1, [r0, #0]
 80054f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054f2:	bf00      	nop
 80054f4:	e000ed88 	.word	0xe000ed88

080054f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054fe:	f3ef 8305 	mrs	r3, IPSR
 8005502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b0f      	cmp	r3, #15
 8005508:	d915      	bls.n	8005536 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <vPortValidateInterruptPriority+0x74>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005514:	4b16      	ldr	r3, [pc, #88]	@ (8005570 <vPortValidateInterruptPriority+0x78>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	7afa      	ldrb	r2, [r7, #11]
 800551a:	429a      	cmp	r2, r3
 800551c:	d20b      	bcs.n	8005536 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005536:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <vPortValidateInterruptPriority+0x7c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800553e:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <vPortValidateInterruptPriority+0x80>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d90b      	bls.n	800555e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	603b      	str	r3, [r7, #0]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <vPortValidateInterruptPriority+0x62>
	}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000e3f0 	.word	0xe000e3f0
 8005570:	20000edc 	.word	0x20000edc
 8005574:	e000ed0c 	.word	0xe000ed0c
 8005578:	20000ee0 	.word	0x20000ee0

0800557c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005588:	f7fe fd06 	bl	8003f98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800558c:	4b5c      	ldr	r3, [pc, #368]	@ (8005700 <pvPortMalloc+0x184>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005594:	f000 f924 	bl	80057e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005598:	4b5a      	ldr	r3, [pc, #360]	@ (8005704 <pvPortMalloc+0x188>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4013      	ands	r3, r2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 8095 	bne.w	80056d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01e      	beq.n	80055ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055ac:	2208      	movs	r2, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4413      	add	r3, r2
 80055b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f023 0307 	bic.w	r3, r3, #7
 80055c4:	3308      	adds	r3, #8
 80055c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <pvPortMalloc+0x6e>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	617b      	str	r3, [r7, #20]
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	e7fd      	b.n	80055e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d06f      	beq.n	80056d0 <pvPortMalloc+0x154>
 80055f0:	4b45      	ldr	r3, [pc, #276]	@ (8005708 <pvPortMalloc+0x18c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d86a      	bhi.n	80056d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055fa:	4b44      	ldr	r3, [pc, #272]	@ (800570c <pvPortMalloc+0x190>)
 80055fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055fe:	4b43      	ldr	r3, [pc, #268]	@ (800570c <pvPortMalloc+0x190>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005604:	e004      	b.n	8005610 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d903      	bls.n	8005622 <pvPortMalloc+0xa6>
 800561a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f1      	bne.n	8005606 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005622:	4b37      	ldr	r3, [pc, #220]	@ (8005700 <pvPortMalloc+0x184>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005628:	429a      	cmp	r2, r3
 800562a:	d051      	beq.n	80056d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2208      	movs	r2, #8
 8005632:	4413      	add	r3, r2
 8005634:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	1ad2      	subs	r2, r2, r3
 8005646:	2308      	movs	r3, #8
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	429a      	cmp	r2, r3
 800564c:	d920      	bls.n	8005690 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800564e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4413      	add	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <pvPortMalloc+0xfc>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	613b      	str	r3, [r7, #16]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f000 f90a 	bl	80058a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005690:	4b1d      	ldr	r3, [pc, #116]	@ (8005708 <pvPortMalloc+0x18c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	4a1b      	ldr	r2, [pc, #108]	@ (8005708 <pvPortMalloc+0x18c>)
 800569c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800569e:	4b1a      	ldr	r3, [pc, #104]	@ (8005708 <pvPortMalloc+0x18c>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005710 <pvPortMalloc+0x194>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d203      	bcs.n	80056b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <pvPortMalloc+0x18c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <pvPortMalloc+0x194>)
 80056b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b13      	ldr	r3, [pc, #76]	@ (8005704 <pvPortMalloc+0x188>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80056c6:	4b13      	ldr	r3, [pc, #76]	@ (8005714 <pvPortMalloc+0x198>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	4a11      	ldr	r2, [pc, #68]	@ (8005714 <pvPortMalloc+0x198>)
 80056ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056d0:	f7fe fc70 	bl	8003fb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <pvPortMalloc+0x17a>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	60fb      	str	r3, [r7, #12]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <pvPortMalloc+0x176>
	return pvReturn;
 80056f6:	69fb      	ldr	r3, [r7, #28]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3728      	adds	r7, #40	@ 0x28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20004aec 	.word	0x20004aec
 8005704:	20004b00 	.word	0x20004b00
 8005708:	20004af0 	.word	0x20004af0
 800570c:	20004ae4 	.word	0x20004ae4
 8005710:	20004af4 	.word	0x20004af4
 8005714:	20004af8 	.word	0x20004af8

08005718 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d04f      	beq.n	80057ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800572a:	2308      	movs	r3, #8
 800572c:	425b      	negs	r3, r3
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b25      	ldr	r3, [pc, #148]	@ (80057d4 <vPortFree+0xbc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <vPortFree+0x46>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60fb      	str	r3, [r7, #12]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <vPortFree+0x66>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	60bb      	str	r3, [r7, #8]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b14      	ldr	r3, [pc, #80]	@ (80057d4 <vPortFree+0xbc>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01e      	beq.n	80057ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d11a      	bne.n	80057ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	4b0e      	ldr	r3, [pc, #56]	@ (80057d4 <vPortFree+0xbc>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	43db      	mvns	r3, r3
 800579e:	401a      	ands	r2, r3
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057a4:	f7fe fbf8 	bl	8003f98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <vPortFree+0xc0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4413      	add	r3, r2
 80057b2:	4a09      	ldr	r2, [pc, #36]	@ (80057d8 <vPortFree+0xc0>)
 80057b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f000 f874 	bl	80058a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057bc:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <vPortFree+0xc4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a06      	ldr	r2, [pc, #24]	@ (80057dc <vPortFree+0xc4>)
 80057c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80057c6:	f7fe fbf5 	bl	8003fb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20004b00 	.word	0x20004b00
 80057d8:	20004af0 	.word	0x20004af0
 80057dc:	20004afc 	.word	0x20004afc

080057e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057ec:	4b27      	ldr	r3, [pc, #156]	@ (800588c <prvHeapInit+0xac>)
 80057ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00c      	beq.n	8005814 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3307      	adds	r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0307 	bic.w	r3, r3, #7
 8005806:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	4a1f      	ldr	r2, [pc, #124]	@ (800588c <prvHeapInit+0xac>)
 8005810:	4413      	add	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005818:	4a1d      	ldr	r2, [pc, #116]	@ (8005890 <prvHeapInit+0xb0>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800581e:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <prvHeapInit+0xb0>)
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4413      	add	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800582c:	2208      	movs	r2, #8
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a15      	ldr	r2, [pc, #84]	@ (8005894 <prvHeapInit+0xb4>)
 8005840:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005842:	4b14      	ldr	r3, [pc, #80]	@ (8005894 <prvHeapInit+0xb4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800584a:	4b12      	ldr	r3, [pc, #72]	@ (8005894 <prvHeapInit+0xb4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005860:	4b0c      	ldr	r3, [pc, #48]	@ (8005894 <prvHeapInit+0xb4>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a0a      	ldr	r2, [pc, #40]	@ (8005898 <prvHeapInit+0xb8>)
 800586e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a09      	ldr	r2, [pc, #36]	@ (800589c <prvHeapInit+0xbc>)
 8005876:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <prvHeapInit+0xc0>)
 800587a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800587e:	601a      	str	r2, [r3, #0]
}
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	20000ee4 	.word	0x20000ee4
 8005890:	20004ae4 	.word	0x20004ae4
 8005894:	20004aec 	.word	0x20004aec
 8005898:	20004af4 	.word	0x20004af4
 800589c:	20004af0 	.word	0x20004af0
 80058a0:	20004b00 	.word	0x20004b00

080058a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058ac:	4b28      	ldr	r3, [pc, #160]	@ (8005950 <prvInsertBlockIntoFreeList+0xac>)
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e002      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x14>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d8f7      	bhi.n	80058b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4413      	add	r3, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d108      	bne.n	80058e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	441a      	add	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	441a      	add	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d118      	bne.n	800592c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <prvInsertBlockIntoFreeList+0xb0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d00d      	beq.n	8005922 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	e008      	b.n	8005934 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005922:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <prvInsertBlockIntoFreeList+0xb0>)
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e003      	b.n	8005934 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	429a      	cmp	r2, r3
 800593a:	d002      	beq.n	8005942 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20004ae4 	.word	0x20004ae4
 8005954:	20004aec 	.word	0x20004aec

08005958 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800595c:	4803      	ldr	r0, [pc, #12]	@ (800596c <_cbSendSystemDesc+0x14>)
 800595e:	f001 fa11 	bl	8006d84 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005962:	4803      	ldr	r0, [pc, #12]	@ (8005970 <_cbSendSystemDesc+0x18>)
 8005964:	f001 fa0e 	bl	8006d84 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}
 800596c:	080074e8 	.word	0x080074e8
 8005970:	08007528 	.word	0x08007528

08005974 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005978:	4b06      	ldr	r3, [pc, #24]	@ (8005994 <SEGGER_SYSVIEW_Conf+0x20>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <SEGGER_SYSVIEW_Conf+0x20>)
 800597e:	6819      	ldr	r1, [r3, #0]
 8005980:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <SEGGER_SYSVIEW_Conf+0x24>)
 8005982:	4a06      	ldr	r2, [pc, #24]	@ (800599c <SEGGER_SYSVIEW_Conf+0x28>)
 8005984:	f000 fd7c 	bl	8006480 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005988:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800598c:	f000 fdbc 	bl	8006508 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005990:	bf00      	nop
 8005992:	bd80      	pop	{r7, pc}
 8005994:	20000004 	.word	0x20000004
 8005998:	08005959 	.word	0x08005959
 800599c:	08007630 	.word	0x08007630

080059a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80059a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e048      	b.n	8005a3e <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80059ac:	4929      	ldr	r1, [pc, #164]	@ (8005a54 <_cbSendTaskList+0xb4>)
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe fed5 	bl	800476c <uxTaskGetStackHighWaterMark>
 80059c2:	4601      	mov	r1, r0
 80059c4:	4823      	ldr	r0, [pc, #140]	@ (8005a54 <_cbSendTaskList+0xb4>)
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4403      	add	r3, r0
 80059d2:	3310      	adds	r3, #16
 80059d4:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80059d6:	491f      	ldr	r1, [pc, #124]	@ (8005a54 <_cbSendTaskList+0xb4>)
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	491b      	ldr	r1, [pc, #108]	@ (8005a54 <_cbSendTaskList+0xb4>)
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3304      	adds	r3, #4
 80059f6:	6819      	ldr	r1, [r3, #0]
 80059f8:	4c16      	ldr	r4, [pc, #88]	@ (8005a54 <_cbSendTaskList+0xb4>)
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4423      	add	r3, r4
 8005a06:	3308      	adds	r3, #8
 8005a08:	681c      	ldr	r4, [r3, #0]
 8005a0a:	4d12      	ldr	r5, [pc, #72]	@ (8005a54 <_cbSendTaskList+0xb4>)
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	442b      	add	r3, r5
 8005a18:	330c      	adds	r3, #12
 8005a1a:	681d      	ldr	r5, [r3, #0]
 8005a1c:	4e0d      	ldr	r6, [pc, #52]	@ (8005a54 <_cbSendTaskList+0xb4>)
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4433      	add	r3, r6
 8005a2a:	3310      	adds	r3, #16
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462b      	mov	r3, r5
 8005a32:	4622      	mov	r2, r4
 8005a34:	f000 f8be 	bl	8005bb4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	607b      	str	r3, [r7, #4]
 8005a3e:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <_cbSendTaskList+0xb8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3b1      	bcc.n	80059ac <_cbSendTaskList+0xc>
  }
}
 8005a48:	bf00      	nop
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20004b04 	.word	0x20004b04
 8005a58:	20004ba4 	.word	0x20004ba4

08005a5c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005a64:	f7fe fb58 	bl	8004118 <xTaskGetTickCountFromISR>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	4693      	mov	fp, r2
 8005a70:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	f04f 0a00 	mov.w	sl, #0
 8005a80:	f04f 0b00 	mov.w	fp, #0
 8005a84:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005a88:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005a8c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005a90:	4652      	mov	r2, sl
 8005a92:	465b      	mov	r3, fp
 8005a94:	1a14      	subs	r4, r2, r0
 8005a96:	eb63 0501 	sbc.w	r5, r3, r1
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	00ab      	lsls	r3, r5, #2
 8005aa4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005aa8:	00a2      	lsls	r2, r4, #2
 8005aaa:	4614      	mov	r4, r2
 8005aac:	461d      	mov	r5, r3
 8005aae:	eb14 0800 	adds.w	r8, r4, r0
 8005ab2:	eb45 0901 	adc.w	r9, r5, r1
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aca:	4690      	mov	r8, r2
 8005acc:	4699      	mov	r9, r3
 8005ace:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	4619      	mov	r1, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005ae4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005af2:	2205      	movs	r2, #5
 8005af4:	492b      	ldr	r1, [pc, #172]	@ (8005ba4 <SYSVIEW_AddTask+0xc0>)
 8005af6:	68b8      	ldr	r0, [r7, #8]
 8005af8:	f001 fbce 	bl	8007298 <memcmp>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d04b      	beq.n	8005b9a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005b02:	4b29      	ldr	r3, [pc, #164]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b07      	cmp	r3, #7
 8005b08:	d903      	bls.n	8005b12 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005b0a:	4828      	ldr	r0, [pc, #160]	@ (8005bac <SYSVIEW_AddTask+0xc8>)
 8005b0c:	f001 fb68 	bl	80071e0 <SEGGER_SYSVIEW_Warn>
    return;
 8005b10:	e044      	b.n	8005b9c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005b12:	4b25      	ldr	r3, [pc, #148]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	4926      	ldr	r1, [pc, #152]	@ (8005bb0 <SYSVIEW_AddTask+0xcc>)
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005b26:	4b20      	ldr	r3, [pc, #128]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4921      	ldr	r1, [pc, #132]	@ (8005bb0 <SYSVIEW_AddTask+0xcc>)
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	3304      	adds	r3, #4
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	491b      	ldr	r1, [pc, #108]	@ (8005bb0 <SYSVIEW_AddTask+0xcc>)
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005b52:	4b15      	ldr	r3, [pc, #84]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4916      	ldr	r1, [pc, #88]	@ (8005bb0 <SYSVIEW_AddTask+0xcc>)
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	330c      	adds	r3, #12
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005b68:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4910      	ldr	r1, [pc, #64]	@ (8005bb0 <SYSVIEW_AddTask+0xcc>)
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	3310      	adds	r3, #16
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	3301      	adds	r3, #1
 8005b84:	4a08      	ldr	r2, [pc, #32]	@ (8005ba8 <SYSVIEW_AddTask+0xc4>)
 8005b86:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	68b9      	ldr	r1, [r7, #8]
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f80e 	bl	8005bb4 <SYSVIEW_SendTaskInfo>
 8005b98:	e000      	b.n	8005b9c <SYSVIEW_AddTask+0xb8>
    return;
 8005b9a:	bf00      	nop

}
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	08007538 	.word	0x08007538
 8005ba8:	20004ba4 	.word	0x20004ba4
 8005bac:	08007540 	.word	0x08007540
 8005bb0:	20004b04 	.word	0x20004b04

08005bb4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	@ 0x28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005bc2:	f107 0310 	add.w	r3, r7, #16
 8005bc6:	2218      	movs	r2, #24
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f001 fb74 	bl	80072b8 <memset>
  TaskInfo.TaskID     = TaskID;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005be4:	f107 0310 	add.w	r3, r7, #16
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 ffd3 	bl	8006b94 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005bee:	bf00      	nop
 8005bf0:	3728      	adds	r7, #40	@ 0x28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005bfe:	4b26      	ldr	r3, [pc, #152]	@ (8005c98 <_DoInit+0xa0>)
 8005c00:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005c02:	22a8      	movs	r2, #168	@ 0xa8
 8005c04:	2100      	movs	r1, #0
 8005c06:	6838      	ldr	r0, [r7, #0]
 8005c08:	f001 fb56 	bl	80072b8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2203      	movs	r2, #3
 8005c10:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2203      	movs	r2, #3
 8005c16:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	4a20      	ldr	r2, [pc, #128]	@ (8005c9c <_DoInit+0xa4>)
 8005c1c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	4a1f      	ldr	r2, [pc, #124]	@ (8005ca0 <_DoInit+0xa8>)
 8005c22:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c2a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2200      	movs	r2, #0
 8005c36:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	4a16      	ldr	r2, [pc, #88]	@ (8005c9c <_DoInit+0xa4>)
 8005c42:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <_DoInit+0xac>)
 8005c48:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2200      	movs	r2, #0
 8005c54:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005c62:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	e00c      	b.n	8005c86 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1c3 030f 	rsb	r3, r3, #15
 8005c72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca8 <_DoInit+0xb0>)
 8005c74:	5cd1      	ldrb	r1, [r2, r3]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	460a      	mov	r2, r1
 8005c7e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3301      	adds	r3, #1
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b0f      	cmp	r3, #15
 8005c8a:	d9ef      	bls.n	8005c6c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005c8c:	f3bf 8f5f 	dmb	sy
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20004ba8 	.word	0x20004ba8
 8005c9c:	08007590 	.word	0x08007590
 8005ca0:	20004c50 	.word	0x20004c50
 8005ca4:	20005050 	.word	0x20005050
 8005ca8:	08007638 	.word	0x08007638

08005cac <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08c      	sub	sp, #48	@ 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005db4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005cba:	623b      	str	r3, [r7, #32]
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b53      	cmp	r3, #83	@ 0x53
 8005cc4:	d001      	beq.n	8005cca <SEGGER_RTT_ReadNoLock+0x1e>
 8005cc6:	f7ff ff97 	bl	8005bf8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	3360      	adds	r3, #96	@ 0x60
 8005cd6:	4a37      	ldr	r2, [pc, #220]	@ (8005db4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005cd8:	4413      	add	r3, r2
 8005cda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005cec:	2300      	movs	r3, #0
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d92b      	bls.n	8005d50 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	bf28      	it	cs
 8005d0a:	4613      	movcs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d14:	4413      	add	r3, r2
 8005d16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	6939      	ldr	r1, [r7, #16]
 8005d1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d1e:	f001 fb4f 	bl	80073c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4413      	add	r3, r2
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4413      	add	r3, r2
 8005d40:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d101      	bne.n	8005d50 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bf28      	it	cs
 8005d60:	4613      	movcs	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d019      	beq.n	8005d9e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	4413      	add	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	6939      	ldr	r1, [r7, #16]
 8005d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d7a:	f001 fb21 	bl	80073c0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4413      	add	r3, r2
 8005d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005da8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3730      	adds	r7, #48	@ 0x30
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20004ba8 	.word	0x20004ba8

08005db8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005dc6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ebc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b53      	cmp	r3, #83	@ 0x53
 8005dd2:	d001      	beq.n	8005dd8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005dd4:	f7ff ff10 	bl	8005bf8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ddc:	f04f 0120 	mov.w	r1, #32
 8005de0:	f381 8811 	msr	BASEPRI, r1
 8005de4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005de6:	4b35      	ldr	r3, [pc, #212]	@ (8005ebc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005de8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005dee:	6939      	ldr	r1, [r7, #16]
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3304      	adds	r3, #4
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	dbeb      	blt.n	8005dee <SEGGER_RTT_AllocUpBuffer+0x36>
 8005e16:	e000      	b.n	8005e1a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005e18:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	69fa      	ldr	r2, [r7, #28]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	da3f      	bge.n	8005ea4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005e24:	6939      	ldr	r1, [r7, #16]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4413      	add	r3, r2
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	440b      	add	r3, r1
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005e38:	6939      	ldr	r1, [r7, #16]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	440b      	add	r3, r1
 8005e48:	3304      	adds	r3, #4
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005e4e:	6939      	ldr	r1, [r7, #16]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3320      	adds	r3, #32
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005e62:	6939      	ldr	r1, [r7, #16]
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	4613      	mov	r3, r2
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	3328      	adds	r3, #40	@ 0x28
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005e76:	6939      	ldr	r1, [r7, #16]
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	3324      	adds	r3, #36	@ 0x24
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005e8a:	6939      	ldr	r1, [r7, #16]
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	4413      	add	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	440b      	add	r3, r1
 8005e98:	332c      	adds	r3, #44	@ 0x2c
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e9e:	f3bf 8f5f 	dmb	sy
 8005ea2:	e002      	b.n	8005eaa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3720      	adds	r7, #32
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20004ba8 	.word	0x20004ba8

08005ec0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	@ 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005ece:	4b21      	ldr	r3, [pc, #132]	@ (8005f54 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ed0:	623b      	str	r3, [r7, #32]
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b53      	cmp	r3, #83	@ 0x53
 8005eda:	d001      	beq.n	8005ee0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005edc:	f7ff fe8c 	bl	8005bf8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f54 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ee2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d82c      	bhi.n	8005f44 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005eea:	f3ef 8311 	mrs	r3, BASEPRI
 8005eee:	f04f 0120 	mov.w	r1, #32
 8005ef2:	f381 8811 	msr	BASEPRI, r1
 8005ef6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4613      	mov	r3, r2
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	3360      	adds	r3, #96	@ 0x60
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00e      	beq.n	8005f2e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2200      	movs	r2, #0
 8005f26:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f32:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005f34:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f42:	e002      	b.n	8005f4a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3728      	adds	r7, #40	@ 0x28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20004ba8 	.word	0x20004ba8

08005f58 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d105      	bne.n	8005f76 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1c5a      	adds	r2, r3, #1
 8005f6e:	60fa      	str	r2, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e022      	b.n	8005fbc <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	60fa      	str	r2, [r7, #12]
 8005f80:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b80      	cmp	r3, #128	@ 0x80
 8005f86:	d90a      	bls.n	8005f9e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005f88:	2380      	movs	r3, #128	@ 0x80
 8005f8a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005f8c:	e007      	b.n	8005f9e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	1c53      	adds	r3, r2, #1
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	1c59      	adds	r1, r3, #1
 8005f98:	60f9      	str	r1, [r7, #12]
 8005f9a:	7812      	ldrb	r2, [r2, #0]
 8005f9c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	1e5a      	subs	r2, r3, #1
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <_EncodeStr+0x58>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1ee      	bne.n	8005f8e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	371c      	adds	r7, #28
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3307      	adds	r3, #7
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005fea:	4b34      	ldr	r3, [pc, #208]	@ (80060bc <_HandleIncomingPacket+0xd8>)
 8005fec:	7e1b      	ldrb	r3, [r3, #24]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	1cfb      	adds	r3, r7, #3
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f7ff fe59 	bl	8005cac <SEGGER_RTT_ReadNoLock>
 8005ffa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d057      	beq.n	80060b2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	2b80      	cmp	r3, #128	@ 0x80
 8006006:	d031      	beq.n	800606c <_HandleIncomingPacket+0x88>
 8006008:	2b80      	cmp	r3, #128	@ 0x80
 800600a:	dc40      	bgt.n	800608e <_HandleIncomingPacket+0xaa>
 800600c:	2b07      	cmp	r3, #7
 800600e:	dc15      	bgt.n	800603c <_HandleIncomingPacket+0x58>
 8006010:	2b00      	cmp	r3, #0
 8006012:	dd3c      	ble.n	800608e <_HandleIncomingPacket+0xaa>
 8006014:	3b01      	subs	r3, #1
 8006016:	2b06      	cmp	r3, #6
 8006018:	d839      	bhi.n	800608e <_HandleIncomingPacket+0xaa>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <_HandleIncomingPacket+0x3c>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006043 	.word	0x08006043
 8006024:	08006049 	.word	0x08006049
 8006028:	0800604f 	.word	0x0800604f
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605b 	.word	0x0800605b
 8006034:	08006061 	.word	0x08006061
 8006038:	08006067 	.word	0x08006067
 800603c:	2b7f      	cmp	r3, #127	@ 0x7f
 800603e:	d033      	beq.n	80060a8 <_HandleIncomingPacket+0xc4>
 8006040:	e025      	b.n	800608e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006042:	f000 fc2d 	bl	80068a0 <SEGGER_SYSVIEW_Start>
      break;
 8006046:	e034      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006048:	f000 fce4 	bl	8006a14 <SEGGER_SYSVIEW_Stop>
      break;
 800604c:	e031      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800604e:	f000 febd 	bl	8006dcc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006052:	e02e      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006054:	f000 fe82 	bl	8006d5c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006058:	e02b      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800605a:	f000 fd01 	bl	8006a60 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800605e:	e028      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006060:	f001 f880 	bl	8007164 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006064:	e025      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006066:	f001 f85f 	bl	8007128 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800606a:	e022      	b.n	80060b2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800606c:	4b13      	ldr	r3, [pc, #76]	@ (80060bc <_HandleIncomingPacket+0xd8>)
 800606e:	7e1b      	ldrb	r3, [r3, #24]
 8006070:	4618      	mov	r0, r3
 8006072:	1cfb      	adds	r3, r7, #3
 8006074:	2201      	movs	r2, #1
 8006076:	4619      	mov	r1, r3
 8006078:	f7ff fe18 	bl	8005cac <SEGGER_RTT_ReadNoLock>
 800607c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d013      	beq.n	80060ac <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 ffc4 	bl	8007014 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800608c:	e00e      	b.n	80060ac <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	b25b      	sxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	da0c      	bge.n	80060b0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <_HandleIncomingPacket+0xd8>)
 8006098:	7e1b      	ldrb	r3, [r3, #24]
 800609a:	4618      	mov	r0, r3
 800609c:	1cfb      	adds	r3, r7, #3
 800609e:	2201      	movs	r2, #1
 80060a0:	4619      	mov	r1, r3
 80060a2:	f7ff fe03 	bl	8005cac <SEGGER_RTT_ReadNoLock>
      }
      break;
 80060a6:	e003      	b.n	80060b0 <_HandleIncomingPacket+0xcc>
      break;
 80060a8:	bf00      	nop
 80060aa:	e002      	b.n	80060b2 <_HandleIncomingPacket+0xce>
      break;
 80060ac:	bf00      	nop
 80060ae:	e000      	b.n	80060b2 <_HandleIncomingPacket+0xce>
      break;
 80060b0:	bf00      	nop
    }
  }
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20007068 	.word	0x20007068

080060c0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08c      	sub	sp, #48	@ 0x30
 80060c4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80060c6:	2301      	movs	r3, #1
 80060c8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	3301      	adds	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060d4:	4b31      	ldr	r3, [pc, #196]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060da:	e00b      	b.n	80060f4 <_TrySendOverflowPacket+0x34>
 80060dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80060f8:	d8f0      	bhi.n	80060dc <_TrySendOverflowPacket+0x1c>
 80060fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006108:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800610a:	4b25      	ldr	r3, [pc, #148]	@ (80061a0 <_TrySendOverflowPacket+0xe0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006110:	4b22      	ldr	r3, [pc, #136]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	623b      	str	r3, [r7, #32]
 8006122:	e00b      	b.n	800613c <_TrySendOverflowPacket+0x7c>
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	6279      	str	r1, [r7, #36]	@ 0x24
 800612e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	623b      	str	r3, [r7, #32]
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006140:	d8f0      	bhi.n	8006124 <_TrySendOverflowPacket+0x64>
 8006142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	627a      	str	r2, [r7, #36]	@ 0x24
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006152:	4b12      	ldr	r3, [pc, #72]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	4618      	mov	r0, r3
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	461a      	mov	r2, r3
 8006160:	1d3b      	adds	r3, r7, #4
 8006162:	4619      	mov	r1, r3
 8006164:	f7fa f854 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006168:	4603      	mov	r3, r0
 800616a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006172:	4a0a      	ldr	r2, [pc, #40]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006178:	4b08      	ldr	r3, [pc, #32]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	b2da      	uxtb	r2, r3
 8006180:	4b06      	ldr	r3, [pc, #24]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e004      	b.n	8006190 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006186:	4b05      	ldr	r3, [pc, #20]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	3301      	adds	r3, #1
 800618c:	4a03      	ldr	r2, [pc, #12]	@ (800619c <_TrySendOverflowPacket+0xdc>)
 800618e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006190:	693b      	ldr	r3, [r7, #16]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3730      	adds	r7, #48	@ 0x30
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20007068 	.word	0x20007068
 80061a0:	e0001004 	.word	0xe0001004

080061a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08a      	sub	sp, #40	@ 0x28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80061b0:	4b98      	ldr	r3, [pc, #608]	@ (8006414 <_SendPacket+0x270>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d010      	beq.n	80061da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80061b8:	4b96      	ldr	r3, [pc, #600]	@ (8006414 <_SendPacket+0x270>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 812d 	beq.w	800641c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80061c2:	4b94      	ldr	r3, [pc, #592]	@ (8006414 <_SendPacket+0x270>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d109      	bne.n	80061de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80061ca:	f7ff ff79 	bl	80060c0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80061ce:	4b91      	ldr	r3, [pc, #580]	@ (8006414 <_SendPacket+0x270>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	f040 8124 	bne.w	8006420 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80061d8:	e001      	b.n	80061de <_SendPacket+0x3a>
    goto Send;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <_SendPacket+0x3c>
Send:
 80061de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b1f      	cmp	r3, #31
 80061e4:	d809      	bhi.n	80061fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80061e6:	4b8b      	ldr	r3, [pc, #556]	@ (8006414 <_SendPacket+0x270>)
 80061e8:	69da      	ldr	r2, [r3, #28]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8115 	bne.w	8006424 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b17      	cmp	r3, #23
 80061fe:	d807      	bhi.n	8006210 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b01      	subs	r3, #1
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	e0c4      	b.n	800639a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b7f      	cmp	r3, #127	@ 0x7f
 800621c:	d912      	bls.n	8006244 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	09da      	lsrs	r2, r3, #7
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3b01      	subs	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	3a01      	subs	r2, #1
 8006236:	60fa      	str	r2, [r7, #12]
 8006238:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800623c:	b2da      	uxtb	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	701a      	strb	r2, [r3, #0]
 8006242:	e006      	b.n	8006252 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3b01      	subs	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b7e      	cmp	r3, #126	@ 0x7e
 8006256:	d807      	bhi.n	8006268 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b01      	subs	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	e098      	b.n	800639a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800626e:	d212      	bcs.n	8006296 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	09da      	lsrs	r2, r3, #7
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3b01      	subs	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	3a01      	subs	r2, #1
 8006288:	60fa      	str	r2, [r7, #12]
 800628a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800628e:	b2da      	uxtb	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	e081      	b.n	800639a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800629c:	d21d      	bcs.n	80062da <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0b9a      	lsrs	r2, r3, #14
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	09db      	lsrs	r3, r3, #7
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	3a01      	subs	r2, #1
 80062b8:	60fa      	str	r2, [r7, #12]
 80062ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	3a01      	subs	r2, #1
 80062cc:	60fa      	str	r2, [r7, #12]
 80062ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	e05f      	b.n	800639a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e0:	d228      	bcs.n	8006334 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0d5a      	lsrs	r2, r3, #21
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	b2d2      	uxtb	r2, r2
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0b9b      	lsrs	r3, r3, #14
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	3a01      	subs	r2, #1
 80062fc:	60fa      	str	r2, [r7, #12]
 80062fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006302:	b2da      	uxtb	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	09db      	lsrs	r3, r3, #7
 800630c:	b2db      	uxtb	r3, r3
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	3a01      	subs	r2, #1
 8006312:	60fa      	str	r2, [r7, #12]
 8006314:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	3a01      	subs	r2, #1
 8006326:	60fa      	str	r2, [r7, #12]
 8006328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e032      	b.n	800639a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	0f1a      	lsrs	r2, r3, #28
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3b01      	subs	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0d5b      	lsrs	r3, r3, #21
 8006348:	b2db      	uxtb	r3, r3
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	3a01      	subs	r2, #1
 800634e:	60fa      	str	r2, [r7, #12]
 8006350:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006354:	b2da      	uxtb	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0b9b      	lsrs	r3, r3, #14
 800635e:	b2db      	uxtb	r3, r3
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	3a01      	subs	r2, #1
 8006364:	60fa      	str	r2, [r7, #12]
 8006366:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800636a:	b2da      	uxtb	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	09db      	lsrs	r3, r3, #7
 8006374:	b2db      	uxtb	r3, r3
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	3a01      	subs	r2, #1
 800637a:	60fa      	str	r2, [r7, #12]
 800637c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006380:	b2da      	uxtb	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	3a01      	subs	r2, #1
 800638e:	60fa      	str	r2, [r7, #12]
 8006390:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800639a:	4b1f      	ldr	r3, [pc, #124]	@ (8006418 <_SendPacket+0x274>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80063a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006414 <_SendPacket+0x270>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	623b      	str	r3, [r7, #32]
 80063b2:	e00b      	b.n	80063cc <_SendPacket+0x228>
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80063be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	09db      	lsrs	r3, r3, #7
 80063ca:	623b      	str	r3, [r7, #32]
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d0:	d8f0      	bhi.n	80063b4 <_SendPacket+0x210>
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80063d8:	6a3a      	ldr	r2, [r7, #32]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <_SendPacket+0x270>)
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	4618      	mov	r0, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	f7f9 ff0d 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80063f6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80063fe:	4a05      	ldr	r2, [pc, #20]	@ (8006414 <_SendPacket+0x270>)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	60d3      	str	r3, [r2, #12]
 8006404:	e00f      	b.n	8006426 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006406:	4b03      	ldr	r3, [pc, #12]	@ (8006414 <_SendPacket+0x270>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4b01      	ldr	r3, [pc, #4]	@ (8006414 <_SendPacket+0x270>)
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e008      	b.n	8006426 <_SendPacket+0x282>
 8006414:	20007068 	.word	0x20007068
 8006418:	e0001004 	.word	0xe0001004
    goto SendDone;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <_SendPacket+0x282>
      goto SendDone;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <_SendPacket+0x282>
      goto SendDone;
 8006424:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006426:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <_SendPacket+0x2d4>)
 8006428:	7e1b      	ldrb	r3, [r3, #24]
 800642a:	4619      	mov	r1, r3
 800642c:	4a13      	ldr	r2, [pc, #76]	@ (800647c <_SendPacket+0x2d8>)
 800642e:	460b      	mov	r3, r1
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	440b      	add	r3, r1
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	336c      	adds	r3, #108	@ 0x6c
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	4b0e      	ldr	r3, [pc, #56]	@ (8006478 <_SendPacket+0x2d4>)
 800643e:	7e1b      	ldrb	r3, [r3, #24]
 8006440:	4618      	mov	r0, r3
 8006442:	490e      	ldr	r1, [pc, #56]	@ (800647c <_SendPacket+0x2d8>)
 8006444:	4603      	mov	r3, r0
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	4403      	add	r3, r0
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	440b      	add	r3, r1
 800644e:	3370      	adds	r3, #112	@ 0x70
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	429a      	cmp	r2, r3
 8006454:	d00b      	beq.n	800646e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006456:	4b08      	ldr	r3, [pc, #32]	@ (8006478 <_SendPacket+0x2d4>)
 8006458:	789b      	ldrb	r3, [r3, #2]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800645e:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <_SendPacket+0x2d4>)
 8006460:	2201      	movs	r2, #1
 8006462:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006464:	f7ff fdbe 	bl	8005fe4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006468:	4b03      	ldr	r3, [pc, #12]	@ (8006478 <_SendPacket+0x2d4>)
 800646a:	2200      	movs	r2, #0
 800646c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800646e:	bf00      	nop
 8006470:	3728      	adds	r7, #40	@ 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20007068 	.word	0x20007068
 800647c:	20004ba8 	.word	0x20004ba8

08006480 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800648e:	2300      	movs	r3, #0
 8006490:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006494:	4917      	ldr	r1, [pc, #92]	@ (80064f4 <SEGGER_SYSVIEW_Init+0x74>)
 8006496:	4818      	ldr	r0, [pc, #96]	@ (80064f8 <SEGGER_SYSVIEW_Init+0x78>)
 8006498:	f7ff fc8e 	bl	8005db8 <SEGGER_RTT_AllocUpBuffer>
 800649c:	4603      	mov	r3, r0
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064a2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80064a4:	4b15      	ldr	r3, [pc, #84]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064a6:	785a      	ldrb	r2, [r3, #1]
 80064a8:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064aa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80064ac:	4b13      	ldr	r3, [pc, #76]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064ae:	7e1b      	ldrb	r3, [r3, #24]
 80064b0:	4618      	mov	r0, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2308      	movs	r3, #8
 80064b8:	4a11      	ldr	r2, [pc, #68]	@ (8006500 <SEGGER_SYSVIEW_Init+0x80>)
 80064ba:	490f      	ldr	r1, [pc, #60]	@ (80064f8 <SEGGER_SYSVIEW_Init+0x78>)
 80064bc:	f7ff fd00 	bl	8005ec0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80064c0:	4b0e      	ldr	r3, [pc, #56]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80064c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <SEGGER_SYSVIEW_Init+0x84>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064cc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80064ce:	4a0b      	ldr	r2, [pc, #44]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80064d4:	4a09      	ldr	r2, [pc, #36]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80064da:	4a08      	ldr	r2, [pc, #32]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80064e0:	4a06      	ldr	r2, [pc, #24]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80064e6:	4b05      	ldr	r3, [pc, #20]	@ (80064fc <SEGGER_SYSVIEW_Init+0x7c>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80064ec:	bf00      	nop
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20005060 	.word	0x20005060
 80064f8:	080075a4 	.word	0x080075a4
 80064fc:	20007068 	.word	0x20007068
 8006500:	20007060 	.word	0x20007060
 8006504:	e0001004 	.word	0xe0001004

08006508 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006510:	4a04      	ldr	r2, [pc, #16]	@ (8006524 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6113      	str	r3, [r2, #16]
}
 8006516:	bf00      	nop
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20007068 	.word	0x20007068

08006528 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006530:	f3ef 8311 	mrs	r3, BASEPRI
 8006534:	f04f 0120 	mov.w	r1, #32
 8006538:	f381 8811 	msr	BASEPRI, r1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4808      	ldr	r0, [pc, #32]	@ (8006560 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006540:	f7ff fd43 	bl	8005fca <_PreparePacket>
 8006544:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68b8      	ldr	r0, [r7, #8]
 800654c:	f7ff fe2a 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f383 8811 	msr	BASEPRI, r3
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20007098 	.word	0x20007098

08006564 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800656e:	f3ef 8311 	mrs	r3, BASEPRI
 8006572:	f04f 0120 	mov.w	r1, #32
 8006576:	f381 8811 	msr	BASEPRI, r1
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	4816      	ldr	r0, [pc, #88]	@ (80065d8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800657e:	f7ff fd24 	bl	8005fca <_PreparePacket>
 8006582:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	e00b      	b.n	80065aa <SEGGER_SYSVIEW_RecordU32+0x46>
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	1c59      	adds	r1, r3, #1
 800659a:	61f9      	str	r1, [r7, #28]
 800659c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	09db      	lsrs	r3, r3, #7
 80065a8:	61bb      	str	r3, [r7, #24]
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ae:	d8f0      	bhi.n	8006592 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	61fa      	str	r2, [r7, #28]
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	b2d2      	uxtb	r2, r2
 80065ba:	701a      	strb	r2, [r3, #0]
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	6938      	ldr	r0, [r7, #16]
 80065c6:	f7ff fded 	bl	80061a4 <_SendPacket>
  RECORD_END();
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f383 8811 	msr	BASEPRI, r3
}
 80065d0:	bf00      	nop
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20007098 	.word	0x20007098

080065dc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08c      	sub	sp, #48	@ 0x30
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80065e8:	f3ef 8311 	mrs	r3, BASEPRI
 80065ec:	f04f 0120 	mov.w	r1, #32
 80065f0:	f381 8811 	msr	BASEPRI, r1
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	4825      	ldr	r0, [pc, #148]	@ (800668c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80065f8:	f7ff fce7 	bl	8005fca <_PreparePacket>
 80065fc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800660a:	e00b      	b.n	8006624 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	b2da      	uxtb	r2, r3
 8006610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006616:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006620:	09db      	lsrs	r3, r3, #7
 8006622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	2b7f      	cmp	r3, #127	@ 0x7f
 8006628:	d8f0      	bhi.n	800660c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	627b      	str	r3, [r7, #36]	@ 0x24
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	e00b      	b.n	800665c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	1c59      	adds	r1, r3, #1
 800664c:	6279      	str	r1, [r7, #36]	@ 0x24
 800664e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	09db      	lsrs	r3, r3, #7
 800665a:	623b      	str	r3, [r7, #32]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006660:	d8f0      	bhi.n	8006644 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	627a      	str	r2, [r7, #36]	@ 0x24
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006672:	68fa      	ldr	r2, [r7, #12]
 8006674:	6979      	ldr	r1, [r7, #20]
 8006676:	69b8      	ldr	r0, [r7, #24]
 8006678:	f7ff fd94 	bl	80061a4 <_SendPacket>
  RECORD_END();
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f383 8811 	msr	BASEPRI, r3
}
 8006682:	bf00      	nop
 8006684:	3730      	adds	r7, #48	@ 0x30
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20007098 	.word	0x20007098

08006690 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b08e      	sub	sp, #56	@ 0x38
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800669e:	f3ef 8311 	mrs	r3, BASEPRI
 80066a2:	f04f 0120 	mov.w	r1, #32
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	4832      	ldr	r0, [pc, #200]	@ (8006778 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80066ae:	f7ff fc8c 	bl	8005fca <_PreparePacket>
 80066b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c0:	e00b      	b.n	80066da <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c8:	1c59      	adds	r1, r3, #1
 80066ca:	6379      	str	r1, [r7, #52]	@ 0x34
 80066cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	09db      	lsrs	r3, r3, #7
 80066d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066de:	d8f0      	bhi.n	80066c2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80066e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80066e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066f8:	e00b      	b.n	8006712 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006700:	1c59      	adds	r1, r3, #1
 8006702:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006704:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	09db      	lsrs	r3, r3, #7
 8006710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006714:	2b7f      	cmp	r3, #127	@ 0x7f
 8006716:	d8f0      	bhi.n	80066fa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800671e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	623b      	str	r3, [r7, #32]
 8006730:	e00b      	b.n	800674a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006738:	1c59      	adds	r1, r3, #1
 800673a:	6279      	str	r1, [r7, #36]	@ 0x24
 800673c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	09db      	lsrs	r3, r3, #7
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b7f      	cmp	r3, #127	@ 0x7f
 800674e:	d8f0      	bhi.n	8006732 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	627a      	str	r2, [r7, #36]	@ 0x24
 8006756:	6a3a      	ldr	r2, [r7, #32]
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
 800675c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	6979      	ldr	r1, [r7, #20]
 8006764:	69b8      	ldr	r0, [r7, #24]
 8006766:	f7ff fd1d 	bl	80061a4 <_SendPacket>
  RECORD_END();
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	f383 8811 	msr	BASEPRI, r3
}
 8006770:	bf00      	nop
 8006772:	3738      	adds	r7, #56	@ 0x38
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20007098 	.word	0x20007098

0800677c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800677c:	b580      	push	{r7, lr}
 800677e:	b090      	sub	sp, #64	@ 0x40
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800678a:	f3ef 8311 	mrs	r3, BASEPRI
 800678e:	f04f 0120 	mov.w	r1, #32
 8006792:	f381 8811 	msr	BASEPRI, r1
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	4840      	ldr	r0, [pc, #256]	@ (800689c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800679a:	f7ff fc16 	bl	8005fca <_PreparePacket>
 800679e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067ac:	e00b      	b.n	80067c6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80067ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b4:	1c59      	adds	r1, r3, #1
 80067b6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80067b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]
 80067c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c2:	09db      	lsrs	r3, r3, #7
 80067c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ca:	d8f0      	bhi.n	80067ae <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80067cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e4:	e00b      	b.n	80067fe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ec:	1c59      	adds	r1, r3, #1
 80067ee:	6379      	str	r1, [r7, #52]	@ 0x34
 80067f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	09db      	lsrs	r3, r3, #7
 80067fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	2b7f      	cmp	r3, #127	@ 0x7f
 8006802:	d8f0      	bhi.n	80067e6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	637a      	str	r2, [r7, #52]	@ 0x34
 800680a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006812:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800681c:	e00b      	b.n	8006836 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006824:	1c59      	adds	r1, r3, #1
 8006826:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006828:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]
 8006830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006832:	09db      	lsrs	r3, r3, #7
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	2b7f      	cmp	r3, #127	@ 0x7f
 800683a:	d8f0      	bhi.n	800681e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	701a      	strb	r2, [r3, #0]
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006852:	623b      	str	r3, [r7, #32]
 8006854:	e00b      	b.n	800686e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006856:	6a3b      	ldr	r3, [r7, #32]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	1c59      	adds	r1, r3, #1
 800685e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006860:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	2b7f      	cmp	r3, #127	@ 0x7f
 8006872:	d8f0      	bhi.n	8006856 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	1c5a      	adds	r2, r3, #1
 8006878:	627a      	str	r2, [r7, #36]	@ 0x24
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	6979      	ldr	r1, [r7, #20]
 8006888:	69b8      	ldr	r0, [r7, #24]
 800688a:	f7ff fc8b 	bl	80061a4 <_SendPacket>
  RECORD_END();
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f383 8811 	msr	BASEPRI, r3
}
 8006894:	bf00      	nop
 8006896:	3740      	adds	r7, #64	@ 0x40
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	20007098 	.word	0x20007098

080068a0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	@ 0x30
 80068a4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80068a6:	4b58      	ldr	r3, [pc, #352]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80068ac:	f3ef 8311 	mrs	r3, BASEPRI
 80068b0:	f04f 0120 	mov.w	r1, #32
 80068b4:	f381 8811 	msr	BASEPRI, r1
 80068b8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80068ba:	4b53      	ldr	r3, [pc, #332]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 80068bc:	785b      	ldrb	r3, [r3, #1]
 80068be:	220a      	movs	r2, #10
 80068c0:	4952      	ldr	r1, [pc, #328]	@ (8006a0c <SEGGER_SYSVIEW_Start+0x16c>)
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7f9 fca4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80068ce:	200a      	movs	r0, #10
 80068d0:	f7ff fe2a 	bl	8006528 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068d4:	f3ef 8311 	mrs	r3, BASEPRI
 80068d8:	f04f 0120 	mov.w	r1, #32
 80068dc:	f381 8811 	msr	BASEPRI, r1
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	484b      	ldr	r0, [pc, #300]	@ (8006a10 <SEGGER_SYSVIEW_Start+0x170>)
 80068e4:	f7ff fb71 	bl	8005fca <_PreparePacket>
 80068e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f2:	4b45      	ldr	r3, [pc, #276]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f8:	e00b      	b.n	8006912 <SEGGER_SYSVIEW_Start+0x72>
 80068fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006904:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	09db      	lsrs	r3, r3, #7
 8006910:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006914:	2b7f      	cmp	r3, #127	@ 0x7f
 8006916:	d8f0      	bhi.n	80068fa <SEGGER_SYSVIEW_Start+0x5a>
 8006918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800691e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006926:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	627b      	str	r3, [r7, #36]	@ 0x24
 800692c:	4b36      	ldr	r3, [pc, #216]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	623b      	str	r3, [r7, #32]
 8006932:	e00b      	b.n	800694c <SEGGER_SYSVIEW_Start+0xac>
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	6279      	str	r1, [r7, #36]	@ 0x24
 800693e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	09db      	lsrs	r3, r3, #7
 800694a:	623b      	str	r3, [r7, #32]
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006950:	d8f0      	bhi.n	8006934 <SEGGER_SYSVIEW_Start+0x94>
 8006952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	627a      	str	r2, [r7, #36]	@ 0x24
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006960:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	4b28      	ldr	r3, [pc, #160]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	e00b      	b.n	8006986 <SEGGER_SYSVIEW_Start+0xe6>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	b2da      	uxtb	r2, r3
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	1c59      	adds	r1, r3, #1
 8006976:	61f9      	str	r1, [r7, #28]
 8006978:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	09db      	lsrs	r3, r3, #7
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b7f      	cmp	r3, #127	@ 0x7f
 800698a:	d8f0      	bhi.n	800696e <SEGGER_SYSVIEW_Start+0xce>
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	61fa      	str	r2, [r7, #28]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	2300      	movs	r3, #0
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	e00b      	b.n	80069be <SEGGER_SYSVIEW_Start+0x11e>
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	6179      	str	r1, [r7, #20]
 80069b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	09db      	lsrs	r3, r3, #7
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80069c2:	d8f0      	bhi.n	80069a6 <SEGGER_SYSVIEW_Start+0x106>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	617a      	str	r2, [r7, #20]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80069d4:	2218      	movs	r2, #24
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7ff fbe3 	bl	80061a4 <_SendPacket>
      RECORD_END();
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <SEGGER_SYSVIEW_Start+0x168>)
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80069f2:	f000 f9eb 	bl	8006dcc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80069f6:	f000 f9b1 	bl	8006d5c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80069fa:	f000 fbb3 	bl	8007164 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80069fe:	bf00      	nop
 8006a00:	3730      	adds	r7, #48	@ 0x30
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	20007068 	.word	0x20007068
 8006a0c:	0800764c 	.word	0x0800764c
 8006a10:	20007098 	.word	0x20007098

08006a14 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1e:	f04f 0120 	mov.w	r1, #32
 8006a22:	f381 8811 	msr	BASEPRI, r1
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	480b      	ldr	r0, [pc, #44]	@ (8006a58 <SEGGER_SYSVIEW_Stop+0x44>)
 8006a2a:	f7ff face 	bl	8005fca <_PreparePacket>
 8006a2e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006a30:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <SEGGER_SYSVIEW_Stop+0x48>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006a38:	220b      	movs	r2, #11
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6838      	ldr	r0, [r7, #0]
 8006a3e:	f7ff fbb1 	bl	80061a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006a42:	4b06      	ldr	r3, [pc, #24]	@ (8006a5c <SEGGER_SYSVIEW_Stop+0x48>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f383 8811 	msr	BASEPRI, r3
}
 8006a4e:	bf00      	nop
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20007098 	.word	0x20007098
 8006a5c:	20007068 	.word	0x20007068

08006a60 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08c      	sub	sp, #48	@ 0x30
 8006a64:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a66:	f3ef 8311 	mrs	r3, BASEPRI
 8006a6a:	f04f 0120 	mov.w	r1, #32
 8006a6e:	f381 8811 	msr	BASEPRI, r1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	4845      	ldr	r0, [pc, #276]	@ (8006b8c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006a76:	f7ff faa8 	bl	8005fca <_PreparePacket>
 8006a7a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a84:	4b42      	ldr	r3, [pc, #264]	@ (8006b90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a8a:	e00b      	b.n	8006aa4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a92:	1c59      	adds	r1, r3, #1
 8006a94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	09db      	lsrs	r3, r3, #7
 8006aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa8:	d8f0      	bhi.n	8006a8c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006abe:	4b34      	ldr	r3, [pc, #208]	@ (8006b90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	e00b      	b.n	8006ade <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	1c59      	adds	r1, r3, #1
 8006ace:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ad0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6a3b      	ldr	r3, [r7, #32]
 8006ada:	09db      	lsrs	r3, r3, #7
 8006adc:	623b      	str	r3, [r7, #32]
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ae2:	d8f0      	bhi.n	8006ac6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006aea:	6a3a      	ldr	r2, [r7, #32]
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	701a      	strb	r2, [r3, #0]
 8006af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	4b25      	ldr	r3, [pc, #148]	@ (8006b90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e00b      	b.n	8006b18 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	61f9      	str	r1, [r7, #28]
 8006b0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	09db      	lsrs	r3, r3, #7
 8006b16:	61bb      	str	r3, [r7, #24]
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b1c:	d8f0      	bhi.n	8006b00 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	61fa      	str	r2, [r7, #28]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	e00b      	b.n	8006b50 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	6179      	str	r1, [r7, #20]
 8006b42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	09db      	lsrs	r3, r3, #7
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b54:	d8f0      	bhi.n	8006b38 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	617a      	str	r2, [r7, #20]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	b2d2      	uxtb	r2, r2
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b66:	2218      	movs	r2, #24
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	68b8      	ldr	r0, [r7, #8]
 8006b6c:	f7ff fb1a 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b76:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006b7e:	4b04      	ldr	r3, [pc, #16]	@ (8006b90 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	4798      	blx	r3
  }
}
 8006b84:	bf00      	nop
 8006b86:	3730      	adds	r7, #48	@ 0x30
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20007098 	.word	0x20007098
 8006b90:	20007068 	.word	0x20007068

08006b94 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b092      	sub	sp, #72	@ 0x48
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba0:	f04f 0120 	mov.w	r1, #32
 8006ba4:	f381 8811 	msr	BASEPRI, r1
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	486a      	ldr	r0, [pc, #424]	@ (8006d54 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006bac:	f7ff fa0d 	bl	8005fca <_PreparePacket>
 8006bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b66      	ldr	r3, [pc, #408]	@ (8006d58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc6:	e00b      	b.n	8006be0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bce:	1c59      	adds	r1, r3, #1
 8006bd0:	6479      	str	r1, [r7, #68]	@ 0x44
 8006bd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bdc:	09db      	lsrs	r3, r3, #7
 8006bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8006be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006be2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006be4:	d8f0      	bhi.n	8006bc8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c00:	e00b      	b.n	8006c1a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c08:	1c59      	adds	r1, r3, #1
 8006c0a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006c0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c16:	09db      	lsrs	r3, r3, #7
 8006c18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1e:	d8f0      	bhi.n	8006c02 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	4619      	mov	r1, r3
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff f98d 	bl	8005f58 <_EncodeStr>
 8006c3e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006c40:	2209      	movs	r2, #9
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	6938      	ldr	r0, [r7, #16]
 8006c46:	f7ff faad 	bl	80061a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b40      	ldr	r3, [pc, #256]	@ (8006d58 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c5e:	e00b      	b.n	8006c78 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c66:	1c59      	adds	r1, r3, #1
 8006c68:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	09db      	lsrs	r3, r3, #7
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c7c:	d8f0      	bhi.n	8006c60 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c98:	e00b      	b.n	8006cb2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca0:	1c59      	adds	r1, r3, #1
 8006ca2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ca4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	09db      	lsrs	r3, r3, #7
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cb6:	d8f0      	bhi.n	8006c9a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	e00b      	b.n	8006cec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006cd4:	6a3b      	ldr	r3, [r7, #32]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	1c59      	adds	r1, r3, #1
 8006cdc:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	09db      	lsrs	r3, r3, #7
 8006cea:	623b      	str	r3, [r7, #32]
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf0:	d8f0      	bhi.n	8006cd4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cf8:	6a3a      	ldr	r2, [r7, #32]
 8006cfa:	b2d2      	uxtb	r2, r2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	e00b      	b.n	8006d26 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	61f9      	str	r1, [r7, #28]
 8006d18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d1c:	b2d2      	uxtb	r2, r2
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	09db      	lsrs	r3, r3, #7
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d2a:	d8f0      	bhi.n	8006d0e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	61fa      	str	r2, [r7, #28]
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	b2d2      	uxtb	r2, r2
 8006d36:	701a      	strb	r2, [r3, #0]
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006d3c:	2215      	movs	r2, #21
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6938      	ldr	r0, [r7, #16]
 8006d42:	f7ff fa2f 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f383 8811 	msr	BASEPRI, r3
}
 8006d4c:	bf00      	nop
 8006d4e:	3748      	adds	r7, #72	@ 0x48
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20007098 	.word	0x20007098
 8006d58:	20007068 	.word	0x20007068

08006d5c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d60:	4b07      	ldr	r3, [pc, #28]	@ (8006d80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006d68:	4b05      	ldr	r3, [pc, #20]	@ (8006d80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006d72:	4b03      	ldr	r3, [pc, #12]	@ (8006d80 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4798      	blx	r3
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20007068 	.word	0x20007068

08006d84 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d90:	f04f 0120 	mov.w	r1, #32
 8006d94:	f381 8811 	msr	BASEPRI, r1
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	480b      	ldr	r0, [pc, #44]	@ (8006dc8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006d9c:	f7ff f915 	bl	8005fca <_PreparePacket>
 8006da0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006da2:	2280      	movs	r2, #128	@ 0x80
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	6938      	ldr	r0, [r7, #16]
 8006da8:	f7ff f8d6 	bl	8005f58 <_EncodeStr>
 8006dac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006dae:	220e      	movs	r2, #14
 8006db0:	68f9      	ldr	r1, [r7, #12]
 8006db2:	6938      	ldr	r0, [r7, #16]
 8006db4:	f7ff f9f6 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f383 8811 	msr	BASEPRI, r3
}
 8006dbe:	bf00      	nop
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20007098 	.word	0x20007098

08006dcc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006dcc:	b590      	push	{r4, r7, lr}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006dd2:	4b15      	ldr	r3, [pc, #84]	@ (8006e28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d01a      	beq.n	8006e10 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006dda:	4b13      	ldr	r3, [pc, #76]	@ (8006e28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d015      	beq.n	8006e10 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006de4:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4798      	blx	r3
 8006dec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006df0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	000a      	movs	r2, r1
 8006e00:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006e02:	4613      	mov	r3, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	4621      	mov	r1, r4
 8006e08:	200d      	movs	r0, #13
 8006e0a:	f7ff fbe7 	bl	80065dc <SEGGER_SYSVIEW_RecordU32x2>
 8006e0e:	e006      	b.n	8006e1e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4619      	mov	r1, r3
 8006e16:	200c      	movs	r0, #12
 8006e18:	f7ff fba4 	bl	8006564 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd90      	pop	{r4, r7, pc}
 8006e26:	bf00      	nop
 8006e28:	20007068 	.word	0x20007068
 8006e2c:	e0001004 	.word	0xe0001004

08006e30 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e36:	f3ef 8311 	mrs	r3, BASEPRI
 8006e3a:	f04f 0120 	mov.w	r1, #32
 8006e3e:	f381 8811 	msr	BASEPRI, r1
 8006e42:	607b      	str	r3, [r7, #4]
 8006e44:	4807      	ldr	r0, [pc, #28]	@ (8006e64 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006e46:	f7ff f8c0 	bl	8005fca <_PreparePacket>
 8006e4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006e4c:	2211      	movs	r2, #17
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6838      	ldr	r0, [r7, #0]
 8006e52:	f7ff f9a7 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f383 8811 	msr	BASEPRI, r3
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20007098 	.word	0x20007098

08006e68 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e70:	f3ef 8311 	mrs	r3, BASEPRI
 8006e74:	f04f 0120 	mov.w	r1, #32
 8006e78:	f381 8811 	msr	BASEPRI, r1
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	4819      	ldr	r0, [pc, #100]	@ (8006ee4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006e80:	f7ff f8a3 	bl	8005fca <_PreparePacket>
 8006e84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e8a:	4b17      	ldr	r3, [pc, #92]	@ (8006ee8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	e00b      	b.n	8006eb6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	61f9      	str	r1, [r7, #28]
 8006ea8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eac:	b2d2      	uxtb	r2, r2
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	09db      	lsrs	r3, r3, #7
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eba:	d8f0      	bhi.n	8006e9e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	61fa      	str	r2, [r7, #28]
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ecc:	2208      	movs	r2, #8
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	6938      	ldr	r0, [r7, #16]
 8006ed2:	f7ff f967 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f383 8811 	msr	BASEPRI, r3
}
 8006edc:	bf00      	nop
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20007098 	.word	0x20007098
 8006ee8:	20007068 	.word	0x20007068

08006eec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ef4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef8:	f04f 0120 	mov.w	r1, #32
 8006efc:	f381 8811 	msr	BASEPRI, r1
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	4819      	ldr	r0, [pc, #100]	@ (8006f68 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f04:	f7ff f861 	bl	8005fca <_PreparePacket>
 8006f08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f0e:	4b17      	ldr	r3, [pc, #92]	@ (8006f6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	e00b      	b.n	8006f3a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	1c59      	adds	r1, r3, #1
 8006f2a:	61f9      	str	r1, [r7, #28]
 8006f2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	09db      	lsrs	r3, r3, #7
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f3e:	d8f0      	bhi.n	8006f22 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	61fa      	str	r2, [r7, #28]
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	b2d2      	uxtb	r2, r2
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006f50:	2204      	movs	r2, #4
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6938      	ldr	r0, [r7, #16]
 8006f56:	f7ff f925 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f383 8811 	msr	BASEPRI, r3
}
 8006f60:	bf00      	nop
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20007098 	.word	0x20007098
 8006f6c:	20007068 	.word	0x20007068

08006f70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f78:	f3ef 8311 	mrs	r3, BASEPRI
 8006f7c:	f04f 0120 	mov.w	r1, #32
 8006f80:	f381 8811 	msr	BASEPRI, r1
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	4819      	ldr	r0, [pc, #100]	@ (8006fec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f88:	f7ff f81f 	bl	8005fca <_PreparePacket>
 8006f8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f92:	4b17      	ldr	r3, [pc, #92]	@ (8006ff0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	e00b      	b.n	8006fbe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	1c59      	adds	r1, r3, #1
 8006fae:	61f9      	str	r1, [r7, #28]
 8006fb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	09db      	lsrs	r3, r3, #7
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fc2:	d8f0      	bhi.n	8006fa6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	61fa      	str	r2, [r7, #28]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006fd4:	2206      	movs	r2, #6
 8006fd6:	68f9      	ldr	r1, [r7, #12]
 8006fd8:	6938      	ldr	r0, [r7, #16]
 8006fda:	f7ff f8e3 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f383 8811 	msr	BASEPRI, r3
}
 8006fe4:	bf00      	nop
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20007098 	.word	0x20007098
 8006ff0:	20007068 	.word	0x20007068

08006ff4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006ffc:	4b04      	ldr	r3, [pc, #16]	@ (8007010 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	1ad3      	subs	r3, r2, r3
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20007068 	.word	0x20007068

08007014 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b08c      	sub	sp, #48	@ 0x30
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800701e:	4b40      	ldr	r3, [pc, #256]	@ (8007120 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d077      	beq.n	8007116 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007026:	4b3e      	ldr	r3, [pc, #248]	@ (8007120 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800702c:	2300      	movs	r3, #0
 800702e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007030:	e008      	b.n	8007044 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	3301      	adds	r3, #1
 8007042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007048:	429a      	cmp	r2, r3
 800704a:	d3f2      	bcc.n	8007032 <SEGGER_SYSVIEW_SendModule+0x1e>
 800704c:	e000      	b.n	8007050 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800704e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d055      	beq.n	8007102 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007056:	f3ef 8311 	mrs	r3, BASEPRI
 800705a:	f04f 0120 	mov.w	r1, #32
 800705e:	f381 8811 	msr	BASEPRI, r1
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	482f      	ldr	r0, [pc, #188]	@ (8007124 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007066:	f7fe ffb0 	bl	8005fca <_PreparePacket>
 800706a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	623b      	str	r3, [r7, #32]
 8007078:	e00b      	b.n	8007092 <SEGGER_SYSVIEW_SendModule+0x7e>
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	b2da      	uxtb	r2, r3
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	1c59      	adds	r1, r3, #1
 8007082:	6279      	str	r1, [r7, #36]	@ 0x24
 8007084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	09db      	lsrs	r3, r3, #7
 8007090:	623b      	str	r3, [r7, #32]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	2b7f      	cmp	r3, #127	@ 0x7f
 8007096:	d8f0      	bhi.n	800707a <SEGGER_SYSVIEW_SendModule+0x66>
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	627a      	str	r2, [r7, #36]	@ 0x24
 800709e:	6a3a      	ldr	r2, [r7, #32]
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	61bb      	str	r3, [r7, #24]
 80070b2:	e00b      	b.n	80070cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	1c59      	adds	r1, r3, #1
 80070bc:	61f9      	str	r1, [r7, #28]
 80070be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	09db      	lsrs	r3, r3, #7
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80070d0:	d8f0      	bhi.n	80070b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	61fa      	str	r2, [r7, #28]
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2280      	movs	r2, #128	@ 0x80
 80070e8:	4619      	mov	r1, r3
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f7fe ff34 	bl	8005f58 <_EncodeStr>
 80070f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070f2:	2216      	movs	r2, #22
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f7ff f854 	bl	80061a4 <_SendPacket>
      RECORD_END();
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <SEGGER_SYSVIEW_SendModule+0x102>
 8007108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	4798      	blx	r3
    }
  }
}
 8007116:	bf00      	nop
 8007118:	3730      	adds	r7, #48	@ 0x30
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	20007090 	.word	0x20007090
 8007124:	20007098 	.word	0x20007098

08007128 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800712e:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00f      	beq.n	8007156 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007136:	4b0a      	ldr	r3, [pc, #40]	@ (8007160 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f2      	bne.n	800713c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20007090 	.word	0x20007090

08007164 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800716a:	f3ef 8311 	mrs	r3, BASEPRI
 800716e:	f04f 0120 	mov.w	r1, #32
 8007172:	f381 8811 	msr	BASEPRI, r1
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	4817      	ldr	r0, [pc, #92]	@ (80071d8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800717a:	f7fe ff26 	bl	8005fca <_PreparePacket>
 800717e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	4b14      	ldr	r3, [pc, #80]	@ (80071dc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	e00b      	b.n	80071a8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	b2da      	uxtb	r2, r3
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1c59      	adds	r1, r3, #1
 8007198:	6179      	str	r1, [r7, #20]
 800719a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	09db      	lsrs	r3, r3, #7
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ac:	d8f0      	bhi.n	8007190 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	1c5a      	adds	r2, r3, #1
 80071b2:	617a      	str	r2, [r7, #20]
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	b2d2      	uxtb	r2, r2
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80071be:	221b      	movs	r2, #27
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	68b8      	ldr	r0, [r7, #8]
 80071c4:	f7fe ffee 	bl	80061a4 <_SendPacket>
  RECORD_END();
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f383 8811 	msr	BASEPRI, r3
}
 80071ce:	bf00      	nop
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20007098 	.word	0x20007098
 80071dc:	20007094 	.word	0x20007094

080071e0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	@ 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071e8:	f3ef 8311 	mrs	r3, BASEPRI
 80071ec:	f04f 0120 	mov.w	r1, #32
 80071f0:	f381 8811 	msr	BASEPRI, r1
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	4827      	ldr	r0, [pc, #156]	@ (8007294 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071f8:	f7fe fee7 	bl	8005fca <_PreparePacket>
 80071fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071fe:	2280      	movs	r2, #128	@ 0x80
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	6938      	ldr	r0, [r7, #16]
 8007204:	f7fe fea8 	bl	8005f58 <_EncodeStr>
 8007208:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
 800720e:	2301      	movs	r3, #1
 8007210:	623b      	str	r3, [r7, #32]
 8007212:	e00b      	b.n	800722c <SEGGER_SYSVIEW_Warn+0x4c>
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	1c59      	adds	r1, r3, #1
 800721c:	6279      	str	r1, [r7, #36]	@ 0x24
 800721e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	09db      	lsrs	r3, r3, #7
 800722a:	623b      	str	r3, [r7, #32]
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007230:	d8f0      	bhi.n	8007214 <SEGGER_SYSVIEW_Warn+0x34>
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	627a      	str	r2, [r7, #36]	@ 0x24
 8007238:	6a3a      	ldr	r2, [r7, #32]
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	61fb      	str	r3, [r7, #28]
 8007246:	2300      	movs	r3, #0
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	e00b      	b.n	8007264 <SEGGER_SYSVIEW_Warn+0x84>
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	b2da      	uxtb	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	1c59      	adds	r1, r3, #1
 8007254:	61f9      	str	r1, [r7, #28]
 8007256:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800725a:	b2d2      	uxtb	r2, r2
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	09db      	lsrs	r3, r3, #7
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b7f      	cmp	r3, #127	@ 0x7f
 8007268:	d8f0      	bhi.n	800724c <SEGGER_SYSVIEW_Warn+0x6c>
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	61fa      	str	r2, [r7, #28]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800727a:	221a      	movs	r2, #26
 800727c:	68f9      	ldr	r1, [r7, #12]
 800727e:	6938      	ldr	r0, [r7, #16]
 8007280:	f7fe ff90 	bl	80061a4 <_SendPacket>
  RECORD_END();
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f383 8811 	msr	BASEPRI, r3
}
 800728a:	bf00      	nop
 800728c:	3728      	adds	r7, #40	@ 0x28
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20007098 	.word	0x20007098

08007298 <memcmp>:
 8007298:	b510      	push	{r4, lr}
 800729a:	3901      	subs	r1, #1
 800729c:	4402      	add	r2, r0
 800729e:	4290      	cmp	r0, r2
 80072a0:	d101      	bne.n	80072a6 <memcmp+0xe>
 80072a2:	2000      	movs	r0, #0
 80072a4:	e005      	b.n	80072b2 <memcmp+0x1a>
 80072a6:	7803      	ldrb	r3, [r0, #0]
 80072a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072ac:	42a3      	cmp	r3, r4
 80072ae:	d001      	beq.n	80072b4 <memcmp+0x1c>
 80072b0:	1b18      	subs	r0, r3, r4
 80072b2:	bd10      	pop	{r4, pc}
 80072b4:	3001      	adds	r0, #1
 80072b6:	e7f2      	b.n	800729e <memcmp+0x6>

080072b8 <memset>:
 80072b8:	4402      	add	r2, r0
 80072ba:	4603      	mov	r3, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <_reclaim_reent>:
 80072c8:	4b29      	ldr	r3, [pc, #164]	@ (8007370 <_reclaim_reent+0xa8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4283      	cmp	r3, r0
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	d04b      	beq.n	800736c <_reclaim_reent+0xa4>
 80072d4:	69c3      	ldr	r3, [r0, #28]
 80072d6:	b1ab      	cbz	r3, 8007304 <_reclaim_reent+0x3c>
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	b16b      	cbz	r3, 80072f8 <_reclaim_reent+0x30>
 80072dc:	2500      	movs	r5, #0
 80072de:	69e3      	ldr	r3, [r4, #28]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	5959      	ldr	r1, [r3, r5]
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d13b      	bne.n	8007360 <_reclaim_reent+0x98>
 80072e8:	3504      	adds	r5, #4
 80072ea:	2d80      	cmp	r5, #128	@ 0x80
 80072ec:	d1f7      	bne.n	80072de <_reclaim_reent+0x16>
 80072ee:	69e3      	ldr	r3, [r4, #28]
 80072f0:	4620      	mov	r0, r4
 80072f2:	68d9      	ldr	r1, [r3, #12]
 80072f4:	f000 f872 	bl	80073dc <_free_r>
 80072f8:	69e3      	ldr	r3, [r4, #28]
 80072fa:	6819      	ldr	r1, [r3, #0]
 80072fc:	b111      	cbz	r1, 8007304 <_reclaim_reent+0x3c>
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f86c 	bl	80073dc <_free_r>
 8007304:	6961      	ldr	r1, [r4, #20]
 8007306:	b111      	cbz	r1, 800730e <_reclaim_reent+0x46>
 8007308:	4620      	mov	r0, r4
 800730a:	f000 f867 	bl	80073dc <_free_r>
 800730e:	69e1      	ldr	r1, [r4, #28]
 8007310:	b111      	cbz	r1, 8007318 <_reclaim_reent+0x50>
 8007312:	4620      	mov	r0, r4
 8007314:	f000 f862 	bl	80073dc <_free_r>
 8007318:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800731a:	b111      	cbz	r1, 8007322 <_reclaim_reent+0x5a>
 800731c:	4620      	mov	r0, r4
 800731e:	f000 f85d 	bl	80073dc <_free_r>
 8007322:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007324:	b111      	cbz	r1, 800732c <_reclaim_reent+0x64>
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f858 	bl	80073dc <_free_r>
 800732c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800732e:	b111      	cbz	r1, 8007336 <_reclaim_reent+0x6e>
 8007330:	4620      	mov	r0, r4
 8007332:	f000 f853 	bl	80073dc <_free_r>
 8007336:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007338:	b111      	cbz	r1, 8007340 <_reclaim_reent+0x78>
 800733a:	4620      	mov	r0, r4
 800733c:	f000 f84e 	bl	80073dc <_free_r>
 8007340:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007342:	b111      	cbz	r1, 800734a <_reclaim_reent+0x82>
 8007344:	4620      	mov	r0, r4
 8007346:	f000 f849 	bl	80073dc <_free_r>
 800734a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800734c:	b111      	cbz	r1, 8007354 <_reclaim_reent+0x8c>
 800734e:	4620      	mov	r0, r4
 8007350:	f000 f844 	bl	80073dc <_free_r>
 8007354:	6a23      	ldr	r3, [r4, #32]
 8007356:	b14b      	cbz	r3, 800736c <_reclaim_reent+0xa4>
 8007358:	4620      	mov	r0, r4
 800735a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800735e:	4718      	bx	r3
 8007360:	680e      	ldr	r6, [r1, #0]
 8007362:	4620      	mov	r0, r4
 8007364:	f000 f83a 	bl	80073dc <_free_r>
 8007368:	4631      	mov	r1, r6
 800736a:	e7bb      	b.n	80072e4 <_reclaim_reent+0x1c>
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	bf00      	nop
 8007370:	20000014 	.word	0x20000014

08007374 <__libc_init_array>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	4d0d      	ldr	r5, [pc, #52]	@ (80073ac <__libc_init_array+0x38>)
 8007378:	4c0d      	ldr	r4, [pc, #52]	@ (80073b0 <__libc_init_array+0x3c>)
 800737a:	1b64      	subs	r4, r4, r5
 800737c:	10a4      	asrs	r4, r4, #2
 800737e:	2600      	movs	r6, #0
 8007380:	42a6      	cmp	r6, r4
 8007382:	d109      	bne.n	8007398 <__libc_init_array+0x24>
 8007384:	4d0b      	ldr	r5, [pc, #44]	@ (80073b4 <__libc_init_array+0x40>)
 8007386:	4c0c      	ldr	r4, [pc, #48]	@ (80073b8 <__libc_init_array+0x44>)
 8007388:	f000 f87e 	bl	8007488 <_init>
 800738c:	1b64      	subs	r4, r4, r5
 800738e:	10a4      	asrs	r4, r4, #2
 8007390:	2600      	movs	r6, #0
 8007392:	42a6      	cmp	r6, r4
 8007394:	d105      	bne.n	80073a2 <__libc_init_array+0x2e>
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	f855 3b04 	ldr.w	r3, [r5], #4
 800739c:	4798      	blx	r3
 800739e:	3601      	adds	r6, #1
 80073a0:	e7ee      	b.n	8007380 <__libc_init_array+0xc>
 80073a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a6:	4798      	blx	r3
 80073a8:	3601      	adds	r6, #1
 80073aa:	e7f2      	b.n	8007392 <__libc_init_array+0x1e>
 80073ac:	08007660 	.word	0x08007660
 80073b0:	08007660 	.word	0x08007660
 80073b4:	08007660 	.word	0x08007660
 80073b8:	08007664 	.word	0x08007664

080073bc <__retarget_lock_acquire_recursive>:
 80073bc:	4770      	bx	lr

080073be <__retarget_lock_release_recursive>:
 80073be:	4770      	bx	lr

080073c0 <memcpy>:
 80073c0:	440a      	add	r2, r1
 80073c2:	4291      	cmp	r1, r2
 80073c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80073c8:	d100      	bne.n	80073cc <memcpy+0xc>
 80073ca:	4770      	bx	lr
 80073cc:	b510      	push	{r4, lr}
 80073ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d6:	4291      	cmp	r1, r2
 80073d8:	d1f9      	bne.n	80073ce <memcpy+0xe>
 80073da:	bd10      	pop	{r4, pc}

080073dc <_free_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4605      	mov	r5, r0
 80073e0:	2900      	cmp	r1, #0
 80073e2:	d041      	beq.n	8007468 <_free_r+0x8c>
 80073e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e8:	1f0c      	subs	r4, r1, #4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfb8      	it	lt
 80073ee:	18e4      	addlt	r4, r4, r3
 80073f0:	f000 f83e 	bl	8007470 <__malloc_lock>
 80073f4:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <_free_r+0x90>)
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	b933      	cbnz	r3, 8007408 <_free_r+0x2c>
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	6014      	str	r4, [r2, #0]
 80073fe:	4628      	mov	r0, r5
 8007400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007404:	f000 b83a 	b.w	800747c <__malloc_unlock>
 8007408:	42a3      	cmp	r3, r4
 800740a:	d908      	bls.n	800741e <_free_r+0x42>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	1821      	adds	r1, r4, r0
 8007410:	428b      	cmp	r3, r1
 8007412:	bf01      	itttt	eq
 8007414:	6819      	ldreq	r1, [r3, #0]
 8007416:	685b      	ldreq	r3, [r3, #4]
 8007418:	1809      	addeq	r1, r1, r0
 800741a:	6021      	streq	r1, [r4, #0]
 800741c:	e7ed      	b.n	80073fa <_free_r+0x1e>
 800741e:	461a      	mov	r2, r3
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	b10b      	cbz	r3, 8007428 <_free_r+0x4c>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d9fa      	bls.n	800741e <_free_r+0x42>
 8007428:	6811      	ldr	r1, [r2, #0]
 800742a:	1850      	adds	r0, r2, r1
 800742c:	42a0      	cmp	r0, r4
 800742e:	d10b      	bne.n	8007448 <_free_r+0x6c>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	4401      	add	r1, r0
 8007434:	1850      	adds	r0, r2, r1
 8007436:	4283      	cmp	r3, r0
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	d1e0      	bne.n	80073fe <_free_r+0x22>
 800743c:	6818      	ldr	r0, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	6053      	str	r3, [r2, #4]
 8007442:	4408      	add	r0, r1
 8007444:	6010      	str	r0, [r2, #0]
 8007446:	e7da      	b.n	80073fe <_free_r+0x22>
 8007448:	d902      	bls.n	8007450 <_free_r+0x74>
 800744a:	230c      	movs	r3, #12
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	e7d6      	b.n	80073fe <_free_r+0x22>
 8007450:	6820      	ldr	r0, [r4, #0]
 8007452:	1821      	adds	r1, r4, r0
 8007454:	428b      	cmp	r3, r1
 8007456:	bf04      	itt	eq
 8007458:	6819      	ldreq	r1, [r3, #0]
 800745a:	685b      	ldreq	r3, [r3, #4]
 800745c:	6063      	str	r3, [r4, #4]
 800745e:	bf04      	itt	eq
 8007460:	1809      	addeq	r1, r1, r0
 8007462:	6021      	streq	r1, [r4, #0]
 8007464:	6054      	str	r4, [r2, #4]
 8007466:	e7ca      	b.n	80073fe <_free_r+0x22>
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	200072b8 	.word	0x200072b8

08007470 <__malloc_lock>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__malloc_lock+0x8>)
 8007472:	f7ff bfa3 	b.w	80073bc <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	200072b4 	.word	0x200072b4

0800747c <__malloc_unlock>:
 800747c:	4801      	ldr	r0, [pc, #4]	@ (8007484 <__malloc_unlock+0x8>)
 800747e:	f7ff bf9e 	b.w	80073be <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	200072b4 	.word	0x200072b4

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
