
FreeRTOS_SEGGERv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08005544  08005544  00006544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005630  08005630  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005638  08005638  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005638  08005638  00006638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005640  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006fec  20000010  08005650  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006ffc  08005650  00007ffc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135f1  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c98  00000000  00000000  0001a631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd9  00000000  00000000  0001e3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039b0  00000000  00000000  0001f099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001213b  00000000  00000000  00022a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6630  00000000  00000000  00034b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b1b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045dc  00000000  00000000  0010b1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  0010f7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800552c 	.word	0x0800552c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	0800552c 	.word	0x0800552c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20004a28 	.word	0x20004a28

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	DWT->CTRL |= (1 << 0);
 8000598:	4b0d      	ldr	r3, [pc, #52]	@ (80005d0 <main+0x3c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <main+0x3c>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 f926 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f81a 	bl	80005e0 <SystemClock_Config>
  SEGGER_SYSVIEW_Conf();
 80005ac:	f003 fdb2 	bl	8004114 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005b0:	f004 fbd4 	bl	8004d5c <SEGGER_SYSVIEW_Start>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b4:	f000 ffd8 	bl	8001568 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	4a06      	ldr	r2, [pc, #24]	@ (80005d4 <main+0x40>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <main+0x44>)
 80005be:	f001 f81d 	bl	80015fc <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <main+0x48>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c8:	f000 fff2 	bl	80015b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	bf00      	nop
 80005ce:	e7fd      	b.n	80005cc <main+0x38>
 80005d0:	e0001000 	.word	0xe0001000
 80005d4:	080055d4 	.word	0x080055d4
 80005d8:	080006b9 	.word	0x080006b9
 80005dc:	2000002c 	.word	0x2000002c

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2234      	movs	r2, #52	@ 0x34
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 ff62 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 0308 	add.w	r3, r7, #8
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <SystemClock_Config+0xd4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000654:	23a8      	movs	r3, #168	@ 0xa8
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000660:	2302      	movs	r3, #2
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fcab 	bl	8000fc4 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f828 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fa04 	bl	8000aa4 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f811 	bl	80006c8 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006c0:	2001      	movs	r0, #1
 80006c2:	f001 f82d 	bl	8001720 <osDelay>
 80006c6:	e7fb      	b.n	80006c0 <StartDefaultTask+0x8>

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <Error_Handler+0x8>

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_MspInit+0x54>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <HAL_MspInit+0x54>)
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_MspInit+0x54>)
 80006ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <HAL_MspInit+0x54>)
 80006fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <HAL_MspInit+0x54>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000704:	6413      	str	r3, [r2, #64]	@ 0x40
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <HAL_MspInit+0x54>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	210f      	movs	r1, #15
 8000716:	f06f 0001 	mvn.w	r0, #1
 800071a:	f000 f99a 	bl	8000a52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000766:	f000 f897 	bl	8000898 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800076a:	f002 fc4b 	bl	8003004 <xTaskGetSchedulerState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d001      	beq.n	8000778 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000774:	f003 fa40 	bl	8003bf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	@ (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007a4:	f7ff ffea 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007aa:	490d      	ldr	r1, [pc, #52]	@ (80007e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007ac:	4a0d      	ldr	r2, [pc, #52]	@ (80007e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b0:	e002      	b.n	80007b8 <LoopCopyDataInit>

080007b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b6:	3304      	adds	r3, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007bc:	d3f9      	bcc.n	80007b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c0:	4c0a      	ldr	r4, [pc, #40]	@ (80007ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c4:	e001      	b.n	80007ca <LoopFillZerobss>

080007c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c8:	3204      	adds	r2, #4

080007ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007cc:	d3fb      	bcc.n	80007c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80007ce:	f004 fe7b 	bl	80054c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007d2:	f7ff fedf 	bl	8000594 <main>
  bx  lr    
 80007d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007e4:	08005640 	.word	0x08005640
  ldr r2, =_sbss
 80007e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007ec:	20006ffc 	.word	0x20006ffc

080007f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <HAL_Init+0x40>)
 80007fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000804:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <HAL_Init+0x40>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_Init+0x40>)
 800080a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800080e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_Init+0x40>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	@ (8000834 <HAL_Init+0x40>)
 8000816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800081a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081c:	2003      	movs	r0, #3
 800081e:	f000 f90d 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000822:	200f      	movs	r0, #15
 8000824:	f000 f808 	bl	8000838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000828:	f7ff ff54 	bl	80006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023c00 	.word	0x40023c00

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_InitTick+0x54>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <HAL_InitTick+0x58>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000852:	fbb2 f3f3 	udiv	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 f917 	bl	8000a8a <HAL_SYSTICK_Config>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e00e      	b.n	8000884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0f      	cmp	r3, #15
 800086a:	d80a      	bhi.n	8000882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086c:	2200      	movs	r2, #0
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f000 f8ed 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000878:	4a06      	ldr	r2, [pc, #24]	@ (8000894 <HAL_InitTick+0x5c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000000 	.word	0x20000000
 8000890:	20000008 	.word	0x20000008
 8000894:	20000004 	.word	0x20000004

08000898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000008 	.word	0x20000008
 80008bc:	20000030 	.word	0x20000030

080008c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_GetTick+0x14>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000030 	.word	0x20000030

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	@ (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	@ (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	@ (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	@ (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	@ 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff8e 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff47 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff5c 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff8e 	bl	8000990 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffb0 	bl	80009f8 <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d101      	bne.n	8000ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e0cc      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ab8:	4b68      	ldr	r3, [pc, #416]	@ (8000c5c <HAL_RCC_ClockConfig+0x1b8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 030f 	and.w	r3, r3, #15
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d90c      	bls.n	8000ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac6:	4b65      	ldr	r3, [pc, #404]	@ (8000c5c <HAL_RCC_ClockConfig+0x1b8>)
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ace:	4b63      	ldr	r3, [pc, #396]	@ (8000c5c <HAL_RCC_ClockConfig+0x1b8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d001      	beq.n	8000ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e0b8      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d020      	beq.n	8000b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d005      	beq.n	8000b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000af8:	4b59      	ldr	r3, [pc, #356]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a58      	ldr	r2, [pc, #352]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d005      	beq.n	8000b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b10:	4b53      	ldr	r3, [pc, #332]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	4a52      	ldr	r2, [pc, #328]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b1c:	4b50      	ldr	r3, [pc, #320]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	494d      	ldr	r1, [pc, #308]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d044      	beq.n	8000bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d107      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b42:	4b47      	ldr	r3, [pc, #284]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d119      	bne.n	8000b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e07f      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d003      	beq.n	8000b62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d107      	bne.n	8000b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b62:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d109      	bne.n	8000b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e06f      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b72:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e067      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b82:	4b37      	ldr	r3, [pc, #220]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f023 0203 	bic.w	r2, r3, #3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	4934      	ldr	r1, [pc, #208]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000b94:	f7ff fe94 	bl	80008c0 <HAL_GetTick>
 8000b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b9a:	e00a      	b.n	8000bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b9c:	f7ff fe90 	bl	80008c0 <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e04f      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 020c 	and.w	r2, r3, #12
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d1eb      	bne.n	8000b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000bc4:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <HAL_RCC_ClockConfig+0x1b8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d20c      	bcs.n	8000bec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bd2:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <HAL_RCC_ClockConfig+0x1b8>)
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <HAL_RCC_ClockConfig+0x1b8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d001      	beq.n	8000bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e032      	b.n	8000c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d008      	beq.n	8000c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000bf8:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4916      	ldr	r1, [pc, #88]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d009      	beq.n	8000c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	490e      	ldr	r1, [pc, #56]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c2a:	f000 f821 	bl	8000c70 <HAL_RCC_GetSysClockFreq>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_RCC_ClockConfig+0x1bc>)
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	091b      	lsrs	r3, r3, #4
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	490a      	ldr	r1, [pc, #40]	@ (8000c64 <HAL_RCC_ClockConfig+0x1c0>)
 8000c3c:	5ccb      	ldrb	r3, [r1, r3]
 8000c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <HAL_RCC_ClockConfig+0x1c4>)
 8000c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_RCC_ClockConfig+0x1c8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fdf4 	bl	8000838 <HAL_InitTick>

  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00
 8000c60:	40023800 	.word	0x40023800
 8000c64:	080055f8 	.word	0x080055f8
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000c74:	b0a6      	sub	sp, #152	@ 0x98
 8000c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c96:	4bc8      	ldr	r3, [pc, #800]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b0c      	cmp	r3, #12
 8000ca0:	f200 817e 	bhi.w	8000fa0 <HAL_RCC_GetSysClockFreq+0x330>
 8000ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cac <HAL_RCC_GetSysClockFreq+0x3c>)
 8000ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000caa:	bf00      	nop
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000fa1 	.word	0x08000fa1
 8000cb4:	08000fa1 	.word	0x08000fa1
 8000cb8:	08000fa1 	.word	0x08000fa1
 8000cbc:	08000ce9 	.word	0x08000ce9
 8000cc0:	08000fa1 	.word	0x08000fa1
 8000cc4:	08000fa1 	.word	0x08000fa1
 8000cc8:	08000fa1 	.word	0x08000fa1
 8000ccc:	08000cf1 	.word	0x08000cf1
 8000cd0:	08000fa1 	.word	0x08000fa1
 8000cd4:	08000fa1 	.word	0x08000fa1
 8000cd8:	08000fa1 	.word	0x08000fa1
 8000cdc:	08000e5b 	.word	0x08000e5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ce0:	4bb6      	ldr	r3, [pc, #728]	@ (8000fbc <HAL_RCC_GetSysClockFreq+0x34c>)
 8000ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8000ce6:	e15f      	b.n	8000fa8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000ce8:	4bb5      	ldr	r3, [pc, #724]	@ (8000fc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8000cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8000cee:	e15b      	b.n	8000fa8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cf0:	4bb1      	ldr	r3, [pc, #708]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000cfc:	4bae      	ldr	r3, [pc, #696]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d031      	beq.n	8000d6c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d08:	4bab      	ldr	r3, [pc, #684]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	099b      	lsrs	r3, r3, #6
 8000d0e:	2200      	movs	r2, #0
 8000d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8000d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000d20:	4ba7      	ldr	r3, [pc, #668]	@ (8000fc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8000d22:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8000d26:	462a      	mov	r2, r5
 8000d28:	fb03 f202 	mul.w	r2, r3, r2
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4621      	mov	r1, r4
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	4aa2      	ldr	r2, [pc, #648]	@ (8000fc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8000d38:	4621      	mov	r1, r4
 8000d3a:	fba1 1202 	umull	r1, r2, r1, r2
 8000d3e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000d40:	460a      	mov	r2, r1
 8000d42:	67ba      	str	r2, [r7, #120]	@ 0x78
 8000d44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d46:	4413      	add	r3, r2
 8000d48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d4e:	2200      	movs	r2, #0
 8000d50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d52:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8000d54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000d58:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000d5c:	f7ff faa2 	bl	80002a4 <__aeabi_uldivmod>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	4613      	mov	r3, r2
 8000d66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000d6a:	e064      	b.n	8000e36 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d6c:	4b92      	ldr	r3, [pc, #584]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	2200      	movs	r2, #0
 8000d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d76:	657a      	str	r2, [r7, #84]	@ 0x54
 8000d78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d80:	2300      	movs	r3, #0
 8000d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d84:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8000d88:	4622      	mov	r2, r4
 8000d8a:	462b      	mov	r3, r5
 8000d8c:	f04f 0000 	mov.w	r0, #0
 8000d90:	f04f 0100 	mov.w	r1, #0
 8000d94:	0159      	lsls	r1, r3, #5
 8000d96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000d9a:	0150      	lsls	r0, r2, #5
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4621      	mov	r1, r4
 8000da2:	1a51      	subs	r1, r2, r1
 8000da4:	6139      	str	r1, [r7, #16]
 8000da6:	4629      	mov	r1, r5
 8000da8:	eb63 0301 	sbc.w	r3, r3, r1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8000dba:	4659      	mov	r1, fp
 8000dbc:	018b      	lsls	r3, r1, #6
 8000dbe:	4651      	mov	r1, sl
 8000dc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000dc4:	4651      	mov	r1, sl
 8000dc6:	018a      	lsls	r2, r1, #6
 8000dc8:	4651      	mov	r1, sl
 8000dca:	ebb2 0801 	subs.w	r8, r2, r1
 8000dce:	4659      	mov	r1, fp
 8000dd0:	eb63 0901 	sbc.w	r9, r3, r1
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000de0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000de4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000de8:	4690      	mov	r8, r2
 8000dea:	4699      	mov	r9, r3
 8000dec:	4623      	mov	r3, r4
 8000dee:	eb18 0303 	adds.w	r3, r8, r3
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	462b      	mov	r3, r5
 8000df6:	eb49 0303 	adc.w	r3, r9, r3
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000e08:	4629      	mov	r1, r5
 8000e0a:	028b      	lsls	r3, r1, #10
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000e12:	4621      	mov	r1, r4
 8000e14:	028a      	lsls	r2, r1, #10
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000e1e:	2200      	movs	r2, #0
 8000e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8000e22:	647a      	str	r2, [r7, #68]	@ 0x44
 8000e24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000e28:	f7ff fa3c 	bl	80002a4 <__aeabi_uldivmod>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4613      	mov	r3, r2
 8000e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000e36:	4b60      	ldr	r3, [pc, #384]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	3301      	adds	r3, #1
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8000e48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8000e58:	e0a6      	b.n	8000fa8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e5a:	4b57      	ldr	r3, [pc, #348]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000e62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e66:	4b54      	ldr	r3, [pc, #336]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d02a      	beq.n	8000ec8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e72:	4b51      	ldr	r3, [pc, #324]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	099b      	lsrs	r3, r3, #6
 8000e78:	2200      	movs	r2, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000e7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8000e84:	2100      	movs	r1, #0
 8000e86:	4b4e      	ldr	r3, [pc, #312]	@ (8000fc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8000e88:	fb03 f201 	mul.w	r2, r3, r1
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	fb00 f303 	mul.w	r3, r0, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc0 <HAL_RCC_GetSysClockFreq+0x350>)
 8000e96:	fba0 1202 	umull	r1, r2, r0, r2
 8000e9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	673a      	str	r2, [r7, #112]	@ 0x70
 8000ea0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000ea2:	4413      	add	r3, r2
 8000ea4:	677b      	str	r3, [r7, #116]	@ 0x74
 8000ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000eaa:	2200      	movs	r2, #0
 8000eac:	633b      	str	r3, [r7, #48]	@ 0x30
 8000eae:	637a      	str	r2, [r7, #52]	@ 0x34
 8000eb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000eb4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8000eb8:	f7ff f9f4 	bl	80002a4 <__aeabi_uldivmod>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ec6:	e05b      	b.n	8000f80 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	099b      	lsrs	r3, r3, #6
 8000ece:	2200      	movs	r2, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ee0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000ee4:	4642      	mov	r2, r8
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	f04f 0000 	mov.w	r0, #0
 8000eec:	f04f 0100 	mov.w	r1, #0
 8000ef0:	0159      	lsls	r1, r3, #5
 8000ef2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000ef6:	0150      	lsls	r0, r2, #5
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4641      	mov	r1, r8
 8000efe:	ebb2 0a01 	subs.w	sl, r2, r1
 8000f02:	4649      	mov	r1, r9
 8000f04:	eb63 0b01 	sbc.w	fp, r3, r1
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8000f14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8000f18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8000f1c:	ebb2 040a 	subs.w	r4, r2, sl
 8000f20:	eb63 050b 	sbc.w	r5, r3, fp
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	00eb      	lsls	r3, r5, #3
 8000f2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000f32:	00e2      	lsls	r2, r4, #3
 8000f34:	4614      	mov	r4, r2
 8000f36:	461d      	mov	r5, r3
 8000f38:	4643      	mov	r3, r8
 8000f3a:	18e3      	adds	r3, r4, r3
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	464b      	mov	r3, r9
 8000f40:	eb45 0303 	adc.w	r3, r5, r3
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000f52:	4629      	mov	r1, r5
 8000f54:	028b      	lsls	r3, r1, #10
 8000f56:	4621      	mov	r1, r4
 8000f58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8000f5c:	4621      	mov	r1, r4
 8000f5e:	028a      	lsls	r2, r1, #10
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	61fa      	str	r2, [r7, #28]
 8000f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f72:	f7ff f997 	bl	80002a4 <__aeabi_uldivmod>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f80:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb8 <HAL_RCC_GetSysClockFreq+0x348>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0f1b      	lsrs	r3, r3, #28
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8000f8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8000f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8000f9e:	e003      	b.n	8000fa8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_RCC_GetSysClockFreq+0x34c>)
 8000fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8000fa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3798      	adds	r7, #152	@ 0x98
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	00f42400 	.word	0x00f42400
 8000fc0:	017d7840 	.word	0x017d7840

08000fc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e28d      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 8083 	beq.w	80010ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000fe4:	4b94      	ldr	r3, [pc, #592]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d019      	beq.n	8001024 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000ff0:	4b91      	ldr	r3, [pc, #580]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
        || \
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000ffc:	4b8e      	ldr	r3, [pc, #568]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001008:	d00c      	beq.n	8001024 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100a:	4b8b      	ldr	r3, [pc, #556]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001012:	2b0c      	cmp	r3, #12
 8001014:	d112      	bne.n	800103c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001016:	4b88      	ldr	r3, [pc, #544]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001022:	d10b      	bne.n	800103c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	4b84      	ldr	r3, [pc, #528]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d05b      	beq.n	80010e8 <HAL_RCC_OscConfig+0x124>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d157      	bne.n	80010e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e25a      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001044:	d106      	bne.n	8001054 <HAL_RCC_OscConfig+0x90>
 8001046:	4b7c      	ldr	r3, [pc, #496]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a7b      	ldr	r2, [pc, #492]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e01d      	b.n	8001090 <HAL_RCC_OscConfig+0xcc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0xb4>
 800105e:	4b76      	ldr	r3, [pc, #472]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a75      	ldr	r2, [pc, #468]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b73      	ldr	r3, [pc, #460]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a72      	ldr	r2, [pc, #456]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	e00b      	b.n	8001090 <HAL_RCC_OscConfig+0xcc>
 8001078:	4b6f      	ldr	r3, [pc, #444]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a6e      	ldr	r2, [pc, #440]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800107e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	4b6c      	ldr	r3, [pc, #432]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a6b      	ldr	r2, [pc, #428]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800108a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800108e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fc12 	bl	80008c0 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fc0e 	bl	80008c0 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	@ 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e21f      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b61      	ldr	r3, [pc, #388]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f0      	beq.n	80010a0 <HAL_RCC_OscConfig+0xdc>
 80010be:	e014      	b.n	80010ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fbfe 	bl	80008c0 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fbfa 	bl	80008c0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	@ 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e20b      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010da:	4b57      	ldr	r3, [pc, #348]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x104>
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d06f      	beq.n	80011d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80010f6:	4b50      	ldr	r3, [pc, #320]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d017      	beq.n	8001132 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001102:	4b4d      	ldr	r3, [pc, #308]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 030c 	and.w	r3, r3, #12
        || \
 800110a:	2b08      	cmp	r3, #8
 800110c:	d105      	bne.n	800111a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800110e:	4b4a      	ldr	r3, [pc, #296]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b47      	ldr	r3, [pc, #284]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d11c      	bne.n	8001160 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001126:	4b44      	ldr	r3, [pc, #272]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d116      	bne.n	8001160 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001132:	4b41      	ldr	r3, [pc, #260]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x186>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e1d3      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b3b      	ldr	r3, [pc, #236]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	4937      	ldr	r1, [pc, #220]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800115e:	e03a      	b.n	80011d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d020      	beq.n	80011aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001168:	4b34      	ldr	r3, [pc, #208]	@ (800123c <HAL_RCC_OscConfig+0x278>)
 800116a:	2201      	movs	r2, #1
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fba7 	bl	80008c0 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001176:	f7ff fba3 	bl	80008c0 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e1b4      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001194:	4b28      	ldr	r3, [pc, #160]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4925      	ldr	r1, [pc, #148]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011aa:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_RCC_OscConfig+0x278>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fb86 	bl	80008c0 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b8:	f7ff fb82 	bl	80008c0 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e193      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f0      	bne.n	80011b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d036      	beq.n	8001250 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d016      	beq.n	8001218 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_RCC_OscConfig+0x27c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f0:	f7ff fb66 	bl	80008c0 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f8:	f7ff fb62 	bl	80008c0 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e173      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <HAL_RCC_OscConfig+0x274>)
 800120c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x234>
 8001216:	e01b      	b.n	8001250 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001218:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_RCC_OscConfig+0x27c>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121e:	f7ff fb4f 	bl	80008c0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001224:	e00e      	b.n	8001244 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001226:	f7ff fb4b 	bl	80008c0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d907      	bls.n	8001244 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e15c      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
 8001238:	40023800 	.word	0x40023800
 800123c:	42470000 	.word	0x42470000
 8001240:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	4b8a      	ldr	r3, [pc, #552]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1ea      	bne.n	8001226 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8097 	beq.w	800138c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001262:	4b83      	ldr	r3, [pc, #524]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10f      	bne.n	800128e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b7f      	ldr	r3, [pc, #508]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	4a7e      	ldr	r2, [pc, #504]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	@ 0x40
 800127e:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800128a:	2301      	movs	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128e:	4b79      	ldr	r3, [pc, #484]	@ (8001474 <HAL_RCC_OscConfig+0x4b0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	2b00      	cmp	r3, #0
 8001298:	d118      	bne.n	80012cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129a:	4b76      	ldr	r3, [pc, #472]	@ (8001474 <HAL_RCC_OscConfig+0x4b0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	@ (8001474 <HAL_RCC_OscConfig+0x4b0>)
 80012a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb0b 	bl	80008c0 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ae:	f7ff fb07 	bl	80008c0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e118      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <HAL_RCC_OscConfig+0x4b0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x31e>
 80012d4:	4b66      	ldr	r3, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d8:	4a65      	ldr	r2, [pc, #404]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e0:	e01c      	b.n	800131c <HAL_RCC_OscConfig+0x358>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x340>
 80012ea:	4b61      	ldr	r3, [pc, #388]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ee:	4a60      	ldr	r2, [pc, #384]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80012f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012fa:	4a5d      	ldr	r2, [pc, #372]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6713      	str	r3, [r2, #112]	@ 0x70
 8001302:	e00b      	b.n	800131c <HAL_RCC_OscConfig+0x358>
 8001304:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001308:	4a59      	ldr	r2, [pc, #356]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 800130a:	f023 0301 	bic.w	r3, r3, #1
 800130e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001310:	4b57      	ldr	r3, [pc, #348]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001314:	4a56      	ldr	r2, [pc, #344]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001316:	f023 0304 	bic.w	r3, r3, #4
 800131a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d015      	beq.n	8001350 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff facc 	bl	80008c0 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132a:	e00a      	b.n	8001342 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7ff fac8 	bl	80008c0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e0d7      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001342:	4b4b      	ldr	r3, [pc, #300]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0ee      	beq.n	800132c <HAL_RCC_OscConfig+0x368>
 800134e:	e014      	b.n	800137a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fab6 	bl	80008c0 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001356:	e00a      	b.n	800136e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001358:	f7ff fab2 	bl	80008c0 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e0c1      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136e:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1ee      	bne.n	8001358 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001380:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001384:	4a3a      	ldr	r2, [pc, #232]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 80ad 	beq.w	80014f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d060      	beq.n	8001464 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d145      	bne.n	8001436 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4b33      	ldr	r3, [pc, #204]	@ (8001478 <HAL_RCC_OscConfig+0x4b4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fa86 	bl	80008c0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b8:	f7ff fa82 	bl	80008c0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e093      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ca:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	085b      	lsrs	r3, r3, #1
 80013ee:	3b01      	subs	r3, #1
 80013f0:	041b      	lsls	r3, r3, #16
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f8:	061b      	lsls	r3, r3, #24
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	071b      	lsls	r3, r3, #28
 8001402:	491b      	ldr	r1, [pc, #108]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001408:	4b1b      	ldr	r3, [pc, #108]	@ (8001478 <HAL_RCC_OscConfig+0x4b4>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140e:	f7ff fa57 	bl	80008c0 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fa53 	bl	80008c0 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e064      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x452>
 8001434:	e05c      	b.n	80014f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_RCC_OscConfig+0x4b4>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143c:	f7ff fa40 	bl	80008c0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff fa3c 	bl	80008c0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e04d      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <HAL_RCC_OscConfig+0x4ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x480>
 8001462:	e045      	b.n	80014f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d107      	bne.n	800147c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e040      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000
 8001478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <HAL_RCC_OscConfig+0x538>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d129      	bne.n	80014ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d122      	bne.n	80014ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014ac:	4013      	ands	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d119      	bne.n	80014ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	3b01      	subs	r3, #1
 80014c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10f      	bne.n	80014ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d107      	bne.n	80014ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <__NVIC_SetPriority>:
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	@ (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	@ (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001558:	2100      	movs	r1, #0
 800155a:	f06f 0004 	mvn.w	r0, #4
 800155e:	f7ff ffcf 	bl	8001500 <__NVIC_SetPriority>
#endif
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800156e:	f3ef 8305 	mrs	r3, IPSR
 8001572:	603b      	str	r3, [r7, #0]
  return(result);
 8001574:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800157a:	f06f 0305 	mvn.w	r3, #5
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	e00c      	b.n	800159c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <osKernelInitialize+0x44>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <osKernelInitialize+0x44>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	e002      	b.n	800159c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000034 	.word	0x20000034

080015b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015b6:	f3ef 8305 	mrs	r3, IPSR
 80015ba:	603b      	str	r3, [r7, #0]
  return(result);
 80015bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80015c2:	f06f 0305 	mvn.w	r3, #5
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	e010      	b.n	80015ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <osKernelStart+0x48>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d109      	bne.n	80015e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80015d2:	f7ff ffbf 	bl	8001554 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <osKernelStart+0x48>)
 80015d8:	2202      	movs	r2, #2
 80015da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80015dc:	f001 f87a 	bl	80026d4 <vTaskStartScheduler>
      stat = osOK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	e002      	b.n	80015ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000034 	.word	0x20000034

080015fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	@ 0x38
 8001600:	af04      	add	r7, sp, #16
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800160c:	f3ef 8305 	mrs	r3, IPSR
 8001610:	617b      	str	r3, [r7, #20]
  return(result);
 8001612:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001614:	2b00      	cmp	r3, #0
 8001616:	d17e      	bne.n	8001716 <osThreadNew+0x11a>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d07b      	beq.n	8001716 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001622:	2318      	movs	r3, #24
 8001624:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d045      	beq.n	80016c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d002      	beq.n	8001644 <osThreadNew+0x48>
        name = attr->name;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <osThreadNew+0x6e>
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b38      	cmp	r3, #56	@ 0x38
 800165c:	d805      	bhi.n	800166a <osThreadNew+0x6e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <osThreadNew+0x72>
        return (NULL);
 800166a:	2300      	movs	r3, #0
 800166c:	e054      	b.n	8001718 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00e      	beq.n	80016a4 <osThreadNew+0xa8>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b5b      	cmp	r3, #91	@ 0x5b
 800168c:	d90a      	bls.n	80016a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <osThreadNew+0xa8>
        mem = 1;
 800169e:	2301      	movs	r3, #1
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	e010      	b.n	80016c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10c      	bne.n	80016c6 <osThreadNew+0xca>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d108      	bne.n	80016c6 <osThreadNew+0xca>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <osThreadNew+0xca>
          mem = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	e001      	b.n	80016c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d110      	bne.n	80016ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80016d4:	9202      	str	r2, [sp, #8]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fe1a 	bl	800231c <xTaskCreateStatic>
 80016e8:	4603      	mov	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	e013      	b.n	8001716 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d110      	bne.n	8001716 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	9301      	str	r3, [sp, #4]
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fe68 	bl	80023dc <xTaskCreate>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <osThreadNew+0x11a>
            hTask = NULL;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001716:	693b      	ldr	r3, [r7, #16]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3728      	adds	r7, #40	@ 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001728:	f3ef 8305 	mrs	r3, IPSR
 800172c:	60bb      	str	r3, [r7, #8]
  return(result);
 800172e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001730:	2b00      	cmp	r3, #0
 8001732:	d003      	beq.n	800173c <osDelay+0x1c>
    stat = osErrorISR;
 8001734:	f06f 0305 	mvn.w	r3, #5
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	e007      	b.n	800174c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 ff8e 	bl	8002668 <vTaskDelay>
    }
  }

  return (stat);
 800174c:	68fb      	ldr	r3, [r7, #12]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <vApplicationGetIdleTaskMemory+0x2c>)
 8001768:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <vApplicationGetIdleTaskMemory+0x30>)
 800176e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2280      	movs	r2, #128	@ 0x80
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000038 	.word	0x20000038
 8001788:	20000094 	.word	0x20000094

0800178c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800179c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4a06      	ldr	r2, [pc, #24]	@ (80017bc <vApplicationGetTimerTaskMemory+0x30>)
 80017a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000294 	.word	0x20000294
 80017bc:	200002f0 	.word	0x200002f0

080017c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f103 0208 	add.w	r2, r3, #8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f103 0208 	add.w	r2, r3, #8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f103 0208 	add.w	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800181a:	b480      	push	{r7}
 800181c:	b085      	sub	sp, #20
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d103      	bne.n	8001882 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e00c      	b.n	800189c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3308      	adds	r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e002      	b.n	8001890 <vListInsert+0x2e>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	429a      	cmp	r2, r3
 800189a:	d2f6      	bcs.n	800188a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6892      	ldr	r2, [r2, #8]
 80018ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6852      	ldr	r2, [r2, #4]
 80018f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d103      	bne.n	8001908 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	1e5a      	subs	r2, r3, #1
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10b      	bne.n	8001954 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800193c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001954:	f002 f8c0 	bl	8003ad8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	441a      	add	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001984:	3b01      	subs	r3, #1
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	441a      	add	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	22ff      	movs	r2, #255	@ 0xff
 8001998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	22ff      	movs	r2, #255	@ 0xff
 80019a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d114      	bne.n	80019d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01a      	beq.n	80019e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3310      	adds	r3, #16
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 f92c 	bl	8002c14 <xTaskRemoveFromEventList>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d012      	beq.n	80019e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <xQueueGenericReset+0xd0>)
 80019c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	e009      	b.n	80019e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3310      	adds	r3, #16
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fef1 	bl	80017c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3324      	adds	r3, #36	@ 0x24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff feec 	bl	80017c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80019e8:	f002 f8a8 	bl	8003b3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000ed04 	.word	0xe000ed04

080019fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08e      	sub	sp, #56	@ 0x38
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10b      	bne.n	8001a28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a14:	f383 8811 	msr	BASEPRI, r3
 8001a18:	f3bf 8f6f 	isb	sy
 8001a1c:	f3bf 8f4f 	dsb	sy
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10b      	bne.n	8001a46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a32:	f383 8811 	msr	BASEPRI, r3
 8001a36:	f3bf 8f6f 	isb	sy
 8001a3a:	f3bf 8f4f 	dsb	sy
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	e7fd      	b.n	8001a42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <xQueueGenericCreateStatic+0x56>
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <xQueueGenericCreateStatic+0x5a>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <xQueueGenericCreateStatic+0x5c>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d10b      	bne.n	8001a74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a60:	f383 8811 	msr	BASEPRI, r3
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	623b      	str	r3, [r7, #32]
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <xQueueGenericCreateStatic+0x84>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <xQueueGenericCreateStatic+0x88>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <xQueueGenericCreateStatic+0x8a>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10b      	bne.n	8001aa2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	61fb      	str	r3, [r7, #28]
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	e7fd      	b.n	8001a9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001aa2:	2350      	movs	r3, #80	@ 0x50
 8001aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b50      	cmp	r3, #80	@ 0x50
 8001aaa:	d00b      	beq.n	8001ac4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ab0:	f383 8811 	msr	BASEPRI, r3
 8001ab4:	f3bf 8f6f 	isb	sy
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	61bb      	str	r3, [r7, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001ac4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00d      	beq.n	8001aec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ad8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f805 	bl	8001af6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3730      	adds	r7, #48	@ 0x30
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e002      	b.n	8001b18 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b24:	2101      	movs	r1, #1
 8001b26:	69b8      	ldr	r0, [r7, #24]
 8001b28:	f7ff fefe 	bl	8001928 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08e      	sub	sp, #56	@ 0x38
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10b      	bne.n	8001b70 <xQueueGenericSend+0x34>
	__asm volatile
 8001b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d103      	bne.n	8001b7e <xQueueGenericSend+0x42>
 8001b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <xQueueGenericSend+0x46>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <xQueueGenericSend+0x48>
 8001b82:	2300      	movs	r3, #0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10b      	bne.n	8001ba0 <xQueueGenericSend+0x64>
	__asm volatile
 8001b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d103      	bne.n	8001bae <xQueueGenericSend+0x72>
 8001ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <xQueueGenericSend+0x76>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <xQueueGenericSend+0x78>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10b      	bne.n	8001bd0 <xQueueGenericSend+0x94>
	__asm volatile
 8001bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	623b      	str	r3, [r7, #32]
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bd0:	f001 fa18 	bl	8003004 <xTaskGetSchedulerState>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <xQueueGenericSend+0xa4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <xQueueGenericSend+0xa8>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <xQueueGenericSend+0xaa>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10b      	bne.n	8001c02 <xQueueGenericSend+0xc6>
	__asm volatile
 8001bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	61fb      	str	r3, [r7, #28]
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	e7fd      	b.n	8001bfe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c02:	f001 ff69 	bl	8003ad8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d302      	bcc.n	8001c18 <xQueueGenericSend+0xdc>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d129      	bne.n	8001c6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	68b9      	ldr	r1, [r7, #8]
 8001c1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c1e:	f000 fa0f 	bl	8002040 <prvCopyDataToQueue>
 8001c22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2e:	3324      	adds	r3, #36	@ 0x24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 ffef 	bl	8002c14 <xTaskRemoveFromEventList>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d013      	beq.n	8001c64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <xQueueGenericSend+0x200>)
 8001c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	e00a      	b.n	8001c64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001c54:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <xQueueGenericSend+0x200>)
 8001c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f3bf 8f4f 	dsb	sy
 8001c60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001c64:	f001 ff6a 	bl	8003b3c <vPortExitCritical>
				return pdPASS;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e063      	b.n	8001d34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d103      	bne.n	8001c7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c72:	f001 ff63 	bl	8003b3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e05c      	b.n	8001d34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d106      	bne.n	8001c8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4618      	mov	r0, r3
 8001c86:	f001 f829 	bl	8002cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c8e:	f001 ff55 	bl	8003b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c92:	f000 fd87 	bl	80027a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c96:	f001 ff1f 	bl	8003ad8 <vPortEnterCritical>
 8001c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d103      	bne.n	8001cb0 <xQueueGenericSend+0x174>
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d103      	bne.n	8001cc6 <xQueueGenericSend+0x18a>
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001cc6:	f001 ff39 	bl	8003b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cca:	1d3a      	adds	r2, r7, #4
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 f818 	bl	8002d08 <xTaskCheckForTimeOut>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d124      	bne.n	8001d28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001cde:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001ce0:	f000 faa6 	bl	8002230 <prvIsQueueFull>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d018      	beq.n	8001d1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cec:	3310      	adds	r3, #16
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 ff3c 	bl	8002b70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001cfa:	f000 fa31 	bl	8002160 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001cfe:	f000 fd5f 	bl	80027c0 <xTaskResumeAll>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f af7c 	bne.w	8001c02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <xQueueGenericSend+0x200>)
 8001d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	f3bf 8f6f 	isb	sy
 8001d1a:	e772      	b.n	8001c02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d1e:	f000 fa1f 	bl	8002160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d22:	f000 fd4d 	bl	80027c0 <xTaskResumeAll>
 8001d26:	e76c      	b.n	8001c02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d2a:	f000 fa19 	bl	8002160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d2e:	f000 fd47 	bl	80027c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001d32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3738      	adds	r7, #56	@ 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	e000ed04 	.word	0xe000ed04

08001d40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b090      	sub	sp, #64	@ 0x40
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <xQueueGenericSendFromISR+0x3e>
 8001d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <xQueueGenericSendFromISR+0x42>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <xQueueGenericSendFromISR+0x44>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10b      	bne.n	8001da0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d8c:	f383 8811 	msr	BASEPRI, r3
 8001d90:	f3bf 8f6f 	isb	sy
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d103      	bne.n	8001dae <xQueueGenericSendFromISR+0x6e>
 8001da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <xQueueGenericSendFromISR+0x72>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <xQueueGenericSendFromISR+0x74>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10b      	bne.n	8001dd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	623b      	str	r3, [r7, #32]
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001dd0:	f001 ff62 	bl	8003c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001dd4:	f3ef 8211 	mrs	r2, BASEPRI
 8001dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	61fa      	str	r2, [r7, #28]
 8001dea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001dec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <xQueueGenericSendFromISR+0xc2>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d12f      	bne.n	8001e62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e18:	f000 f912 	bl	8002040 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d112      	bne.n	8001e4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e30:	3324      	adds	r3, #36	@ 0x24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 feee 	bl	8002c14 <xTaskRemoveFromEventList>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00e      	beq.n	8001e5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00b      	beq.n	8001e5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e007      	b.n	8001e5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e50:	3301      	adds	r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	b25a      	sxtb	r2, r3
 8001e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001e60:	e001      	b.n	8001e66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001e70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3740      	adds	r7, #64	@ 0x40
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <xQueueReceive+0x32>
	__asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9a:	f383 8811 	msr	BASEPRI, r3
 8001e9e:	f3bf 8f6f 	isb	sy
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	623b      	str	r3, [r7, #32]
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	e7fd      	b.n	8001eaa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d103      	bne.n	8001ebc <xQueueReceive+0x40>
 8001eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <xQueueReceive+0x44>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <xQueueReceive+0x46>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <xQueueReceive+0x62>
	__asm volatile
 8001ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eca:	f383 8811 	msr	BASEPRI, r3
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	f3bf 8f4f 	dsb	sy
 8001ed6:	61fb      	str	r3, [r7, #28]
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	e7fd      	b.n	8001eda <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ede:	f001 f891 	bl	8003004 <xTaskGetSchedulerState>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <xQueueReceive+0x72>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <xQueueReceive+0x76>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <xQueueReceive+0x78>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <xQueueReceive+0x94>
	__asm volatile
 8001ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001efc:	f383 8811 	msr	BASEPRI, r3
 8001f00:	f3bf 8f6f 	isb	sy
 8001f04:	f3bf 8f4f 	dsb	sy
 8001f08:	61bb      	str	r3, [r7, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	bf00      	nop
 8001f0e:	e7fd      	b.n	8001f0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001f10:	f001 fde2 	bl	8003ad8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01f      	beq.n	8001f60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f24:	f000 f8f6 	bl	8002114 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2a:	1e5a      	subs	r2, r3, #1
 8001f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00f      	beq.n	8001f58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f3a:	3310      	adds	r3, #16
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fe69 	bl	8002c14 <xTaskRemoveFromEventList>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001f48:	4b3c      	ldr	r3, [pc, #240]	@ (800203c <xQueueReceive+0x1c0>)
 8001f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f3bf 8f4f 	dsb	sy
 8001f54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001f58:	f001 fdf0 	bl	8003b3c <vPortExitCritical>
				return pdPASS;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e069      	b.n	8002034 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f66:	f001 fde9 	bl	8003b3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e062      	b.n	8002034 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d106      	bne.n	8001f82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 feaf 	bl	8002cdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f82:	f001 fddb 	bl	8003b3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f86:	f000 fc0d 	bl	80027a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f8a:	f001 fda5 	bl	8003ad8 <vPortEnterCritical>
 8001f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9a:	d103      	bne.n	8001fa4 <xQueueReceive+0x128>
 8001f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb0:	d103      	bne.n	8001fba <xQueueReceive+0x13e>
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fba:	f001 fdbf 	bl	8003b3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fbe:	1d3a      	adds	r2, r7, #4
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fe9e 	bl	8002d08 <xTaskCheckForTimeOut>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d123      	bne.n	800201a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fd4:	f000 f916 	bl	8002204 <prvIsQueueEmpty>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d017      	beq.n	800200e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe0:	3324      	adds	r3, #36	@ 0x24
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fdc2 	bl	8002b70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001fee:	f000 f8b7 	bl	8002160 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001ff2:	f000 fbe5 	bl	80027c0 <xTaskResumeAll>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d189      	bne.n	8001f10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <xQueueReceive+0x1c0>)
 8001ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	e780      	b.n	8001f10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800200e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002010:	f000 f8a6 	bl	8002160 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002014:	f000 fbd4 	bl	80027c0 <xTaskResumeAll>
 8002018:	e77a      	b.n	8001f10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800201a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800201c:	f000 f8a0 	bl	8002160 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002020:	f000 fbce 	bl	80027c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002026:	f000 f8ed 	bl	8002204 <prvIsQueueEmpty>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f43f af6f 	beq.w	8001f10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002032:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002034:	4618      	mov	r0, r3
 8002036:	3730      	adds	r7, #48	@ 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	e000ed04 	.word	0xe000ed04

08002040 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d14d      	bne.n	8002102 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 ffe8 	bl	8003040 <xTaskPriorityDisinherit>
 8002070:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	e043      	b.n	8002102 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d119      	bne.n	80020b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6858      	ldr	r0, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	461a      	mov	r2, r3
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	f003 fa40 	bl	8005510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	441a      	add	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d32b      	bcc.n	8002102 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	e026      	b.n	8002102 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68d8      	ldr	r0, [r3, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	461a      	mov	r2, r3
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	f003 fa26 	bl	8005510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	425b      	negs	r3, r3
 80020ce:	441a      	add	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	425b      	negs	r3, r3
 80020ea:	441a      	add	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d105      	bne.n	8002102 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	3b01      	subs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800210a:	697b      	ldr	r3, [r7, #20]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d018      	beq.n	8002158 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	441a      	add	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d303      	bcc.n	8002148 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68d9      	ldr	r1, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	461a      	mov	r2, r3
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f003 f9dc 	bl	8005510 <memcpy>
	}
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002168:	f001 fcb6 	bl	8003ad8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002172:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002174:	e011      	b.n	800219a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3324      	adds	r3, #36	@ 0x24
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fd46 	bl	8002c14 <xTaskRemoveFromEventList>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800218e:	f000 fe1f 	bl	8002dd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3b01      	subs	r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	dce9      	bgt.n	8002176 <prvUnlockQueue+0x16>
 80021a2:	e000      	b.n	80021a6 <prvUnlockQueue+0x46>
					break;
 80021a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	22ff      	movs	r2, #255	@ 0xff
 80021aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80021ae:	f001 fcc5 	bl	8003b3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80021b2:	f001 fc91 	bl	8003ad8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021be:	e011      	b.n	80021e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d012      	beq.n	80021ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3310      	adds	r3, #16
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fd21 	bl	8002c14 <xTaskRemoveFromEventList>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80021d8:	f000 fdfa 	bl	8002dd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80021dc:	7bbb      	ldrb	r3, [r7, #14]
 80021de:	3b01      	subs	r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	dce9      	bgt.n	80021c0 <prvUnlockQueue+0x60>
 80021ec:	e000      	b.n	80021f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80021ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	22ff      	movs	r2, #255	@ 0xff
 80021f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80021f8:	f001 fca0 	bl	8003b3c <vPortExitCritical>
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800220c:	f001 fc64 	bl	8003ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002218:	2301      	movs	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e001      	b.n	8002222 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002222:	f001 fc8b 	bl	8003b3c <vPortExitCritical>

	return xReturn;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002238:	f001 fc4e 	bl	8003ad8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	429a      	cmp	r2, r3
 8002246:	d102      	bne.n	800224e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002248:	2301      	movs	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e001      	b.n	8002252 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002252:	f001 fc73 	bl	8003b3c <vPortExitCritical>

	return xReturn;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	e014      	b.n	800229a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002270:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <vQueueAddToRegistry+0x50>)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800227c:	490c      	ldr	r1, [pc, #48]	@ (80022b0 <vQueueAddToRegistry+0x50>)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <vQueueAddToRegistry+0x50>)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002292:	e006      	b.n	80022a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3301      	adds	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b07      	cmp	r3, #7
 800229e:	d9e7      	bls.n	8002270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200006f0 	.word	0x200006f0

080022b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80022c4:	f001 fc08 	bl	8003ad8 <vPortEnterCritical>
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022ce:	b25b      	sxtb	r3, r3
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d103      	bne.n	80022de <vQueueWaitForMessageRestricted+0x2a>
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022e4:	b25b      	sxtb	r3, r3
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ea:	d103      	bne.n	80022f4 <vQueueWaitForMessageRestricted+0x40>
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022f4:	f001 fc22 	bl	8003b3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	3324      	adds	r3, #36	@ 0x24
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fc57 	bl	8002bbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800230e:	6978      	ldr	r0, [r7, #20]
 8002310:	f7ff ff26 	bl	8002160 <prvUnlockQueue>
	}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	@ 0x38
 8002320:	af04      	add	r7, sp, #16
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800232a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002334:	f383 8811 	msr	BASEPRI, r3
 8002338:	f3bf 8f6f 	isb	sy
 800233c:	f3bf 8f4f 	dsb	sy
 8002340:	623b      	str	r3, [r7, #32]
}
 8002342:	bf00      	nop
 8002344:	bf00      	nop
 8002346:	e7fd      	b.n	8002344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <xTaskCreateStatic+0x4a>
	__asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	61fb      	str	r3, [r7, #28]
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	e7fd      	b.n	8002362 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002366:	235c      	movs	r3, #92	@ 0x5c
 8002368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b5c      	cmp	r3, #92	@ 0x5c
 800236e:	d00b      	beq.n	8002388 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	61bb      	str	r3, [r7, #24]
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002388:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01e      	beq.n	80023ce <xTaskCreateStatic+0xb2>
 8002390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01b      	beq.n	80023ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800239e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023a8:	2300      	movs	r3, #0
 80023aa:	9303      	str	r3, [sp, #12]
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	9302      	str	r3, [sp, #8]
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68b9      	ldr	r1, [r7, #8]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f850 	bl	8002466 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80023c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023c8:	f000 f8de 	bl	8002588 <prvAddNewTaskToReadyList>
 80023cc:	e001      	b.n	80023d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80023d2:	697b      	ldr	r3, [r7, #20]
	}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3728      	adds	r7, #40	@ 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	@ 0x30
 80023e0:	af04      	add	r7, sp, #16
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	4613      	mov	r3, r2
 80023ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f001 fc93 	bl	8003d1c <pvPortMalloc>
 80023f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00e      	beq.n	800241c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023fe:	205c      	movs	r0, #92	@ 0x5c
 8002400:	f001 fc8c 	bl	8003d1c <pvPortMalloc>
 8002404:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	631a      	str	r2, [r3, #48]	@ 0x30
 8002412:	e005      	b.n	8002420 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	f001 fd4f 	bl	8003eb8 <vPortFree>
 800241a:	e001      	b.n	8002420 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d017      	beq.n	8002456 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	2300      	movs	r3, #0
 8002432:	9303      	str	r3, [sp, #12]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	9302      	str	r3, [sp, #8]
 8002438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f80e 	bl	8002466 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800244a:	69f8      	ldr	r0, [r7, #28]
 800244c:	f000 f89c 	bl	8002588 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002450:	2301      	movs	r3, #1
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	e002      	b.n	800245c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
 800245a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800245c:	69bb      	ldr	r3, [r7, #24]
	}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b088      	sub	sp, #32
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	21a5      	movs	r1, #165	@ 0xa5
 8002480:	f003 f81a 	bl	80054b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002486:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800248e:	3b01      	subs	r3, #1
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f023 0307 	bic.w	r3, r3, #7
 800249c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00b      	beq.n	80024c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	617b      	str	r3, [r7, #20]
}
 80024ba:	bf00      	nop
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01f      	beq.n	8002506 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e012      	b.n	80024f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	7819      	ldrb	r1, [r3, #0]
 80024d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	4413      	add	r3, r2
 80024da:	3334      	adds	r3, #52	@ 0x34
 80024dc:	460a      	mov	r2, r1
 80024de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d9e9      	bls.n	80024cc <prvInitialiseNewTask+0x66>
 80024f8:	e000      	b.n	80024fc <prvInitialiseNewTask+0x96>
			{
				break;
 80024fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002504:	e003      	b.n	800250e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800250e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002510:	2b37      	cmp	r3, #55	@ 0x37
 8002512:	d901      	bls.n	8002518 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002514:	2337      	movs	r3, #55	@ 0x37
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800251c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800251e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002522:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002526:	2200      	movs	r2, #0
 8002528:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	3304      	adds	r3, #4
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f966 	bl	8001800 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	3318      	adds	r3, #24
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f961 	bl	8001800 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002546:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800254e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002552:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002556:	2200      	movs	r2, #0
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800255a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	69b8      	ldr	r0, [r7, #24]
 8002568:	f001 f988 	bl	800387c <pxPortInitialiseStack>
 800256c:	4602      	mov	r2, r0
 800256e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002570:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800257c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800257e:	bf00      	nop
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002590:	f001 faa2 	bl	8003ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002594:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <prvAddNewTaskToReadyList+0xc4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	3301      	adds	r3, #1
 800259a:	4a2c      	ldr	r2, [pc, #176]	@ (800264c <prvAddNewTaskToReadyList+0xc4>)
 800259c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <prvAddNewTaskToReadyList+0xc8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025a6:	4a2a      	ldr	r2, [pc, #168]	@ (8002650 <prvAddNewTaskToReadyList+0xc8>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025ac:	4b27      	ldr	r3, [pc, #156]	@ (800264c <prvAddNewTaskToReadyList+0xc4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d110      	bne.n	80025d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025b4:	f000 fc30 	bl	8002e18 <prvInitialiseTaskLists>
 80025b8:	e00d      	b.n	80025d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025ba:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <prvAddNewTaskToReadyList+0xcc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025c2:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <prvAddNewTaskToReadyList+0xc8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d802      	bhi.n	80025d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002650 <prvAddNewTaskToReadyList+0xc8>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025d6:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <prvAddNewTaskToReadyList+0xd0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3301      	adds	r3, #1
 80025dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002658 <prvAddNewTaskToReadyList+0xd0>)
 80025de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <prvAddNewTaskToReadyList+0xd0>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <prvAddNewTaskToReadyList+0xd4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d903      	bls.n	80025fc <prvAddNewTaskToReadyList+0x74>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	4a18      	ldr	r2, [pc, #96]	@ (800265c <prvAddNewTaskToReadyList+0xd4>)
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4a15      	ldr	r2, [pc, #84]	@ (8002660 <prvAddNewTaskToReadyList+0xd8>)
 800260a:	441a      	add	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f7ff f901 	bl	800181a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002618:	f001 fa90 	bl	8003b3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800261c:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <prvAddNewTaskToReadyList+0xcc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00e      	beq.n	8002642 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <prvAddNewTaskToReadyList+0xc8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	429a      	cmp	r2, r3
 8002630:	d207      	bcs.n	8002642 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <prvAddNewTaskToReadyList+0xdc>)
 8002634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000c04 	.word	0x20000c04
 8002650:	20000730 	.word	0x20000730
 8002654:	20000c10 	.word	0x20000c10
 8002658:	20000c20 	.word	0x20000c20
 800265c:	20000c0c 	.word	0x20000c0c
 8002660:	20000734 	.word	0x20000734
 8002664:	e000ed04 	.word	0xe000ed04

08002668 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d018      	beq.n	80026ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800267a:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <vTaskDelay+0x64>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <vTaskDelay+0x32>
	__asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	60bb      	str	r3, [r7, #8]
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	e7fd      	b.n	8002696 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800269a:	f000 f883 	bl	80027a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800269e:	2100      	movs	r1, #0
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fd3d 	bl	8003120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026a6:	f000 f88b 	bl	80027c0 <xTaskResumeAll>
 80026aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80026b2:	4b07      	ldr	r3, [pc, #28]	@ (80026d0 <vTaskDelay+0x68>)
 80026b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000c2c 	.word	0x20000c2c
 80026d0:	e000ed04 	.word	0xe000ed04

080026d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80026e2:	463a      	mov	r2, r7
 80026e4:	1d39      	adds	r1, r7, #4
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff f834 	bl	8001758 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	9202      	str	r2, [sp, #8]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	2300      	movs	r3, #0
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2300      	movs	r3, #0
 8002700:	460a      	mov	r2, r1
 8002702:	4922      	ldr	r1, [pc, #136]	@ (800278c <vTaskStartScheduler+0xb8>)
 8002704:	4822      	ldr	r0, [pc, #136]	@ (8002790 <vTaskStartScheduler+0xbc>)
 8002706:	f7ff fe09 	bl	800231c <xTaskCreateStatic>
 800270a:	4603      	mov	r3, r0
 800270c:	4a21      	ldr	r2, [pc, #132]	@ (8002794 <vTaskStartScheduler+0xc0>)
 800270e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <vTaskStartScheduler+0xc0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002718:	2301      	movs	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e001      	b.n	8002722 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d102      	bne.n	800272e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002728:	f000 fd4e 	bl	80031c8 <xTimerCreateTimerTask>
 800272c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d116      	bne.n	8002762 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	613b      	str	r3, [r7, #16]
}
 8002746:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <vTaskStartScheduler+0xc4>)
 800274a:	f04f 32ff 	mov.w	r2, #4294967295
 800274e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <vTaskStartScheduler+0xc8>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002756:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <vTaskStartScheduler+0xcc>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800275c:	f001 f918 	bl	8003990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002760:	e00f      	b.n	8002782 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d10b      	bne.n	8002782 <vTaskStartScheduler+0xae>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	60fb      	str	r3, [r7, #12]
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	e7fd      	b.n	800277e <vTaskStartScheduler+0xaa>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	08005550 	.word	0x08005550
 8002790:	08002de9 	.word	0x08002de9
 8002794:	20000c28 	.word	0x20000c28
 8002798:	20000c24 	.word	0x20000c24
 800279c:	20000c10 	.word	0x20000c10
 80027a0:	20000c08 	.word	0x20000c08

080027a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80027a8:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <vTaskSuspendAll+0x18>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	4a03      	ldr	r2, [pc, #12]	@ (80027bc <vTaskSuspendAll+0x18>)
 80027b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20000c2c 	.word	0x20000c2c

080027c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027ce:	4b42      	ldr	r3, [pc, #264]	@ (80028d8 <xTaskResumeAll+0x118>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <xTaskResumeAll+0x2e>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	603b      	str	r3, [r7, #0]
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027ee:	f001 f973 	bl	8003ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80027f2:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <xTaskResumeAll+0x118>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	4a37      	ldr	r2, [pc, #220]	@ (80028d8 <xTaskResumeAll+0x118>)
 80027fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027fc:	4b36      	ldr	r3, [pc, #216]	@ (80028d8 <xTaskResumeAll+0x118>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d162      	bne.n	80028ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002804:	4b35      	ldr	r3, [pc, #212]	@ (80028dc <xTaskResumeAll+0x11c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05e      	beq.n	80028ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800280c:	e02f      	b.n	800286e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <xTaskResumeAll+0x120>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3318      	adds	r3, #24
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff f85a 	bl	80018d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3304      	adds	r3, #4
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f855 	bl	80018d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282e:	4b2d      	ldr	r3, [pc, #180]	@ (80028e4 <xTaskResumeAll+0x124>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d903      	bls.n	800283e <xTaskResumeAll+0x7e>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	4a2a      	ldr	r2, [pc, #168]	@ (80028e4 <xTaskResumeAll+0x124>)
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4a27      	ldr	r2, [pc, #156]	@ (80028e8 <xTaskResumeAll+0x128>)
 800284c:	441a      	add	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	3304      	adds	r3, #4
 8002852:	4619      	mov	r1, r3
 8002854:	4610      	mov	r0, r2
 8002856:	f7fe ffe0 	bl	800181a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <xTaskResumeAll+0x12c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	429a      	cmp	r2, r3
 8002866:	d302      	bcc.n	800286e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002868:	4b21      	ldr	r3, [pc, #132]	@ (80028f0 <xTaskResumeAll+0x130>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <xTaskResumeAll+0x120>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1cb      	bne.n	800280e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800287c:	f000 fba2 	bl	8002fc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002880:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <xTaskResumeAll+0x134>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d010      	beq.n	80028ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800288c:	f000 f858 	bl	8002940 <xTaskIncrementTick>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <xTaskResumeAll+0x130>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f1      	bne.n	800288c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80028a8:	4b12      	ldr	r3, [pc, #72]	@ (80028f4 <xTaskResumeAll+0x134>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028ae:	4b10      	ldr	r3, [pc, #64]	@ (80028f0 <xTaskResumeAll+0x130>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028ba:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <xTaskResumeAll+0x138>)
 80028bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028ca:	f001 f937 	bl	8003b3c <vPortExitCritical>

	return xAlreadyYielded;
 80028ce:	68bb      	ldr	r3, [r7, #8]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000c2c 	.word	0x20000c2c
 80028dc:	20000c04 	.word	0x20000c04
 80028e0:	20000bc4 	.word	0x20000bc4
 80028e4:	20000c0c 	.word	0x20000c0c
 80028e8:	20000734 	.word	0x20000734
 80028ec:	20000730 	.word	0x20000730
 80028f0:	20000c18 	.word	0x20000c18
 80028f4:	20000c14 	.word	0x20000c14
 80028f8:	e000ed04 	.word	0xe000ed04

080028fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002902:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <xTaskGetTickCount+0x1c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002908:	687b      	ldr	r3, [r7, #4]
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000c08 	.word	0x20000c08

0800291c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002922:	f001 f9b9 	bl	8003c98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <xTaskGetTickCountFromISR+0x20>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002930:	683b      	ldr	r3, [r7, #0]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000c08 	.word	0x20000c08

08002940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800294a:	4b4f      	ldr	r3, [pc, #316]	@ (8002a88 <xTaskIncrementTick+0x148>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f040 8090 	bne.w	8002a74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002954:	4b4d      	ldr	r3, [pc, #308]	@ (8002a8c <xTaskIncrementTick+0x14c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800295c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a8c <xTaskIncrementTick+0x14c>)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d121      	bne.n	80029ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002968:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <xTaskIncrementTick+0x150>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <xTaskIncrementTick+0x4a>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	603b      	str	r3, [r7, #0]
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <xTaskIncrementTick+0x46>
 800298a:	4b41      	ldr	r3, [pc, #260]	@ (8002a90 <xTaskIncrementTick+0x150>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	4b40      	ldr	r3, [pc, #256]	@ (8002a94 <xTaskIncrementTick+0x154>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a3e      	ldr	r2, [pc, #248]	@ (8002a90 <xTaskIncrementTick+0x150>)
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	4a3e      	ldr	r2, [pc, #248]	@ (8002a94 <xTaskIncrementTick+0x154>)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b3e      	ldr	r3, [pc, #248]	@ (8002a98 <xTaskIncrementTick+0x158>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3301      	adds	r3, #1
 80029a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002a98 <xTaskIncrementTick+0x158>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	f000 fb0c 	bl	8002fc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029ac:	4b3b      	ldr	r3, [pc, #236]	@ (8002a9c <xTaskIncrementTick+0x15c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d349      	bcc.n	8002a4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b6:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <xTaskIncrementTick+0x150>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c0:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <xTaskIncrementTick+0x15c>)
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	601a      	str	r2, [r3, #0]
					break;
 80029c8:	e03f      	b.n	8002a4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029ca:	4b31      	ldr	r3, [pc, #196]	@ (8002a90 <xTaskIncrementTick+0x150>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d203      	bcs.n	80029ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80029e2:	4a2e      	ldr	r2, [pc, #184]	@ (8002a9c <xTaskIncrementTick+0x15c>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80029e8:	e02f      	b.n	8002a4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe ff70 	bl	80018d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	3318      	adds	r3, #24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe ff67 	bl	80018d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a0a:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <xTaskIncrementTick+0x160>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d903      	bls.n	8002a1a <xTaskIncrementTick+0xda>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <xTaskIncrementTick+0x160>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <xTaskIncrementTick+0x164>)
 8002a28:	441a      	add	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7fe fef2 	bl	800181a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa8 <xTaskIncrementTick+0x168>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3b8      	bcc.n	80029b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002a44:	2301      	movs	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a48:	e7b5      	b.n	80029b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a4a:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <xTaskIncrementTick+0x168>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a50:	4914      	ldr	r1, [pc, #80]	@ (8002aa4 <xTaskIncrementTick+0x164>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d901      	bls.n	8002a66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002a66:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <xTaskIncrementTick+0x16c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	e004      	b.n	8002a7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002a74:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <xTaskIncrementTick+0x170>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <xTaskIncrementTick+0x170>)
 8002a7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002a7e:	697b      	ldr	r3, [r7, #20]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000c2c 	.word	0x20000c2c
 8002a8c:	20000c08 	.word	0x20000c08
 8002a90:	20000bbc 	.word	0x20000bbc
 8002a94:	20000bc0 	.word	0x20000bc0
 8002a98:	20000c1c 	.word	0x20000c1c
 8002a9c:	20000c24 	.word	0x20000c24
 8002aa0:	20000c0c 	.word	0x20000c0c
 8002aa4:	20000734 	.word	0x20000734
 8002aa8:	20000730 	.word	0x20000730
 8002aac:	20000c18 	.word	0x20000c18
 8002ab0:	20000c14 	.word	0x20000c14

08002ab4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002aba:	4b28      	ldr	r3, [pc, #160]	@ (8002b5c <vTaskSwitchContext+0xa8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ac2:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <vTaskSwitchContext+0xac>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ac8:	e042      	b.n	8002b50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002aca:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <vTaskSwitchContext+0xac>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <vTaskSwitchContext+0xb0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e011      	b.n	8002afc <vTaskSwitchContext+0x48>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <vTaskSwitchContext+0x42>
	__asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <vTaskSwitchContext+0x3e>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3b01      	subs	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	491a      	ldr	r1, [pc, #104]	@ (8002b68 <vTaskSwitchContext+0xb4>)
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0e3      	beq.n	8002ad8 <vTaskSwitchContext+0x24>
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4a13      	ldr	r2, [pc, #76]	@ (8002b68 <vTaskSwitchContext+0xb4>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3308      	adds	r3, #8
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d104      	bne.n	8002b40 <vTaskSwitchContext+0x8c>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a09      	ldr	r2, [pc, #36]	@ (8002b6c <vTaskSwitchContext+0xb8>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	4a06      	ldr	r2, [pc, #24]	@ (8002b64 <vTaskSwitchContext+0xb0>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	20000c2c 	.word	0x20000c2c
 8002b60:	20000c18 	.word	0x20000c18
 8002b64:	20000c0c 	.word	0x20000c0c
 8002b68:	20000734 	.word	0x20000734
 8002b6c:	20000730 	.word	0x20000730

08002b70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10b      	bne.n	8002b98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	60fb      	str	r3, [r7, #12]
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b98:	4b07      	ldr	r3, [pc, #28]	@ (8002bb8 <vTaskPlaceOnEventList+0x48>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3318      	adds	r3, #24
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe fe5e 	bl	8001862 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	6838      	ldr	r0, [r7, #0]
 8002baa:	f000 fab9 	bl	8003120 <prvAddCurrentTaskToDelayedList>
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000730 	.word	0x20000730

08002bbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	617b      	str	r3, [r7, #20]
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	e7fd      	b.n	8002be2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002be6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c10 <vTaskPlaceOnEventListRestricted+0x54>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3318      	adds	r3, #24
 8002bec:	4619      	mov	r1, r3
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7fe fe13 	bl	800181a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68b8      	ldr	r0, [r7, #8]
 8002c04:	f000 fa8c 	bl	8003120 <prvAddCurrentTaskToDelayedList>
	}
 8002c08:	bf00      	nop
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000730 	.word	0x20000730

08002c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10b      	bne.n	8002c42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	60fb      	str	r3, [r7, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	e7fd      	b.n	8002c3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3318      	adds	r3, #24
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fe44 	bl	80018d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <xTaskRemoveFromEventList+0xb0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d11d      	bne.n	8002c90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	3304      	adds	r3, #4
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fe3b 	bl	80018d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c62:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <xTaskRemoveFromEventList+0xb4>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d903      	bls.n	8002c72 <xTaskRemoveFromEventList+0x5e>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	4a16      	ldr	r2, [pc, #88]	@ (8002cc8 <xTaskRemoveFromEventList+0xb4>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <xTaskRemoveFromEventList+0xb8>)
 8002c80:	441a      	add	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	3304      	adds	r3, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f7fe fdc6 	bl	800181a <vListInsertEnd>
 8002c8e:	e005      	b.n	8002c9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	3318      	adds	r3, #24
 8002c94:	4619      	mov	r1, r3
 8002c96:	480e      	ldr	r0, [pc, #56]	@ (8002cd0 <xTaskRemoveFromEventList+0xbc>)
 8002c98:	f7fe fdbf 	bl	800181a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <xTaskRemoveFromEventList+0xc0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d905      	bls.n	8002cb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002caa:	2301      	movs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002cae:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <xTaskRemoveFromEventList+0xc4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e001      	b.n	8002cba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002cba:	697b      	ldr	r3, [r7, #20]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000c2c 	.word	0x20000c2c
 8002cc8:	20000c0c 	.word	0x20000c0c
 8002ccc:	20000734 	.word	0x20000734
 8002cd0:	20000bc4 	.word	0x20000bc4
 8002cd4:	20000730 	.word	0x20000730
 8002cd8:	20000c18 	.word	0x20000c18

08002cdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ce4:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <vTaskInternalSetTimeOutState+0x24>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002cec:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <vTaskInternalSetTimeOutState+0x28>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	605a      	str	r2, [r3, #4]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	20000c1c 	.word	0x20000c1c
 8002d04:	20000c08 	.word	0x20000c08

08002d08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	613b      	str	r3, [r7, #16]
}
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10b      	bne.n	8002d4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	60fb      	str	r3, [r7, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	e7fd      	b.n	8002d4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002d4e:	f000 fec3 	bl	8003ad8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <xTaskCheckForTimeOut+0xc0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d102      	bne.n	8002d72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	e023      	b.n	8002dba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <xTaskCheckForTimeOut+0xc4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d007      	beq.n	8002d8e <xTaskCheckForTimeOut+0x86>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e015      	b.n	8002dba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d20b      	bcs.n	8002db0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	1ad2      	subs	r2, r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ff99 	bl	8002cdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	e004      	b.n	8002dba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002dba:	f000 febf 	bl	8003b3c <vPortExitCritical>

	return xReturn;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000c08 	.word	0x20000c08
 8002dcc:	20000c1c 	.word	0x20000c1c

08002dd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <vTaskMissedYield+0x14>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	20000c18 	.word	0x20000c18

08002de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002df0:	f000 f852 	bl	8002e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <prvIdleTask+0x28>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d9f9      	bls.n	8002df0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <prvIdleTask+0x2c>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e0c:	e7f0      	b.n	8002df0 <prvIdleTask+0x8>
 8002e0e:	bf00      	nop
 8002e10:	20000734 	.word	0x20000734
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e1e:	2300      	movs	r3, #0
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	e00c      	b.n	8002e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4a12      	ldr	r2, [pc, #72]	@ (8002e78 <prvInitialiseTaskLists+0x60>)
 8002e30:	4413      	add	r3, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fcc4 	bl	80017c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b37      	cmp	r3, #55	@ 0x37
 8002e42:	d9ef      	bls.n	8002e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002e44:	480d      	ldr	r0, [pc, #52]	@ (8002e7c <prvInitialiseTaskLists+0x64>)
 8002e46:	f7fe fcbb 	bl	80017c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002e4a:	480d      	ldr	r0, [pc, #52]	@ (8002e80 <prvInitialiseTaskLists+0x68>)
 8002e4c:	f7fe fcb8 	bl	80017c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002e50:	480c      	ldr	r0, [pc, #48]	@ (8002e84 <prvInitialiseTaskLists+0x6c>)
 8002e52:	f7fe fcb5 	bl	80017c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002e56:	480c      	ldr	r0, [pc, #48]	@ (8002e88 <prvInitialiseTaskLists+0x70>)
 8002e58:	f7fe fcb2 	bl	80017c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002e5c:	480b      	ldr	r0, [pc, #44]	@ (8002e8c <prvInitialiseTaskLists+0x74>)
 8002e5e:	f7fe fcaf 	bl	80017c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002e62:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <prvInitialiseTaskLists+0x78>)
 8002e64:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <prvInitialiseTaskLists+0x64>)
 8002e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <prvInitialiseTaskLists+0x7c>)
 8002e6a:	4a05      	ldr	r2, [pc, #20]	@ (8002e80 <prvInitialiseTaskLists+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000734 	.word	0x20000734
 8002e7c:	20000b94 	.word	0x20000b94
 8002e80:	20000ba8 	.word	0x20000ba8
 8002e84:	20000bc4 	.word	0x20000bc4
 8002e88:	20000bd8 	.word	0x20000bd8
 8002e8c:	20000bf0 	.word	0x20000bf0
 8002e90:	20000bbc 	.word	0x20000bbc
 8002e94:	20000bc0 	.word	0x20000bc0

08002e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e9e:	e019      	b.n	8002ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ea0:	f000 fe1a 	bl	8003ad8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea4:	4b10      	ldr	r3, [pc, #64]	@ (8002ee8 <prvCheckTasksWaitingTermination+0x50>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fd0f 	bl	80018d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <prvCheckTasksWaitingTermination+0x54>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <prvCheckTasksWaitingTermination+0x54>)
 8002ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <prvCheckTasksWaitingTermination+0x58>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <prvCheckTasksWaitingTermination+0x58>)
 8002ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002eca:	f000 fe37 	bl	8003b3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f848 	bl	8002f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ed4:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <prvCheckTasksWaitingTermination+0x58>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e1      	bne.n	8002ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000bd8 	.word	0x20000bd8
 8002eec:	20000c04 	.word	0x20000c04
 8002ef0:	20000bec 	.word	0x20000bec

08002ef4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002f00:	e005      	b.n	8002f0e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3301      	adds	r3, #1
 8002f06:	607b      	str	r3, [r7, #4]
			ulCount++;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2ba5      	cmp	r3, #165	@ 0xa5
 8002f14:	d0f5      	beq.n	8002f02 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	b29b      	uxth	r3, r3
	}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <uxTaskGetStackHighWaterMark+0x14>
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <uxTaskGetStackHighWaterMark+0x34>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	e000      	b.n	8002f42 <uxTaskGetStackHighWaterMark+0x16>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8002f4a:	6938      	ldr	r0, [r7, #16]
 8002f4c:	f7ff ffd2 	bl	8002ef4 <prvTaskCheckFreeStackSpace>
 8002f50:	4603      	mov	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8002f54:	68fb      	ldr	r3, [r7, #12]
	}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	20000730 	.word	0x20000730

08002f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 ff9c 	bl	8003eb8 <vPortFree>
				vPortFree( pxTCB );
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 ff99 	bl	8003eb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f86:	e019      	b.n	8002fbc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d103      	bne.n	8002f9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 ff90 	bl	8003eb8 <vPortFree>
	}
 8002f98:	e010      	b.n	8002fbc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00b      	beq.n	8002fbc <prvDeleteTCB+0x58>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <prvDeleteTCB+0x54>
	}
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fca:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <prvResetNextTaskUnblockTime+0x38>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <prvResetNextTaskUnblockTime+0x3c>)
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002fdc:	e008      	b.n	8002ff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fde:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <prvResetNextTaskUnblockTime+0x38>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a04      	ldr	r2, [pc, #16]	@ (8003000 <prvResetNextTaskUnblockTime+0x3c>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	20000bbc 	.word	0x20000bbc
 8003000:	20000c24 	.word	0x20000c24

08003004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800300a:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <xTaskGetSchedulerState+0x34>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003012:	2301      	movs	r3, #1
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	e008      	b.n	800302a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <xTaskGetSchedulerState+0x38>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d102      	bne.n	8003026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003020:	2302      	movs	r3, #2
 8003022:	607b      	str	r3, [r7, #4]
 8003024:	e001      	b.n	800302a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800302a:	687b      	ldr	r3, [r7, #4]
	}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	20000c10 	.word	0x20000c10
 800303c:	20000c2c 	.word	0x20000c2c

08003040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d058      	beq.n	8003108 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003056:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <xTaskPriorityDisinherit+0xd4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d00b      	beq.n	8003078 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	60fb      	str	r3, [r7, #12]
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	60bb      	str	r3, [r7, #8]
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d02c      	beq.n	8003108 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d128      	bne.n	8003108 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	3304      	adds	r3, #4
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fc0a 	bl	80018d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <xTaskPriorityDisinherit+0xd8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d903      	bls.n	80030e8 <xTaskPriorityDisinherit+0xa8>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003118 <xTaskPriorityDisinherit+0xd8>)
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a09      	ldr	r2, [pc, #36]	@ (800311c <xTaskPriorityDisinherit+0xdc>)
 80030f6:	441a      	add	r2, r3
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fe fb8b 	bl	800181a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003108:	697b      	ldr	r3, [r7, #20]
	}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000730 	.word	0x20000730
 8003118:	20000c0c 	.word	0x20000c0c
 800311c:	20000734 	.word	0x20000734

08003120 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800312a:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003130:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3304      	adds	r3, #4
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe fbcc 	bl	80018d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d10a      	bne.n	800315a <prvAddCurrentTaskToDelayedList+0x3a>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800314a:	4b1a      	ldr	r3, [pc, #104]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3304      	adds	r3, #4
 8003150:	4619      	mov	r1, r3
 8003152:	4819      	ldr	r0, [pc, #100]	@ (80031b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003154:	f7fe fb61 	bl	800181a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003158:	e026      	b.n	80031a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003162:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	429a      	cmp	r2, r3
 8003170:	d209      	bcs.n	8003186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3304      	adds	r3, #4
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fe fb6f 	bl	8001862 <vListInsert>
}
 8003184:	e010      	b.n	80031a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b0a      	ldr	r3, [pc, #40]	@ (80031b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7fe fb65 	bl	8001862 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d202      	bcs.n	80031a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80031a2:	4a08      	ldr	r2, [pc, #32]	@ (80031c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000c08 	.word	0x20000c08
 80031b4:	20000730 	.word	0x20000730
 80031b8:	20000bf0 	.word	0x20000bf0
 80031bc:	20000bc0 	.word	0x20000bc0
 80031c0:	20000bbc 	.word	0x20000bbc
 80031c4:	20000c24 	.word	0x20000c24

080031c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80031d2:	f000 fb13 	bl	80037fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80031d6:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <xTimerCreateTimerTask+0x84>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d021      	beq.n	8003222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80031e6:	1d3a      	adds	r2, r7, #4
 80031e8:	f107 0108 	add.w	r1, r7, #8
 80031ec:	f107 030c 	add.w	r3, r7, #12
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fe facb 	bl	800178c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	9202      	str	r2, [sp, #8]
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2302      	movs	r3, #2
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	460a      	mov	r2, r1
 8003208:	4911      	ldr	r1, [pc, #68]	@ (8003250 <xTimerCreateTimerTask+0x88>)
 800320a:	4812      	ldr	r0, [pc, #72]	@ (8003254 <xTimerCreateTimerTask+0x8c>)
 800320c:	f7ff f886 	bl	800231c <xTaskCreateStatic>
 8003210:	4603      	mov	r3, r0
 8003212:	4a11      	ldr	r2, [pc, #68]	@ (8003258 <xTimerCreateTimerTask+0x90>)
 8003214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <xTimerCreateTimerTask+0x90>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800321e:	2301      	movs	r3, #1
 8003220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	613b      	str	r3, [r7, #16]
}
 800323a:	bf00      	nop
 800323c:	bf00      	nop
 800323e:	e7fd      	b.n	800323c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003240:	697b      	ldr	r3, [r7, #20]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000c60 	.word	0x20000c60
 8003250:	08005558 	.word	0x08005558
 8003254:	08003395 	.word	0x08003395
 8003258:	20000c64 	.word	0x20000c64

0800325c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <xTimerGenericCommand+0x30>
	__asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	623b      	str	r3, [r7, #32]
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <xTimerGenericCommand+0x98>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d02a      	beq.n	80032ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	dc18      	bgt.n	80032d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80032a6:	f7ff fead 	bl	8003004 <xTaskGetSchedulerState>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d109      	bne.n	80032c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80032b0:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <xTimerGenericCommand+0x98>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	f107 0110 	add.w	r1, r7, #16
 80032b8:	2300      	movs	r3, #0
 80032ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032bc:	f7fe fc3e 	bl	8001b3c <xQueueGenericSend>
 80032c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80032c2:	e012      	b.n	80032ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <xTimerGenericCommand+0x98>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	f107 0110 	add.w	r1, r7, #16
 80032cc:	2300      	movs	r3, #0
 80032ce:	2200      	movs	r2, #0
 80032d0:	f7fe fc34 	bl	8001b3c <xQueueGenericSend>
 80032d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80032d6:	e008      	b.n	80032ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <xTimerGenericCommand+0x98>)
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	f107 0110 	add.w	r1, r7, #16
 80032e0:	2300      	movs	r3, #0
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	f7fe fd2c 	bl	8001d40 <xQueueGenericSendFromISR>
 80032e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3728      	adds	r7, #40	@ 0x28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000c60 	.word	0x20000c60

080032f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003302:	4b23      	ldr	r3, [pc, #140]	@ (8003390 <prvProcessExpiredTimer+0x98>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3304      	adds	r3, #4
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fadf 	bl	80018d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d023      	beq.n	800336c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	18d1      	adds	r1, r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	6978      	ldr	r0, [r7, #20]
 8003332:	f000 f8d5 	bl	80034e0 <prvInsertTimerInActiveList>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800333c:	2300      	movs	r3, #0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	2100      	movs	r1, #0
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f7ff ff88 	bl	800325c <xTimerGenericCommand>
 800334c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	60fb      	str	r3, [r7, #12]
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003372:	f023 0301 	bic.w	r3, r3, #1
 8003376:	b2da      	uxtb	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	4798      	blx	r3
}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000c58 	.word	0x20000c58

08003394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800339c:	f107 0308 	add.w	r3, r7, #8
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 f859 	bl	8003458 <prvGetNextExpireTime>
 80033a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4619      	mov	r1, r3
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f805 	bl	80033bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80033b2:	f000 f8d7 	bl	8003564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80033b6:	bf00      	nop
 80033b8:	e7f0      	b.n	800339c <prvTimerTask+0x8>
	...

080033bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80033c6:	f7ff f9ed 	bl	80027a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f866 	bl	80034a0 <prvSampleTimeNow>
 80033d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d130      	bne.n	800343e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <prvProcessTimerOrBlockTask+0x3c>
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d806      	bhi.n	80033f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80033ea:	f7ff f9e9 	bl	80027c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80033ee:	68f9      	ldr	r1, [r7, #12]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff81 	bl	80032f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80033f6:	e024      	b.n	8003442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80033fe:	4b13      	ldr	r3, [pc, #76]	@ (800344c <prvProcessTimerOrBlockTask+0x90>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <prvProcessTimerOrBlockTask+0x50>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <prvProcessTimerOrBlockTask+0x52>
 800340c:	2300      	movs	r3, #0
 800340e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003410:	4b0f      	ldr	r3, [pc, #60]	@ (8003450 <prvProcessTimerOrBlockTask+0x94>)
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	f7fe ff49 	bl	80022b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003422:	f7ff f9cd 	bl	80027c0 <xTaskResumeAll>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10a      	bne.n	8003442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800342c:	4b09      	ldr	r3, [pc, #36]	@ (8003454 <prvProcessTimerOrBlockTask+0x98>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
}
 800343c:	e001      	b.n	8003442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800343e:	f7ff f9bf 	bl	80027c0 <xTaskResumeAll>
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000c5c 	.word	0x20000c5c
 8003450:	20000c60 	.word	0x20000c60
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003460:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <prvGetNextExpireTime+0x44>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <prvGetNextExpireTime+0x16>
 800346a:	2201      	movs	r2, #1
 800346c:	e000      	b.n	8003470 <prvGetNextExpireTime+0x18>
 800346e:	2200      	movs	r2, #0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800347c:	4b07      	ldr	r3, [pc, #28]	@ (800349c <prvGetNextExpireTime+0x44>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e001      	b.n	800348c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000c58 	.word	0x20000c58

080034a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80034a8:	f7ff fa28 	bl	80028fc <xTaskGetTickCount>
 80034ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80034ae:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <prvSampleTimeNow+0x3c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d205      	bcs.n	80034c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80034b8:	f000 f93a 	bl	8003730 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e002      	b.n	80034ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80034ca:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <prvSampleTimeNow+0x3c>)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000c68 	.word	0x20000c68

080034e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	429a      	cmp	r2, r3
 8003504:	d812      	bhi.n	800352c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	1ad2      	subs	r2, r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e01b      	b.n	8003552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <prvInsertTimerInActiveList+0x7c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3304      	adds	r3, #4
 8003522:	4619      	mov	r1, r3
 8003524:	4610      	mov	r0, r2
 8003526:	f7fe f99c 	bl	8001862 <vListInsert>
 800352a:	e012      	b.n	8003552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d206      	bcs.n	8003542 <prvInsertTimerInActiveList+0x62>
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	e007      	b.n	8003552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003542:	4b07      	ldr	r3, [pc, #28]	@ (8003560 <prvInsertTimerInActiveList+0x80>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3304      	adds	r3, #4
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7fe f988 	bl	8001862 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003552:	697b      	ldr	r3, [r7, #20]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000c5c 	.word	0x20000c5c
 8003560:	20000c58 	.word	0x20000c58

08003564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	@ 0x38
 8003568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800356a:	e0ce      	b.n	800370a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da19      	bge.n	80035a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003572:	1d3b      	adds	r3, r7, #4
 8003574:	3304      	adds	r3, #4
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61fb      	str	r3, [r7, #28]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359c:	6850      	ldr	r0, [r2, #4]
 800359e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f2c0 80ae 	blt.w	800370a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	3304      	adds	r3, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe f988 	bl	80018d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035c4:	463b      	mov	r3, r7
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ff6a 	bl	80034a0 <prvSampleTimeNow>
 80035cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b09      	cmp	r3, #9
 80035d2:	f200 8097 	bhi.w	8003704 <prvProcessReceivedCommands+0x1a0>
 80035d6:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <prvProcessReceivedCommands+0x78>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003605 	.word	0x08003605
 80035e0:	08003605 	.word	0x08003605
 80035e4:	08003605 	.word	0x08003605
 80035e8:	0800367b 	.word	0x0800367b
 80035ec:	0800368f 	.word	0x0800368f
 80035f0:	080036db 	.word	0x080036db
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003605 	.word	0x08003605
 80035fc:	0800367b 	.word	0x0800367b
 8003600:	0800368f 	.word	0x0800368f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	b2da      	uxtb	r2, r3
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	18d1      	adds	r1, r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003624:	f7ff ff5c 	bl	80034e0 <prvInsertTimerInActiveList>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d06c      	beq.n	8003708 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003634:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d061      	beq.n	8003708 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	441a      	add	r2, r3
 800364c:	2300      	movs	r3, #0
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	2100      	movs	r1, #0
 8003654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003656:	f7ff fe01 	bl	800325c <xTimerGenericCommand>
 800365a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d152      	bne.n	8003708 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61bb      	str	r3, [r7, #24]
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	e7fd      	b.n	8003676 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800367a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800368c:	e03d      	b.n	800370a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800368e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	b2da      	uxtb	r2, r3
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	617b      	str	r3, [r7, #20]
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	18d1      	adds	r1, r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036d4:	f7ff ff04 	bl	80034e0 <prvInsertTimerInActiveList>
					break;
 80036d8:	e017      	b.n	800370a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d103      	bne.n	80036f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80036e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ea:	f000 fbe5 	bl	8003eb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80036ee:	e00c      	b.n	800370a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003702:	e002      	b.n	800370a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <prvProcessReceivedCommands+0x1a6>
					break;
 8003708:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <prvProcessReceivedCommands+0x1c8>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1d39      	adds	r1, r7, #4
 8003710:	2200      	movs	r2, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe fbb2 	bl	8001e7c <xQueueReceive>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	f47f af26 	bne.w	800356c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3730      	adds	r7, #48	@ 0x30
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000c60 	.word	0x20000c60

08003730 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003736:	e049      	b.n	80037cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003738:	4b2e      	ldr	r3, [pc, #184]	@ (80037f4 <prvSwitchTimerLists+0xc4>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003742:	4b2c      	ldr	r3, [pc, #176]	@ (80037f4 <prvSwitchTimerLists+0xc4>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3304      	adds	r3, #4
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe f8bf 	bl	80018d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02f      	beq.n	80037cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	d90e      	bls.n	800379c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <prvSwitchTimerLists+0xc4>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f7fe f864 	bl	8001862 <vListInsert>
 800379a:	e017      	b.n	80037cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	2100      	movs	r1, #0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff fd58 	bl	800325c <xTimerGenericCommand>
 80037ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	603b      	str	r3, [r7, #0]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037cc:	4b09      	ldr	r3, [pc, #36]	@ (80037f4 <prvSwitchTimerLists+0xc4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1b0      	bne.n	8003738 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <prvSwitchTimerLists+0xc4>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <prvSwitchTimerLists+0xc8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <prvSwitchTimerLists+0xc4>)
 80037e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <prvSwitchTimerLists+0xc8>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	6013      	str	r3, [r2, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000c58 	.word	0x20000c58
 80037f8:	20000c5c 	.word	0x20000c5c

080037fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003802:	f000 f969 	bl	8003ad8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003806:	4b15      	ldr	r3, [pc, #84]	@ (800385c <prvCheckForValidListAndQueue+0x60>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d120      	bne.n	8003850 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800380e:	4814      	ldr	r0, [pc, #80]	@ (8003860 <prvCheckForValidListAndQueue+0x64>)
 8003810:	f7fd ffd6 	bl	80017c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003814:	4813      	ldr	r0, [pc, #76]	@ (8003864 <prvCheckForValidListAndQueue+0x68>)
 8003816:	f7fd ffd3 	bl	80017c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800381a:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <prvCheckForValidListAndQueue+0x6c>)
 800381c:	4a10      	ldr	r2, [pc, #64]	@ (8003860 <prvCheckForValidListAndQueue+0x64>)
 800381e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003820:	4b12      	ldr	r3, [pc, #72]	@ (800386c <prvCheckForValidListAndQueue+0x70>)
 8003822:	4a10      	ldr	r2, [pc, #64]	@ (8003864 <prvCheckForValidListAndQueue+0x68>)
 8003824:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <prvCheckForValidListAndQueue+0x74>)
 800382c:	4a11      	ldr	r2, [pc, #68]	@ (8003874 <prvCheckForValidListAndQueue+0x78>)
 800382e:	2110      	movs	r1, #16
 8003830:	200a      	movs	r0, #10
 8003832:	f7fe f8e3 	bl	80019fc <xQueueGenericCreateStatic>
 8003836:	4603      	mov	r3, r0
 8003838:	4a08      	ldr	r2, [pc, #32]	@ (800385c <prvCheckForValidListAndQueue+0x60>)
 800383a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800383c:	4b07      	ldr	r3, [pc, #28]	@ (800385c <prvCheckForValidListAndQueue+0x60>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003844:	4b05      	ldr	r3, [pc, #20]	@ (800385c <prvCheckForValidListAndQueue+0x60>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	490b      	ldr	r1, [pc, #44]	@ (8003878 <prvCheckForValidListAndQueue+0x7c>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fd08 	bl	8002260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003850:	f000 f974 	bl	8003b3c <vPortExitCritical>
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000c60 	.word	0x20000c60
 8003860:	20000c30 	.word	0x20000c30
 8003864:	20000c44 	.word	0x20000c44
 8003868:	20000c58 	.word	0x20000c58
 800386c:	20000c5c 	.word	0x20000c5c
 8003870:	20000d0c 	.word	0x20000d0c
 8003874:	20000c6c 	.word	0x20000c6c
 8003878:	08005560 	.word	0x08005560

0800387c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3b04      	subs	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3b04      	subs	r3, #4
 800389a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f023 0201 	bic.w	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3b04      	subs	r3, #4
 80038aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038ac:	4a0c      	ldr	r2, [pc, #48]	@ (80038e0 <pxPortInitialiseStack+0x64>)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3b14      	subs	r3, #20
 80038b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3b04      	subs	r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f06f 0202 	mvn.w	r2, #2
 80038ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3b20      	subs	r3, #32
 80038d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038d2:	68fb      	ldr	r3, [r7, #12]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	080038e5 	.word	0x080038e5

080038e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038ee:	4b13      	ldr	r3, [pc, #76]	@ (800393c <prvTaskExitError+0x58>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d00b      	beq.n	8003910 <prvTaskExitError+0x2c>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	60fb      	str	r3, [r7, #12]
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <prvTaskExitError+0x28>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	60bb      	str	r3, [r7, #8]
}
 8003922:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003924:	bf00      	nop
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0fc      	beq.n	8003926 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003940:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <pxCurrentTCBConst2>)
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	6808      	ldr	r0, [r1, #0]
 8003946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394a:	f380 8809 	msr	PSP, r0
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8811 	msr	BASEPRI, r0
 800395a:	4770      	bx	lr
 800395c:	f3af 8000 	nop.w

08003960 <pxCurrentTCBConst2>:
 8003960:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop

08003968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003968:	4808      	ldr	r0, [pc, #32]	@ (800398c <prvPortStartFirstTask+0x24>)
 800396a:	6800      	ldr	r0, [r0, #0]
 800396c:	6800      	ldr	r0, [r0, #0]
 800396e:	f380 8808 	msr	MSP, r0
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	f380 8814 	msr	CONTROL, r0
 800397a:	b662      	cpsie	i
 800397c:	b661      	cpsie	f
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	df00      	svc	0
 8003988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800398a:	bf00      	nop
 800398c:	e000ed08 	.word	0xe000ed08

08003990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003996:	4b47      	ldr	r3, [pc, #284]	@ (8003ab4 <xPortStartScheduler+0x124>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a47      	ldr	r2, [pc, #284]	@ (8003ab8 <xPortStartScheduler+0x128>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d10b      	bne.n	80039b8 <xPortStartScheduler+0x28>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	613b      	str	r3, [r7, #16]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039b8:	4b3e      	ldr	r3, [pc, #248]	@ (8003ab4 <xPortStartScheduler+0x124>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3f      	ldr	r2, [pc, #252]	@ (8003abc <xPortStartScheduler+0x12c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10b      	bne.n	80039da <xPortStartScheduler+0x4a>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	60fb      	str	r3, [r7, #12]
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	e7fd      	b.n	80039d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039da:	4b39      	ldr	r3, [pc, #228]	@ (8003ac0 <xPortStartScheduler+0x130>)
 80039dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	22ff      	movs	r2, #255	@ 0xff
 80039ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b31      	ldr	r3, [pc, #196]	@ (8003ac4 <xPortStartScheduler+0x134>)
 8003a00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a02:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a08:	e009      	b.n	8003a1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a26:	2b80      	cmp	r3, #128	@ 0x80
 8003a28:	d0ef      	beq.n	8003a0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a2a:	4b27      	ldr	r3, [pc, #156]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d00b      	beq.n	8003a4e <xPortStartScheduler+0xbe>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60bb      	str	r3, [r7, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	021b      	lsls	r3, r3, #8
 8003a54:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a60:	4a19      	ldr	r2, [pc, #100]	@ (8003ac8 <xPortStartScheduler+0x138>)
 8003a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a6c:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <xPortStartScheduler+0x13c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a16      	ldr	r2, [pc, #88]	@ (8003acc <xPortStartScheduler+0x13c>)
 8003a72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <xPortStartScheduler+0x13c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <xPortStartScheduler+0x13c>)
 8003a7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a84:	f000 f8da 	bl	8003c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a88:	4b11      	ldr	r3, [pc, #68]	@ (8003ad0 <xPortStartScheduler+0x140>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a8e:	f000 f8f9 	bl	8003c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a92:	4b10      	ldr	r3, [pc, #64]	@ (8003ad4 <xPortStartScheduler+0x144>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad4 <xPortStartScheduler+0x144>)
 8003a98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003a9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a9e:	f7ff ff63 	bl	8003968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003aa2:	f7ff f807 	bl	8002ab4 <vTaskSwitchContext>
	prvTaskExitError();
 8003aa6:	f7ff ff1d 	bl	80038e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	e000ed00 	.word	0xe000ed00
 8003ab8:	410fc271 	.word	0x410fc271
 8003abc:	410fc270 	.word	0x410fc270
 8003ac0:	e000e400 	.word	0xe000e400
 8003ac4:	20000d5c 	.word	0x20000d5c
 8003ac8:	20000d60 	.word	0x20000d60
 8003acc:	e000ed20 	.word	0xe000ed20
 8003ad0:	2000000c 	.word	0x2000000c
 8003ad4:	e000ef34 	.word	0xe000ef34

08003ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	607b      	str	r3, [r7, #4]
}
 8003af0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <vPortEnterCritical+0x5c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a0e      	ldr	r2, [pc, #56]	@ (8003b34 <vPortEnterCritical+0x5c>)
 8003afa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003afc:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <vPortEnterCritical+0x5c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d110      	bne.n	8003b26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <vPortEnterCritical+0x60>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <vPortEnterCritical+0x4e>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	603b      	str	r3, [r7, #0]
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <vPortEnterCritical+0x4a>
	}
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <vPortExitCritical+0x50>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10b      	bne.n	8003b62 <vPortExitCritical+0x26>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	607b      	str	r3, [r7, #4]
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	e7fd      	b.n	8003b5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <vPortExitCritical+0x50>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	4a08      	ldr	r2, [pc, #32]	@ (8003b8c <vPortExitCritical+0x50>)
 8003b6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <vPortExitCritical+0x50>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <vPortExitCritical+0x44>
 8003b74:	2300      	movs	r3, #0
 8003b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	f383 8811 	msr	BASEPRI, r3
}
 8003b7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	2000000c 	.word	0x2000000c

08003b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b90:	f3ef 8009 	mrs	r0, PSP
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <pxCurrentTCBConst>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	f01e 0f10 	tst.w	lr, #16
 8003ba0:	bf08      	it	eq
 8003ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003baa:	6010      	str	r0, [r2, #0]
 8003bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003bb4:	f380 8811 	msr	BASEPRI, r0
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f7fe ff78 	bl	8002ab4 <vTaskSwitchContext>
 8003bc4:	f04f 0000 	mov.w	r0, #0
 8003bc8:	f380 8811 	msr	BASEPRI, r0
 8003bcc:	bc09      	pop	{r0, r3}
 8003bce:	6819      	ldr	r1, [r3, #0]
 8003bd0:	6808      	ldr	r0, [r1, #0]
 8003bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd6:	f01e 0f10 	tst.w	lr, #16
 8003bda:	bf08      	it	eq
 8003bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003be0:	f380 8809 	msr	PSP, r0
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	f3af 8000 	nop.w

08003bf0 <pxCurrentTCBConst>:
 8003bf0:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop

08003bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	607b      	str	r3, [r7, #4]
}
 8003c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c12:	f7fe fe95 	bl	8002940 <xTaskIncrementTick>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <xPortSysTickHandler+0x40>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	2300      	movs	r3, #0
 8003c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f383 8811 	msr	BASEPRI, r3
}
 8003c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <vPortSetupTimerInterrupt+0x34>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c46:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <vPortSetupTimerInterrupt+0x38>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c78 <vPortSetupTimerInterrupt+0x3c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <vPortSetupTimerInterrupt+0x40>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <vPortSetupTimerInterrupt+0x44>)
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c5e:	4b04      	ldr	r3, [pc, #16]	@ (8003c70 <vPortSetupTimerInterrupt+0x34>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010
 8003c74:	e000e018 	.word	0xe000e018
 8003c78:	20000000 	.word	0x20000000
 8003c7c:	10624dd3 	.word	0x10624dd3
 8003c80:	e000e014 	.word	0xe000e014

08003c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003c94 <vPortEnableVFP+0x10>
 8003c88:	6801      	ldr	r1, [r0, #0]
 8003c8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003c8e:	6001      	str	r1, [r0, #0]
 8003c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c92:	bf00      	nop
 8003c94:	e000ed88 	.word	0xe000ed88

08003c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c9e:	f3ef 8305 	mrs	r3, IPSR
 8003ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d915      	bls.n	8003cd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003caa:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <vPortValidateInterruptPriority+0x74>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003cb4:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <vPortValidateInterruptPriority+0x78>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	7afa      	ldrb	r2, [r7, #11]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d20b      	bcs.n	8003cd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	607b      	str	r3, [r7, #4]
}
 8003cd0:	bf00      	nop
 8003cd2:	bf00      	nop
 8003cd4:	e7fd      	b.n	8003cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d14 <vPortValidateInterruptPriority+0x7c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <vPortValidateInterruptPriority+0x80>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d90b      	bls.n	8003cfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	603b      	str	r3, [r7, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <vPortValidateInterruptPriority+0x62>
	}
 8003cfe:	bf00      	nop
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000e3f0 	.word	0xe000e3f0
 8003d10:	20000d5c 	.word	0x20000d5c
 8003d14:	e000ed0c 	.word	0xe000ed0c
 8003d18:	20000d60 	.word	0x20000d60

08003d1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	@ 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d28:	f7fe fd3c 	bl	80027a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea0 <pvPortMalloc+0x184>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d34:	f000 f924 	bl	8003f80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d38:	4b5a      	ldr	r3, [pc, #360]	@ (8003ea4 <pvPortMalloc+0x188>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f040 8095 	bne.w	8003e70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01e      	beq.n	8003d8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d015      	beq.n	8003d8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f023 0307 	bic.w	r3, r3, #7
 8003d64:	3308      	adds	r3, #8
 8003d66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <pvPortMalloc+0x6e>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	617b      	str	r3, [r7, #20]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d06f      	beq.n	8003e70 <pvPortMalloc+0x154>
 8003d90:	4b45      	ldr	r3, [pc, #276]	@ (8003ea8 <pvPortMalloc+0x18c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d86a      	bhi.n	8003e70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d9a:	4b44      	ldr	r3, [pc, #272]	@ (8003eac <pvPortMalloc+0x190>)
 8003d9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d9e:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <pvPortMalloc+0x190>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003da4:	e004      	b.n	8003db0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d903      	bls.n	8003dc2 <pvPortMalloc+0xa6>
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f1      	bne.n	8003da6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003dc2:	4b37      	ldr	r3, [pc, #220]	@ (8003ea0 <pvPortMalloc+0x184>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d051      	beq.n	8003e70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	4413      	add	r3, r2
 8003dd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	2308      	movs	r3, #8
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d920      	bls.n	8003e30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4413      	add	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <pvPortMalloc+0xfc>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	613b      	str	r3, [r7, #16]
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad2      	subs	r2, r2, r3
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e2a:	69b8      	ldr	r0, [r7, #24]
 8003e2c:	f000 f90a 	bl	8004044 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <pvPortMalloc+0x18c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <pvPortMalloc+0x18c>)
 8003e3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <pvPortMalloc+0x18c>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <pvPortMalloc+0x194>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d203      	bcs.n	8003e52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e4a:	4b17      	ldr	r3, [pc, #92]	@ (8003ea8 <pvPortMalloc+0x18c>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a18      	ldr	r2, [pc, #96]	@ (8003eb0 <pvPortMalloc+0x194>)
 8003e50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <pvPortMalloc+0x188>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003e66:	4b13      	ldr	r3, [pc, #76]	@ (8003eb4 <pvPortMalloc+0x198>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <pvPortMalloc+0x198>)
 8003e6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e70:	f7fe fca6 	bl	80027c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <pvPortMalloc+0x17a>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60fb      	str	r3, [r7, #12]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <pvPortMalloc+0x176>
	return pvReturn;
 8003e96:	69fb      	ldr	r3, [r7, #28]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3728      	adds	r7, #40	@ 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	2000496c 	.word	0x2000496c
 8003ea4:	20004980 	.word	0x20004980
 8003ea8:	20004970 	.word	0x20004970
 8003eac:	20004964 	.word	0x20004964
 8003eb0:	20004974 	.word	0x20004974
 8003eb4:	20004978 	.word	0x20004978

08003eb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d04f      	beq.n	8003f6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003eca:	2308      	movs	r3, #8
 8003ecc:	425b      	negs	r3, r3
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <vPortFree+0xbc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10b      	bne.n	8003efe <vPortFree+0x46>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	60fb      	str	r3, [r7, #12]
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	e7fd      	b.n	8003efa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <vPortFree+0x66>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	60bb      	str	r3, [r7, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	e7fd      	b.n	8003f1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <vPortFree+0xbc>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01e      	beq.n	8003f6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11a      	bne.n	8003f6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <vPortFree+0xbc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f44:	f7fe fc2e 	bl	80027a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <vPortFree+0xc0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <vPortFree+0xc0>)
 8003f54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f56:	6938      	ldr	r0, [r7, #16]
 8003f58:	f000 f874 	bl	8004044 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003f5c:	4b07      	ldr	r3, [pc, #28]	@ (8003f7c <vPortFree+0xc4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	4a06      	ldr	r2, [pc, #24]	@ (8003f7c <vPortFree+0xc4>)
 8003f64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003f66:	f7fe fc2b 	bl	80027c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20004980 	.word	0x20004980
 8003f78:	20004970 	.word	0x20004970
 8003f7c:	2000497c 	.word	0x2000497c

08003f80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003f8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f8c:	4b27      	ldr	r3, [pc, #156]	@ (800402c <prvHeapInit+0xac>)
 8003f8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00c      	beq.n	8003fb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	3307      	adds	r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0307 	bic.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	4a1f      	ldr	r2, [pc, #124]	@ (800402c <prvHeapInit+0xac>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <prvHeapInit+0xb0>)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <prvHeapInit+0xb0>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003fcc:	2208      	movs	r2, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0307 	bic.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a15      	ldr	r2, [pc, #84]	@ (8004034 <prvHeapInit+0xb4>)
 8003fe0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003fe2:	4b14      	ldr	r3, [pc, #80]	@ (8004034 <prvHeapInit+0xb4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fea:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <prvHeapInit+0xb4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004000:	4b0c      	ldr	r3, [pc, #48]	@ (8004034 <prvHeapInit+0xb4>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <prvHeapInit+0xb8>)
 800400e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a09      	ldr	r2, [pc, #36]	@ (800403c <prvHeapInit+0xbc>)
 8004016:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004018:	4b09      	ldr	r3, [pc, #36]	@ (8004040 <prvHeapInit+0xc0>)
 800401a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800401e:	601a      	str	r2, [r3, #0]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20000d64 	.word	0x20000d64
 8004030:	20004964 	.word	0x20004964
 8004034:	2000496c 	.word	0x2000496c
 8004038:	20004974 	.word	0x20004974
 800403c:	20004970 	.word	0x20004970
 8004040:	20004980 	.word	0x20004980

08004044 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800404c:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <prvInsertBlockIntoFreeList+0xac>)
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e002      	b.n	8004058 <prvInsertBlockIntoFreeList+0x14>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d8f7      	bhi.n	8004052 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4413      	add	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d108      	bne.n	8004086 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	441a      	add	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	441a      	add	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d118      	bne.n	80040cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <prvInsertBlockIntoFreeList+0xb0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d00d      	beq.n	80040c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e008      	b.n	80040d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	@ (80040f4 <prvInsertBlockIntoFreeList+0xb0>)
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e003      	b.n	80040d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d002      	beq.n	80040e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	20004964 	.word	0x20004964
 80040f4:	2000496c 	.word	0x2000496c

080040f8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80040fc:	4803      	ldr	r0, [pc, #12]	@ (800410c <_cbSendSystemDesc+0x14>)
 80040fe:	f001 f89f 	bl	8005240 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004102:	4803      	ldr	r0, [pc, #12]	@ (8004110 <_cbSendSystemDesc+0x18>)
 8004104:	f001 f89c 	bl	8005240 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004108:	bf00      	nop
 800410a:	bd80      	pop	{r7, pc}
 800410c:	08005568 	.word	0x08005568
 8004110:	080055a8 	.word	0x080055a8

08004114 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <SEGGER_SYSVIEW_Conf+0x20>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <SEGGER_SYSVIEW_Conf+0x20>)
 800411e:	6819      	ldr	r1, [r3, #0]
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <SEGGER_SYSVIEW_Conf+0x24>)
 8004122:	4a06      	ldr	r2, [pc, #24]	@ (800413c <SEGGER_SYSVIEW_Conf+0x28>)
 8004124:	f000 fd12 	bl	8004b4c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004128:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 800412c:	f000 fd52 	bl	8004bd4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004130:	bf00      	nop
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20000000 	.word	0x20000000
 8004138:	080040f9 	.word	0x080040f9
 800413c:	08005608 	.word	0x08005608

08004140 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004142:	b085      	sub	sp, #20
 8004144:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	e048      	b.n	80041de <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800414c:	4929      	ldr	r1, [pc, #164]	@ (80041f4 <_cbSendTaskList+0xb4>)
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fee5 	bl	8002f2c <uxTaskGetStackHighWaterMark>
 8004162:	4601      	mov	r1, r0
 8004164:	4823      	ldr	r0, [pc, #140]	@ (80041f4 <_cbSendTaskList+0xb4>)
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4403      	add	r3, r0
 8004172:	3310      	adds	r3, #16
 8004174:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004176:	491f      	ldr	r1, [pc, #124]	@ (80041f4 <_cbSendTaskList+0xb4>)
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	491b      	ldr	r1, [pc, #108]	@ (80041f4 <_cbSendTaskList+0xb4>)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3304      	adds	r3, #4
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	4c16      	ldr	r4, [pc, #88]	@ (80041f4 <_cbSendTaskList+0xb4>)
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4423      	add	r3, r4
 80041a6:	3308      	adds	r3, #8
 80041a8:	681c      	ldr	r4, [r3, #0]
 80041aa:	4d12      	ldr	r5, [pc, #72]	@ (80041f4 <_cbSendTaskList+0xb4>)
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	442b      	add	r3, r5
 80041b8:	330c      	adds	r3, #12
 80041ba:	681d      	ldr	r5, [r3, #0]
 80041bc:	4e0d      	ldr	r6, [pc, #52]	@ (80041f4 <_cbSendTaskList+0xb4>)
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4433      	add	r3, r6
 80041ca:	3310      	adds	r3, #16
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	462b      	mov	r3, r5
 80041d2:	4622      	mov	r2, r4
 80041d4:	f000 f855 	bl	8004282 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3301      	adds	r3, #1
 80041dc:	607b      	str	r3, [r7, #4]
 80041de:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <_cbSendTaskList+0xb8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d3b1      	bcc.n	800414c <_cbSendTaskList+0xc>
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20004984 	.word	0x20004984
 80041f8:	20004a24 	.word	0x20004a24

080041fc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004204:	f7fe fb8a 	bl	800291c <xTaskGetTickCountFromISR>
 8004208:	4603      	mov	r3, r0
 800420a:	2200      	movs	r2, #0
 800420c:	469a      	mov	sl, r3
 800420e:	4693      	mov	fp, r2
 8004210:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	f04f 0a00 	mov.w	sl, #0
 8004220:	f04f 0b00 	mov.w	fp, #0
 8004224:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004228:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800422c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004230:	4652      	mov	r2, sl
 8004232:	465b      	mov	r3, fp
 8004234:	1a14      	subs	r4, r2, r0
 8004236:	eb63 0501 	sbc.w	r5, r3, r1
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	00ab      	lsls	r3, r5, #2
 8004244:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004248:	00a2      	lsls	r2, r4, #2
 800424a:	4614      	mov	r4, r2
 800424c:	461d      	mov	r5, r3
 800424e:	eb14 0800 	adds.w	r8, r4, r0
 8004252:	eb45 0901 	adc.w	r9, r5, r1
 8004256:	f04f 0200 	mov.w	r2, #0
 800425a:	f04f 0300 	mov.w	r3, #0
 800425e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426a:	4690      	mov	r8, r2
 800426c:	4699      	mov	r9, r3
 800426e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004272:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004282 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004282:	b580      	push	{r7, lr}
 8004284:	b08a      	sub	sp, #40	@ 0x28
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	2218      	movs	r2, #24
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f001 f90d 	bl	80054b8 <memset>
  TaskInfo.TaskID     = TaskID;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80042b2:	f107 0310 	add.w	r3, r7, #16
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 feca 	bl	8005050 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80042bc:	bf00      	nop
 80042be:	3728      	adds	r7, #40	@ 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80042ca:	4b26      	ldr	r3, [pc, #152]	@ (8004364 <_DoInit+0xa0>)
 80042cc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80042ce:	22a8      	movs	r2, #168	@ 0xa8
 80042d0:	2100      	movs	r1, #0
 80042d2:	6838      	ldr	r0, [r7, #0]
 80042d4:	f001 f8f0 	bl	80054b8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2203      	movs	r2, #3
 80042dc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2203      	movs	r2, #3
 80042e2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4a20      	ldr	r2, [pc, #128]	@ (8004368 <_DoInit+0xa4>)
 80042e8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	4a1f      	ldr	r2, [pc, #124]	@ (800436c <_DoInit+0xa8>)
 80042ee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042f6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2200      	movs	r2, #0
 8004308:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4a16      	ldr	r2, [pc, #88]	@ (8004368 <_DoInit+0xa4>)
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4a17      	ldr	r2, [pc, #92]	@ (8004370 <_DoInit+0xac>)
 8004314:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2210      	movs	r2, #16
 800431a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2200      	movs	r2, #0
 8004320:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800432e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004332:	2300      	movs	r3, #0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e00c      	b.n	8004352 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f1c3 030f 	rsb	r3, r3, #15
 800433e:	4a0d      	ldr	r2, [pc, #52]	@ (8004374 <_DoInit+0xb0>)
 8004340:	5cd1      	ldrb	r1, [r2, r3]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	460a      	mov	r2, r1
 800434a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3301      	adds	r3, #1
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d9ef      	bls.n	8004338 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004358:	f3bf 8f5f 	dmb	sy
}
 800435c:	bf00      	nop
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20004a28 	.word	0x20004a28
 8004368:	080055b8 	.word	0x080055b8
 800436c:	20004ad0 	.word	0x20004ad0
 8004370:	20004ed0 	.word	0x20004ed0
 8004374:	08005610 	.word	0x08005610

08004378 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	@ 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004384:	4b3e      	ldr	r3, [pc, #248]	@ (8004480 <SEGGER_RTT_ReadNoLock+0x108>)
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b53      	cmp	r3, #83	@ 0x53
 8004390:	d001      	beq.n	8004396 <SEGGER_RTT_ReadNoLock+0x1e>
 8004392:	f7ff ff97 	bl	80042c4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	3360      	adds	r3, #96	@ 0x60
 80043a2:	4a37      	ldr	r2, [pc, #220]	@ (8004480 <SEGGER_RTT_ReadNoLock+0x108>)
 80043a4:	4413      	add	r3, r2
 80043a6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80043b8:	2300      	movs	r3, #0
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80043bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d92b      	bls.n	800441c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4293      	cmp	r3, r2
 80043d4:	bf28      	it	cs
 80043d6:	4613      	movcs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	4413      	add	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	6939      	ldr	r1, [r7, #16]
 80043e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043ea:	f001 f891 	bl	8005510 <memcpy>
    NumBytesRead += NumBytesRem;
 80043ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4413      	add	r3, r2
 80043f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80043f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	4413      	add	r3, r2
 80043fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004414:	429a      	cmp	r2, r3
 8004416:	d101      	bne.n	800441c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004418:	2300      	movs	r3, #0
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4293      	cmp	r3, r2
 800442a:	bf28      	it	cs
 800442c:	4613      	movcs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d019      	beq.n	800446a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	4413      	add	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	6939      	ldr	r1, [r7, #16]
 8004444:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004446:	f001 f863 	bl	8005510 <memcpy>
    NumBytesRead += NumBytesRem;
 800444a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	4413      	add	r3, r2
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	4413      	add	r3, r2
 8004468:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800446a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004474:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004478:	4618      	mov	r0, r3
 800447a:	3730      	adds	r7, #48	@ 0x30
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20004a28 	.word	0x20004a28

08004484 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004492:	4b3d      	ldr	r3, [pc, #244]	@ (8004588 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b53      	cmp	r3, #83	@ 0x53
 800449e:	d001      	beq.n	80044a4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80044a0:	f7ff ff10 	bl	80042c4 <_DoInit>
  SEGGER_RTT_LOCK();
 80044a4:	f3ef 8311 	mrs	r3, BASEPRI
 80044a8:	f04f 0120 	mov.w	r1, #32
 80044ac:	f381 8811 	msr	BASEPRI, r1
 80044b0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80044b2:	4b35      	ldr	r3, [pc, #212]	@ (8004588 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80044b4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80044ba:	6939      	ldr	r1, [r7, #16]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	4613      	mov	r3, r2
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	4413      	add	r3, r2
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	440b      	add	r3, r1
 80044ca:	3304      	adds	r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	429a      	cmp	r2, r3
 80044e0:	dbeb      	blt.n	80044ba <SEGGER_RTT_AllocUpBuffer+0x36>
 80044e2:	e000      	b.n	80044e6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80044e4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	da3f      	bge.n	8004570 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80044f0:	6939      	ldr	r1, [r7, #16]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	440b      	add	r3, r1
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	440b      	add	r3, r1
 8004514:	3304      	adds	r3, #4
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	4413      	add	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	440b      	add	r3, r1
 8004528:	3320      	adds	r3, #32
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800452e:	6939      	ldr	r1, [r7, #16]
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	3328      	adds	r3, #40	@ 0x28
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	4613      	mov	r3, r2
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	440b      	add	r3, r1
 8004550:	3324      	adds	r3, #36	@ 0x24
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004556:	6939      	ldr	r1, [r7, #16]
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	332c      	adds	r3, #44	@ 0x2c
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800456a:	f3bf 8f5f 	dmb	sy
 800456e:	e002      	b.n	8004576 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
 8004574:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800457c:	69fb      	ldr	r3, [r7, #28]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20004a28 	.word	0x20004a28

0800458c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	@ 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800459a:	4b21      	ldr	r3, [pc, #132]	@ (8004620 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800459c:	623b      	str	r3, [r7, #32]
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b53      	cmp	r3, #83	@ 0x53
 80045a6:	d001      	beq.n	80045ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80045a8:	f7ff fe8c 	bl	80042c4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80045ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004620 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80045ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d82c      	bhi.n	8004610 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80045b6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ba:	f04f 0120 	mov.w	r1, #32
 80045be:	f381 8811 	msr	BASEPRI, r1
 80045c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	3360      	adds	r3, #96	@ 0x60
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00e      	beq.n	80045fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004600:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800460a:	2300      	movs	r3, #0
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	e002      	b.n	8004616 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004610:	f04f 33ff 	mov.w	r3, #4294967295
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004618:	4618      	mov	r0, r3
 800461a:	3728      	adds	r7, #40	@ 0x28
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20004a28 	.word	0x20004a28

08004624 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d105      	bne.n	8004642 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	60fa      	str	r2, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e022      	b.n	8004688 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	60fa      	str	r2, [r7, #12]
 800464c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b80      	cmp	r3, #128	@ 0x80
 8004652:	d90a      	bls.n	800466a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004654:	2380      	movs	r3, #128	@ 0x80
 8004656:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004658:	e007      	b.n	800466a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	1c53      	adds	r3, r2, #1
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	60f9      	str	r1, [r7, #12]
 8004666:	7812      	ldrb	r2, [r2, #0]
 8004668:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	1e5a      	subs	r2, r3, #1
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <_EncodeStr+0x58>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ee      	bne.n	800465a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	b2da      	uxtb	r2, r3
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	4618      	mov	r0, r3
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3307      	adds	r3, #7
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80046b6:	4b34      	ldr	r3, [pc, #208]	@ (8004788 <_HandleIncomingPacket+0xd8>)
 80046b8:	7e1b      	ldrb	r3, [r3, #24]
 80046ba:	4618      	mov	r0, r3
 80046bc:	1cfb      	adds	r3, r7, #3
 80046be:	2201      	movs	r2, #1
 80046c0:	4619      	mov	r1, r3
 80046c2:	f7ff fe59 	bl	8004378 <SEGGER_RTT_ReadNoLock>
 80046c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d057      	beq.n	800477e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	2b80      	cmp	r3, #128	@ 0x80
 80046d2:	d031      	beq.n	8004738 <_HandleIncomingPacket+0x88>
 80046d4:	2b80      	cmp	r3, #128	@ 0x80
 80046d6:	dc40      	bgt.n	800475a <_HandleIncomingPacket+0xaa>
 80046d8:	2b07      	cmp	r3, #7
 80046da:	dc15      	bgt.n	8004708 <_HandleIncomingPacket+0x58>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dd3c      	ble.n	800475a <_HandleIncomingPacket+0xaa>
 80046e0:	3b01      	subs	r3, #1
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d839      	bhi.n	800475a <_HandleIncomingPacket+0xaa>
 80046e6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <_HandleIncomingPacket+0x3c>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	0800470f 	.word	0x0800470f
 80046f0:	08004715 	.word	0x08004715
 80046f4:	0800471b 	.word	0x0800471b
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004727 	.word	0x08004727
 8004700:	0800472d 	.word	0x0800472d
 8004704:	08004733 	.word	0x08004733
 8004708:	2b7f      	cmp	r3, #127	@ 0x7f
 800470a:	d033      	beq.n	8004774 <_HandleIncomingPacket+0xc4>
 800470c:	e025      	b.n	800475a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800470e:	f000 fb25 	bl	8004d5c <SEGGER_SYSVIEW_Start>
      break;
 8004712:	e034      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004714:	f000 fbdc 	bl	8004ed0 <SEGGER_SYSVIEW_Stop>
      break;
 8004718:	e031      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800471a:	f000 fdb5 	bl	8005288 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800471e:	e02e      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004720:	f000 fd7a 	bl	8005218 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004724:	e02b      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004726:	f000 fbf9 	bl	8004f1c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800472a:	e028      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800472c:	f000 fe86 	bl	800543c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004730:	e025      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004732:	f000 fe65 	bl	8005400 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004736:	e022      	b.n	800477e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004738:	4b13      	ldr	r3, [pc, #76]	@ (8004788 <_HandleIncomingPacket+0xd8>)
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	4618      	mov	r0, r3
 800473e:	1cfb      	adds	r3, r7, #3
 8004740:	2201      	movs	r2, #1
 8004742:	4619      	mov	r1, r3
 8004744:	f7ff fe18 	bl	8004378 <SEGGER_RTT_ReadNoLock>
 8004748:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fdca 	bl	80052ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004758:	e00e      	b.n	8004778 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	b25b      	sxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	da0c      	bge.n	800477c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004762:	4b09      	ldr	r3, [pc, #36]	@ (8004788 <_HandleIncomingPacket+0xd8>)
 8004764:	7e1b      	ldrb	r3, [r3, #24]
 8004766:	4618      	mov	r0, r3
 8004768:	1cfb      	adds	r3, r7, #3
 800476a:	2201      	movs	r2, #1
 800476c:	4619      	mov	r1, r3
 800476e:	f7ff fe03 	bl	8004378 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004772:	e003      	b.n	800477c <_HandleIncomingPacket+0xcc>
      break;
 8004774:	bf00      	nop
 8004776:	e002      	b.n	800477e <_HandleIncomingPacket+0xce>
      break;
 8004778:	bf00      	nop
 800477a:	e000      	b.n	800477e <_HandleIncomingPacket+0xce>
      break;
 800477c:	bf00      	nop
    }
  }
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20006ee8 	.word	0x20006ee8

0800478c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b08c      	sub	sp, #48	@ 0x30
 8004790:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004792:	2301      	movs	r3, #1
 8004794:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	3301      	adds	r3, #1
 800479a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a0:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a6:	e00b      	b.n	80047c0 <_TrySendOverflowPacket+0x34>
 80047a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ae:	1c59      	adds	r1, r3, #1
 80047b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80047b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	09db      	lsrs	r3, r3, #7
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80047c4:	d8f0      	bhi.n	80047a8 <_TrySendOverflowPacket+0x1c>
 80047c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80047d6:	4b25      	ldr	r3, [pc, #148]	@ (800486c <_TrySendOverflowPacket+0xe0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80047dc:	4b22      	ldr	r3, [pc, #136]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	e00b      	b.n	8004808 <_TrySendOverflowPacket+0x7c>
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80047fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	09db      	lsrs	r3, r3, #7
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b7f      	cmp	r3, #127	@ 0x7f
 800480c:	d8f0      	bhi.n	80047f0 <_TrySendOverflowPacket+0x64>
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	627a      	str	r2, [r7, #36]	@ 0x24
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	4618      	mov	r0, r3
 8004824:	1d3b      	adds	r3, r7, #4
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	461a      	mov	r2, r3
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	4619      	mov	r1, r3
 8004830:	f7fb fcee 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004834:	4603      	mov	r3, r0
 8004836:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800483e:	4a0a      	ldr	r2, [pc, #40]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	3b01      	subs	r3, #1
 800484a:	b2da      	uxtb	r2, r3
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e004      	b.n	800485c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004852:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	3301      	adds	r3, #1
 8004858:	4a03      	ldr	r2, [pc, #12]	@ (8004868 <_TrySendOverflowPacket+0xdc>)
 800485a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800485c:	693b      	ldr	r3, [r7, #16]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3730      	adds	r7, #48	@ 0x30
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20006ee8 	.word	0x20006ee8
 800486c:	e0001004 	.word	0xe0001004

08004870 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800487c:	4b98      	ldr	r3, [pc, #608]	@ (8004ae0 <_SendPacket+0x270>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d010      	beq.n	80048a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004884:	4b96      	ldr	r3, [pc, #600]	@ (8004ae0 <_SendPacket+0x270>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 812d 	beq.w	8004ae8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800488e:	4b94      	ldr	r3, [pc, #592]	@ (8004ae0 <_SendPacket+0x270>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d109      	bne.n	80048aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004896:	f7ff ff79 	bl	800478c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800489a:	4b91      	ldr	r3, [pc, #580]	@ (8004ae0 <_SendPacket+0x270>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	f040 8124 	bne.w	8004aec <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80048a4:	e001      	b.n	80048aa <_SendPacket+0x3a>
    goto Send;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <_SendPacket+0x3c>
Send:
 80048aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b1f      	cmp	r3, #31
 80048b0:	d809      	bhi.n	80048c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80048b2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ae0 <_SendPacket+0x270>)
 80048b4:	69da      	ldr	r2, [r3, #28]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f040 8115 	bne.w	8004af0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b17      	cmp	r3, #23
 80048ca:	d807      	bhi.n	80048dc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e0c4      	b.n	8004a66 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80048e8:	d912      	bls.n	8004910 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	09da      	lsrs	r2, r3, #7
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	3a01      	subs	r2, #1
 8004902:	60fa      	str	r2, [r7, #12]
 8004904:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004908:	b2da      	uxtb	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e006      	b.n	800491e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b01      	subs	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b7e      	cmp	r3, #126	@ 0x7e
 8004922:	d807      	bhi.n	8004934 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3b01      	subs	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e098      	b.n	8004a66 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800493a:	d212      	bcs.n	8004962 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	09da      	lsrs	r2, r3, #7
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3b01      	subs	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	3a01      	subs	r2, #1
 8004954:	60fa      	str	r2, [r7, #12]
 8004956:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800495a:	b2da      	uxtb	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e081      	b.n	8004a66 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004968:	d21d      	bcs.n	80049a6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	0b9a      	lsrs	r2, r3, #14
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b01      	subs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	09db      	lsrs	r3, r3, #7
 800497e:	b2db      	uxtb	r3, r3
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	3a01      	subs	r2, #1
 8004984:	60fa      	str	r2, [r7, #12]
 8004986:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	3a01      	subs	r2, #1
 8004998:	60fa      	str	r2, [r7, #12]
 800499a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e05f      	b.n	8004a66 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049ac:	d228      	bcs.n	8004a00 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0d5a      	lsrs	r2, r3, #21
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0b9b      	lsrs	r3, r3, #14
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	3a01      	subs	r2, #1
 80049c8:	60fa      	str	r2, [r7, #12]
 80049ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	09db      	lsrs	r3, r3, #7
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	3a01      	subs	r2, #1
 80049de:	60fa      	str	r2, [r7, #12]
 80049e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	3a01      	subs	r2, #1
 80049f2:	60fa      	str	r2, [r7, #12]
 80049f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	e032      	b.n	8004a66 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0f1a      	lsrs	r2, r3, #28
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	0d5b      	lsrs	r3, r3, #21
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	3a01      	subs	r2, #1
 8004a1a:	60fa      	str	r2, [r7, #12]
 8004a1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0b9b      	lsrs	r3, r3, #14
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	60fa      	str	r2, [r7, #12]
 8004a32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	09db      	lsrs	r3, r3, #7
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	3a01      	subs	r2, #1
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	60fa      	str	r2, [r7, #12]
 8004a5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ae4 <_SendPacket+0x274>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ae0 <_SendPacket+0x270>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e00b      	b.n	8004a98 <_SendPacket+0x228>
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	09db      	lsrs	r3, r3, #7
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a9c:	d8f0      	bhi.n	8004a80 <_SendPacket+0x210>
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004aae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae0 <_SendPacket+0x270>)
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	68f9      	ldr	r1, [r7, #12]
 8004abe:	f7fb fba7 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004ac2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004aca:	4a05      	ldr	r2, [pc, #20]	@ (8004ae0 <_SendPacket+0x270>)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	60d3      	str	r3, [r2, #12]
 8004ad0:	e00f      	b.n	8004af2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004ad2:	4b03      	ldr	r3, [pc, #12]	@ (8004ae0 <_SendPacket+0x270>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b01      	ldr	r3, [pc, #4]	@ (8004ae0 <_SendPacket+0x270>)
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	e008      	b.n	8004af2 <_SendPacket+0x282>
 8004ae0:	20006ee8 	.word	0x20006ee8
 8004ae4:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004ae8:	bf00      	nop
 8004aea:	e002      	b.n	8004af2 <_SendPacket+0x282>
      goto SendDone;
 8004aec:	bf00      	nop
 8004aee:	e000      	b.n	8004af2 <_SendPacket+0x282>
      goto SendDone;
 8004af0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004af2:	4b14      	ldr	r3, [pc, #80]	@ (8004b44 <_SendPacket+0x2d4>)
 8004af4:	7e1b      	ldrb	r3, [r3, #24]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4a13      	ldr	r2, [pc, #76]	@ (8004b48 <_SendPacket+0x2d8>)
 8004afa:	460b      	mov	r3, r1
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	440b      	add	r3, r1
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	336c      	adds	r3, #108	@ 0x6c
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b0e      	ldr	r3, [pc, #56]	@ (8004b44 <_SendPacket+0x2d4>)
 8004b0a:	7e1b      	ldrb	r3, [r3, #24]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	490e      	ldr	r1, [pc, #56]	@ (8004b48 <_SendPacket+0x2d8>)
 8004b10:	4603      	mov	r3, r0
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	4403      	add	r3, r0
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	440b      	add	r3, r1
 8004b1a:	3370      	adds	r3, #112	@ 0x70
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d00b      	beq.n	8004b3a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004b22:	4b08      	ldr	r3, [pc, #32]	@ (8004b44 <_SendPacket+0x2d4>)
 8004b24:	789b      	ldrb	r3, [r3, #2]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004b2a:	4b06      	ldr	r3, [pc, #24]	@ (8004b44 <_SendPacket+0x2d4>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004b30:	f7ff fdbe 	bl	80046b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <_SendPacket+0x2d4>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004b3a:	bf00      	nop
 8004b3c:	3728      	adds	r7, #40	@ 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20006ee8 	.word	0x20006ee8
 8004b48:	20004a28 	.word	0x20004a28

08004b4c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b60:	4917      	ldr	r1, [pc, #92]	@ (8004bc0 <SEGGER_SYSVIEW_Init+0x74>)
 8004b62:	4818      	ldr	r0, [pc, #96]	@ (8004bc4 <SEGGER_SYSVIEW_Init+0x78>)
 8004b64:	f7ff fc8e 	bl	8004484 <SEGGER_RTT_AllocUpBuffer>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b16      	ldr	r3, [pc, #88]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b6e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004b70:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b72:	785a      	ldrb	r2, [r3, #1]
 8004b74:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b76:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004b78:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b7a:	7e1b      	ldrb	r3, [r3, #24]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2308      	movs	r3, #8
 8004b84:	4a11      	ldr	r2, [pc, #68]	@ (8004bcc <SEGGER_SYSVIEW_Init+0x80>)
 8004b86:	490f      	ldr	r1, [pc, #60]	@ (8004bc4 <SEGGER_SYSVIEW_Init+0x78>)
 8004b88:	f7ff fd00 	bl	800458c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b92:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <SEGGER_SYSVIEW_Init+0x84>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b98:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ba0:	4a09      	ldr	r2, [pc, #36]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004ba6:	4a08      	ldr	r2, [pc, #32]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004bac:	4a06      	ldr	r2, [pc, #24]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004bb2:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20004ee0 	.word	0x20004ee0
 8004bc4:	080055cc 	.word	0x080055cc
 8004bc8:	20006ee8 	.word	0x20006ee8
 8004bcc:	20006ee0 	.word	0x20006ee0
 8004bd0:	e0001004 	.word	0xe0001004

08004bd4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004bdc:	4a04      	ldr	r2, [pc, #16]	@ (8004bf0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6113      	str	r3, [r2, #16]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20006ee8 	.word	0x20006ee8

08004bf4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004c00:	f04f 0120 	mov.w	r1, #32
 8004c04:	f381 8811 	msr	BASEPRI, r1
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	4808      	ldr	r0, [pc, #32]	@ (8004c2c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c0c:	f7ff fd43 	bl	8004696 <_PreparePacket>
 8004c10:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68b8      	ldr	r0, [r7, #8]
 8004c18:	f7ff fe2a 	bl	8004870 <_SendPacket>
  RECORD_END();
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f383 8811 	msr	BASEPRI, r3
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20006f18 	.word	0x20006f18

08004c30 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3e:	f04f 0120 	mov.w	r1, #32
 8004c42:	f381 8811 	msr	BASEPRI, r1
 8004c46:	617b      	str	r3, [r7, #20]
 8004c48:	4816      	ldr	r0, [pc, #88]	@ (8004ca4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c4a:	f7ff fd24 	bl	8004696 <_PreparePacket>
 8004c4e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	e00b      	b.n	8004c76 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	61f9      	str	r1, [r7, #28]
 8004c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	09db      	lsrs	r3, r3, #7
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c7a:	d8f0      	bhi.n	8004c5e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	61fa      	str	r2, [r7, #28]
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	701a      	strb	r2, [r3, #0]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	6938      	ldr	r0, [r7, #16]
 8004c92:	f7ff fded 	bl	8004870 <_SendPacket>
  RECORD_END();
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f383 8811 	msr	BASEPRI, r3
}
 8004c9c:	bf00      	nop
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	20006f18 	.word	0x20006f18

08004ca8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08c      	sub	sp, #48	@ 0x30
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb8:	f04f 0120 	mov.w	r1, #32
 8004cbc:	f381 8811 	msr	BASEPRI, r1
 8004cc0:	61fb      	str	r3, [r7, #28]
 8004cc2:	4825      	ldr	r0, [pc, #148]	@ (8004d58 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004cc4:	f7ff fce7 	bl	8004696 <_PreparePacket>
 8004cc8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cd6:	e00b      	b.n	8004cf0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ce2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cec:	09db      	lsrs	r3, r3, #7
 8004cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cf4:	d8f0      	bhi.n	8004cd8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d04:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	623b      	str	r3, [r7, #32]
 8004d0e:	e00b      	b.n	8004d28 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	1c59      	adds	r1, r3, #1
 8004d18:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	09db      	lsrs	r3, r3, #7
 8004d26:	623b      	str	r3, [r7, #32]
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d2c:	d8f0      	bhi.n	8004d10 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d34:	6a3a      	ldr	r2, [r7, #32]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6979      	ldr	r1, [r7, #20]
 8004d42:	69b8      	ldr	r0, [r7, #24]
 8004d44:	f7ff fd94 	bl	8004870 <_SendPacket>
  RECORD_END();
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	f383 8811 	msr	BASEPRI, r3
}
 8004d4e:	bf00      	nop
 8004d50:	3730      	adds	r7, #48	@ 0x30
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20006f18 	.word	0x20006f18

08004d5c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	@ 0x30
 8004d60:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004d62:	4b58      	ldr	r3, [pc, #352]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004d68:	f3ef 8311 	mrs	r3, BASEPRI
 8004d6c:	f04f 0120 	mov.w	r1, #32
 8004d70:	f381 8811 	msr	BASEPRI, r1
 8004d74:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004d76:	4b53      	ldr	r3, [pc, #332]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	220a      	movs	r2, #10
 8004d7c:	4952      	ldr	r1, [pc, #328]	@ (8004ec8 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fb fa46 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004d8a:	200a      	movs	r0, #10
 8004d8c:	f7ff ff32 	bl	8004bf4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	60bb      	str	r3, [r7, #8]
 8004d9e:	484b      	ldr	r0, [pc, #300]	@ (8004ecc <SEGGER_SYSVIEW_Start+0x170>)
 8004da0:	f7ff fc79 	bl	8004696 <_PreparePacket>
 8004da4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dae:	4b45      	ldr	r3, [pc, #276]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004db4:	e00b      	b.n	8004dce <SEGGER_SYSVIEW_Start+0x72>
 8004db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	09db      	lsrs	r3, r3, #7
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dd2:	d8f0      	bhi.n	8004db6 <SEGGER_SYSVIEW_Start+0x5a>
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de8:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	623b      	str	r3, [r7, #32]
 8004dee:	e00b      	b.n	8004e08 <SEGGER_SYSVIEW_Start+0xac>
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	1c59      	adds	r1, r3, #1
 8004df8:	6279      	str	r1, [r7, #36]	@ 0x24
 8004dfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	09db      	lsrs	r3, r3, #7
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e0c:	d8f0      	bhi.n	8004df0 <SEGGER_SYSVIEW_Start+0x94>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e00b      	b.n	8004e42 <SEGGER_SYSVIEW_Start+0xe6>
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	1c59      	adds	r1, r3, #1
 8004e32:	61f9      	str	r1, [r7, #28]
 8004e34:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	09db      	lsrs	r3, r3, #7
 8004e40:	61bb      	str	r3, [r7, #24]
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e46:	d8f0      	bhi.n	8004e2a <SEGGER_SYSVIEW_Start+0xce>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	61fa      	str	r2, [r7, #28]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	701a      	strb	r2, [r3, #0]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e00b      	b.n	8004e7a <SEGGER_SYSVIEW_Start+0x11e>
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	1c59      	adds	r1, r3, #1
 8004e6a:	6179      	str	r1, [r7, #20]
 8004e6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	09db      	lsrs	r3, r3, #7
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e7e:	d8f0      	bhi.n	8004e62 <SEGGER_SYSVIEW_Start+0x106>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	617a      	str	r2, [r7, #20]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004e90:	2218      	movs	r2, #24
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff fceb 	bl	8004870 <_SendPacket>
      RECORD_END();
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004ea8:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <SEGGER_SYSVIEW_Start+0x168>)
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004eae:	f000 f9eb 	bl	8005288 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004eb2:	f000 f9b1 	bl	8005218 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004eb6:	f000 fac1 	bl	800543c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004eba:	bf00      	nop
 8004ebc:	3730      	adds	r7, #48	@ 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20006ee8 	.word	0x20006ee8
 8004ec8:	08005624 	.word	0x08005624
 8004ecc:	20006f18 	.word	0x20006f18

08004ed0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eda:	f04f 0120 	mov.w	r1, #32
 8004ede:	f381 8811 	msr	BASEPRI, r1
 8004ee2:	607b      	str	r3, [r7, #4]
 8004ee4:	480b      	ldr	r0, [pc, #44]	@ (8004f14 <SEGGER_SYSVIEW_Stop+0x44>)
 8004ee6:	f7ff fbd6 	bl	8004696 <_PreparePacket>
 8004eea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004eec:	4b0a      	ldr	r3, [pc, #40]	@ (8004f18 <SEGGER_SYSVIEW_Stop+0x48>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ef4:	220b      	movs	r2, #11
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff fcb9 	bl	8004870 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004efe:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <SEGGER_SYSVIEW_Stop+0x48>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f383 8811 	msr	BASEPRI, r3
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20006f18 	.word	0x20006f18
 8004f18:	20006ee8 	.word	0x20006ee8

08004f1c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	@ 0x30
 8004f20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f22:	f3ef 8311 	mrs	r3, BASEPRI
 8004f26:	f04f 0120 	mov.w	r1, #32
 8004f2a:	f381 8811 	msr	BASEPRI, r1
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	4845      	ldr	r0, [pc, #276]	@ (8005048 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004f32:	f7ff fbb0 	bl	8004696 <_PreparePacket>
 8004f36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f40:	4b42      	ldr	r3, [pc, #264]	@ (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f46:	e00b      	b.n	8004f60 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5c:	09db      	lsrs	r3, r3, #7
 8004f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f64:	d8f0      	bhi.n	8004f48 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f7a:	4b34      	ldr	r3, [pc, #208]	@ (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	623b      	str	r3, [r7, #32]
 8004f80:	e00b      	b.n	8004f9a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f88:	1c59      	adds	r1, r3, #1
 8004f8a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	09db      	lsrs	r3, r3, #7
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f9e:	d8f0      	bhi.n	8004f82 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fa6:	6a3a      	ldr	r2, [r7, #32]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	4b25      	ldr	r3, [pc, #148]	@ (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	61bb      	str	r3, [r7, #24]
 8004fba:	e00b      	b.n	8004fd4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	61f9      	str	r1, [r7, #28]
 8004fc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	09db      	lsrs	r3, r3, #7
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fd8:	d8f0      	bhi.n	8004fbc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	61fa      	str	r2, [r7, #28]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	e00b      	b.n	800500c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	6179      	str	r1, [r7, #20]
 8004ffe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	09db      	lsrs	r3, r3, #7
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005010:	d8f0      	bhi.n	8004ff4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	617a      	str	r2, [r7, #20]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005022:	2218      	movs	r2, #24
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	68b8      	ldr	r0, [r7, #8]
 8005028:	f7ff fc22 	bl	8004870 <_SendPacket>
  RECORD_END();
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800503a:	4b04      	ldr	r3, [pc, #16]	@ (800504c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800503c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503e:	4798      	blx	r3
  }
}
 8005040:	bf00      	nop
 8005042:	3730      	adds	r7, #48	@ 0x30
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	20006f18 	.word	0x20006f18
 800504c:	20006ee8 	.word	0x20006ee8

08005050 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b092      	sub	sp, #72	@ 0x48
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005058:	f3ef 8311 	mrs	r3, BASEPRI
 800505c:	f04f 0120 	mov.w	r1, #32
 8005060:	f381 8811 	msr	BASEPRI, r1
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	486a      	ldr	r0, [pc, #424]	@ (8005210 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005068:	f7ff fb15 	bl	8004696 <_PreparePacket>
 800506c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	647b      	str	r3, [r7, #68]	@ 0x44
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b66      	ldr	r3, [pc, #408]	@ (8005214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	643b      	str	r3, [r7, #64]	@ 0x40
 8005082:	e00b      	b.n	800509c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005086:	b2da      	uxtb	r2, r3
 8005088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	6479      	str	r1, [r7, #68]	@ 0x44
 800508e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005098:	09db      	lsrs	r3, r3, #7
 800509a:	643b      	str	r3, [r7, #64]	@ 0x40
 800509c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800509e:	2b7f      	cmp	r3, #127	@ 0x7f
 80050a0:	d8f0      	bhi.n	8005084 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80050a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050aa:	b2d2      	uxtb	r2, r2
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050bc:	e00b      	b.n	80050d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80050be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c4:	1c59      	adds	r1, r3, #1
 80050c6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80050c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050cc:	b2d2      	uxtb	r2, r2
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d2:	09db      	lsrs	r3, r3, #7
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80050da:	d8f0      	bhi.n	80050be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80050dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
 80050e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	4619      	mov	r1, r3
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fa95 	bl	8004624 <_EncodeStr>
 80050fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80050fc:	2209      	movs	r2, #9
 80050fe:	68f9      	ldr	r1, [r7, #12]
 8005100:	6938      	ldr	r0, [r7, #16]
 8005102:	f7ff fbb5 	bl	8004870 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b40      	ldr	r3, [pc, #256]	@ (8005214 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	633b      	str	r3, [r7, #48]	@ 0x30
 800511a:	e00b      	b.n	8005134 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	b2da      	uxtb	r2, r3
 8005120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005122:	1c59      	adds	r1, r3, #1
 8005124:	6379      	str	r1, [r7, #52]	@ 0x34
 8005126:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	09db      	lsrs	r3, r3, #7
 8005132:	633b      	str	r3, [r7, #48]	@ 0x30
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	2b7f      	cmp	r3, #127	@ 0x7f
 8005138:	d8f0      	bhi.n	800511c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	637a      	str	r2, [r7, #52]	@ 0x34
 8005140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005154:	e00b      	b.n	800516e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	b2da      	uxtb	r2, r3
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005160:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	09db      	lsrs	r3, r3, #7
 800516c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005170:	2b7f      	cmp	r3, #127	@ 0x7f
 8005172:	d8f0      	bhi.n	8005156 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800517a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005182:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	e00b      	b.n	80051a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	b2da      	uxtb	r2, r3
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	6279      	str	r1, [r7, #36]	@ 0x24
 800519a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	09db      	lsrs	r3, r3, #7
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80051ac:	d8f0      	bhi.n	8005190 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80051b4:	6a3a      	ldr	r2, [r7, #32]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	61bb      	str	r3, [r7, #24]
 80051c8:	e00b      	b.n	80051e2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	1c59      	adds	r1, r3, #1
 80051d2:	61f9      	str	r1, [r7, #28]
 80051d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	09db      	lsrs	r3, r3, #7
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051e6:	d8f0      	bhi.n	80051ca <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	61fa      	str	r2, [r7, #28]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80051f8:	2215      	movs	r2, #21
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	6938      	ldr	r0, [r7, #16]
 80051fe:	f7ff fb37 	bl	8004870 <_SendPacket>
  RECORD_END();
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f383 8811 	msr	BASEPRI, r3
}
 8005208:	bf00      	nop
 800520a:	3748      	adds	r7, #72	@ 0x48
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20006f18 	.word	0x20006f18
 8005214:	20006ee8 	.word	0x20006ee8

08005218 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800522e:	4b03      	ldr	r3, [pc, #12]	@ (800523c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4798      	blx	r3
  }
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20006ee8 	.word	0x20006ee8

08005240 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005248:	f3ef 8311 	mrs	r3, BASEPRI
 800524c:	f04f 0120 	mov.w	r1, #32
 8005250:	f381 8811 	msr	BASEPRI, r1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	480b      	ldr	r0, [pc, #44]	@ (8005284 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005258:	f7ff fa1d 	bl	8004696 <_PreparePacket>
 800525c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800525e:	2280      	movs	r2, #128	@ 0x80
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	6938      	ldr	r0, [r7, #16]
 8005264:	f7ff f9de 	bl	8004624 <_EncodeStr>
 8005268:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800526a:	220e      	movs	r2, #14
 800526c:	68f9      	ldr	r1, [r7, #12]
 800526e:	6938      	ldr	r0, [r7, #16]
 8005270:	f7ff fafe 	bl	8004870 <_SendPacket>
  RECORD_END();
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f383 8811 	msr	BASEPRI, r3
}
 800527a:	bf00      	nop
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	20006f18 	.word	0x20006f18

08005288 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800528e:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01a      	beq.n	80052cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005296:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80052a0:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80052a2:	6a1b      	ldr	r3, [r3, #32]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4798      	blx	r3
 80052a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80052ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	000a      	movs	r2, r1
 80052bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80052be:	4613      	mov	r3, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	200d      	movs	r0, #13
 80052c6:	f7ff fcef 	bl	8004ca8 <SEGGER_SYSVIEW_RecordU32x2>
 80052ca:	e006      	b.n	80052da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80052cc:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	200c      	movs	r0, #12
 80052d4:	f7ff fcac 	bl	8004c30 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd90      	pop	{r4, r7, pc}
 80052e2:	bf00      	nop
 80052e4:	20006ee8 	.word	0x20006ee8
 80052e8:	e0001004 	.word	0xe0001004

080052ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08c      	sub	sp, #48	@ 0x30
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80052f6:	4b40      	ldr	r3, [pc, #256]	@ (80053f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d077      	beq.n	80053ee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80052fe:	4b3e      	ldr	r3, [pc, #248]	@ (80053f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005304:	2300      	movs	r3, #0
 8005306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005308:	e008      	b.n	800531c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800530a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d007      	beq.n	8005326 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005318:	3301      	adds	r3, #1
 800531a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005320:	429a      	cmp	r2, r3
 8005322:	d3f2      	bcc.n	800530a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005324:	e000      	b.n	8005328 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005326:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d055      	beq.n	80053da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800532e:	f3ef 8311 	mrs	r3, BASEPRI
 8005332:	f04f 0120 	mov.w	r1, #32
 8005336:	f381 8811 	msr	BASEPRI, r1
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	482f      	ldr	r0, [pc, #188]	@ (80053fc <SEGGER_SYSVIEW_SendModule+0x110>)
 800533e:	f7ff f9aa 	bl	8004696 <_PreparePacket>
 8005342:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	623b      	str	r3, [r7, #32]
 8005350:	e00b      	b.n	800536a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	1c59      	adds	r1, r3, #1
 800535a:	6279      	str	r1, [r7, #36]	@ 0x24
 800535c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	09db      	lsrs	r3, r3, #7
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	2b7f      	cmp	r3, #127	@ 0x7f
 800536e:	d8f0      	bhi.n	8005352 <SEGGER_SYSVIEW_SendModule+0x66>
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	627a      	str	r2, [r7, #36]	@ 0x24
 8005376:	6a3a      	ldr	r2, [r7, #32]
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e00b      	b.n	80053a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	61f9      	str	r1, [r7, #28]
 8005396:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	09db      	lsrs	r3, r3, #7
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053a8:	d8f0      	bhi.n	800538c <SEGGER_SYSVIEW_SendModule+0xa0>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	61fa      	str	r2, [r7, #28]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2280      	movs	r2, #128	@ 0x80
 80053c0:	4619      	mov	r1, r3
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff f92e 	bl	8004624 <_EncodeStr>
 80053c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80053ca:	2216      	movs	r2, #22
 80053cc:	68f9      	ldr	r1, [r7, #12]
 80053ce:	6938      	ldr	r0, [r7, #16]
 80053d0:	f7ff fa4e 	bl	8004870 <_SendPacket>
      RECORD_END();
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80053da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d006      	beq.n	80053ee <SEGGER_SYSVIEW_SendModule+0x102>
 80053e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4798      	blx	r3
    }
  }
}
 80053ee:	bf00      	nop
 80053f0:	3730      	adds	r7, #48	@ 0x30
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20006f10 	.word	0x20006f10
 80053fc:	20006f18 	.word	0x20006f18

08005400 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005406:	4b0c      	ldr	r3, [pc, #48]	@ (8005438 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00f      	beq.n	800542e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f2      	bne.n	8005414 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20006f10 	.word	0x20006f10

0800543c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005442:	f3ef 8311 	mrs	r3, BASEPRI
 8005446:	f04f 0120 	mov.w	r1, #32
 800544a:	f381 8811 	msr	BASEPRI, r1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	4817      	ldr	r0, [pc, #92]	@ (80054b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005452:	f7ff f920 	bl	8004696 <_PreparePacket>
 8005456:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	4b14      	ldr	r3, [pc, #80]	@ (80054b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	e00b      	b.n	8005480 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	b2da      	uxtb	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1c59      	adds	r1, r3, #1
 8005470:	6179      	str	r1, [r7, #20]
 8005472:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b7f      	cmp	r3, #127	@ 0x7f
 8005484:	d8f0      	bhi.n	8005468 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	617a      	str	r2, [r7, #20]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	b2d2      	uxtb	r2, r2
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005496:	221b      	movs	r2, #27
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	68b8      	ldr	r0, [r7, #8]
 800549c:	f7ff f9e8 	bl	8004870 <_SendPacket>
  RECORD_END();
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f383 8811 	msr	BASEPRI, r3
}
 80054a6:	bf00      	nop
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20006f18 	.word	0x20006f18
 80054b4:	20006f14 	.word	0x20006f14

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <__libc_init_array>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005500 <__libc_init_array+0x38>)
 80054cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005504 <__libc_init_array+0x3c>)
 80054ce:	1b64      	subs	r4, r4, r5
 80054d0:	10a4      	asrs	r4, r4, #2
 80054d2:	2600      	movs	r6, #0
 80054d4:	42a6      	cmp	r6, r4
 80054d6:	d109      	bne.n	80054ec <__libc_init_array+0x24>
 80054d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005508 <__libc_init_array+0x40>)
 80054da:	4c0c      	ldr	r4, [pc, #48]	@ (800550c <__libc_init_array+0x44>)
 80054dc:	f000 f826 	bl	800552c <_init>
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	2600      	movs	r6, #0
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	d105      	bne.n	80054f6 <__libc_init_array+0x2e>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f0:	4798      	blx	r3
 80054f2:	3601      	adds	r6, #1
 80054f4:	e7ee      	b.n	80054d4 <__libc_init_array+0xc>
 80054f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fa:	4798      	blx	r3
 80054fc:	3601      	adds	r6, #1
 80054fe:	e7f2      	b.n	80054e6 <__libc_init_array+0x1e>
 8005500:	08005638 	.word	0x08005638
 8005504:	08005638 	.word	0x08005638
 8005508:	08005638 	.word	0x08005638
 800550c:	0800563c 	.word	0x0800563c

08005510 <memcpy>:
 8005510:	440a      	add	r2, r1
 8005512:	4291      	cmp	r1, r2
 8005514:	f100 33ff 	add.w	r3, r0, #4294967295
 8005518:	d100      	bne.n	800551c <memcpy+0xc>
 800551a:	4770      	bx	lr
 800551c:	b510      	push	{r4, lr}
 800551e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005526:	4291      	cmp	r1, r2
 8005528:	d1f9      	bne.n	800551e <memcpy+0xe>
 800552a:	bd10      	pop	{r4, pc}

0800552c <_init>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	bf00      	nop
 8005530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005532:	bc08      	pop	{r3}
 8005534:	469e      	mov	lr, r3
 8005536:	4770      	bx	lr

08005538 <_fini>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr
