
FreeRTOS_SEGGER_GTB6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004314  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080044e4  080044e4  000054e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800456c  0800456c  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  0800456c  0800456c  0000556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004574  08004574  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004574  08004574  00005574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004578  08004578  00005578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800457c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004978  20000010  0800458c  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004988  0800458c  00006988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0cf  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002652  00000000  00000000  0001410f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00016768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000979  00000000  00000000  000173f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002786  00000000  00000000  00017d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e547  00000000  00000000  0001a4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfae3  00000000  00000000  00028a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  000f8564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fb848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044cc 	.word	0x080044cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	080044cc 	.word	0x080044cc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	DWT->CTRL |= (1 << 0);
 8000504:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <main+0x48>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0f      	ldr	r2, [pc, #60]	@ (8000548 <main+0x48>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 f9a2 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f826 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f890 	bl	800063c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051c:	f001 fa1c 	bl	8001958 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <main+0x4c>)
 8000522:	2100      	movs	r1, #0
 8000524:	480a      	ldr	r0, [pc, #40]	@ (8000550 <main+0x50>)
 8000526:	f001 fa61 	bl	80019ec <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a09      	ldr	r2, [pc, #36]	@ (8000554 <main+0x54>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000530:	4a09      	ldr	r2, [pc, #36]	@ (8000558 <main+0x58>)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	@ (800055c <main+0x5c>)
 8000536:	f001 fa59 	bl	80019ec <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <main+0x60>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f001 fa2e 	bl	80019a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x44>
 8000548:	e0001000 	.word	0xe0001000
 800054c:	08004514 	.word	0x08004514
 8000550:	080006e1 	.word	0x080006e1
 8000554:	2000002c 	.word	0x2000002c
 8000558:	08004538 	.word	0x08004538
 800055c:	0800071d 	.word	0x0800071d
 8000560:	20000030 	.word	0x20000030

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 031c 	add.w	r3, r7, #28
 800056e:	2234      	movs	r2, #52	@ 0x34
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 ff70 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <SystemClock_Config+0xd0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a28      	ldr	r2, [pc, #160]	@ (8000634 <SystemClock_Config+0xd0>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <SystemClock_Config+0xd0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	4b23      	ldr	r3, [pc, #140]	@ (8000638 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a22      	ldr	r2, [pc, #136]	@ (8000638 <SystemClock_Config+0xd4>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <SystemClock_Config+0xd4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	@ 0xa8
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fee1 	bl	80013b4 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005f8:	f000 f898 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000608:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000612:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fc3a 	bl	8000e94 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000626:	f000 f881 	bl	800072c <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	@ 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_GPIO_Init+0x98>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a1e      	ldr	r2, [pc, #120]	@ (80006d4 <MX_GPIO_Init+0x98>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_GPIO_Init+0x98>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_GPIO_Init+0x98>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a17      	ldr	r2, [pc, #92]	@ (80006d4 <MX_GPIO_Init+0x98>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_GPIO_Init+0x98>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000690:	4811      	ldr	r0, [pc, #68]	@ (80006d8 <MX_GPIO_Init+0x9c>)
 8000692:	f000 fbe5 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000696:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800069a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_GPIO_Init+0x9c>)
 80006b0:	f000 fa2a 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b4:	2301      	movs	r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4619      	mov	r1, r3
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_GPIO_Init+0xa0>)
 80006c8:	f000 fa1e 	bl	8000b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020800 	.word	0x40020800
 80006dc:	40020000 	.word	0x40020000

080006e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80006e8:	2101      	movs	r1, #1
 80006ea:	480a      	ldr	r0, [pc, #40]	@ (8000714 <StartDefaultTask+0x34>)
 80006ec:	f000 fba0 	bl	8000e30 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <StartDefaultTask+0x24>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006fc:	4806      	ldr	r0, [pc, #24]	@ (8000718 <StartDefaultTask+0x38>)
 80006fe:	f000 fbaf 	bl	8000e60 <HAL_GPIO_WritePin>
 8000702:	e7f1      	b.n	80006e8 <StartDefaultTask+0x8>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <StartDefaultTask+0x38>)
 800070c:	f000 fba8 	bl	8000e60 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000710:	e7ea      	b.n	80006e8 <StartDefaultTask+0x8>
 8000712:	bf00      	nop
 8000714:	40020000 	.word	0x40020000
 8000718:	40020800 	.word	0x40020800

0800071c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f001 f9f3 	bl	8001b10 <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartTask02+0x8>

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_MspInit+0x54>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a11      	ldr	r2, [pc, #68]	@ (800078c <HAL_MspInit+0x54>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_MspInit+0x54>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <HAL_MspInit+0x54>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a0a      	ldr	r2, [pc, #40]	@ (800078c <HAL_MspInit+0x54>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_MspInit+0x54>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	210f      	movs	r1, #15
 800077a:	f06f 0001 	mvn.w	r0, #1
 800077e:	f000 f99a 	bl	8000ab6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <NMI_Handler+0x4>

08000798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <MemManage_Handler+0x4>

080007a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ca:	f000 f897 	bl	80008fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007ce:	f002 fdc7 	bl	8003360 <xTaskGetSchedulerState>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d001      	beq.n	80007dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007d8:	f003 fbbe 	bl	8003f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <SystemInit+0x20>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <SystemInit+0x20>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800083c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000808:	f7ff ffea 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	@ (8000844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	@ (8000850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000832:	f003 fe19 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000836:	f7ff fe63 	bl	8000500 <main>
  bx  lr    
 800083a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800083c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000848:	0800457c 	.word	0x0800457c
  ldr r2, =_sbss
 800084c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000850:	20004988 	.word	0x20004988

08000854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC_IRQHandler>
	...

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <HAL_Init+0x40>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <HAL_Init+0x40>)
 8000862:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000868:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_Init+0x40>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0a      	ldr	r2, [pc, #40]	@ (8000898 <HAL_Init+0x40>)
 800086e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <HAL_Init+0x40>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	@ (8000898 <HAL_Init+0x40>)
 800087a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800087e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 f90d 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000886:	200f      	movs	r0, #15
 8000888:	f000 f808 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800088c:	f7ff ff54 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023c00 	.word	0x40023c00

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <HAL_InitTick+0x54>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <HAL_InitTick+0x58>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4619      	mov	r1, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f917 	bl	8000aee <HAL_SYSTICK_Config>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00e      	b.n	80008e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b0f      	cmp	r3, #15
 80008ce:	d80a      	bhi.n	80008e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d0:	2200      	movs	r2, #0
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f000 f8ed 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4a06      	ldr	r2, [pc, #24]	@ (80008f8 <HAL_InitTick+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <HAL_IncTick+0x20>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_IncTick+0x24>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <HAL_IncTick+0x24>)
 800090e:	6013      	str	r3, [r2, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000008 	.word	0x20000008
 8000920:	20000034 	.word	0x20000034

08000924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return uwTick;
 8000928:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <HAL_GetTick+0x14>)
 800092a:	681b      	ldr	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000034 	.word	0x20000034

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	@ (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	@ (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	@ 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff47 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff5c 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffb0 	bl	8000a5c <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b089      	sub	sp, #36	@ 0x24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
 8000b22:	e165      	b.n	8000df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b24:	2201      	movs	r2, #1
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	f040 8154 	bne.w	8000dea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d005      	beq.n	8000b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d130      	bne.n	8000bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 0201 	and.w	r2, r3, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d017      	beq.n	8000bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689a      	ldr	r2, [r3, #8]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d123      	bne.n	8000c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	f003 0307 	and.w	r3, r3, #7
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	691a      	ldr	r2, [r3, #16]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	69b9      	ldr	r1, [r7, #24]
 8000c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0203 	and.w	r2, r3, #3
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 80ae 	beq.w	8000dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b5d      	ldr	r3, [pc, #372]	@ (8000e08 <HAL_GPIO_Init+0x300>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a5c      	ldr	r2, [pc, #368]	@ (8000e08 <HAL_GPIO_Init+0x300>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e08 <HAL_GPIO_Init+0x300>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000caa:	4a58      	ldr	r2, [pc, #352]	@ (8000e0c <HAL_GPIO_Init+0x304>)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8000e10 <HAL_GPIO_Init+0x308>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d025      	beq.n	8000d22 <HAL_GPIO_Init+0x21a>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4e      	ldr	r2, [pc, #312]	@ (8000e14 <HAL_GPIO_Init+0x30c>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01f      	beq.n	8000d1e <HAL_GPIO_Init+0x216>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8000e18 <HAL_GPIO_Init+0x310>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d019      	beq.n	8000d1a <HAL_GPIO_Init+0x212>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4c      	ldr	r2, [pc, #304]	@ (8000e1c <HAL_GPIO_Init+0x314>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0x20e>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4b      	ldr	r2, [pc, #300]	@ (8000e20 <HAL_GPIO_Init+0x318>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <HAL_GPIO_Init+0x20a>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8000e24 <HAL_GPIO_Init+0x31c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0x206>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a49      	ldr	r2, [pc, #292]	@ (8000e28 <HAL_GPIO_Init+0x320>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x202>
 8000d06:	2306      	movs	r3, #6
 8000d08:	e00c      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	e00a      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d0e:	2305      	movs	r3, #5
 8000d10:	e008      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d12:	2304      	movs	r3, #4
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d16:	2303      	movs	r3, #3
 8000d18:	e004      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x21c>
 8000d22:	2300      	movs	r3, #0
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	f002 0203 	and.w	r2, r2, #3
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	4093      	lsls	r3, r2
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d34:	4935      	ldr	r1, [pc, #212]	@ (8000e0c <HAL_GPIO_Init+0x304>)
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d66:	4a31      	ldr	r2, [pc, #196]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d90:	4a26      	ldr	r2, [pc, #152]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d96:	4b25      	ldr	r3, [pc, #148]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dba:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000de4:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <HAL_GPIO_Init+0x324>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3301      	adds	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	f67f ae96 	bls.w	8000b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3724      	adds	r7, #36	@ 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40021400 	.word	0x40021400
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	40013c00 	.word	0x40013c00

08000e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691a      	ldr	r2, [r3, #16]
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e001      	b.n	8000e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e70:	787b      	ldrb	r3, [r7, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e7c:	e003      	b.n	8000e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	041a      	lsls	r2, r3, #16
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	619a      	str	r2, [r3, #24]
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d101      	bne.n	8000ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e0cc      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea8:	4b68      	ldr	r3, [pc, #416]	@ (800104c <HAL_RCC_ClockConfig+0x1b8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d90c      	bls.n	8000ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb6:	4b65      	ldr	r3, [pc, #404]	@ (800104c <HAL_RCC_ClockConfig+0x1b8>)
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ebe:	4b63      	ldr	r3, [pc, #396]	@ (800104c <HAL_RCC_ClockConfig+0x1b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	683a      	ldr	r2, [r7, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d001      	beq.n	8000ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e0b8      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d020      	beq.n	8000f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ee8:	4b59      	ldr	r3, [pc, #356]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a58      	ldr	r2, [pc, #352]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000eee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f00:	4b53      	ldr	r3, [pc, #332]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4a52      	ldr	r2, [pc, #328]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f0c:	4b50      	ldr	r3, [pc, #320]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	494d      	ldr	r1, [pc, #308]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d044      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d107      	bne.n	8000f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4b47      	ldr	r3, [pc, #284]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d119      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e07f      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d003      	beq.n	8000f52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d107      	bne.n	8000f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f52:	4b3f      	ldr	r3, [pc, #252]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d109      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e06f      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f62:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e067      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f72:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f023 0203 	bic.w	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4934      	ldr	r1, [pc, #208]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f84:	f7ff fcce 	bl	8000924 <HAL_GetTick>
 8000f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f8a:	e00a      	b.n	8000fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8c:	f7ff fcca 	bl	8000924 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e04f      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 020c 	and.w	r2, r3, #12
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d1eb      	bne.n	8000f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <HAL_RCC_ClockConfig+0x1b8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d20c      	bcs.n	8000fdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fc2:	4b22      	ldr	r3, [pc, #136]	@ (800104c <HAL_RCC_ClockConfig+0x1b8>)
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <HAL_RCC_ClockConfig+0x1b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d001      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e032      	b.n	8001042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d008      	beq.n	8000ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fe8:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	4916      	ldr	r1, [pc, #88]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d009      	beq.n	800101a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	490e      	ldr	r1, [pc, #56]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8001016:	4313      	orrs	r3, r2
 8001018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800101a:	f000 f821 	bl	8001060 <HAL_RCC_GetSysClockFreq>
 800101e:	4602      	mov	r2, r0
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_RCC_ClockConfig+0x1bc>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	490a      	ldr	r1, [pc, #40]	@ (8001054 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	5ccb      	ldrb	r3, [r1, r3]
 800102e:	fa22 f303 	lsr.w	r3, r2, r3
 8001032:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <HAL_RCC_ClockConfig+0x1c4>)
 8001034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_RCC_ClockConfig+0x1c8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fc2e 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00
 8001050:	40023800 	.word	0x40023800
 8001054:	0800455c 	.word	0x0800455c
 8001058:	20000000 	.word	0x20000000
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001064:	b0a6      	sub	sp, #152	@ 0x98
 8001066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001086:	4bc8      	ldr	r3, [pc, #800]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b0c      	cmp	r3, #12
 8001090:	f200 817e 	bhi.w	8001390 <HAL_RCC_GetSysClockFreq+0x330>
 8001094:	a201      	add	r2, pc, #4	@ (adr r2, 800109c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109a:	bf00      	nop
 800109c:	080010d1 	.word	0x080010d1
 80010a0:	08001391 	.word	0x08001391
 80010a4:	08001391 	.word	0x08001391
 80010a8:	08001391 	.word	0x08001391
 80010ac:	080010d9 	.word	0x080010d9
 80010b0:	08001391 	.word	0x08001391
 80010b4:	08001391 	.word	0x08001391
 80010b8:	08001391 	.word	0x08001391
 80010bc:	080010e1 	.word	0x080010e1
 80010c0:	08001391 	.word	0x08001391
 80010c4:	08001391 	.word	0x08001391
 80010c8:	08001391 	.word	0x08001391
 80010cc:	0800124b 	.word	0x0800124b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010d0:	4bb6      	ldr	r3, [pc, #728]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x34c>)
 80010d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80010d6:	e15f      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010d8:	4bb5      	ldr	r3, [pc, #724]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x350>)
 80010da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80010de:	e15b      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010e0:	4bb1      	ldr	r3, [pc, #708]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010ec:	4bae      	ldr	r3, [pc, #696]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d031      	beq.n	800115c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f8:	4bab      	ldr	r3, [pc, #684]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	099b      	lsrs	r3, r3, #6
 80010fe:	2200      	movs	r2, #0
 8001100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001102:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800110a:	663b      	str	r3, [r7, #96]	@ 0x60
 800110c:	2300      	movs	r3, #0
 800110e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001110:	4ba7      	ldr	r3, [pc, #668]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001112:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001116:	462a      	mov	r2, r5
 8001118:	fb03 f202 	mul.w	r2, r3, r2
 800111c:	2300      	movs	r3, #0
 800111e:	4621      	mov	r1, r4
 8001120:	fb01 f303 	mul.w	r3, r1, r3
 8001124:	4413      	add	r3, r2
 8001126:	4aa2      	ldr	r2, [pc, #648]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001128:	4621      	mov	r1, r4
 800112a:	fba1 1202 	umull	r1, r2, r1, r2
 800112e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001130:	460a      	mov	r2, r1
 8001132:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001134:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001136:	4413      	add	r3, r2
 8001138:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800113a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800113e:	2200      	movs	r2, #0
 8001140:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001142:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001144:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001148:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800114c:	f7ff f860 	bl	8000210 <__aeabi_uldivmod>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4613      	mov	r3, r2
 8001156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800115a:	e064      	b.n	8001226 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800115c:	4b92      	ldr	r3, [pc, #584]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	099b      	lsrs	r3, r3, #6
 8001162:	2200      	movs	r2, #0
 8001164:	653b      	str	r3, [r7, #80]	@ 0x50
 8001166:	657a      	str	r2, [r7, #84]	@ 0x54
 8001168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800116a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001170:	2300      	movs	r3, #0
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001174:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001178:	4622      	mov	r2, r4
 800117a:	462b      	mov	r3, r5
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	f04f 0100 	mov.w	r1, #0
 8001184:	0159      	lsls	r1, r3, #5
 8001186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800118a:	0150      	lsls	r0, r2, #5
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4621      	mov	r1, r4
 8001192:	1a51      	subs	r1, r2, r1
 8001194:	6139      	str	r1, [r7, #16]
 8001196:	4629      	mov	r1, r5
 8001198:	eb63 0301 	sbc.w	r3, r3, r1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80011aa:	4659      	mov	r1, fp
 80011ac:	018b      	lsls	r3, r1, #6
 80011ae:	4651      	mov	r1, sl
 80011b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80011b4:	4651      	mov	r1, sl
 80011b6:	018a      	lsls	r2, r1, #6
 80011b8:	4651      	mov	r1, sl
 80011ba:	ebb2 0801 	subs.w	r8, r2, r1
 80011be:	4659      	mov	r1, fp
 80011c0:	eb63 0901 	sbc.w	r9, r3, r1
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011d8:	4690      	mov	r8, r2
 80011da:	4699      	mov	r9, r3
 80011dc:	4623      	mov	r3, r4
 80011de:	eb18 0303 	adds.w	r3, r8, r3
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	462b      	mov	r3, r5
 80011e6:	eb49 0303 	adc.w	r3, r9, r3
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80011f8:	4629      	mov	r1, r5
 80011fa:	028b      	lsls	r3, r1, #10
 80011fc:	4621      	mov	r1, r4
 80011fe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001202:	4621      	mov	r1, r4
 8001204:	028a      	lsls	r2, r1, #10
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800120e:	2200      	movs	r2, #0
 8001210:	643b      	str	r3, [r7, #64]	@ 0x40
 8001212:	647a      	str	r2, [r7, #68]	@ 0x44
 8001214:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001218:	f7fe fffa 	bl	8000210 <__aeabi_uldivmod>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4613      	mov	r3, r2
 8001222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001226:	4b60      	ldr	r3, [pc, #384]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	3301      	adds	r3, #1
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001238:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800123c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001248:	e0a6      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124a:	4b57      	ldr	r3, [pc, #348]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001256:	4b54      	ldr	r3, [pc, #336]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d02a      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001262:	4b51      	ldr	r3, [pc, #324]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	099b      	lsrs	r3, r3, #6
 8001268:	2200      	movs	r2, #0
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800126c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800126e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001274:	2100      	movs	r1, #0
 8001276:	4b4e      	ldr	r3, [pc, #312]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001278:	fb03 f201 	mul.w	r2, r3, r1
 800127c:	2300      	movs	r3, #0
 800127e:	fb00 f303 	mul.w	r3, r0, r3
 8001282:	4413      	add	r3, r2
 8001284:	4a4a      	ldr	r2, [pc, #296]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8001286:	fba0 1202 	umull	r1, r2, r0, r2
 800128a:	677a      	str	r2, [r7, #116]	@ 0x74
 800128c:	460a      	mov	r2, r1
 800128e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001290:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001292:	4413      	add	r3, r2
 8001294:	677b      	str	r3, [r7, #116]	@ 0x74
 8001296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800129a:	2200      	movs	r2, #0
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
 800129e:	637a      	str	r2, [r7, #52]	@ 0x34
 80012a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80012a8:	f7fe ffb2 	bl	8000210 <__aeabi_uldivmod>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4613      	mov	r3, r2
 80012b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012b6:	e05b      	b.n	8001370 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b8:	4b3b      	ldr	r3, [pc, #236]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	099b      	lsrs	r3, r3, #6
 80012be:	2200      	movs	r2, #0
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012ca:	623b      	str	r3, [r7, #32]
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80012d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80012d4:	4642      	mov	r2, r8
 80012d6:	464b      	mov	r3, r9
 80012d8:	f04f 0000 	mov.w	r0, #0
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	0159      	lsls	r1, r3, #5
 80012e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012e6:	0150      	lsls	r0, r2, #5
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4641      	mov	r1, r8
 80012ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80012f2:	4649      	mov	r1, r9
 80012f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800130c:	ebb2 040a 	subs.w	r4, r2, sl
 8001310:	eb63 050b 	sbc.w	r5, r3, fp
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	00eb      	lsls	r3, r5, #3
 800131e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001322:	00e2      	lsls	r2, r4, #3
 8001324:	4614      	mov	r4, r2
 8001326:	461d      	mov	r5, r3
 8001328:	4643      	mov	r3, r8
 800132a:	18e3      	adds	r3, r4, r3
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	464b      	mov	r3, r9
 8001330:	eb45 0303 	adc.w	r3, r5, r3
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001342:	4629      	mov	r1, r5
 8001344:	028b      	lsls	r3, r1, #10
 8001346:	4621      	mov	r1, r4
 8001348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800134c:	4621      	mov	r1, r4
 800134e:	028a      	lsls	r2, r1, #10
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001358:	2200      	movs	r2, #0
 800135a:	61bb      	str	r3, [r7, #24]
 800135c:	61fa      	str	r2, [r7, #28]
 800135e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001362:	f7fe ff55 	bl	8000210 <__aeabi_uldivmod>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4613      	mov	r3, r2
 800136c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001370:	4b0d      	ldr	r3, [pc, #52]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	0f1b      	lsrs	r3, r3, #28
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800137e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001382:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800138e:	e003      	b.n	8001398 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_RCC_GetSysClockFreq+0x34c>)
 8001392:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001396:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001398:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800139c:	4618      	mov	r0, r3
 800139e:	3798      	adds	r7, #152	@ 0x98
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	00f42400 	.word	0x00f42400
 80013b0:	017d7840 	.word	0x017d7840

080013b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e28d      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8083 	beq.w	80014da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80013d4:	4b94      	ldr	r3, [pc, #592]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d019      	beq.n	8001414 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80013e0:	4b91      	ldr	r3, [pc, #580]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80013ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001402:	2b0c      	cmp	r3, #12
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b88      	ldr	r3, [pc, #544]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b84      	ldr	r3, [pc, #528]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x124>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e25a      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x90>
 8001436:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7b      	ldr	r2, [pc, #492]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xcc>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0xb4>
 800144e:	4b76      	ldr	r3, [pc, #472]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a75      	ldr	r2, [pc, #468]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b73      	ldr	r3, [pc, #460]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a72      	ldr	r2, [pc, #456]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xcc>
 8001468:	4b6f      	ldr	r3, [pc, #444]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6e      	ldr	r2, [pc, #440]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b6c      	ldr	r3, [pc, #432]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6b      	ldr	r2, [pc, #428]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fa4c 	bl	8000924 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fa48 	bl	8000924 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	@ 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e21f      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b61      	ldr	r3, [pc, #388]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xdc>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fa38 	bl	8000924 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fa34 	bl	8000924 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e20b      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b57      	ldr	r3, [pc, #348]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x104>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d06f      	beq.n	80015c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80014e6:	4b50      	ldr	r3, [pc, #320]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d017      	beq.n	8001522 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80014f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d105      	bne.n	800150a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80014fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800150a:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001512:	2b0c      	cmp	r3, #12
 8001514:	d11c      	bne.n	8001550 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b44      	ldr	r3, [pc, #272]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d116      	bne.n	8001550 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001522:	4b41      	ldr	r3, [pc, #260]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d005      	beq.n	800153a <HAL_RCC_OscConfig+0x186>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e1d3      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153a:	4b3b      	ldr	r3, [pc, #236]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4937      	ldr	r1, [pc, #220]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	e03a      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d020      	beq.n	800159a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001558:	4b34      	ldr	r3, [pc, #208]	@ (800162c <HAL_RCC_OscConfig+0x278>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff f9e1 	bl	8000924 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff f9dd 	bl	8000924 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e1b4      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b28      	ldr	r3, [pc, #160]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4925      	ldr	r1, [pc, #148]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_RCC_OscConfig+0x278>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff f9c0 	bl	8000924 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff f9bc 	bl	8000924 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e193      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d036      	beq.n	8001640 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d016      	beq.n	8001608 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_RCC_OscConfig+0x27c>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff f9a0 	bl	8000924 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff f99c 	bl	8000924 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e173      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <HAL_RCC_OscConfig+0x274>)
 80015fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x234>
 8001606:	e01b      	b.n	8001640 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_RCC_OscConfig+0x27c>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff f989 	bl	8000924 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001614:	e00e      	b.n	8001634 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff f985 	bl	8000924 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d907      	bls.n	8001634 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e15c      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
 8001628:	40023800 	.word	0x40023800
 800162c:	42470000 	.word	0x42470000
 8001630:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	4b8a      	ldr	r3, [pc, #552]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ea      	bne.n	8001616 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0304 	and.w	r3, r3, #4
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8097 	beq.w	800177c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b83      	ldr	r3, [pc, #524]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10f      	bne.n	800167e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b7f      	ldr	r3, [pc, #508]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	4a7e      	ldr	r2, [pc, #504]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	@ 0x40
 800166e:	4b7c      	ldr	r3, [pc, #496]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b79      	ldr	r3, [pc, #484]	@ (8001864 <HAL_RCC_OscConfig+0x4b0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b76      	ldr	r3, [pc, #472]	@ (8001864 <HAL_RCC_OscConfig+0x4b0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a75      	ldr	r2, [pc, #468]	@ (8001864 <HAL_RCC_OscConfig+0x4b0>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff f945 	bl	8000924 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff f941 	bl	8000924 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e118      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001864 <HAL_RCC_OscConfig+0x4b0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x31e>
 80016c4:	4b66      	ldr	r3, [pc, #408]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c8:	4a65      	ldr	r2, [pc, #404]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d0:	e01c      	b.n	800170c <HAL_RCC_OscConfig+0x358>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x340>
 80016da:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016de:	4a60      	ldr	r2, [pc, #384]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0x358>
 80016f4:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f8:	4a59      	ldr	r2, [pc, #356]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80016fa:	f023 0301 	bic.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001700:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001704:	4a56      	ldr	r2, [pc, #344]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001706:	f023 0304 	bic.w	r3, r3, #4
 800170a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d015      	beq.n	8001740 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001714:	f7ff f906 	bl	8000924 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	e00a      	b.n	8001732 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff f902 	bl	8000924 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172a:	4293      	cmp	r3, r2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0d7      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001732:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0ee      	beq.n	800171c <HAL_RCC_OscConfig+0x368>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff f8f0 	bl	8000924 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff f8ec 	bl	8000924 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0c1      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175e:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ee      	bne.n	8001748 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d105      	bne.n	800177c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001770:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	4a3a      	ldr	r2, [pc, #232]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800177a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80ad 	beq.w	80018e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001786:	4b36      	ldr	r3, [pc, #216]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d060      	beq.n	8001854 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d145      	bne.n	8001826 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <HAL_RCC_OscConfig+0x4b4>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f8c0 	bl	8000924 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff f8bc 	bl	8000924 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e093      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69da      	ldr	r2, [r3, #28]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d4:	019b      	lsls	r3, r3, #6
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	3b01      	subs	r3, #1
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	071b      	lsls	r3, r3, #28
 80017f2:	491b      	ldr	r1, [pc, #108]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_RCC_OscConfig+0x4b4>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff f891 	bl	8000924 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff f88d 	bl	8000924 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e064      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x452>
 8001824:	e05c      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_RCC_OscConfig+0x4b4>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f87a 	bl	8000924 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f876 	bl	8000924 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04d      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_RCC_OscConfig+0x4ac>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x480>
 8001852:	e045      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d107      	bne.n	800186c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e040      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000
 8001868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <HAL_RCC_OscConfig+0x538>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d129      	bne.n	80018dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d122      	bne.n	80018dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800189c:	4013      	ands	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d119      	bne.n	80018dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	085b      	lsrs	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d10f      	bne.n	80018dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800

080018f0 <__NVIC_SetPriority>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	@ (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	@ (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001948:	2100      	movs	r1, #0
 800194a:	f06f 0004 	mvn.w	r0, #4
 800194e:	f7ff ffcf 	bl	80018f0 <__NVIC_SetPriority>
#endif
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800195e:	f3ef 8305 	mrs	r3, IPSR
 8001962:	603b      	str	r3, [r7, #0]
  return(result);
 8001964:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800196a:	f06f 0305 	mvn.w	r3, #5
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	e00c      	b.n	800198c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <osKernelInitialize+0x44>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <osKernelInitialize+0x44>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	e002      	b.n	800198c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
 800198a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000038 	.word	0x20000038

080019a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019a6:	f3ef 8305 	mrs	r3, IPSR
 80019aa:	603b      	str	r3, [r7, #0]
  return(result);
 80019ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80019b2:	f06f 0305 	mvn.w	r3, #5
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	e010      	b.n	80019dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <osKernelStart+0x48>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d109      	bne.n	80019d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80019c2:	f7ff ffbf 	bl	8001944 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80019c6:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <osKernelStart+0x48>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80019cc:	f001 f87a 	bl	8002ac4 <vTaskStartScheduler>
      stat = osOK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e002      	b.n	80019dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000038 	.word	0x20000038

080019ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	@ 0x38
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019fc:	f3ef 8305 	mrs	r3, IPSR
 8001a00:	617b      	str	r3, [r7, #20]
  return(result);
 8001a02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d17e      	bne.n	8001b06 <osThreadNew+0x11a>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d07b      	beq.n	8001b06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001a0e:	2380      	movs	r3, #128	@ 0x80
 8001a10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001a12:	2318      	movs	r3, #24
 8001a14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d045      	beq.n	8001ab2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d002      	beq.n	8001a34 <osThreadNew+0x48>
        name = attr->name;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d008      	beq.n	8001a5a <osThreadNew+0x6e>
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b38      	cmp	r3, #56	@ 0x38
 8001a4c:	d805      	bhi.n	8001a5a <osThreadNew+0x6e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <osThreadNew+0x72>
        return (NULL);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e054      	b.n	8001b08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00e      	beq.n	8001a94 <osThreadNew+0xa8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001a7c:	d90a      	bls.n	8001a94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <osThreadNew+0xa8>
        mem = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	e010      	b.n	8001ab6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10c      	bne.n	8001ab6 <osThreadNew+0xca>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d108      	bne.n	8001ab6 <osThreadNew+0xca>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d104      	bne.n	8001ab6 <osThreadNew+0xca>
          mem = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	e001      	b.n	8001ab6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d110      	bne.n	8001ade <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ac4:	9202      	str	r2, [sp, #8]
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	6a3a      	ldr	r2, [r7, #32]
 8001ad0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 fe1a 	bl	800270c <xTaskCreateStatic>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	e013      	b.n	8001b06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d110      	bne.n	8001b06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fe68 	bl	80027cc <xTaskCreate>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d001      	beq.n	8001b06 <osThreadNew+0x11a>
            hTask = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001b06:	693b      	ldr	r3, [r7, #16]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3728      	adds	r7, #40	@ 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b18:	f3ef 8305 	mrs	r3, IPSR
 8001b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <osDelay+0x1c>
    stat = osErrorISR;
 8001b24:	f06f 0305 	mvn.w	r3, #5
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e007      	b.n	8001b3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 ff8e 	bl	8002a58 <vTaskDelay>
    }
  }

  return (stat);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <vApplicationGetIdleTaskMemory+0x30>)
 8001b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2280      	movs	r2, #128	@ 0x80
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000003c 	.word	0x2000003c
 8001b78:	20000098 	.word	0x20000098

08001b7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <vApplicationGetTimerTaskMemory+0x30>)
 8001b92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000298 	.word	0x20000298
 8001bac:	200002f4 	.word	0x200002f4

08001bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f103 0208 	add.w	r2, r3, #8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f103 0208 	add.w	r2, r3, #8
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f103 0208 	add.w	r2, r3, #8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d103      	bne.n	8001c72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e00c      	b.n	8001c8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3308      	adds	r3, #8
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	e002      	b.n	8001c80 <vListInsert+0x2e>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d2f6      	bcs.n	8001c7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6892      	ldr	r2, [r2, #8]
 8001cda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6852      	ldr	r2, [r2, #4]
 8001ce4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d103      	bne.n	8001cf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	1e5a      	subs	r2, r3, #1
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10b      	bne.n	8001d44 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d44:	f002 f878 	bl	8003e38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	441a      	add	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d74:	3b01      	subs	r3, #1
 8001d76:	68f9      	ldr	r1, [r7, #12]
 8001d78:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001d7a:	fb01 f303 	mul.w	r3, r1, r3
 8001d7e:	441a      	add	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	22ff      	movs	r2, #255	@ 0xff
 8001d88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	22ff      	movs	r2, #255	@ 0xff
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d114      	bne.n	8001dc4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d01a      	beq.n	8001dd8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3310      	adds	r3, #16
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 f91a 	bl	8002fe0 <xTaskRemoveFromEventList>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d012      	beq.n	8001dd8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001db2:	4b0d      	ldr	r3, [pc, #52]	@ (8001de8 <xQueueGenericReset+0xd0>)
 8001db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	f3bf 8f6f 	isb	sy
 8001dc2:	e009      	b.n	8001dd8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3310      	adds	r3, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fef1 	bl	8001bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3324      	adds	r3, #36	@ 0x24
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff feec 	bl	8001bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dd8:	f002 f860 	bl	8003e9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	e000ed04 	.word	0xe000ed04

08001dec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08e      	sub	sp, #56	@ 0x38
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10b      	bne.n	8001e18 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e04:	f383 8811 	msr	BASEPRI, r3
 8001e08:	f3bf 8f6f 	isb	sy
 8001e0c:	f3bf 8f4f 	dsb	sy
 8001e10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10b      	bne.n	8001e36 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	e7fd      	b.n	8001e32 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <xQueueGenericCreateStatic+0x56>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <xQueueGenericCreateStatic+0x5a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <xQueueGenericCreateStatic+0x5c>
 8001e46:	2300      	movs	r3, #0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10b      	bne.n	8001e64 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e50:	f383 8811 	msr	BASEPRI, r3
 8001e54:	f3bf 8f6f 	isb	sy
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	623b      	str	r3, [r7, #32]
}
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <xQueueGenericCreateStatic+0x84>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <xQueueGenericCreateStatic+0x88>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <xQueueGenericCreateStatic+0x8a>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	61fb      	str	r3, [r7, #28]
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e92:	2350      	movs	r3, #80	@ 0x50
 8001e94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b50      	cmp	r3, #80	@ 0x50
 8001e9a:	d00b      	beq.n	8001eb4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea0:	f383 8811 	msr	BASEPRI, r3
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	f3bf 8f4f 	dsb	sy
 8001eac:	61bb      	str	r3, [r7, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001eb4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ec8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f805 	bl	8001ee6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3730      	adds	r7, #48	@ 0x30
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d103      	bne.n	8001f02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e002      	b.n	8001f08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f14:	2101      	movs	r1, #1
 8001f16:	69b8      	ldr	r0, [r7, #24]
 8001f18:	f7ff fefe 	bl	8001d18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	@ 0x38
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10b      	bne.n	8001f60 <xQueueGenericSend+0x34>
	__asm volatile
 8001f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <xQueueGenericSend+0x42>
 8001f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <xQueueGenericSend+0x46>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <xQueueGenericSend+0x48>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <xQueueGenericSend+0x64>
	__asm volatile
 8001f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f7c:	f383 8811 	msr	BASEPRI, r3
 8001f80:	f3bf 8f6f 	isb	sy
 8001f84:	f3bf 8f4f 	dsb	sy
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d103      	bne.n	8001f9e <xQueueGenericSend+0x72>
 8001f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <xQueueGenericSend+0x76>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <xQueueGenericSend+0x78>
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <xQueueGenericSend+0x94>
	__asm volatile
 8001fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	623b      	str	r3, [r7, #32]
}
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fc0:	f001 f9ce 	bl	8003360 <xTaskGetSchedulerState>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d102      	bne.n	8001fd0 <xQueueGenericSend+0xa4>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <xQueueGenericSend+0xa8>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <xQueueGenericSend+0xaa>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <xQueueGenericSend+0xc6>
	__asm volatile
 8001fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	61fb      	str	r3, [r7, #28]
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ff2:	f001 ff21 	bl	8003e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d302      	bcc.n	8002008 <xQueueGenericSend+0xdc>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d129      	bne.n	800205c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800200e:	f000 fa0f 	bl	8002430 <prvCopyDataToQueue>
 8002012:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	3324      	adds	r3, #36	@ 0x24
 8002020:	4618      	mov	r0, r3
 8002022:	f000 ffdd 	bl	8002fe0 <xTaskRemoveFromEventList>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800202c:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <xQueueGenericSend+0x200>)
 800202e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	e00a      	b.n	8002054 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002044:	4b39      	ldr	r3, [pc, #228]	@ (800212c <xQueueGenericSend+0x200>)
 8002046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002054:	f001 ff22 	bl	8003e9c <vPortExitCritical>
				return pdPASS;
 8002058:	2301      	movs	r3, #1
 800205a:	e063      	b.n	8002124 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002062:	f001 ff1b 	bl	8003e9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002066:	2300      	movs	r3, #0
 8002068:	e05c      	b.n	8002124 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800206a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4618      	mov	r0, r3
 8002076:	f001 f817 	bl	80030a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800207a:	2301      	movs	r3, #1
 800207c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800207e:	f001 ff0d 	bl	8003e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002082:	f000 fd87 	bl	8002b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002086:	f001 fed7 	bl	8003e38 <vPortEnterCritical>
 800208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800208c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002090:	b25b      	sxtb	r3, r3
 8002092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002096:	d103      	bne.n	80020a0 <xQueueGenericSend+0x174>
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020a6:	b25b      	sxtb	r3, r3
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d103      	bne.n	80020b6 <xQueueGenericSend+0x18a>
 80020ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020b6:	f001 fef1 	bl	8003e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020ba:	1d3a      	adds	r2, r7, #4
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 f806 	bl	80030d4 <xTaskCheckForTimeOut>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d124      	bne.n	8002118 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020d0:	f000 faa6 	bl	8002620 <prvIsQueueFull>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d018      	beq.n	800210c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020dc:	3310      	adds	r3, #16
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4611      	mov	r1, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 ff2a 	bl	8002f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020ea:	f000 fa31 	bl	8002550 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020ee:	f000 fd5f 	bl	8002bb0 <xTaskResumeAll>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f47f af7c 	bne.w	8001ff2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80020fa:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <xQueueGenericSend+0x200>)
 80020fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f3bf 8f4f 	dsb	sy
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	e772      	b.n	8001ff2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800210c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800210e:	f000 fa1f 	bl	8002550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002112:	f000 fd4d 	bl	8002bb0 <xTaskResumeAll>
 8002116:	e76c      	b.n	8001ff2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800211a:	f000 fa19 	bl	8002550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800211e:	f000 fd47 	bl	8002bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002124:	4618      	mov	r0, r3
 8002126:	3738      	adds	r7, #56	@ 0x38
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	e000ed04 	.word	0xe000ed04

08002130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b090      	sub	sp, #64	@ 0x40
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10b      	bne.n	8002160 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800214c:	f383 8811 	msr	BASEPRI, r3
 8002150:	f3bf 8f6f 	isb	sy
 8002154:	f3bf 8f4f 	dsb	sy
 8002158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800215a:	bf00      	nop
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d103      	bne.n	800216e <xQueueGenericSendFromISR+0x3e>
 8002166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <xQueueGenericSendFromISR+0x42>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <xQueueGenericSendFromISR+0x44>
 8002172:	2300      	movs	r3, #0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800217c:	f383 8811 	msr	BASEPRI, r3
 8002180:	f3bf 8f6f 	isb	sy
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d103      	bne.n	800219e <xQueueGenericSendFromISR+0x6e>
 8002196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <xQueueGenericSendFromISR+0x72>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <xQueueGenericSendFromISR+0x74>
 80021a2:	2300      	movs	r3, #0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80021a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ac:	f383 8811 	msr	BASEPRI, r3
 80021b0:	f3bf 8f6f 	isb	sy
 80021b4:	f3bf 8f4f 	dsb	sy
 80021b8:	623b      	str	r3, [r7, #32]
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021c0:	f001 ff1a 	bl	8003ff8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021c4:	f3ef 8211 	mrs	r2, BASEPRI
 80021c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	61fa      	str	r2, [r7, #28]
 80021da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d302      	bcc.n	80021f2 <xQueueGenericSendFromISR+0xc2>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d12f      	bne.n	8002252 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002208:	f000 f912 	bl	8002430 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800220c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d112      	bne.n	800223c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800221e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002220:	3324      	adds	r3, #36	@ 0x24
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fedc 	bl	8002fe0 <xTaskRemoveFromEventList>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00e      	beq.n	800224c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00b      	beq.n	800224c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	e007      	b.n	800224c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800223c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002240:	3301      	adds	r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	b25a      	sxtb	r2, r3
 8002246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800224c:	2301      	movs	r3, #1
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002250:	e001      	b.n	8002256 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002252:	2300      	movs	r3, #0
 8002254:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002258:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002260:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002264:	4618      	mov	r0, r3
 8002266:	3740      	adds	r7, #64	@ 0x40
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10b      	bne.n	800229e <xQueueReceive+0x32>
	__asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228a:	f383 8811 	msr	BASEPRI, r3
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	f3bf 8f4f 	dsb	sy
 8002296:	623b      	str	r3, [r7, #32]
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	e7fd      	b.n	800229a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d103      	bne.n	80022ac <xQueueReceive+0x40>
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <xQueueReceive+0x44>
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <xQueueReceive+0x46>
 80022b0:	2300      	movs	r3, #0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10b      	bne.n	80022ce <xQueueReceive+0x62>
	__asm volatile
 80022b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ba:	f383 8811 	msr	BASEPRI, r3
 80022be:	f3bf 8f6f 	isb	sy
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	61fb      	str	r3, [r7, #28]
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	e7fd      	b.n	80022ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022ce:	f001 f847 	bl	8003360 <xTaskGetSchedulerState>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <xQueueReceive+0x72>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <xQueueReceive+0x76>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <xQueueReceive+0x78>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10b      	bne.n	8002300 <xQueueReceive+0x94>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	61bb      	str	r3, [r7, #24]
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002300:	f001 fd9a 	bl	8003e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01f      	beq.n	8002350 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002314:	f000 f8f6 	bl	8002504 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800231e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00f      	beq.n	8002348 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	3310      	adds	r3, #16
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fe57 	bl	8002fe0 <xTaskRemoveFromEventList>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d007      	beq.n	8002348 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002338:	4b3c      	ldr	r3, [pc, #240]	@ (800242c <xQueueReceive+0x1c0>)
 800233a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002348:	f001 fda8 	bl	8003e9c <vPortExitCritical>
				return pdPASS;
 800234c:	2301      	movs	r3, #1
 800234e:	e069      	b.n	8002424 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d103      	bne.n	800235e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002356:	f001 fda1 	bl	8003e9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800235a:	2300      	movs	r3, #0
 800235c:	e062      	b.n	8002424 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d106      	bne.n	8002372 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fe9d 	bl	80030a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800236e:	2301      	movs	r3, #1
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002372:	f001 fd93 	bl	8003e9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002376:	f000 fc0d 	bl	8002b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800237a:	f001 fd5d 	bl	8003e38 <vPortEnterCritical>
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002384:	b25b      	sxtb	r3, r3
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d103      	bne.n	8002394 <xQueueReceive+0x128>
 800238c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002396:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800239a:	b25b      	sxtb	r3, r3
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d103      	bne.n	80023aa <xQueueReceive+0x13e>
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023aa:	f001 fd77 	bl	8003e9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023ae:	1d3a      	adds	r2, r7, #4
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fe8c 	bl	80030d4 <xTaskCheckForTimeOut>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d123      	bne.n	800240a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023c4:	f000 f916 	bl	80025f4 <prvIsQueueEmpty>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d017      	beq.n	80023fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	3324      	adds	r3, #36	@ 0x24
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 fdb0 	bl	8002f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023de:	f000 f8b7 	bl	8002550 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023e2:	f000 fbe5 	bl	8002bb0 <xTaskResumeAll>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d189      	bne.n	8002300 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <xQueueReceive+0x1c0>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	e780      	b.n	8002300 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002400:	f000 f8a6 	bl	8002550 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002404:	f000 fbd4 	bl	8002bb0 <xTaskResumeAll>
 8002408:	e77a      	b.n	8002300 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800240a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800240c:	f000 f8a0 	bl	8002550 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002410:	f000 fbce 	bl	8002bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002414:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002416:	f000 f8ed 	bl	80025f4 <prvIsQueueEmpty>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	f43f af6f 	beq.w	8002300 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002422:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002424:	4618      	mov	r0, r3
 8002426:	3730      	adds	r7, #48	@ 0x30
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	e000ed04 	.word	0xe000ed04

08002430 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002444:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d14d      	bne.n	80024f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4618      	mov	r0, r3
 800245c:	f000 ff9e 	bl	800339c <xTaskPriorityDisinherit>
 8002460:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e043      	b.n	80024f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d119      	bne.n	80024a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6858      	ldr	r0, [r3, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	461a      	mov	r2, r3
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	f002 f818 	bl	80044b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	441a      	add	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d32b      	bcc.n	80024f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e026      	b.n	80024f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	68d8      	ldr	r0, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	461a      	mov	r2, r3
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	f001 fffe 	bl	80044b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024bc:	425b      	negs	r3, r3
 80024be:	441a      	add	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d8:	425b      	negs	r3, r3
 80024da:	441a      	add	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d105      	bne.n	80024f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1c5a      	adds	r2, r3, #1
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80024fa:	697b      	ldr	r3, [r7, #20]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	441a      	add	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d303      	bcc.n	8002538 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68d9      	ldr	r1, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002540:	461a      	mov	r2, r3
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	f001 ffb4 	bl	80044b0 <memcpy>
	}
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002558:	f001 fc6e 	bl	8003e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002562:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002564:	e011      	b.n	800258a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d012      	beq.n	8002594 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3324      	adds	r3, #36	@ 0x24
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fd34 	bl	8002fe0 <xTaskRemoveFromEventList>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800257e:	f000 fe0d 	bl	800319c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800258a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	dce9      	bgt.n	8002566 <prvUnlockQueue+0x16>
 8002592:	e000      	b.n	8002596 <prvUnlockQueue+0x46>
					break;
 8002594:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	22ff      	movs	r2, #255	@ 0xff
 800259a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800259e:	f001 fc7d 	bl	8003e9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80025a2:	f001 fc49 	bl	8003e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025ae:	e011      	b.n	80025d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d012      	beq.n	80025de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3310      	adds	r3, #16
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fd0f 	bl	8002fe0 <xTaskRemoveFromEventList>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80025c8:	f000 fde8 	bl	800319c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80025cc:	7bbb      	ldrb	r3, [r7, #14]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	dce9      	bgt.n	80025b0 <prvUnlockQueue+0x60>
 80025dc:	e000      	b.n	80025e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	22ff      	movs	r2, #255	@ 0xff
 80025e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80025e8:	f001 fc58 	bl	8003e9c <vPortExitCritical>
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025fc:	f001 fc1c 	bl	8003e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002604:	2b00      	cmp	r3, #0
 8002606:	d102      	bne.n	800260e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002608:	2301      	movs	r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e001      	b.n	8002612 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002612:	f001 fc43 	bl	8003e9c <vPortExitCritical>

	return xReturn;
 8002616:	68fb      	ldr	r3, [r7, #12]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002628:	f001 fc06 	bl	8003e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002634:	429a      	cmp	r2, r3
 8002636:	d102      	bne.n	800263e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002638:	2301      	movs	r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e001      	b.n	8002642 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002642:	f001 fc2b 	bl	8003e9c <vPortExitCritical>

	return xReturn;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e014      	b.n	800268a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002660:	4a0f      	ldr	r2, [pc, #60]	@ (80026a0 <vQueueAddToRegistry+0x50>)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800266c:	490c      	ldr	r1, [pc, #48]	@ (80026a0 <vQueueAddToRegistry+0x50>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <vQueueAddToRegistry+0x50>)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002682:	e006      	b.n	8002692 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b07      	cmp	r3, #7
 800268e:	d9e7      	bls.n	8002660 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200006f4 	.word	0x200006f4

080026a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026b4:	f001 fbc0 	bl	8003e38 <vPortEnterCritical>
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c4:	d103      	bne.n	80026ce <vQueueWaitForMessageRestricted+0x2a>
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026da:	d103      	bne.n	80026e4 <vQueueWaitForMessageRestricted+0x40>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026e4:	f001 fbda 	bl	8003e9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d106      	bne.n	80026fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3324      	adds	r3, #36	@ 0x24
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fc45 	bl	8002f88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ff26 	bl	8002550 <prvUnlockQueue>
	}
 8002704:	bf00      	nop
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800270c:	b580      	push	{r7, lr}
 800270e:	b08e      	sub	sp, #56	@ 0x38
 8002710:	af04      	add	r7, sp, #16
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800271a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	623b      	str	r3, [r7, #32]
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <xTaskCreateStatic+0x4a>
	__asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61fb      	str	r3, [r7, #28]
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	e7fd      	b.n	8002752 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002756:	235c      	movs	r3, #92	@ 0x5c
 8002758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b5c      	cmp	r3, #92	@ 0x5c
 800275e:	d00b      	beq.n	8002778 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	61bb      	str	r3, [r7, #24]
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002778:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800277a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01e      	beq.n	80027be <xTaskCreateStatic+0xb2>
 8002780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01b      	beq.n	80027be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002798:	2300      	movs	r3, #0
 800279a:	9303      	str	r3, [sp, #12]
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	9302      	str	r3, [sp, #8]
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f850 	bl	8002856 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80027b8:	f000 f8de 	bl	8002978 <prvAddNewTaskToReadyList>
 80027bc:	e001      	b.n	80027c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027c2:	697b      	ldr	r3, [r7, #20]
	}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	@ 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	@ 0x30
 80027d0:	af04      	add	r7, sp, #16
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fc4b 	bl	800407c <pvPortMalloc>
 80027e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027ee:	205c      	movs	r0, #92	@ 0x5c
 80027f0:	f001 fc44 	bl	800407c <pvPortMalloc>
 80027f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	631a      	str	r2, [r3, #48]	@ 0x30
 8002802:	e005      	b.n	8002810 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f001 fd07 	bl	8004218 <vPortFree>
 800280a:	e001      	b.n	8002810 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	2300      	movs	r3, #0
 8002822:	9303      	str	r3, [sp, #12]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	9302      	str	r3, [sp, #8]
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 f80e 	bl	8002856 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800283a:	69f8      	ldr	r0, [r7, #28]
 800283c:	f000 f89c 	bl	8002978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002840:	2301      	movs	r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e002      	b.n	800284c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002846:	f04f 33ff 	mov.w	r3, #4294967295
 800284a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800284c:	69bb      	ldr	r3, [r7, #24]
	}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b088      	sub	sp, #32
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	21a5      	movs	r1, #165	@ 0xa5
 8002870:	f001 fdf2 	bl	8004458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800287e:	3b01      	subs	r3, #1
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f023 0307 	bic.w	r3, r3, #7
 800288c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	617b      	str	r3, [r7, #20]
}
 80028aa:	bf00      	nop
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01f      	beq.n	80028f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
 80028ba:	e012      	b.n	80028e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	7819      	ldrb	r1, [r3, #0]
 80028c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	3334      	adds	r3, #52	@ 0x34
 80028cc:	460a      	mov	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d9e9      	bls.n	80028bc <prvInitialiseNewTask+0x66>
 80028e8:	e000      	b.n	80028ec <prvInitialiseNewTask+0x96>
			{
				break;
 80028ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f4:	e003      	b.n	80028fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002900:	2b37      	cmp	r3, #55	@ 0x37
 8002902:	d901      	bls.n	8002908 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002904:	2337      	movs	r3, #55	@ 0x37
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800290c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800290e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002910:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002912:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002916:	2200      	movs	r2, #0
 8002918:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800291a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291c:	3304      	adds	r3, #4
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f966 	bl	8001bf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	3318      	adds	r3, #24
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f961 	bl	8001bf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002932:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800293a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002942:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800294a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	68f9      	ldr	r1, [r7, #12]
 8002956:	69b8      	ldr	r0, [r7, #24]
 8002958:	f001 f93e 	bl	8003bd8 <pxPortInitialiseStack>
 800295c:	4602      	mov	r2, r0
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800296c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002980:	f001 fa5a 	bl	8003e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002984:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <prvAddNewTaskToReadyList+0xc4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	4a2c      	ldr	r2, [pc, #176]	@ (8002a3c <prvAddNewTaskToReadyList+0xc4>)
 800298c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800298e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002996:	4a2a      	ldr	r2, [pc, #168]	@ (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <prvAddNewTaskToReadyList+0xc4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d110      	bne.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029a4:	f000 fc1e 	bl	80031e4 <prvInitialiseTaskLists>
 80029a8:	e00d      	b.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029aa:	4b26      	ldr	r3, [pc, #152]	@ (8002a44 <prvAddNewTaskToReadyList+0xcc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029b2:	4b23      	ldr	r3, [pc, #140]	@ (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d802      	bhi.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029c6:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <prvAddNewTaskToReadyList+0xd0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a48 <prvAddNewTaskToReadyList+0xd0>)
 80029ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a48 <prvAddNewTaskToReadyList+0xd0>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <prvAddNewTaskToReadyList+0xd4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d903      	bls.n	80029ec <prvAddNewTaskToReadyList+0x74>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	4a18      	ldr	r2, [pc, #96]	@ (8002a4c <prvAddNewTaskToReadyList+0xd4>)
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4a15      	ldr	r2, [pc, #84]	@ (8002a50 <prvAddNewTaskToReadyList+0xd8>)
 80029fa:	441a      	add	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7ff f901 	bl	8001c0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a08:	f001 fa48 	bl	8003e9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <prvAddNewTaskToReadyList+0xcc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a14:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d207      	bcs.n	8002a32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a22:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <prvAddNewTaskToReadyList+0xdc>)
 8002a24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	f3bf 8f4f 	dsb	sy
 8002a2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000c08 	.word	0x20000c08
 8002a40:	20000734 	.word	0x20000734
 8002a44:	20000c14 	.word	0x20000c14
 8002a48:	20000c24 	.word	0x20000c24
 8002a4c:	20000c10 	.word	0x20000c10
 8002a50:	20000738 	.word	0x20000738
 8002a54:	e000ed04 	.word	0xe000ed04

08002a58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d018      	beq.n	8002a9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a6a:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <vTaskDelay+0x64>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <vTaskDelay+0x32>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	60bb      	str	r3, [r7, #8]
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	e7fd      	b.n	8002a86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a8a:	f000 f883 	bl	8002b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a8e:	2100      	movs	r1, #0
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fcf3 	bl	800347c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a96:	f000 f88b 	bl	8002bb0 <xTaskResumeAll>
 8002a9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002aa2:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <vTaskDelay+0x68>)
 8002aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000c30 	.word	0x20000c30
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	@ 0x28
 8002ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ad2:	463a      	mov	r2, r7
 8002ad4:	1d39      	adds	r1, r7, #4
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f834 	bl	8001b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ae0:	6839      	ldr	r1, [r7, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2300      	movs	r3, #0
 8002af0:	460a      	mov	r2, r1
 8002af2:	4922      	ldr	r1, [pc, #136]	@ (8002b7c <vTaskStartScheduler+0xb8>)
 8002af4:	4822      	ldr	r0, [pc, #136]	@ (8002b80 <vTaskStartScheduler+0xbc>)
 8002af6:	f7ff fe09 	bl	800270c <xTaskCreateStatic>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <vTaskStartScheduler+0xc0>)
 8002afe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <vTaskStartScheduler+0xc0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e001      	b.n	8002b12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d102      	bne.n	8002b1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b18:	f000 fd04 	bl	8003524 <xTimerCreateTimerTask>
 8002b1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d116      	bne.n	8002b52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	613b      	str	r3, [r7, #16]
}
 8002b36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <vTaskStartScheduler+0xc4>)
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b40:	4b12      	ldr	r3, [pc, #72]	@ (8002b8c <vTaskStartScheduler+0xc8>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b46:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <vTaskStartScheduler+0xcc>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b4c:	f001 f8d0 	bl	8003cf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b50:	e00f      	b.n	8002b72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d10b      	bne.n	8002b72 <vTaskStartScheduler+0xae>
	__asm volatile
 8002b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5e:	f383 8811 	msr	BASEPRI, r3
 8002b62:	f3bf 8f6f 	isb	sy
 8002b66:	f3bf 8f4f 	dsb	sy
 8002b6a:	60fb      	str	r3, [r7, #12]
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <vTaskStartScheduler+0xaa>
}
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	080044fc 	.word	0x080044fc
 8002b80:	080031b5 	.word	0x080031b5
 8002b84:	20000c2c 	.word	0x20000c2c
 8002b88:	20000c28 	.word	0x20000c28
 8002b8c:	20000c14 	.word	0x20000c14
 8002b90:	20000c0c 	.word	0x20000c0c

08002b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b98:	4b04      	ldr	r3, [pc, #16]	@ (8002bac <vTaskSuspendAll+0x18>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	4a03      	ldr	r2, [pc, #12]	@ (8002bac <vTaskSuspendAll+0x18>)
 8002ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	20000c30 	.word	0x20000c30

08002bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bbe:	4b42      	ldr	r3, [pc, #264]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <xTaskResumeAll+0x2e>
	__asm volatile
 8002bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	603b      	str	r3, [r7, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	e7fd      	b.n	8002bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bde:	f001 f92b 	bl	8003e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002be2:	4b39      	ldr	r3, [pc, #228]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	4a37      	ldr	r2, [pc, #220]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002bea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <xTaskResumeAll+0x118>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d162      	bne.n	8002cba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bf4:	4b35      	ldr	r3, [pc, #212]	@ (8002ccc <xTaskResumeAll+0x11c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05e      	beq.n	8002cba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bfc:	e02f      	b.n	8002c5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bfe:	4b34      	ldr	r3, [pc, #208]	@ (8002cd0 <xTaskResumeAll+0x120>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3318      	adds	r3, #24
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff f85a 	bl	8001cc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff f855 	bl	8001cc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd4 <xTaskResumeAll+0x124>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d903      	bls.n	8002c2e <xTaskResumeAll+0x7e>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002cd4 <xTaskResumeAll+0x124>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <xTaskResumeAll+0x128>)
 8002c3c:	441a      	add	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3304      	adds	r3, #4
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7fe ffe0 	bl	8001c0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c4e:	4b23      	ldr	r3, [pc, #140]	@ (8002cdc <xTaskResumeAll+0x12c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d302      	bcc.n	8002c5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <xTaskResumeAll+0x130>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd0 <xTaskResumeAll+0x120>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1cb      	bne.n	8002bfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c6c:	f000 fb58 	bl	8003320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce4 <xTaskResumeAll+0x134>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c7c:	f000 f846 	bl	8002d0c <xTaskIncrementTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002c86:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <xTaskResumeAll+0x130>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f1      	bne.n	8002c7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <xTaskResumeAll+0x134>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <xTaskResumeAll+0x130>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002caa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <xTaskResumeAll+0x138>)
 8002cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cba:	f001 f8ef 	bl	8003e9c <vPortExitCritical>

	return xAlreadyYielded;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000c30 	.word	0x20000c30
 8002ccc:	20000c08 	.word	0x20000c08
 8002cd0:	20000bc8 	.word	0x20000bc8
 8002cd4:	20000c10 	.word	0x20000c10
 8002cd8:	20000738 	.word	0x20000738
 8002cdc:	20000734 	.word	0x20000734
 8002ce0:	20000c1c 	.word	0x20000c1c
 8002ce4:	20000c18 	.word	0x20000c18
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <xTaskGetTickCount+0x1c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002cf8:	687b      	ldr	r3, [r7, #4]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000c0c 	.word	0x20000c0c

08002d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d16:	4b4f      	ldr	r3, [pc, #316]	@ (8002e54 <xTaskIncrementTick+0x148>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 8090 	bne.w	8002e40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d20:	4b4d      	ldr	r3, [pc, #308]	@ (8002e58 <xTaskIncrementTick+0x14c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d28:	4a4b      	ldr	r2, [pc, #300]	@ (8002e58 <xTaskIncrementTick+0x14c>)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d121      	bne.n	8002d78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d34:	4b49      	ldr	r3, [pc, #292]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	603b      	str	r3, [r7, #0]
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	e7fd      	b.n	8002d52 <xTaskIncrementTick+0x46>
 8002d56:	4b41      	ldr	r3, [pc, #260]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	4b40      	ldr	r3, [pc, #256]	@ (8002e60 <xTaskIncrementTick+0x154>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a3e      	ldr	r2, [pc, #248]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4a3e      	ldr	r2, [pc, #248]	@ (8002e60 <xTaskIncrementTick+0x154>)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e64 <xTaskIncrementTick+0x158>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	4a3c      	ldr	r2, [pc, #240]	@ (8002e64 <xTaskIncrementTick+0x158>)
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	f000 fad4 	bl	8003320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d78:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <xTaskIncrementTick+0x15c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d349      	bcc.n	8002e16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d82:	4b36      	ldr	r3, [pc, #216]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d104      	bne.n	8002d96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d8c:	4b36      	ldr	r3, [pc, #216]	@ (8002e68 <xTaskIncrementTick+0x15c>)
 8002d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d92:	601a      	str	r2, [r3, #0]
					break;
 8002d94:	e03f      	b.n	8002e16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <xTaskIncrementTick+0x150>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d203      	bcs.n	8002db6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dae:	4a2e      	ldr	r2, [pc, #184]	@ (8002e68 <xTaskIncrementTick+0x15c>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002db4:	e02f      	b.n	8002e16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	3304      	adds	r3, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe ff82 	bl	8001cc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe ff79 	bl	8001cc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd6:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <xTaskIncrementTick+0x160>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d903      	bls.n	8002de6 <xTaskIncrementTick+0xda>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <xTaskIncrementTick+0x160>)
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e70 <xTaskIncrementTick+0x164>)
 8002df4:	441a      	add	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f7fe ff04 	bl	8001c0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e06:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <xTaskIncrementTick+0x168>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3b8      	bcc.n	8002d82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e14:	e7b5      	b.n	8002d82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e16:	4b17      	ldr	r3, [pc, #92]	@ (8002e74 <xTaskIncrementTick+0x168>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1c:	4914      	ldr	r1, [pc, #80]	@ (8002e70 <xTaskIncrementTick+0x164>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d901      	bls.n	8002e32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <xTaskIncrementTick+0x16c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e004      	b.n	8002e4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e40:	4b0e      	ldr	r3, [pc, #56]	@ (8002e7c <xTaskIncrementTick+0x170>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <xTaskIncrementTick+0x170>)
 8002e48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e4a:	697b      	ldr	r3, [r7, #20]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000c30 	.word	0x20000c30
 8002e58:	20000c0c 	.word	0x20000c0c
 8002e5c:	20000bc0 	.word	0x20000bc0
 8002e60:	20000bc4 	.word	0x20000bc4
 8002e64:	20000c20 	.word	0x20000c20
 8002e68:	20000c28 	.word	0x20000c28
 8002e6c:	20000c10 	.word	0x20000c10
 8002e70:	20000738 	.word	0x20000738
 8002e74:	20000734 	.word	0x20000734
 8002e78:	20000c1c 	.word	0x20000c1c
 8002e7c:	20000c18 	.word	0x20000c18

08002e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e86:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <vTaskSwitchContext+0xa8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e8e:	4b27      	ldr	r3, [pc, #156]	@ (8002f2c <vTaskSwitchContext+0xac>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e94:	e042      	b.n	8002f1c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002e96:	4b25      	ldr	r3, [pc, #148]	@ (8002f2c <vTaskSwitchContext+0xac>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e9c:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <vTaskSwitchContext+0xb0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e011      	b.n	8002ec8 <vTaskSwitchContext+0x48>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <vTaskSwitchContext+0x42>
	__asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	607b      	str	r3, [r7, #4]
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <vTaskSwitchContext+0x3e>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	491a      	ldr	r1, [pc, #104]	@ (8002f34 <vTaskSwitchContext+0xb4>)
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0e3      	beq.n	8002ea4 <vTaskSwitchContext+0x24>
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4a13      	ldr	r2, [pc, #76]	@ (8002f34 <vTaskSwitchContext+0xb4>)
 8002ee8:	4413      	add	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3308      	adds	r3, #8
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d104      	bne.n	8002f0c <vTaskSwitchContext+0x8c>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <vTaskSwitchContext+0xb8>)
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	4a06      	ldr	r2, [pc, #24]	@ (8002f30 <vTaskSwitchContext+0xb0>)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000c30 	.word	0x20000c30
 8002f2c:	20000c1c 	.word	0x20000c1c
 8002f30:	20000c10 	.word	0x20000c10
 8002f34:	20000738 	.word	0x20000738
 8002f38:	20000734 	.word	0x20000734

08002f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10b      	bne.n	8002f64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f50:	f383 8811 	msr	BASEPRI, r3
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	60fb      	str	r3, [r7, #12]
}
 8002f5e:	bf00      	nop
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f64:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <vTaskPlaceOnEventList+0x48>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3318      	adds	r3, #24
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fe fe70 	bl	8001c52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f72:	2101      	movs	r1, #1
 8002f74:	6838      	ldr	r0, [r7, #0]
 8002f76:	f000 fa81 	bl	800347c <prvAddCurrentTaskToDelayedList>
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000734 	.word	0x20000734

08002f88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10b      	bne.n	8002fb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	617b      	str	r3, [r7, #20]
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	e7fd      	b.n	8002fae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fdc <vTaskPlaceOnEventListRestricted+0x54>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3318      	adds	r3, #24
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7fe fe25 	bl	8001c0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	f000 fa54 	bl	800347c <prvAddCurrentTaskToDelayedList>
	}
 8002fd4:	bf00      	nop
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20000734 	.word	0x20000734

08002fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	60fb      	str	r3, [r7, #12]
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3318      	adds	r3, #24
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fe56 	bl	8001cc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003018:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <xTaskRemoveFromEventList+0xb0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d11d      	bne.n	800305c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	3304      	adds	r3, #4
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe fe4d 	bl	8001cc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800302e:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <xTaskRemoveFromEventList+0xb4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d903      	bls.n	800303e <xTaskRemoveFromEventList+0x5e>
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <xTaskRemoveFromEventList+0xb4>)
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4a13      	ldr	r2, [pc, #76]	@ (8003098 <xTaskRemoveFromEventList+0xb8>)
 800304c:	441a      	add	r2, r3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3304      	adds	r3, #4
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7fe fdd8 	bl	8001c0a <vListInsertEnd>
 800305a:	e005      	b.n	8003068 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3318      	adds	r3, #24
 8003060:	4619      	mov	r1, r3
 8003062:	480e      	ldr	r0, [pc, #56]	@ (800309c <xTaskRemoveFromEventList+0xbc>)
 8003064:	f7fe fdd1 	bl	8001c0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <xTaskRemoveFromEventList+0xc0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003072:	429a      	cmp	r2, r3
 8003074:	d905      	bls.n	8003082 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800307a:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <xTaskRemoveFromEventList+0xc4>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	e001      	b.n	8003086 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003086:	697b      	ldr	r3, [r7, #20]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000c30 	.word	0x20000c30
 8003094:	20000c10 	.word	0x20000c10
 8003098:	20000738 	.word	0x20000738
 800309c:	20000bc8 	.word	0x20000bc8
 80030a0:	20000734 	.word	0x20000734
 80030a4:	20000c1c 	.word	0x20000c1c

080030a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <vTaskInternalSetTimeOutState+0x24>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <vTaskInternalSetTimeOutState+0x28>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20000c20 	.word	0x20000c20
 80030d0:	20000c0c 	.word	0x20000c0c

080030d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	613b      	str	r3, [r7, #16]
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	60fb      	str	r3, [r7, #12]
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	e7fd      	b.n	8003116 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800311a:	f000 fe8d 	bl	8003e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800311e:	4b1d      	ldr	r3, [pc, #116]	@ (8003194 <xTaskCheckForTimeOut+0xc0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d102      	bne.n	800313e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	e023      	b.n	8003186 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <xTaskCheckForTimeOut+0xc4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d007      	beq.n	800315a <xTaskCheckForTimeOut+0x86>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003154:	2301      	movs	r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	e015      	b.n	8003186 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	429a      	cmp	r2, r3
 8003162:	d20b      	bcs.n	800317c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad2      	subs	r2, r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff99 	bl	80030a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e004      	b.n	8003186 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003186:	f000 fe89 	bl	8003e9c <vPortExitCritical>

	return xReturn;
 800318a:	69fb      	ldr	r3, [r7, #28]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3720      	adds	r7, #32
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000c0c 	.word	0x20000c0c
 8003198:	20000c20 	.word	0x20000c20

0800319c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <vTaskMissedYield+0x14>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	20000c1c 	.word	0x20000c1c

080031b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031bc:	f000 f852 	bl	8003264 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <prvIdleTask+0x28>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d9f9      	bls.n	80031bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <prvIdleTask+0x2c>)
 80031ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031d8:	e7f0      	b.n	80031bc <prvIdleTask+0x8>
 80031da:	bf00      	nop
 80031dc:	20000738 	.word	0x20000738
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ea:	2300      	movs	r3, #0
 80031ec:	607b      	str	r3, [r7, #4]
 80031ee:	e00c      	b.n	800320a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4a12      	ldr	r2, [pc, #72]	@ (8003244 <prvInitialiseTaskLists+0x60>)
 80031fc:	4413      	add	r3, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe fcd6 	bl	8001bb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3301      	adds	r3, #1
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b37      	cmp	r3, #55	@ 0x37
 800320e:	d9ef      	bls.n	80031f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003210:	480d      	ldr	r0, [pc, #52]	@ (8003248 <prvInitialiseTaskLists+0x64>)
 8003212:	f7fe fccd 	bl	8001bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003216:	480d      	ldr	r0, [pc, #52]	@ (800324c <prvInitialiseTaskLists+0x68>)
 8003218:	f7fe fcca 	bl	8001bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800321c:	480c      	ldr	r0, [pc, #48]	@ (8003250 <prvInitialiseTaskLists+0x6c>)
 800321e:	f7fe fcc7 	bl	8001bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003222:	480c      	ldr	r0, [pc, #48]	@ (8003254 <prvInitialiseTaskLists+0x70>)
 8003224:	f7fe fcc4 	bl	8001bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003228:	480b      	ldr	r0, [pc, #44]	@ (8003258 <prvInitialiseTaskLists+0x74>)
 800322a:	f7fe fcc1 	bl	8001bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800322e:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <prvInitialiseTaskLists+0x78>)
 8003230:	4a05      	ldr	r2, [pc, #20]	@ (8003248 <prvInitialiseTaskLists+0x64>)
 8003232:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <prvInitialiseTaskLists+0x7c>)
 8003236:	4a05      	ldr	r2, [pc, #20]	@ (800324c <prvInitialiseTaskLists+0x68>)
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	20000738 	.word	0x20000738
 8003248:	20000b98 	.word	0x20000b98
 800324c:	20000bac 	.word	0x20000bac
 8003250:	20000bc8 	.word	0x20000bc8
 8003254:	20000bdc 	.word	0x20000bdc
 8003258:	20000bf4 	.word	0x20000bf4
 800325c:	20000bc0 	.word	0x20000bc0
 8003260:	20000bc4 	.word	0x20000bc4

08003264 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800326a:	e019      	b.n	80032a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800326c:	f000 fde4 	bl	8003e38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003270:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <prvCheckTasksWaitingTermination+0x50>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe fd21 	bl	8001cc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <prvCheckTasksWaitingTermination+0x54>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	4a0b      	ldr	r2, [pc, #44]	@ (80032b8 <prvCheckTasksWaitingTermination+0x54>)
 800328a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <prvCheckTasksWaitingTermination+0x58>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3b01      	subs	r3, #1
 8003292:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <prvCheckTasksWaitingTermination+0x58>)
 8003294:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003296:	f000 fe01 	bl	8003e9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f810 	bl	80032c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032a0:	4b06      	ldr	r3, [pc, #24]	@ (80032bc <prvCheckTasksWaitingTermination+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e1      	bne.n	800326c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000bdc 	.word	0x20000bdc
 80032b8:	20000c08 	.word	0x20000c08
 80032bc:	20000bf0 	.word	0x20000bf0

080032c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 ff9e 	bl	8004218 <vPortFree>
				vPortFree( pxTCB );
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 ff9b 	bl	8004218 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032e2:	e019      	b.n	8003318 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d103      	bne.n	80032f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 ff92 	bl	8004218 <vPortFree>
	}
 80032f4:	e010      	b.n	8003318 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d00b      	beq.n	8003318 <prvDeleteTCB+0x58>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	60fb      	str	r3, [r7, #12]
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <prvDeleteTCB+0x54>
	}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <prvResetNextTaskUnblockTime+0x38>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003330:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <prvResetNextTaskUnblockTime+0x3c>)
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003338:	e008      	b.n	800334c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <prvResetNextTaskUnblockTime+0x38>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a04      	ldr	r2, [pc, #16]	@ (800335c <prvResetNextTaskUnblockTime+0x3c>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	20000bc0 	.word	0x20000bc0
 800335c:	20000c28 	.word	0x20000c28

08003360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <xTaskGetSchedulerState+0x34>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800336e:	2301      	movs	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	e008      	b.n	8003386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003374:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <xTaskGetSchedulerState+0x38>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800337c:	2302      	movs	r3, #2
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	e001      	b.n	8003386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003386:	687b      	ldr	r3, [r7, #4]
	}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	20000c14 	.word	0x20000c14
 8003398:	20000c30 	.word	0x20000c30

0800339c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d058      	beq.n	8003464 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003470 <xTaskPriorityDisinherit+0xd4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d00b      	beq.n	80033d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60fb      	str	r3, [r7, #12]
}
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	60bb      	str	r3, [r7, #8]
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033f8:	1e5a      	subs	r2, r3, #1
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003406:	429a      	cmp	r2, r3
 8003408:	d02c      	beq.n	8003464 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800340e:	2b00      	cmp	r3, #0
 8003410:	d128      	bne.n	8003464 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	3304      	adds	r3, #4
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fc54 	bl	8001cc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <xTaskPriorityDisinherit+0xd8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d903      	bls.n	8003444 <xTaskPriorityDisinherit+0xa8>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	4a0c      	ldr	r2, [pc, #48]	@ (8003474 <xTaskPriorityDisinherit+0xd8>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <xTaskPriorityDisinherit+0xdc>)
 8003452:	441a      	add	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f7fe fbd5 	bl	8001c0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003460:	2301      	movs	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003464:	697b      	ldr	r3, [r7, #20]
	}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000734 	.word	0x20000734
 8003474:	20000c10 	.word	0x20000c10
 8003478:	20000738 	.word	0x20000738

0800347c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003486:	4b21      	ldr	r3, [pc, #132]	@ (800350c <prvAddCurrentTaskToDelayedList+0x90>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800348c:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <prvAddCurrentTaskToDelayedList+0x94>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3304      	adds	r3, #4
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe fc16 	bl	8001cc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d10a      	bne.n	80034b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003510 <prvAddCurrentTaskToDelayedList+0x94>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4819      	ldr	r0, [pc, #100]	@ (8003514 <prvAddCurrentTaskToDelayedList+0x98>)
 80034b0:	f7fe fbab 	bl	8001c0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034b4:	e026      	b.n	8003504 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <prvAddCurrentTaskToDelayedList+0x94>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d209      	bcs.n	80034e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ce:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <prvAddCurrentTaskToDelayedList+0x9c>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003510 <prvAddCurrentTaskToDelayedList+0x94>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7fe fbb9 	bl	8001c52 <vListInsert>
}
 80034e0:	e010      	b.n	8003504 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e2:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <prvAddCurrentTaskToDelayedList+0xa0>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <prvAddCurrentTaskToDelayedList+0x94>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3304      	adds	r3, #4
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f7fe fbaf 	bl	8001c52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003520 <prvAddCurrentTaskToDelayedList+0xa4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d202      	bcs.n	8003504 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6013      	str	r3, [r2, #0]
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000c0c 	.word	0x20000c0c
 8003510:	20000734 	.word	0x20000734
 8003514:	20000bf4 	.word	0x20000bf4
 8003518:	20000bc4 	.word	0x20000bc4
 800351c:	20000bc0 	.word	0x20000bc0
 8003520:	20000c28 	.word	0x20000c28

08003524 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	@ 0x28
 8003528:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800352e:	f000 fb13 	bl	8003b58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003532:	4b1d      	ldr	r3, [pc, #116]	@ (80035a8 <xTimerCreateTimerTask+0x84>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d021      	beq.n	800357e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003542:	1d3a      	adds	r2, r7, #4
 8003544:	f107 0108 	add.w	r1, r7, #8
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fb15 	bl	8001b7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	9202      	str	r2, [sp, #8]
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2302      	movs	r3, #2
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	460a      	mov	r2, r1
 8003564:	4911      	ldr	r1, [pc, #68]	@ (80035ac <xTimerCreateTimerTask+0x88>)
 8003566:	4812      	ldr	r0, [pc, #72]	@ (80035b0 <xTimerCreateTimerTask+0x8c>)
 8003568:	f7ff f8d0 	bl	800270c <xTaskCreateStatic>
 800356c:	4603      	mov	r3, r0
 800356e:	4a11      	ldr	r2, [pc, #68]	@ (80035b4 <xTimerCreateTimerTask+0x90>)
 8003570:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <xTimerCreateTimerTask+0x90>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800357a:	2301      	movs	r3, #1
 800357c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
}
 8003596:	bf00      	nop
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800359c:	697b      	ldr	r3, [r7, #20]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000c64 	.word	0x20000c64
 80035ac:	08004504 	.word	0x08004504
 80035b0:	080036f1 	.word	0x080036f1
 80035b4:	20000c68 	.word	0x20000c68

080035b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	623b      	str	r3, [r7, #32]
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <xTimerGenericCommand+0x98>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d02a      	beq.n	8003646 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	dc18      	bgt.n	8003634 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003602:	f7ff fead 	bl	8003360 <xTaskGetSchedulerState>
 8003606:	4603      	mov	r3, r0
 8003608:	2b02      	cmp	r3, #2
 800360a:	d109      	bne.n	8003620 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800360c:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <xTimerGenericCommand+0x98>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f107 0110 	add.w	r1, r7, #16
 8003614:	2300      	movs	r3, #0
 8003616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003618:	f7fe fc88 	bl	8001f2c <xQueueGenericSend>
 800361c:	6278      	str	r0, [r7, #36]	@ 0x24
 800361e:	e012      	b.n	8003646 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <xTimerGenericCommand+0x98>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	f107 0110 	add.w	r1, r7, #16
 8003628:	2300      	movs	r3, #0
 800362a:	2200      	movs	r2, #0
 800362c:	f7fe fc7e 	bl	8001f2c <xQueueGenericSend>
 8003630:	6278      	str	r0, [r7, #36]	@ 0x24
 8003632:	e008      	b.n	8003646 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <xTimerGenericCommand+0x98>)
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	f107 0110 	add.w	r1, r7, #16
 800363c:	2300      	movs	r3, #0
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	f7fe fd76 	bl	8002130 <xQueueGenericSendFromISR>
 8003644:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003648:	4618      	mov	r0, r3
 800364a:	3728      	adds	r7, #40	@ 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000c64 	.word	0x20000c64

08003654 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b088      	sub	sp, #32
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365e:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <prvProcessExpiredTimer+0x98>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fb29 	bl	8001cc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d023      	beq.n	80036c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	18d1      	adds	r1, r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f000 f8d5 	bl	800383c <prvInsertTimerInActiveList>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d020      	beq.n	80036da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003698:	2300      	movs	r3, #0
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	2100      	movs	r1, #0
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7ff ff88 	bl	80035b8 <xTimerGenericCommand>
 80036a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d114      	bne.n	80036da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	60fb      	str	r3, [r7, #12]
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	6978      	ldr	r0, [r7, #20]
 80036e0:	4798      	blx	r3
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000c5c 	.word	0x20000c5c

080036f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80036f8:	f107 0308 	add.w	r3, r7, #8
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f859 	bl	80037b4 <prvGetNextExpireTime>
 8003702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4619      	mov	r1, r3
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 f805 	bl	8003718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800370e:	f000 f8d7 	bl	80038c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003712:	bf00      	nop
 8003714:	e7f0      	b.n	80036f8 <prvTimerTask+0x8>
	...

08003718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003722:	f7ff fa37 	bl	8002b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f866 	bl	80037fc <prvSampleTimeNow>
 8003730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d130      	bne.n	800379a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <prvProcessTimerOrBlockTask+0x3c>
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	429a      	cmp	r2, r3
 8003744:	d806      	bhi.n	8003754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003746:	f7ff fa33 	bl	8002bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff81 	bl	8003654 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003752:	e024      	b.n	800379e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800375a:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <prvProcessTimerOrBlockTask+0x90>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <prvProcessTimerOrBlockTask+0x50>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <prvProcessTimerOrBlockTask+0x52>
 8003768:	2300      	movs	r3, #0
 800376a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800376c:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <prvProcessTimerOrBlockTask+0x94>)
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	f7fe ff93 	bl	80026a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800377e:	f7ff fa17 	bl	8002bb0 <xTaskResumeAll>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003788:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <prvProcessTimerOrBlockTask+0x98>)
 800378a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
}
 8003798:	e001      	b.n	800379e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800379a:	f7ff fa09 	bl	8002bb0 <xTaskResumeAll>
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000c60 	.word	0x20000c60
 80037ac:	20000c64 	.word	0x20000c64
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037bc:	4b0e      	ldr	r3, [pc, #56]	@ (80037f8 <prvGetNextExpireTime+0x44>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <prvGetNextExpireTime+0x16>
 80037c6:	2201      	movs	r2, #1
 80037c8:	e000      	b.n	80037cc <prvGetNextExpireTime+0x18>
 80037ca:	2200      	movs	r2, #0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d105      	bne.n	80037e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037d8:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <prvGetNextExpireTime+0x44>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e001      	b.n	80037e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80037e8:	68fb      	ldr	r3, [r7, #12]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000c5c 	.word	0x20000c5c

080037fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003804:	f7ff fa72 	bl	8002cec <xTaskGetTickCount>
 8003808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800380a:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <prvSampleTimeNow+0x3c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	429a      	cmp	r2, r3
 8003812:	d205      	bcs.n	8003820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003814:	f000 f93a 	bl	8003a8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e002      	b.n	8003826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003826:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <prvSampleTimeNow+0x3c>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800382c:	68fb      	ldr	r3, [r7, #12]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000c6c 	.word	0x20000c6c

0800383c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d812      	bhi.n	8003888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	1ad2      	subs	r2, r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	d302      	bcc.n	8003876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e01b      	b.n	80038ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003876:	4b10      	ldr	r3, [pc, #64]	@ (80038b8 <prvInsertTimerInActiveList+0x7c>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f7fe f9e6 	bl	8001c52 <vListInsert>
 8003886:	e012      	b.n	80038ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d206      	bcs.n	800389e <prvInsertTimerInActiveList+0x62>
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d302      	bcc.n	800389e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e007      	b.n	80038ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800389e:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <prvInsertTimerInActiveList+0x80>)
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f7fe f9d2 	bl	8001c52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038ae:	697b      	ldr	r3, [r7, #20]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000c60 	.word	0x20000c60
 80038bc:	20000c5c 	.word	0x20000c5c

080038c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08e      	sub	sp, #56	@ 0x38
 80038c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038c6:	e0ce      	b.n	8003a66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	da19      	bge.n	8003902 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	3304      	adds	r3, #4
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80038d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	61fb      	str	r3, [r7, #28]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80038f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f8:	6850      	ldr	r0, [r2, #4]
 80038fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038fc:	6892      	ldr	r2, [r2, #8]
 80038fe:	4611      	mov	r1, r2
 8003900:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f2c0 80ae 	blt.w	8003a66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003918:	3304      	adds	r3, #4
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe f9d2 	bl	8001cc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003920:	463b      	mov	r3, r7
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff ff6a 	bl	80037fc <prvSampleTimeNow>
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b09      	cmp	r3, #9
 800392e:	f200 8097 	bhi.w	8003a60 <prvProcessReceivedCommands+0x1a0>
 8003932:	a201      	add	r2, pc, #4	@ (adr r2, 8003938 <prvProcessReceivedCommands+0x78>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003961 	.word	0x08003961
 800393c:	08003961 	.word	0x08003961
 8003940:	08003961 	.word	0x08003961
 8003944:	080039d7 	.word	0x080039d7
 8003948:	080039eb 	.word	0x080039eb
 800394c:	08003a37 	.word	0x08003a37
 8003950:	08003961 	.word	0x08003961
 8003954:	08003961 	.word	0x08003961
 8003958:	080039d7 	.word	0x080039d7
 800395c:	080039eb 	.word	0x080039eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	18d1      	adds	r1, r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800397e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003980:	f7ff ff5c 	bl	800383c <prvInsertTimerInActiveList>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d06c      	beq.n	8003a64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d061      	beq.n	8003a64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	441a      	add	r2, r3
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	2100      	movs	r1, #0
 80039b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039b2:	f7ff fe01 	bl	80035b8 <xTimerGenericCommand>
 80039b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d152      	bne.n	8003a64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	61bb      	str	r3, [r7, #24]
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80039e8:	e03d      	b.n	8003a66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	617b      	str	r3, [r7, #20]
}
 8003a1c:	bf00      	nop
 8003a1e:	bf00      	nop
 8003a20:	e7fd      	b.n	8003a1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a28:	18d1      	adds	r1, r2, r3
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a30:	f7ff ff04 	bl	800383c <prvInsertTimerInActiveList>
					break;
 8003a34:	e017      	b.n	8003a66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d103      	bne.n	8003a4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a46:	f000 fbe7 	bl	8004218 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a4a:	e00c      	b.n	8003a66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003a5e:	e002      	b.n	8003a66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003a60:	bf00      	nop
 8003a62:	e000      	b.n	8003a66 <prvProcessReceivedCommands+0x1a6>
					break;
 8003a64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a66:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <prvProcessReceivedCommands+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	1d39      	adds	r1, r7, #4
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fbfc 	bl	800226c <xQueueReceive>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f47f af26 	bne.w	80038c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3730      	adds	r7, #48	@ 0x30
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000c64 	.word	0x20000c64

08003a8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a92:	e049      	b.n	8003b28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a94:	4b2e      	ldr	r3, [pc, #184]	@ (8003b50 <prvSwitchTimerLists+0xc4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b50 <prvSwitchTimerLists+0xc4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3304      	adds	r3, #4
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe f909 	bl	8001cc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d02f      	beq.n	8003b28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d90e      	bls.n	8003af8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <prvSwitchTimerLists+0xc4>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe f8ae 	bl	8001c52 <vListInsert>
 8003af6:	e017      	b.n	8003b28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003af8:	2300      	movs	r3, #0
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	2300      	movs	r3, #0
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	2100      	movs	r1, #0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f7ff fd58 	bl	80035b8 <xTimerGenericCommand>
 8003b08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10b      	bne.n	8003b28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	603b      	str	r3, [r7, #0]
}
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
 8003b26:	e7fd      	b.n	8003b24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <prvSwitchTimerLists+0xc4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1b0      	bne.n	8003a94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b32:	4b07      	ldr	r3, [pc, #28]	@ (8003b50 <prvSwitchTimerLists+0xc4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <prvSwitchTimerLists+0xc8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <prvSwitchTimerLists+0xc4>)
 8003b3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b40:	4a04      	ldr	r2, [pc, #16]	@ (8003b54 <prvSwitchTimerLists+0xc8>)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000c5c 	.word	0x20000c5c
 8003b54:	20000c60 	.word	0x20000c60

08003b58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b5e:	f000 f96b 	bl	8003e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b62:	4b15      	ldr	r3, [pc, #84]	@ (8003bb8 <prvCheckForValidListAndQueue+0x60>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d120      	bne.n	8003bac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b6a:	4814      	ldr	r0, [pc, #80]	@ (8003bbc <prvCheckForValidListAndQueue+0x64>)
 8003b6c:	f7fe f820 	bl	8001bb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b70:	4813      	ldr	r0, [pc, #76]	@ (8003bc0 <prvCheckForValidListAndQueue+0x68>)
 8003b72:	f7fe f81d 	bl	8001bb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b76:	4b13      	ldr	r3, [pc, #76]	@ (8003bc4 <prvCheckForValidListAndQueue+0x6c>)
 8003b78:	4a10      	ldr	r2, [pc, #64]	@ (8003bbc <prvCheckForValidListAndQueue+0x64>)
 8003b7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003b7c:	4b12      	ldr	r3, [pc, #72]	@ (8003bc8 <prvCheckForValidListAndQueue+0x70>)
 8003b7e:	4a10      	ldr	r2, [pc, #64]	@ (8003bc0 <prvCheckForValidListAndQueue+0x68>)
 8003b80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <prvCheckForValidListAndQueue+0x74>)
 8003b88:	4a11      	ldr	r2, [pc, #68]	@ (8003bd0 <prvCheckForValidListAndQueue+0x78>)
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	200a      	movs	r0, #10
 8003b8e:	f7fe f92d 	bl	8001dec <xQueueGenericCreateStatic>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4a08      	ldr	r2, [pc, #32]	@ (8003bb8 <prvCheckForValidListAndQueue+0x60>)
 8003b96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003b98:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <prvCheckForValidListAndQueue+0x60>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <prvCheckForValidListAndQueue+0x60>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	490b      	ldr	r1, [pc, #44]	@ (8003bd4 <prvCheckForValidListAndQueue+0x7c>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fd52 	bl	8002650 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bac:	f000 f976 	bl	8003e9c <vPortExitCritical>
}
 8003bb0:	bf00      	nop
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000c64 	.word	0x20000c64
 8003bbc:	20000c34 	.word	0x20000c34
 8003bc0:	20000c48 	.word	0x20000c48
 8003bc4:	20000c5c 	.word	0x20000c5c
 8003bc8:	20000c60 	.word	0x20000c60
 8003bcc:	20000d10 	.word	0x20000d10
 8003bd0:	20000c70 	.word	0x20000c70
 8003bd4:	0800450c 	.word	0x0800450c

08003bd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b04      	subs	r3, #4
 8003be8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3b04      	subs	r3, #4
 8003bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f023 0201 	bic.w	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	3b04      	subs	r3, #4
 8003c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c08:	4a0c      	ldr	r2, [pc, #48]	@ (8003c3c <pxPortInitialiseStack+0x64>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3b14      	subs	r3, #20
 8003c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3b04      	subs	r3, #4
 8003c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f06f 0202 	mvn.w	r2, #2
 8003c26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3b20      	subs	r3, #32
 8003c2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	08003c41 	.word	0x08003c41

08003c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c4a:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <prvTaskExitError+0x58>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d00b      	beq.n	8003c6c <prvTaskExitError+0x2c>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60fb      	str	r3, [r7, #12]
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <prvTaskExitError+0x28>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	60bb      	str	r3, [r7, #8]
}
 8003c7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003c80:	bf00      	nop
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0fc      	beq.n	8003c82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	2000000c 	.word	0x2000000c
 8003c9c:	00000000 	.word	0x00000000

08003ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ca0:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <pxCurrentTCBConst2>)
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	6808      	ldr	r0, [r1, #0]
 8003ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003caa:	f380 8809 	msr	PSP, r0
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f380 8811 	msr	BASEPRI, r0
 8003cba:	4770      	bx	lr
 8003cbc:	f3af 8000 	nop.w

08003cc0 <pxCurrentTCBConst2>:
 8003cc0:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop

08003cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cc8:	4808      	ldr	r0, [pc, #32]	@ (8003cec <prvPortStartFirstTask+0x24>)
 8003cca:	6800      	ldr	r0, [r0, #0]
 8003ccc:	6800      	ldr	r0, [r0, #0]
 8003cce:	f380 8808 	msr	MSP, r0
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f380 8814 	msr	CONTROL, r0
 8003cda:	b662      	cpsie	i
 8003cdc:	b661      	cpsie	f
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	df00      	svc	0
 8003ce8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cea:	bf00      	nop
 8003cec:	e000ed08 	.word	0xe000ed08

08003cf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cf6:	4b47      	ldr	r3, [pc, #284]	@ (8003e14 <xPortStartScheduler+0x124>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a47      	ldr	r2, [pc, #284]	@ (8003e18 <xPortStartScheduler+0x128>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d10b      	bne.n	8003d18 <xPortStartScheduler+0x28>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	613b      	str	r3, [r7, #16]
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d18:	4b3e      	ldr	r3, [pc, #248]	@ (8003e14 <xPortStartScheduler+0x124>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e1c <xPortStartScheduler+0x12c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10b      	bne.n	8003d3a <xPortStartScheduler+0x4a>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60fb      	str	r3, [r7, #12]
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d3a:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <xPortStartScheduler+0x130>)
 8003d3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	22ff      	movs	r2, #255	@ 0xff
 8003d4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4b31      	ldr	r3, [pc, #196]	@ (8003e24 <xPortStartScheduler+0x134>)
 8003d60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d62:	4b31      	ldr	r3, [pc, #196]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003d64:	2207      	movs	r2, #7
 8003d66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d68:	e009      	b.n	8003d7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003d72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d86:	2b80      	cmp	r3, #128	@ 0x80
 8003d88:	d0ef      	beq.n	8003d6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d8a:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1c3 0307 	rsb	r3, r3, #7
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d00b      	beq.n	8003dae <xPortStartScheduler+0xbe>
	__asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	60bb      	str	r3, [r7, #8]
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	e7fd      	b.n	8003daa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003db6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dc0:	4a19      	ldr	r2, [pc, #100]	@ (8003e28 <xPortStartScheduler+0x138>)
 8003dc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dcc:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <xPortStartScheduler+0x13c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a16      	ldr	r2, [pc, #88]	@ (8003e2c <xPortStartScheduler+0x13c>)
 8003dd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dd8:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <xPortStartScheduler+0x13c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	@ (8003e2c <xPortStartScheduler+0x13c>)
 8003dde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003de2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003de4:	f000 f8da 	bl	8003f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003de8:	4b11      	ldr	r3, [pc, #68]	@ (8003e30 <xPortStartScheduler+0x140>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003dee:	f000 f8f9 	bl	8003fe4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003df2:	4b10      	ldr	r3, [pc, #64]	@ (8003e34 <xPortStartScheduler+0x144>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a0f      	ldr	r2, [pc, #60]	@ (8003e34 <xPortStartScheduler+0x144>)
 8003df8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003dfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003dfe:	f7ff ff63 	bl	8003cc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e02:	f7ff f83d 	bl	8002e80 <vTaskSwitchContext>
	prvTaskExitError();
 8003e06:	f7ff ff1b 	bl	8003c40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	e000ed00 	.word	0xe000ed00
 8003e18:	410fc271 	.word	0x410fc271
 8003e1c:	410fc270 	.word	0x410fc270
 8003e20:	e000e400 	.word	0xe000e400
 8003e24:	20000d60 	.word	0x20000d60
 8003e28:	20000d64 	.word	0x20000d64
 8003e2c:	e000ed20 	.word	0xe000ed20
 8003e30:	2000000c 	.word	0x2000000c
 8003e34:	e000ef34 	.word	0xe000ef34

08003e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8003e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	607b      	str	r3, [r7, #4]
}
 8003e50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e52:	4b10      	ldr	r3, [pc, #64]	@ (8003e94 <vPortEnterCritical+0x5c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a0e      	ldr	r2, [pc, #56]	@ (8003e94 <vPortEnterCritical+0x5c>)
 8003e5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <vPortEnterCritical+0x5c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d110      	bne.n	8003e86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <vPortEnterCritical+0x60>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00b      	beq.n	8003e86 <vPortEnterCritical+0x4e>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	603b      	str	r3, [r7, #0]
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	e7fd      	b.n	8003e82 <vPortEnterCritical+0x4a>
	}
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	2000000c 	.word	0x2000000c
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ea2:	4b12      	ldr	r3, [pc, #72]	@ (8003eec <vPortExitCritical+0x50>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <vPortExitCritical+0x26>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <vPortExitCritical+0x50>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	4a08      	ldr	r2, [pc, #32]	@ (8003eec <vPortExitCritical+0x50>)
 8003eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ecc:	4b07      	ldr	r3, [pc, #28]	@ (8003eec <vPortExitCritical+0x50>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <vPortExitCritical+0x44>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f383 8811 	msr	BASEPRI, r3
}
 8003ede:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	2000000c 	.word	0x2000000c

08003ef0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ef0:	f3ef 8009 	mrs	r0, PSP
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <pxCurrentTCBConst>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	f01e 0f10 	tst.w	lr, #16
 8003f00:	bf08      	it	eq
 8003f02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0a:	6010      	str	r0, [r2, #0]
 8003f0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f14:	f380 8811 	msr	BASEPRI, r0
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f7fe ffae 	bl	8002e80 <vTaskSwitchContext>
 8003f24:	f04f 0000 	mov.w	r0, #0
 8003f28:	f380 8811 	msr	BASEPRI, r0
 8003f2c:	bc09      	pop	{r0, r3}
 8003f2e:	6819      	ldr	r1, [r3, #0]
 8003f30:	6808      	ldr	r0, [r1, #0]
 8003f32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f36:	f01e 0f10 	tst.w	lr, #16
 8003f3a:	bf08      	it	eq
 8003f3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f40:	f380 8809 	msr	PSP, r0
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	f3af 8000 	nop.w

08003f50 <pxCurrentTCBConst>:
 8003f50:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop

08003f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	607b      	str	r3, [r7, #4]
}
 8003f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f72:	f7fe fecb 	bl	8002d0c <xTaskIncrementTick>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f7c:	4b06      	ldr	r3, [pc, #24]	@ (8003f98 <xPortSysTickHandler+0x40>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f383 8811 	msr	BASEPRI, r3
}
 8003f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	e000ed04 	.word	0xe000ed04

08003f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <vPortSetupTimerInterrupt+0x34>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <vPortSetupTimerInterrupt+0x38>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fac:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <vPortSetupTimerInterrupt+0x3c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8003fdc <vPortSetupTimerInterrupt+0x40>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	4a09      	ldr	r2, [pc, #36]	@ (8003fe0 <vPortSetupTimerInterrupt+0x44>)
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fbe:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <vPortSetupTimerInterrupt+0x34>)
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	601a      	str	r2, [r3, #0]
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	e000e010 	.word	0xe000e010
 8003fd4:	e000e018 	.word	0xe000e018
 8003fd8:	20000000 	.word	0x20000000
 8003fdc:	10624dd3 	.word	0x10624dd3
 8003fe0:	e000e014 	.word	0xe000e014

08003fe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003fe4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003ff4 <vPortEnableVFP+0x10>
 8003fe8:	6801      	ldr	r1, [r0, #0]
 8003fea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003fee:	6001      	str	r1, [r0, #0]
 8003ff0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003ff2:	bf00      	nop
 8003ff4:	e000ed88 	.word	0xe000ed88

08003ff8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ffe:	f3ef 8305 	mrs	r3, IPSR
 8004002:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b0f      	cmp	r3, #15
 8004008:	d915      	bls.n	8004036 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800400a:	4a18      	ldr	r2, [pc, #96]	@ (800406c <vPortValidateInterruptPriority+0x74>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004014:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <vPortValidateInterruptPriority+0x78>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	7afa      	ldrb	r2, [r7, #11]
 800401a:	429a      	cmp	r2, r3
 800401c:	d20b      	bcs.n	8004036 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800401e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	607b      	str	r3, [r7, #4]
}
 8004030:	bf00      	nop
 8004032:	bf00      	nop
 8004034:	e7fd      	b.n	8004032 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004036:	4b0f      	ldr	r3, [pc, #60]	@ (8004074 <vPortValidateInterruptPriority+0x7c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800403e:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <vPortValidateInterruptPriority+0x80>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d90b      	bls.n	800405e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	603b      	str	r3, [r7, #0]
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <vPortValidateInterruptPriority+0x62>
	}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000e3f0 	.word	0xe000e3f0
 8004070:	20000d60 	.word	0x20000d60
 8004074:	e000ed0c 	.word	0xe000ed0c
 8004078:	20000d64 	.word	0x20000d64

0800407c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	@ 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004084:	2300      	movs	r3, #0
 8004086:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004088:	f7fe fd84 	bl	8002b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800408c:	4b5c      	ldr	r3, [pc, #368]	@ (8004200 <pvPortMalloc+0x184>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004094:	f000 f924 	bl	80042e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004098:	4b5a      	ldr	r3, [pc, #360]	@ (8004204 <pvPortMalloc+0x188>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f040 8095 	bne.w	80041d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01e      	beq.n	80040ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80040ac:	2208      	movs	r2, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d015      	beq.n	80040ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f023 0307 	bic.w	r3, r3, #7
 80040c4:	3308      	adds	r3, #8
 80040c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <pvPortMalloc+0x6e>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	617b      	str	r3, [r7, #20]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d06f      	beq.n	80041d0 <pvPortMalloc+0x154>
 80040f0:	4b45      	ldr	r3, [pc, #276]	@ (8004208 <pvPortMalloc+0x18c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d86a      	bhi.n	80041d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040fa:	4b44      	ldr	r3, [pc, #272]	@ (800420c <pvPortMalloc+0x190>)
 80040fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040fe:	4b43      	ldr	r3, [pc, #268]	@ (800420c <pvPortMalloc+0x190>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004104:	e004      	b.n	8004110 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d903      	bls.n	8004122 <pvPortMalloc+0xa6>
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f1      	bne.n	8004106 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <pvPortMalloc+0x184>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	429a      	cmp	r2, r3
 800412a:	d051      	beq.n	80041d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2208      	movs	r2, #8
 8004132:	4413      	add	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	2308      	movs	r3, #8
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	429a      	cmp	r2, r3
 800414c:	d920      	bls.n	8004190 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <pvPortMalloc+0xfc>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
}
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800418a:	69b8      	ldr	r0, [r7, #24]
 800418c:	f000 f90a 	bl	80043a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004190:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <pvPortMalloc+0x18c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	4a1b      	ldr	r2, [pc, #108]	@ (8004208 <pvPortMalloc+0x18c>)
 800419c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800419e:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <pvPortMalloc+0x18c>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <pvPortMalloc+0x194>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d203      	bcs.n	80041b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041aa:	4b17      	ldr	r3, [pc, #92]	@ (8004208 <pvPortMalloc+0x18c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a18      	ldr	r2, [pc, #96]	@ (8004210 <pvPortMalloc+0x194>)
 80041b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <pvPortMalloc+0x188>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80041c6:	4b13      	ldr	r3, [pc, #76]	@ (8004214 <pvPortMalloc+0x198>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a11      	ldr	r2, [pc, #68]	@ (8004214 <pvPortMalloc+0x198>)
 80041ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041d0:	f7fe fcee 	bl	8002bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <pvPortMalloc+0x17a>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60fb      	str	r3, [r7, #12]
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	e7fd      	b.n	80041f2 <pvPortMalloc+0x176>
	return pvReturn;
 80041f6:	69fb      	ldr	r3, [r7, #28]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	@ 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20004970 	.word	0x20004970
 8004204:	20004984 	.word	0x20004984
 8004208:	20004974 	.word	0x20004974
 800420c:	20004968 	.word	0x20004968
 8004210:	20004978 	.word	0x20004978
 8004214:	2000497c 	.word	0x2000497c

08004218 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d04f      	beq.n	80042ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800422a:	2308      	movs	r3, #8
 800422c:	425b      	negs	r3, r3
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4b25      	ldr	r3, [pc, #148]	@ (80042d4 <vPortFree+0xbc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <vPortFree+0x46>
	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	60fb      	str	r3, [r7, #12]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <vPortFree+0x66>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60bb      	str	r3, [r7, #8]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	4b14      	ldr	r3, [pc, #80]	@ (80042d4 <vPortFree+0xbc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4013      	ands	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01e      	beq.n	80042ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11a      	bne.n	80042ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	4b0e      	ldr	r3, [pc, #56]	@ (80042d4 <vPortFree+0xbc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042a4:	f7fe fc76 	bl	8002b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <vPortFree+0xc0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	4a09      	ldr	r2, [pc, #36]	@ (80042d8 <vPortFree+0xc0>)
 80042b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042b6:	6938      	ldr	r0, [r7, #16]
 80042b8:	f000 f874 	bl	80043a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <vPortFree+0xc4>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	4a06      	ldr	r2, [pc, #24]	@ (80042dc <vPortFree+0xc4>)
 80042c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80042c6:	f7fe fc73 	bl	8002bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042ca:	bf00      	nop
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20004984 	.word	0x20004984
 80042d8:	20004974 	.word	0x20004974
 80042dc:	20004980 	.word	0x20004980

080042e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80042ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042ec:	4b27      	ldr	r3, [pc, #156]	@ (800438c <prvHeapInit+0xac>)
 80042ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00c      	beq.n	8004314 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3307      	adds	r3, #7
 80042fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0307 	bic.w	r3, r3, #7
 8004306:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	4a1f      	ldr	r2, [pc, #124]	@ (800438c <prvHeapInit+0xac>)
 8004310:	4413      	add	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <prvHeapInit+0xb0>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800431e:	4b1c      	ldr	r3, [pc, #112]	@ (8004390 <prvHeapInit+0xb0>)
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4413      	add	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800432c:	2208      	movs	r2, #8
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a15      	ldr	r2, [pc, #84]	@ (8004394 <prvHeapInit+0xb4>)
 8004340:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004342:	4b14      	ldr	r3, [pc, #80]	@ (8004394 <prvHeapInit+0xb4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800434a:	4b12      	ldr	r3, [pc, #72]	@ (8004394 <prvHeapInit+0xb4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	1ad2      	subs	r2, r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004360:	4b0c      	ldr	r3, [pc, #48]	@ (8004394 <prvHeapInit+0xb4>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <prvHeapInit+0xb8>)
 800436e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a09      	ldr	r2, [pc, #36]	@ (800439c <prvHeapInit+0xbc>)
 8004376:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004378:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <prvHeapInit+0xc0>)
 800437a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20000d68 	.word	0x20000d68
 8004390:	20004968 	.word	0x20004968
 8004394:	20004970 	.word	0x20004970
 8004398:	20004978 	.word	0x20004978
 800439c:	20004974 	.word	0x20004974
 80043a0:	20004984 	.word	0x20004984

080043a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043ac:	4b28      	ldr	r3, [pc, #160]	@ (8004450 <prvInsertBlockIntoFreeList+0xac>)
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e002      	b.n	80043b8 <prvInsertBlockIntoFreeList+0x14>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d8f7      	bhi.n	80043b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4413      	add	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d108      	bne.n	80043e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	441a      	add	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	441a      	add	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d118      	bne.n	800442c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <prvInsertBlockIntoFreeList+0xb0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d00d      	beq.n	8004422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e008      	b.n	8004434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004422:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <prvInsertBlockIntoFreeList+0xb0>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e003      	b.n	8004434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d002      	beq.n	8004442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20004968 	.word	0x20004968
 8004454:	20004970 	.word	0x20004970

08004458 <memset>:
 8004458:	4402      	add	r2, r0
 800445a:	4603      	mov	r3, r0
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	f803 1b01 	strb.w	r1, [r3], #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4d0d      	ldr	r5, [pc, #52]	@ (80044a0 <__libc_init_array+0x38>)
 800446c:	4c0d      	ldr	r4, [pc, #52]	@ (80044a4 <__libc_init_array+0x3c>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	2600      	movs	r6, #0
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	4d0b      	ldr	r5, [pc, #44]	@ (80044a8 <__libc_init_array+0x40>)
 800447a:	4c0c      	ldr	r4, [pc, #48]	@ (80044ac <__libc_init_array+0x44>)
 800447c:	f000 f826 	bl	80044cc <_init>
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	2600      	movs	r6, #0
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08004574 	.word	0x08004574
 80044a4:	08004574 	.word	0x08004574
 80044a8:	08004574 	.word	0x08004574
 80044ac:	08004578 	.word	0x08004578

080044b0 <memcpy>:
 80044b0:	440a      	add	r2, r1
 80044b2:	4291      	cmp	r1, r2
 80044b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b8:	d100      	bne.n	80044bc <memcpy+0xc>
 80044ba:	4770      	bx	lr
 80044bc:	b510      	push	{r4, lr}
 80044be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c6:	4291      	cmp	r1, r2
 80044c8:	d1f9      	bne.n	80044be <memcpy+0xe>
 80044ca:	bd10      	pop	{r4, pc}

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
