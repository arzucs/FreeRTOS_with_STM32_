
freeRTOS_SEGGER_SystemView_DMU_CanBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078fc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08007acc  08007acc  00008acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d68  08007d68  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007d68  08007d68  00008d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d70  08007d70  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d70  08007d70  00008d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d74  08007d74  00008d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007d78  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007304  20000064  08007ddc  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007368  08007ddc  00009368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d705  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c85  00000000  00000000  00026799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0002a420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001318  00000000  00000000  0002bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052e2  00000000  00000000  0002d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b249  00000000  00000000  000322ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eee4e  00000000  00000000  0004d533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e24  00000000  00000000  0013c3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c4  00000000  00000000  001431e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ab4 	.word	0x08007ab4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007ab4 	.word	0x08007ab4

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20004c4c 	.word	0x20004c4c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	SEGGER_SYSVIEW_Conf();
 8000356:	f005 fc5d 	bl	8005c14 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 800035a:	f006 fa7f 	bl	800685c <SEGGER_SYSVIEW_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 fd8b 	bl	8000e78 <HAL_Init>
  /* USER CODE END Init */

  /* Configure the system clock */

  /* USER CODE BEGIN SysInit */
  SystemCoreClockUpdate();
 8000362:	f000 fcdf 	bl	8000d24 <SystemCoreClockUpdate>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 f96d 	bl	8000644 <MX_GPIO_Init>
  MX_ADC1_Init();
 800036a:	f000 f8b9 	bl	80004e0 <MX_ADC1_Init>
  MX_CAN1_Init();
 800036e:	f000 f909 	bl	8000584 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000372:	484a      	ldr	r0, [pc, #296]	@ (800049c <main+0x14c>)
 8000374:	f001 fbd2 	bl	8001b1c <HAL_CAN_Start>

      // Activate interrupt
  //	  // set filter parameter
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000378:	2102      	movs	r1, #2
 800037a:	4848      	ldr	r0, [pc, #288]	@ (800049c <main+0x14c>)
 800037c:	f001 fe04 	bl	8001f88 <HAL_CAN_ActivateNotification>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <main+0x3a>
      {
        Error_Handler();
 8000386:	f000 fb05 	bl	8000994 <Error_Handler>
      }
      sFilterConfig.FilterBank = 0;
 800038a:	4b45      	ldr	r3, [pc, #276]	@ (80004a0 <main+0x150>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000390:	4b43      	ldr	r3, [pc, #268]	@ (80004a0 <main+0x150>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000396:	4b42      	ldr	r3, [pc, #264]	@ (80004a0 <main+0x150>)
 8000398:	2201      	movs	r2, #1
 800039a:	61da      	str	r2, [r3, #28]
      sFilterConfig.FilterIdHigh = 0x0000;
 800039c:	4b40      	ldr	r3, [pc, #256]	@ (80004a0 <main+0x150>)
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
      sFilterConfig.FilterIdLow = 0x0000 ;
 80003a2:	4b3f      	ldr	r3, [pc, #252]	@ (80004a0 <main+0x150>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
      sFilterConfig.FilterMaskIdHigh =0x0000; // 0xFFF0- 0x0150 dersek yine aynı şeyi yapar
 80003a8:	4b3d      	ldr	r3, [pc, #244]	@ (80004a0 <main+0x150>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	609a      	str	r2, [r3, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000;
 80003ae:	4b3c      	ldr	r3, [pc, #240]	@ (80004a0 <main+0x150>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	60da      	str	r2, [r3, #12]
      sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003b4:	4b3a      	ldr	r3, [pc, #232]	@ (80004a0 <main+0x150>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
      sFilterConfig.FilterActivation = ENABLE;
 80003ba:	4b39      	ldr	r3, [pc, #228]	@ (80004a0 <main+0x150>)
 80003bc:	2201      	movs	r2, #1
 80003be:	621a      	str	r2, [r3, #32]
      HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &amp1.RxHeader, &amp1.RxData);
 80003c0:	4b38      	ldr	r3, [pc, #224]	@ (80004a4 <main+0x154>)
 80003c2:	4a39      	ldr	r2, [pc, #228]	@ (80004a8 <main+0x158>)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4835      	ldr	r0, [pc, #212]	@ (800049c <main+0x14c>)
 80003c8:	f001 fcbc 	bl	8001d44 <HAL_CAN_GetRxMessage>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003cc:	2102      	movs	r1, #2
 80003ce:	4833      	ldr	r0, [pc, #204]	@ (800049c <main+0x14c>)
 80003d0:	f001 fdda 	bl	8001f88 <HAL_CAN_ActivateNotification>
      if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80003d4:	4932      	ldr	r1, [pc, #200]	@ (80004a0 <main+0x150>)
 80003d6:	4831      	ldr	r0, [pc, #196]	@ (800049c <main+0x14c>)
 80003d8:	f001 fac0 	bl	800195c <HAL_CAN_ConfigFilter>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <main+0x96>
      {
        Error_Handler();
 80003e2:	f000 fad7 	bl	8000994 <Error_Handler>
      }

      amp1.RxHeader.StdId=0x0000;
 80003e6:	4b31      	ldr	r3, [pc, #196]	@ (80004ac <main+0x15c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
      amp1.RxHeader.DLC=8;
 80003ec:	4b2f      	ldr	r3, [pc, #188]	@ (80004ac <main+0x15c>)
 80003ee:	2208      	movs	r2, #8
 80003f0:	629a      	str	r2, [r3, #40]	@ 0x28
      amp1.RxHeader.IDE=CAN_ID_STD;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <main+0x15c>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
      amp1.RxHeader.RTR=CAN_RTR_DATA;
 80003f8:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <main+0x15c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24

      amp1.pTxHeader.StdId= 0x0000;// 0x07E1
 80003fe:	4b2b      	ldr	r3, [pc, #172]	@ (80004ac <main+0x15c>)
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
      amp1.pTxHeader.DLC=8;
 8000404:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <main+0x15c>)
 8000406:	2208      	movs	r2, #8
 8000408:	611a      	str	r2, [r3, #16]
      amp1.pTxHeader.IDE=CAN_ID_STD;
 800040a:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <main+0x15c>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
      amp1.pTxHeader.RTR = CAN_RTR_DATA;
 8000410:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <main+0x15c>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]

  	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000416:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <main+0x150>)
 8000418:	4820      	ldr	r0, [pc, #128]	@ (800049c <main+0x14c>)
 800041a:	f001 fa9f 	bl	800195c <HAL_CAN_ConfigFilter>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800041e:	f002 fdf3 	bl	8003008 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000422:	4a23      	ldr	r2, [pc, #140]	@ (80004b0 <main+0x160>)
 8000424:	2100      	movs	r1, #0
 8000426:	4823      	ldr	r0, [pc, #140]	@ (80004b4 <main+0x164>)
 8000428:	f002 fe38 	bl	800309c <osThreadNew>
 800042c:	4603      	mov	r3, r0
 800042e:	4a22      	ldr	r2, [pc, #136]	@ (80004b8 <main+0x168>)
 8000430:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000432:	4a22      	ldr	r2, [pc, #136]	@ (80004bc <main+0x16c>)
 8000434:	2100      	movs	r1, #0
 8000436:	4822      	ldr	r0, [pc, #136]	@ (80004c0 <main+0x170>)
 8000438:	f002 fe30 	bl	800309c <osThreadNew>
 800043c:	4603      	mov	r3, r0
 800043e:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <main+0x174>)
 8000440:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000442:	4a21      	ldr	r2, [pc, #132]	@ (80004c8 <main+0x178>)
 8000444:	2100      	movs	r1, #0
 8000446:	4821      	ldr	r0, [pc, #132]	@ (80004cc <main+0x17c>)
 8000448:	f002 fe28 	bl	800309c <osThreadNew>
 800044c:	4603      	mov	r3, r0
 800044e:	4a20      	ldr	r2, [pc, #128]	@ (80004d0 <main+0x180>)
 8000450:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(StartDefaultTask,"myTask01",configMINIMAL_STACK_SIZE, NULL, 4, &defaultTask_attributes);
 8000452:	4b17      	ldr	r3, [pc, #92]	@ (80004b0 <main+0x160>)
 8000454:	9301      	str	r3, [sp, #4]
 8000456:	2304      	movs	r3, #4
 8000458:	9300      	str	r3, [sp, #0]
 800045a:	2300      	movs	r3, #0
 800045c:	2280      	movs	r2, #128	@ 0x80
 800045e:	491d      	ldr	r1, [pc, #116]	@ (80004d4 <main+0x184>)
 8000460:	4814      	ldr	r0, [pc, #80]	@ (80004b4 <main+0x164>)
 8000462:	f003 fd0b 	bl	8003e7c <xTaskCreate>
  xTaskCreate(StartTask02, "myTask02", configMINIMAL_STACK_SIZE, NULL, 4, &myTask02_attributes);
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <main+0x16c>)
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	2304      	movs	r3, #4
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2300      	movs	r3, #0
 8000470:	2280      	movs	r2, #128	@ 0x80
 8000472:	4919      	ldr	r1, [pc, #100]	@ (80004d8 <main+0x188>)
 8000474:	4812      	ldr	r0, [pc, #72]	@ (80004c0 <main+0x170>)
 8000476:	f003 fd01 	bl	8003e7c <xTaskCreate>
  xTaskCreate(StartTask03, "myTask03", configMINIMAL_STACK_SIZE, NULL, 4, &myTask03_attributes);
 800047a:	4b13      	ldr	r3, [pc, #76]	@ (80004c8 <main+0x178>)
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	2304      	movs	r3, #4
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2300      	movs	r3, #0
 8000484:	2280      	movs	r2, #128	@ 0x80
 8000486:	4915      	ldr	r1, [pc, #84]	@ (80004dc <main+0x18c>)
 8000488:	4810      	ldr	r0, [pc, #64]	@ (80004cc <main+0x17c>)
 800048a:	f003 fcf7 	bl	8003e7c <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800048e:	f002 fddf 	bl	8003050 <osKernelStart>
  vTaskStartScheduler();
 8000492:	f003 fe87 	bl	80041a4 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000496:	bf00      	nop
 8000498:	e7fd      	b.n	8000496 <main+0x146>
 800049a:	bf00      	nop
 800049c:	200000f4 	.word	0x200000f4
 80004a0:	20000084 	.word	0x20000084
 80004a4:	2000016c 	.word	0x2000016c
 80004a8:	20000148 	.word	0x20000148
 80004ac:	20000130 	.word	0x20000130
 80004b0:	08007b88 	.word	0x08007b88
 80004b4:	08000785 	.word	0x08000785
 80004b8:	2000011c 	.word	0x2000011c
 80004bc:	08007bac 	.word	0x08007bac
 80004c0:	080007e5 	.word	0x080007e5
 80004c4:	20000120 	.word	0x20000120
 80004c8:	08007bd0 	.word	0x08007bd0
 80004cc:	0800094d 	.word	0x0800094d
 80004d0:	20000124 	.word	0x20000124
 80004d4:	08007af0 	.word	0x08007af0
 80004d8:	08007ad8 	.word	0x08007ad8
 80004dc:	08007ae4 	.word	0x08007ae4

080004e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e6:	463b      	mov	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f2:	4b21      	ldr	r3, [pc, #132]	@ (8000578 <MX_ADC1_Init+0x98>)
 80004f4:	4a21      	ldr	r2, [pc, #132]	@ (800057c <MX_ADC1_Init+0x9c>)
 80004f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000578 <MX_ADC1_Init+0x98>)
 80004fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000500:	4b1d      	ldr	r3, [pc, #116]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000506:	4b1c      	ldr	r3, [pc, #112]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000508:	2201      	movs	r2, #1
 800050a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050c:	4b1a      	ldr	r3, [pc, #104]	@ (8000578 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000512:	4b19      	ldr	r3, [pc, #100]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000514:	2200      	movs	r2, #0
 8000516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051a:	4b17      	ldr	r3, [pc, #92]	@ (8000578 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000520:	4b15      	ldr	r3, [pc, #84]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000522:	4a17      	ldr	r2, [pc, #92]	@ (8000580 <MX_ADC1_Init+0xa0>)
 8000524:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000526:	4b14      	ldr	r3, [pc, #80]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <MX_ADC1_Init+0x98>)
 800052e:	2201      	movs	r2, #1
 8000530:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000532:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053a:	4b0f      	ldr	r3, [pc, #60]	@ (8000578 <MX_ADC1_Init+0x98>)
 800053c:	2201      	movs	r2, #1
 800053e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000540:	480d      	ldr	r0, [pc, #52]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000542:	f000 fcff 	bl	8000f44 <HAL_ADC_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800054c:	f000 fa22 	bl	8000994 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000554:	2301      	movs	r3, #1
 8000556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055c:	463b      	mov	r3, r7
 800055e:	4619      	mov	r1, r3
 8000560:	4805      	ldr	r0, [pc, #20]	@ (8000578 <MX_ADC1_Init+0x98>)
 8000562:	f000 fed1 	bl	8001308 <HAL_ADC_ConfigChannel>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800056c:	f000 fa12 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000ac 	.word	0x200000ac
 800057c:	40012000 	.word	0x40012000
 8000580:	0f000001 	.word	0x0f000001

08000584 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000588:	4b2b      	ldr	r3, [pc, #172]	@ (8000638 <MX_CAN1_Init+0xb4>)
 800058a:	4a2c      	ldr	r2, [pc, #176]	@ (800063c <MX_CAN1_Init+0xb8>)
 800058c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800058e:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <MX_CAN1_Init+0xb4>)
 8000590:	220c      	movs	r2, #12
 8000592:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <MX_CAN1_Init+0xb4>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800059a:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <MX_CAN1_Init+0xb4>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005a2:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80005a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005a8:	4b23      	ldr	r3, [pc, #140]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80005ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b0:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005b6:	4b20      	ldr	r3, [pc, #128]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005d4:	4818      	ldr	r0, [pc, #96]	@ (8000638 <MX_CAN1_Init+0xb4>)
 80005d6:	f001 f8c5 	bl	8001764 <HAL_CAN_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005e0:	f000 f9d8 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  sFilterConfig.FilterBank = 0;                            // value between 0 to 13 for JUST Master Mode (CAN1)
 80005e4:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_CAN1_Init+0xbc>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;       // for filtering Identifiers
 80005ea:	4b15      	ldr	r3, [pc, #84]	@ (8000640 <MX_CAN1_Init+0xbc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;     // for Scaling filtering (if use EXTENDED CAN this must be 32BIT)
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_CAN1_Init+0xbc>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  	sFilterConfig.FilterIdHigh =0;         				  // First Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_CAN1_Init+0xbc>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
  	sFilterConfig.FilterIdLow = 0;                   	 // First Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 80005fc:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_CAN1_Init+0xbc>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
  	sFilterConfig.FilterMaskIdHigh = 0;                 // Second Identifier MSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000602:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_CAN1_Init+0xbc>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  	sFilterConfig.FilterMaskIdLow = 0;                 // Second Identifier LSB value for receiving in IDLIST Mode for 32BIT Scaling
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_CAN1_Init+0xbc>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;// specify FIFO0 or FIFO1
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_CAN1_Init+0xbc>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  	sFilterConfig.FilterActivation = ENABLE;		 // Enable filtering
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_CAN1_Init+0xbc>)
 8000616:	2201      	movs	r2, #1
 8000618:	621a      	str	r2, [r3, #32]
  	sFilterConfig.SlaveStartFilterBank = 14;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_CAN1_Init+0xbc>)
 800061c:	220e      	movs	r2, #14
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
  	  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000620:	4907      	ldr	r1, [pc, #28]	@ (8000640 <MX_CAN1_Init+0xbc>)
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_CAN1_Init+0xb4>)
 8000624:	f001 f99a 	bl	800195c <HAL_CAN_ConfigFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_CAN1_Init+0xae>
  	  {
  	    Error_Handler();
 800062e:	f000 f9b1 	bl	8000994 <Error_Handler>
  	  }
  /* USER CODE END CAN1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000f4 	.word	0x200000f4
 800063c:	40006400 	.word	0x40006400
 8000640:	20000084 	.word	0x20000084

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	@ 0x30
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
 800065e:	4b45      	ldr	r3, [pc, #276]	@ (8000774 <MX_GPIO_Init+0x130>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a44      	ldr	r2, [pc, #272]	@ (8000774 <MX_GPIO_Init+0x130>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b42      	ldr	r3, [pc, #264]	@ (8000774 <MX_GPIO_Init+0x130>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0304 	and.w	r3, r3, #4
 8000672:	61bb      	str	r3, [r7, #24]
 8000674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	4b3e      	ldr	r3, [pc, #248]	@ (8000774 <MX_GPIO_Init+0x130>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a3d      	ldr	r2, [pc, #244]	@ (8000774 <MX_GPIO_Init+0x130>)
 8000680:	f043 0320 	orr.w	r3, r3, #32
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b3b      	ldr	r3, [pc, #236]	@ (8000774 <MX_GPIO_Init+0x130>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0320 	and.w	r3, r3, #32
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <MX_GPIO_Init+0x130>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a36      	ldr	r2, [pc, #216]	@ (8000774 <MX_GPIO_Init+0x130>)
 800069c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b34      	ldr	r3, [pc, #208]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	4a28      	ldr	r2, [pc, #160]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006d4:	f043 0310 	orr.w	r3, r3, #16
 80006d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006da:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
 80006ea:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a21      	ldr	r2, [pc, #132]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_GPIO_Init+0x130>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000708:	481b      	ldr	r0, [pc, #108]	@ (8000778 <MX_GPIO_Init+0x134>)
 800070a:	f002 f92b 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2107      	movs	r1, #7
 8000712:	481a      	ldr	r0, [pc, #104]	@ (800077c <MX_GPIO_Init+0x138>)
 8000714:	f002 f926 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <MX_GPIO_Init+0x134>)
 8000732:	f001 ff6b 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000736:	2307      	movs	r3, #7
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <MX_GPIO_Init+0x138>)
 800074e:	f001 ff5d 	bl	800260c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000752:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4806      	ldr	r0, [pc, #24]	@ (8000780 <MX_GPIO_Init+0x13c>)
 8000768:	f001 ff50 	bl	800260c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076c:	bf00      	nop
 800076e:	3730      	adds	r7, #48	@ 0x30
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020800 	.word	0x40020800
 800077c:	40021400 	.word	0x40021400
 8000780:	40021000 	.word	0x40021000

08000784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	  if(acces_key == 1)
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <StartDefaultTask+0x54>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d01b      	beq.n	80007cc <StartDefaultTask+0x48>
	  {
		  acces_key =0;
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <StartDefaultTask+0x54>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2101      	movs	r1, #1
 800079e:	480f      	ldr	r0, [pc, #60]	@ (80007dc <StartDefaultTask+0x58>)
 80007a0:	f002 f8e0 	bl	8002964 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80007a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a8:	f000 fba8 	bl	8000efc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	480a      	ldr	r0, [pc, #40]	@ (80007dc <StartDefaultTask+0x58>)
 80007b2:	f002 f8d7 	bl	8002964 <HAL_GPIO_WritePin>
		  acces_key =1;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <StartDefaultTask+0x54>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
		  taskYIELD();
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <StartDefaultTask+0x5c>)
 80007be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	f3bf 8f4f 	dsb	sy
 80007c8:	f3bf 8f6f 	isb	sy
	  }
	    osDelay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d0:	f002 fcf6 	bl	80031c0 <osDelay>
	  if(acces_key == 1)
 80007d4:	e7da      	b.n	800078c <StartDefaultTask+0x8>
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	40021400 	.word	0x40021400
 80007e0:	e000ed04 	.word	0xe000ed04

080007e4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(digital_output == 0)
 80007ec:	4b4b      	ldr	r3, [pc, #300]	@ (800091c <StartTask02+0x138>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	f040 8082 	bne.w	80008fa <StartTask02+0x116>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fc:	4848      	ldr	r0, [pc, #288]	@ (8000920 <StartTask02+0x13c>)
 80007fe:	f002 f8b1 	bl	8002964 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8000802:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000806:	f000 fb79 	bl	8000efc <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000810:	4843      	ldr	r0, [pc, #268]	@ (8000920 <StartTask02+0x13c>)
 8000812:	f002 f8a7 	bl	8002964 <HAL_GPIO_WritePin>

	  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	4842      	ldr	r0, [pc, #264]	@ (8000924 <StartTask02+0x140>)
 800081c:	f002 f8a2 	bl	8002964 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8000820:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000824:	f000 fb6a 	bl	8000efc <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2102      	movs	r1, #2
 800082c:	483d      	ldr	r0, [pc, #244]	@ (8000924 <StartTask02+0x140>)
 800082e:	f002 f899 	bl	8002964 <HAL_GPIO_WritePin>

	  	  HAL_ADC_Start(&hadc1);  // ADC'yi başlat
 8000832:	483d      	ldr	r0, [pc, #244]	@ (8000928 <StartTask02+0x144>)
 8000834:	f000 fbca 	bl	8000fcc <HAL_ADC_Start>

	  		    if(HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK)
 8000838:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800083c:	483a      	ldr	r0, [pc, #232]	@ (8000928 <StartTask02+0x144>)
 800083e:	f000 fcca 	bl	80011d6 <HAL_ADC_PollForConversion>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d158      	bne.n	80008fa <StartTask02+0x116>
	  		    {
	  	//	    	TxData[0] = HAL_ADC_GetValue(&hadc1);
	  	//	    	HAL_ADC_GetValue(&hadc1);

	  		        amp1.TxData[0]=HAL_ADC_GetValue(&hadc1);
 8000848:	4837      	ldr	r0, [pc, #220]	@ (8000928 <StartTask02+0x144>)
 800084a:	f000 fd4f 	bl	80012ec <HAL_ADC_GetValue>
 800084e:	4603      	mov	r3, r0
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b36      	ldr	r3, [pc, #216]	@ (800092c <StartTask02+0x148>)
 8000854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	  	//	        amp1.TxData[3]=0x01;
	  	//	        amp1.TxData[4]=0x20;
	  	//	        amp1.TxData[5]=0x12;
	  	//	     	amp1.TxData[6]=0x00;
	  	//	        amp1.TxData[7]=0x30;
	  		        HAL_CAN_AddTxMessage(&hcan1, &amp1.pTxHeader, amp1.TxData, &amp1.TxMailbox);
 8000858:	4b35      	ldr	r3, [pc, #212]	@ (8000930 <StartTask02+0x14c>)
 800085a:	4a36      	ldr	r2, [pc, #216]	@ (8000934 <StartTask02+0x150>)
 800085c:	4933      	ldr	r1, [pc, #204]	@ (800092c <StartTask02+0x148>)
 800085e:	4836      	ldr	r0, [pc, #216]	@ (8000938 <StartTask02+0x154>)
 8000860:	f001 f9a0 	bl	8001ba4 <HAL_CAN_AddTxMessage>
//	  		        HAL_Delay(500);

	  		        if(amp1.RxData[0] != 0xFF)
 8000864:	4b31      	ldr	r3, [pc, #196]	@ (800092c <StartTask02+0x148>)
 8000866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800086a:	2bff      	cmp	r3, #255	@ 0xff
 800086c:	d020      	beq.n	80008b0 <StartTask02+0xcc>
	  		        {
	  		        sprintf(amp1_buff1, "%d", amp1.RxData[4]);
 800086e:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <StartTask02+0x148>)
 8000870:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000874:	461a      	mov	r2, r3
 8000876:	4931      	ldr	r1, [pc, #196]	@ (800093c <StartTask02+0x158>)
 8000878:	4831      	ldr	r0, [pc, #196]	@ (8000940 <StartTask02+0x15c>)
 800087a:	f006 fc25 	bl	80070c8 <siprintf>
	  		        sprintf(amp1_buff2, "%d", amp1.RxData[5]);
 800087e:	4b2b      	ldr	r3, [pc, #172]	@ (800092c <StartTask02+0x148>)
 8000880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000884:	461a      	mov	r2, r3
 8000886:	492d      	ldr	r1, [pc, #180]	@ (800093c <StartTask02+0x158>)
 8000888:	482e      	ldr	r0, [pc, #184]	@ (8000944 <StartTask02+0x160>)
 800088a:	f006 fc1d 	bl	80070c8 <siprintf>
	  		       	amp1.feedback_amp= atoi(amp1_buff2)*256 + atoi(amp1_buff1);  //atoi (ASCII to Integer), bir C kütüphane fonksiyonudur ve bir C string'ini (char dizisini) tamsayı (int) veri türüne dönüştürmek için kullanılır.
 800088e:	482d      	ldr	r0, [pc, #180]	@ (8000944 <StartTask02+0x160>)
 8000890:	f006 fb92 	bl	8006fb8 <atoi>
 8000894:	4603      	mov	r3, r0
 8000896:	b29b      	uxth	r3, r3
 8000898:	021b      	lsls	r3, r3, #8
 800089a:	b29c      	uxth	r4, r3
 800089c:	4828      	ldr	r0, [pc, #160]	@ (8000940 <StartTask02+0x15c>)
 800089e:	f006 fb8b 	bl	8006fb8 <atoi>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4423      	add	r3, r4
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	4b20      	ldr	r3, [pc, #128]	@ (800092c <StartTask02+0x148>)
 80008ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80008ae:	e021      	b.n	80008f4 <StartTask02+0x110>
	  		        }else{
	  		        sprintf(amp1_buff1, "%d", amp1.RxData[4]);
 80008b0:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <StartTask02+0x148>)
 80008b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80008b6:	461a      	mov	r2, r3
 80008b8:	4920      	ldr	r1, [pc, #128]	@ (800093c <StartTask02+0x158>)
 80008ba:	4821      	ldr	r0, [pc, #132]	@ (8000940 <StartTask02+0x15c>)
 80008bc:	f006 fc04 	bl	80070c8 <siprintf>
	  		        sprintf(amp1_buff2, "%d", amp1.RxData[5]);
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <StartTask02+0x148>)
 80008c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80008c6:	461a      	mov	r2, r3
 80008c8:	491c      	ldr	r1, [pc, #112]	@ (800093c <StartTask02+0x158>)
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <StartTask02+0x160>)
 80008cc:	f006 fbfc 	bl	80070c8 <siprintf>
	  		        amp1.feedback_amp = 65536 - (atoi(amp1_buff2)*256 + atoi(amp1_buff1));
 80008d0:	481c      	ldr	r0, [pc, #112]	@ (8000944 <StartTask02+0x160>)
 80008d2:	f006 fb71 	bl	8006fb8 <atoi>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29b      	uxth	r3, r3
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b29c      	uxth	r4, r3
 80008de:	4818      	ldr	r0, [pc, #96]	@ (8000940 <StartTask02+0x15c>)
 80008e0:	f006 fb6a 	bl	8006fb8 <atoi>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	4423      	add	r3, r4
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	425b      	negs	r3, r3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <StartTask02+0x148>)
 80008f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
	  		        }
	  		        HAL_Delay(1);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fb01 	bl	8000efc <HAL_Delay>

	  		    }
	  	}
	  		    HAL_ADC_Stop(&hadc1);
 80008fa:	480b      	ldr	r0, [pc, #44]	@ (8000928 <StartTask02+0x144>)
 80008fc:	f000 fc38 	bl	8001170 <HAL_ADC_Stop>
	  taskYIELD();
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <StartTask02+0x164>)
 8000902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	f3bf 8f6f 	isb	sy
	  osDelay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000914:	f002 fc54 	bl	80031c0 <osDelay>
	  if(digital_output == 0)
 8000918:	e768      	b.n	80007ec <StartTask02+0x8>
 800091a:	bf00      	nop
 800091c:	20000080 	.word	0x20000080
 8000920:	40020800 	.word	0x40020800
 8000924:	40021400 	.word	0x40021400
 8000928:	200000ac 	.word	0x200000ac
 800092c:	20000130 	.word	0x20000130
 8000930:	20000168 	.word	0x20000168
 8000934:	20000164 	.word	0x20000164
 8000938:	200000f4 	.word	0x200000f4
 800093c:	08007afc 	.word	0x08007afc
 8000940:	20000128 	.word	0x20000128
 8000944:	2000012c 	.word	0x2000012c
 8000948:	e000ed04 	.word	0xe000ed04

0800094c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  digital_output=HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13);
 8000954:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000958:	4803      	ldr	r0, [pc, #12]	@ (8000968 <StartTask03+0x1c>)
 800095a:	f001 ffeb 	bl	8002934 <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b02      	ldr	r3, [pc, #8]	@ (800096c <StartTask03+0x20>)
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e7f5      	b.n	8000954 <StartTask03+0x8>
 8000968:	40021000 	.word	0x40021000
 800096c:	20000080 	.word	0x20000080

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 fa9b 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40001000 	.word	0x40001000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <HAL_MspInit+0x64>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	4a15      	ldr	r2, [pc, #84]	@ (8000a04 <HAL_MspInit+0x64>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b6:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <HAL_MspInit+0x64>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <HAL_MspInit+0x64>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_MspInit+0x64>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_MspInit+0x64>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f001 fde7 	bl	80025b8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2105      	movs	r1, #5
 80009ee:	2005      	movs	r0, #5
 80009f0:	f001 fde2 	bl	80025b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80009f4:	2005      	movs	r0, #5
 80009f6:	f001 fdfb 	bl	80025f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_ADC_MspInit+0x7c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d127      	bne.n	8000a7a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_ADC_MspInit+0x80>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_ADC_MspInit+0x84>)
 8000a76:	f001 fdc9 	bl	800260c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	@ 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40012000 	.word	0x40012000
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	@ (8000b24 <HAL_CAN_MspInit+0x94>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d134      	bne.n	8000b1c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a1b      	ldr	r2, [pc, #108]	@ (8000b28 <HAL_CAN_MspInit+0x98>)
 8000abc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ad8:	f043 0302 	orr.w	r3, r3, #2
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_CAN_MspInit+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000afc:	2309      	movs	r3, #9
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <HAL_CAN_MspInit+0x9c>)
 8000b08:	f001 fd80 	bl	800260c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2105      	movs	r1, #5
 8000b10:	2014      	movs	r0, #20
 8000b12:	f001 fd51 	bl	80025b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b16:	2014      	movs	r0, #20
 8000b18:	f001 fd6a 	bl	80025f0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b1c:	bf00      	nop
 8000b1e:	3728      	adds	r7, #40	@ 0x28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40006400 	.word	0x40006400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	4b33      	ldr	r3, [pc, #204]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	4a32      	ldr	r2, [pc, #200]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b50:	4b30      	ldr	r3, [pc, #192]	@ (8000c14 <HAL_InitTick+0xe4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b5c:	f107 0210 	add.w	r2, r7, #16
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4611      	mov	r1, r2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 ff36 	bl	80029d8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b76:	f001 ff1b 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8000b7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b7e:	f001 ff17 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8000b82:	4603      	mov	r3, r0
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b8a:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <HAL_InitTick+0xe8>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9b      	lsrs	r3, r3, #18
 8000b92:	3b01      	subs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_InitTick+0xec>)
 8000b98:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <HAL_InitTick+0xf0>)
 8000b9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <HAL_InitTick+0xec>)
 8000b9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <HAL_InitTick+0xec>)
 8000ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bbe:	f001 ff3d 	bl	8002a3c <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d11b      	bne.n	8000c08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bd0:	4812      	ldr	r0, [pc, #72]	@ (8000c1c <HAL_InitTick+0xec>)
 8000bd2:	f001 ff8d 	bl	8002af0 <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be4:	2036      	movs	r0, #54	@ 0x36
 8000be6:	f001 fd03 	bl	80025f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d808      	bhi.n	8000c02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	2036      	movs	r0, #54	@ 0x36
 8000bf6:	f001 fcdf 	bl	80025b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_InitTick+0xf4>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e002      	b.n	8000c08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3738      	adds	r7, #56	@ 0x38
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40023800 	.word	0x40023800
 8000c18:	431bde83 	.word	0x431bde83
 8000c1c:	20000170 	.word	0x20000170
 8000c20:	40001000 	.word	0x40001000
 8000c24:	20000008 	.word	0x20000008

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c70:	4802      	ldr	r0, [pc, #8]	@ (8000c7c <CAN1_RX0_IRQHandler+0x10>)
 8000c72:	f001 f9af 	bl	8001fd4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000f4 	.word	0x200000f4

08000c80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <TIM6_DAC_IRQHandler+0x10>)
 8000c86:	f001 ffa3 	bl	8002bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000170 	.word	0x20000170

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f006 fa7e 	bl	80071c4 <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20020000 	.word	0x20020000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	200001b8 	.word	0x200001b8
 8000cfc:	20007368 	.word	0x20007368

08000d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	2302      	movs	r3, #2
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d3e:	4b34      	ldr	r3, [pc, #208]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d011      	beq.n	8000d72 <SystemCoreClockUpdate+0x4e>
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d844      	bhi.n	8000dde <SystemCoreClockUpdate+0xba>
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <SystemCoreClockUpdate+0x3e>
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d004      	beq.n	8000d6a <SystemCoreClockUpdate+0x46>
 8000d60:	e03d      	b.n	8000dde <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d62:	4b2c      	ldr	r3, [pc, #176]	@ (8000e14 <SystemCoreClockUpdate+0xf0>)
 8000d64:	4a2c      	ldr	r2, [pc, #176]	@ (8000e18 <SystemCoreClockUpdate+0xf4>)
 8000d66:	601a      	str	r2, [r3, #0]
      break;
 8000d68:	e03d      	b.n	8000de6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e14 <SystemCoreClockUpdate+0xf0>)
 8000d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8000e1c <SystemCoreClockUpdate+0xf8>)
 8000d6e:	601a      	str	r2, [r3, #0]
      break;
 8000d70:	e039      	b.n	8000de6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	0d9b      	lsrs	r3, r3, #22
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d7e:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d86:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00c      	beq.n	8000da8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d8e:	4a23      	ldr	r2, [pc, #140]	@ (8000e1c <SystemCoreClockUpdate+0xf8>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4a1e      	ldr	r2, [pc, #120]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000d98:	6852      	ldr	r2, [r2, #4]
 8000d9a:	0992      	lsrs	r2, r2, #6
 8000d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00b      	b.n	8000dc0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000da8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e18 <SystemCoreClockUpdate+0xf4>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db0:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000db2:	6852      	ldr	r2, [r2, #4]
 8000db4:	0992      	lsrs	r2, r2, #6
 8000db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	0c1b      	lsrs	r3, r3, #16
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	3301      	adds	r3, #1
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <SystemCoreClockUpdate+0xf0>)
 8000dda:	6013      	str	r3, [r2, #0]
      break;
 8000ddc:	e003      	b.n	8000de6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <SystemCoreClockUpdate+0xf0>)
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <SystemCoreClockUpdate+0xf4>)
 8000de2:	601a      	str	r2, [r3, #0]
      break;
 8000de4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <SystemCoreClockUpdate+0xec>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	091b      	lsrs	r3, r3, #4
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	4a0b      	ldr	r2, [pc, #44]	@ (8000e20 <SystemCoreClockUpdate+0xfc>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <SystemCoreClockUpdate+0xf0>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <SystemCoreClockUpdate+0xf0>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	371c      	adds	r7, #28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40023800 	.word	0x40023800
 8000e14:	20000004 	.word	0x20000004
 8000e18:	00f42400 	.word	0x00f42400
 8000e1c:	007a1200 	.word	0x007a1200
 8000e20:	08007bf4 	.word	0x08007bf4

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e28:	f7ff ff6a 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f006 f9bd 	bl	80071d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fa7b 	bl	8000350 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e68:	08007d78 	.word	0x08007d78
  ldr r2, =_sbss
 8000e6c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e70:	20007368 	.word	0x20007368

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f001 fb7e 	bl	80025a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff fe42 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fd78 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	200001bc 	.word	0x200001bc

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200001bc 	.word	0x200001bc

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000000c 	.word	0x2000000c

08000f44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e033      	b.n	8000fc2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d109      	bne.n	8000f76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fd50 	bl	8000a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d118      	bne.n	8000fb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f8a:	f023 0302 	bic.w	r3, r3, #2
 8000f8e:	f043 0202 	orr.w	r2, r3, #2
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fae8 	bl	800156c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f023 0303 	bic.w	r3, r3, #3
 8000faa:	f043 0201 	orr.w	r2, r3, #1
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fb2:	e001      	b.n	8000fb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Start+0x1a>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e0b2      	b.n	800114c <HAL_ADC_Start+0x180>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d018      	beq.n	800102e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0201 	orr.w	r2, r2, #1
 800100a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800100c:	4b52      	ldr	r3, [pc, #328]	@ (8001158 <HAL_ADC_Start+0x18c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a52      	ldr	r2, [pc, #328]	@ (800115c <HAL_ADC_Start+0x190>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	0c9a      	lsrs	r2, r3, #18
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001020:	e002      	b.n	8001028 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3b01      	subs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d17a      	bne.n	8001132 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001066:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800107a:	d106      	bne.n	800108a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001080:	f023 0206 	bic.w	r2, r3, #6
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	645a      	str	r2, [r3, #68]	@ 0x44
 8001088:	e002      	b.n	8001090 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001098:	4b31      	ldr	r3, [pc, #196]	@ (8001160 <HAL_ADC_Start+0x194>)
 800109a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010a4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d12a      	bne.n	8001108 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001164 <HAL_ADC_Start+0x198>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d015      	beq.n	80010e8 <HAL_ADC_Start+0x11c>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a29      	ldr	r2, [pc, #164]	@ (8001168 <HAL_ADC_Start+0x19c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d105      	bne.n	80010d2 <HAL_ADC_Start+0x106>
 80010c6:	4b26      	ldr	r3, [pc, #152]	@ (8001160 <HAL_ADC_Start+0x194>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a25      	ldr	r2, [pc, #148]	@ (800116c <HAL_ADC_Start+0x1a0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d136      	bne.n	800114a <HAL_ADC_Start+0x17e>
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <HAL_ADC_Start+0x194>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d130      	bne.n	800114a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d129      	bne.n	800114a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	e020      	b.n	800114a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <HAL_ADC_Start+0x198>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d11b      	bne.n	800114a <HAL_ADC_Start+0x17e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d114      	bne.n	800114a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	e00b      	b.n	800114a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	20000004 	.word	0x20000004
 800115c:	431bde83 	.word	0x431bde83
 8001160:	40012300 	.word	0x40012300
 8001164:	40012000 	.word	0x40012000
 8001168:	40012100 	.word	0x40012100
 800116c:	40012200 	.word	0x40012200

08001170 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Stop+0x16>
 8001182:	2302      	movs	r3, #2
 8001184:	e021      	b.n	80011ca <HAL_ADC_Stop+0x5a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b084      	sub	sp, #16
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f2:	d113      	bne.n	800121c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001202:	d10b      	bne.n	800121c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f043 0220 	orr.w	r2, r3, #32
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e063      	b.n	80012e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800121c:	f7ff fe62 	bl	8000ee4 <HAL_GetTick>
 8001220:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001222:	e021      	b.n	8001268 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122a:	d01d      	beq.n	8001268 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_ADC_PollForConversion+0x6c>
 8001232:	f7ff fe57 	bl	8000ee4 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d212      	bcs.n	8001268 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b02      	cmp	r3, #2
 800124e:	d00b      	beq.n	8001268 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f043 0204 	orr.w	r2, r3, #4
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e03d      	b.n	80012e4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b02      	cmp	r3, #2
 8001274:	d1d6      	bne.n	8001224 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f06f 0212 	mvn.w	r2, #18
 800127e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d123      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11f      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d105      	bne.n	80012e2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x1c>
 8001320:	2302      	movs	r3, #2
 8001322:	e113      	b.n	800154c <HAL_ADC_ConfigChannel+0x244>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b09      	cmp	r3, #9
 8001332:	d925      	bls.n	8001380 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4613      	mov	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	4413      	add	r3, r2
 8001348:	3b1e      	subs	r3, #30
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43da      	mvns	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	400a      	ands	r2, r1
 8001358:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68d9      	ldr	r1, [r3, #12]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	4603      	mov	r3, r0
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4403      	add	r3, r0
 8001372:	3b1e      	subs	r3, #30
 8001374:	409a      	lsls	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e022      	b.n	80013c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6919      	ldr	r1, [r3, #16]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	4413      	add	r3, r2
 8001394:	2207      	movs	r2, #7
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6919      	ldr	r1, [r3, #16]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4403      	add	r3, r0
 80013bc:	409a      	lsls	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d824      	bhi.n	8001418 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	221f      	movs	r2, #31
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	400a      	ands	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4618      	mov	r0, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	3b05      	subs	r3, #5
 800140a:	fa00 f203 	lsl.w	r2, r0, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
 8001416:	e04c      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	3b23      	subs	r3, #35	@ 0x23
 8001432:	221f      	movs	r2, #31
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43da      	mvns	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	400a      	ands	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	b29b      	uxth	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b23      	subs	r3, #35	@ 0x23
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	631a      	str	r2, [r3, #48]	@ 0x30
 8001468:	e023      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	3b41      	subs	r3, #65	@ 0x41
 800147c:	221f      	movs	r2, #31
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	400a      	ands	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	3b41      	subs	r3, #65	@ 0x41
 80014a6:	fa00 f203 	lsl.w	r2, r0, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b2:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <HAL_ADC_ConfigChannel+0x250>)
 80014b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a28      	ldr	r2, [pc, #160]	@ (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d10f      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b12      	cmp	r3, #18
 80014c6:	d10b      	bne.n	80014e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1d      	ldr	r2, [pc, #116]	@ (800155c <HAL_ADC_ConfigChannel+0x254>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12b      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_ADC_ConfigChannel+0x258>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x1f4>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d122      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <HAL_ADC_ConfigChannel+0x258>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d111      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_ADC_ConfigChannel+0x25c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_ADC_ConfigChannel+0x260>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40012300 	.word	0x40012300
 800155c:	40012000 	.word	0x40012000
 8001560:	10000012 	.word	0x10000012
 8001564:	20000004 	.word	0x20000004
 8001568:	431bde83 	.word	0x431bde83

0800156c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001574:	4b79      	ldr	r3, [pc, #484]	@ (800175c <ADC_Init+0x1f0>)
 8001576:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6899      	ldr	r1, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68da      	ldr	r2, [r3, #12]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fe:	4a58      	ldr	r2, [pc, #352]	@ (8001760 <ADC_Init+0x1f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d022      	beq.n	800164a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001612:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	e00f      	b.n	800166a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001658:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001668:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0202 	bic.w	r2, r2, #2
 8001678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7e1b      	ldrb	r3, [r3, #24]
 8001684:	005a      	lsls	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01b      	beq.n	80016d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016a6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6859      	ldr	r1, [r3, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	3b01      	subs	r3, #1
 80016c4:	035a      	lsls	r2, r3, #13
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	e007      	b.n	80016e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016de:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	051a      	lsls	r2, r3, #20
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001714:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001722:	025a      	lsls	r2, r3, #9
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800173a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6899      	ldr	r1, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	029a      	lsls	r2, r3, #10
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40012300 	.word	0x40012300
 8001760:	0f000001 	.word	0x0f000001

08001764 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0ed      	b.n	8001952 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff f984 	bl	8000a90 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001798:	f7ff fba4 	bl	8000ee4 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800179e:	e012      	b.n	80017c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a0:	f7ff fba0 	bl	8000ee4 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d90b      	bls.n	80017c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2205      	movs	r2, #5
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0c5      	b.n	8001952 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0e5      	beq.n	80017a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0202 	bic.w	r2, r2, #2
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff fb7e 	bl	8000ee4 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ea:	e012      	b.n	8001812 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ec:	f7ff fb7a 	bl	8000ee4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	d90b      	bls.n	8001812 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2205      	movs	r2, #5
 800180a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e09f      	b.n	8001952 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e5      	bne.n	80017ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7e1b      	ldrb	r3, [r3, #24]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e007      	b.n	800184a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7e5b      	ldrb	r3, [r3, #25]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d108      	bne.n	8001864 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e007      	b.n	8001874 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001872:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	7e9b      	ldrb	r3, [r3, #26]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d108      	bne.n	800188e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e007      	b.n	800189e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0220 	bic.w	r2, r2, #32
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7edb      	ldrb	r3, [r3, #27]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0210 	bic.w	r2, r2, #16
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e007      	b.n	80018c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0210 	orr.w	r2, r2, #16
 80018c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7f1b      	ldrb	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d108      	bne.n	80018e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0208 	orr.w	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e007      	b.n	80018f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0208 	bic.w	r2, r2, #8
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	7f5b      	ldrb	r3, [r3, #29]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d108      	bne.n	800190c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 0204 	orr.w	r2, r2, #4
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e007      	b.n	800191c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0204 	bic.w	r2, r2, #4
 800191a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	ea42 0103 	orr.w	r1, r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001972:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001974:	7cfb      	ldrb	r3, [r7, #19]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d003      	beq.n	8001982 <HAL_CAN_ConfigFilter+0x26>
 800197a:	7cfb      	ldrb	r3, [r7, #19]
 800197c:	2b02      	cmp	r3, #2
 800197e:	f040 80be 	bne.w	8001afe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001982:	4b65      	ldr	r3, [pc, #404]	@ (8001b18 <HAL_CAN_ConfigFilter+0x1bc>)
 8001984:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800199c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	021b      	lsls	r3, r3, #8
 80019b2:	431a      	orrs	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2201      	movs	r2, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d123      	bne.n	8001a2c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a06:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3248      	adds	r2, #72	@ 0x48
 8001a0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a20:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a22:	6979      	ldr	r1, [r7, #20]
 8001a24:	3348      	adds	r3, #72	@ 0x48
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d122      	bne.n	8001a7a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3248      	adds	r2, #72	@ 0x48
 8001a5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a70:	6979      	ldr	r1, [r7, #20]
 8001a72:	3348      	adds	r3, #72	@ 0x48
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001a94:	e007      	b.n	8001aa6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001ac0:	e007      	b.n	8001ad2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d107      	bne.n	8001aea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001af0:	f023 0201 	bic.w	r2, r3, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e006      	b.n	8001b0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
  }
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	371c      	adds	r7, #28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	40006400 	.word	0x40006400

08001b1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d12e      	bne.n	8001b8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b48:	f7ff f9cc 	bl	8000ee4 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b4e:	e012      	b.n	8001b76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b50:	f7ff f9c8 	bl	8000ee4 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d90b      	bls.n	8001b76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e012      	b.n	8001b9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1e5      	bne.n	8001b50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e006      	b.n	8001b9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bb8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d003      	beq.n	8001bd0 <HAL_CAN_AddTxMessage+0x2c>
 8001bc8:	7ffb      	ldrb	r3, [r7, #31]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	f040 80ad 	bne.w	8001d2a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10a      	bne.n	8001bf0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8095 	beq.w	8001d1a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	0e1b      	lsrs	r3, r3, #24
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10d      	bne.n	8001c28 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	6809      	ldr	r1, [r1, #0]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3318      	adds	r3, #24
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	440b      	add	r3, r1
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	e00f      	b.n	8001c48 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c32:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c38:	68f9      	ldr	r1, [r7, #12]
 8001c3a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c3c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3318      	adds	r3, #24
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	440b      	add	r3, r1
 8001c46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	3318      	adds	r3, #24
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	440b      	add	r3, r1
 8001c58:	3304      	adds	r3, #4
 8001c5a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	7d1b      	ldrb	r3, [r3, #20]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d111      	bne.n	8001c88 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	3318      	adds	r3, #24
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	3304      	adds	r3, #4
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	6811      	ldr	r1, [r2, #0]
 8001c78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	3318      	adds	r3, #24
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	440b      	add	r3, r1
 8001c84:	3304      	adds	r3, #4
 8001c86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	061a      	lsls	r2, r3, #24
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3306      	adds	r3, #6
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	3204      	adds	r2, #4
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	4610      	mov	r0, r2
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	6811      	ldr	r1, [r2, #0]
 8001cb0:	ea43 0200 	orr.w	r2, r3, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	440b      	add	r3, r1
 8001cba:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001cbe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	061a      	lsls	r2, r3, #24
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3302      	adds	r3, #2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	021b      	lsls	r3, r3, #8
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	6811      	ldr	r1, [r2, #0]
 8001ce6:	ea43 0200 	orr.w	r2, r3, r0
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cf4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3318      	adds	r3, #24
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4413      	add	r3, r2
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	6811      	ldr	r1, [r2, #0]
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3318      	adds	r3, #24
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	440b      	add	r3, r1
 8001d14:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e00e      	b.n	8001d38 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e006      	b.n	8001d38 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
  }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3724      	adds	r7, #36	@ 0x24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d58:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d003      	beq.n	8001d68 <HAL_CAN_GetRxMessage+0x24>
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	f040 8103 	bne.w	8001f6e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10e      	bne.n	8001d8c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d116      	bne.n	8001daa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0f7      	b.n	8001f7c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0e8      	b.n	8001f7c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	331b      	adds	r3, #27
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0204 	and.w	r2, r3, #4
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10c      	bne.n	8001de2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	331b      	adds	r3, #27
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	4413      	add	r3, r2
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0d5b      	lsrs	r3, r3, #21
 8001dd8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e00b      	b.n	8001dfa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	331b      	adds	r3, #27
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	4413      	add	r3, r2
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	331b      	adds	r3, #27
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0202 	and.w	r2, r3, #2
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	331b      	adds	r3, #27
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2208      	movs	r2, #8
 8001e2c:	611a      	str	r2, [r3, #16]
 8001e2e:	e00b      	b.n	8001e48 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	331b      	adds	r3, #27
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 020f 	and.w	r2, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	331b      	adds	r3, #27
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4413      	add	r3, r2
 8001e54:	3304      	adds	r3, #4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	331b      	adds	r3, #27
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0a1a      	lsrs	r2, r3, #8
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0c1a      	lsrs	r2, r3, #16
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	0e1a      	lsrs	r2, r3, #24
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0a1a      	lsrs	r2, r3, #8
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	3305      	adds	r3, #5
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	0c1a      	lsrs	r2, r3, #16
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	3306      	adds	r3, #6
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e1a      	lsrs	r2, r3, #24
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	3307      	adds	r3, #7
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d108      	bne.n	8001f5a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	e007      	b.n	8001f6a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0220 	orr.w	r2, r2, #32
 8001f68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e006      	b.n	8001f7c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
  }
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f98:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d002      	beq.n	8001fa6 <HAL_CAN_ActivateNotification+0x1e>
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d109      	bne.n	8001fba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6959      	ldr	r1, [r3, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e006      	b.n	8001fc8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08a      	sub	sp, #40	@ 0x28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d07c      	beq.n	8002114 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2201      	movs	r2, #1
 800202a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f983 	bl	8002342 <HAL_CAN_TxMailbox0CompleteCallback>
 800203c:	e016      	b.n	800206c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d004      	beq.n	8002052 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002050:	e00c      	b.n	800206c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
 8002064:	e002      	b.n	800206c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f989 	bl	800237e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d024      	beq.n	80020c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800207e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f963 	bl	8002356 <HAL_CAN_TxMailbox1CompleteCallback>
 8002090:	e016      	b.n	80020c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800209c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a4:	e00c      	b.n	80020c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b8:	e002      	b.n	80020c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f969 	bl	8002392 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d024      	beq.n	8002114 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f943 	bl	800236a <HAL_CAN_TxMailbox2CompleteCallback>
 80020e4:	e016      	b.n	8002114 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f8:	e00c      	b.n	8002114 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
 800210c:	e002      	b.n	8002114 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f949 	bl	80023a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2210      	movs	r2, #16
 8002136:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2208      	movs	r2, #8
 8002152:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f93a 	bl	80023ce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d009      	beq.n	8002178 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d002      	beq.n	8002178 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f921 	bl	80023ba <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f91c 	bl	80023f6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d009      	beq.n	80021dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f903 	bl	80023e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f906 	bl	800240a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2208      	movs	r2, #8
 8002218:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8ff 	bl	800241e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d07b      	beq.n	8002322 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d072      	beq.n	800231a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002272:	2b00      	cmp	r3, #0
 8002274:	d008      	beq.n	8002288 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800228e:	2b00      	cmp	r3, #0
 8002290:	d043      	beq.n	800231a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03e      	beq.n	800231a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a2:	2b60      	cmp	r3, #96	@ 0x60
 80022a4:	d02b      	beq.n	80022fe <HAL_CAN_IRQHandler+0x32a>
 80022a6:	2b60      	cmp	r3, #96	@ 0x60
 80022a8:	d82e      	bhi.n	8002308 <HAL_CAN_IRQHandler+0x334>
 80022aa:	2b50      	cmp	r3, #80	@ 0x50
 80022ac:	d022      	beq.n	80022f4 <HAL_CAN_IRQHandler+0x320>
 80022ae:	2b50      	cmp	r3, #80	@ 0x50
 80022b0:	d82a      	bhi.n	8002308 <HAL_CAN_IRQHandler+0x334>
 80022b2:	2b40      	cmp	r3, #64	@ 0x40
 80022b4:	d019      	beq.n	80022ea <HAL_CAN_IRQHandler+0x316>
 80022b6:	2b40      	cmp	r3, #64	@ 0x40
 80022b8:	d826      	bhi.n	8002308 <HAL_CAN_IRQHandler+0x334>
 80022ba:	2b30      	cmp	r3, #48	@ 0x30
 80022bc:	d010      	beq.n	80022e0 <HAL_CAN_IRQHandler+0x30c>
 80022be:	2b30      	cmp	r3, #48	@ 0x30
 80022c0:	d822      	bhi.n	8002308 <HAL_CAN_IRQHandler+0x334>
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d002      	beq.n	80022cc <HAL_CAN_IRQHandler+0x2f8>
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d005      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022ca:	e01d      	b.n	8002308 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022d4:	e019      	b.n	800230a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022de:	e014      	b.n	800230a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022e8:	e00f      	b.n	800230a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022f2:	e00a      	b.n	800230a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022fc:	e005      	b.n	800230a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002306:	e000      	b.n	800230a <HAL_CAN_IRQHandler+0x336>
            break;
 8002308:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002318:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2204      	movs	r2, #4
 8002320:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002324:	2b00      	cmp	r3, #0
 8002326:	d008      	beq.n	800233a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f87c 	bl	8002432 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800233a:	bf00      	nop
 800233c:	3728      	adds	r7, #40	@ 0x28
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002464:	4013      	ands	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247a:	4a04      	ldr	r2, [pc, #16]	@ (800248c <__NVIC_SetPriorityGrouping+0x44>)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	60d3      	str	r3, [r2, #12]
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002494:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 0307 	and.w	r3, r3, #7
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	db0b      	blt.n	80024d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024be:	79fb      	ldrb	r3, [r7, #7]
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	4907      	ldr	r1, [pc, #28]	@ (80024e4 <__NVIC_EnableIRQ+0x38>)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	2001      	movs	r0, #1
 80024ce:	fa00 f202 	lsl.w	r2, r0, r2
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	e000e100 	.word	0xe000e100

080024e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	db0a      	blt.n	8002512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	490c      	ldr	r1, [pc, #48]	@ (8002534 <__NVIC_SetPriority+0x4c>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002510:	e00a      	b.n	8002528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4908      	ldr	r1, [pc, #32]	@ (8002538 <__NVIC_SetPriority+0x50>)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3b04      	subs	r3, #4
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	440b      	add	r3, r1
 8002526:	761a      	strb	r2, [r3, #24]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000e100 	.word	0xe000e100
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	@ 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f1c3 0307 	rsb	r3, r3, #7
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf28      	it	cs
 800255a:	2304      	movcs	r3, #4
 800255c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3304      	adds	r3, #4
 8002562:	2b06      	cmp	r3, #6
 8002564:	d902      	bls.n	800256c <NVIC_EncodePriority+0x30>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3b03      	subs	r3, #3
 800256a:	e000      	b.n	800256e <NVIC_EncodePriority+0x32>
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	f04f 32ff 	mov.w	r2, #4294967295
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002584:	f04f 31ff 	mov.w	r1, #4294967295
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43d9      	mvns	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	4313      	orrs	r3, r2
         );
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	@ 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff4c 	bl	8002448 <__NVIC_SetPriorityGrouping>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ca:	f7ff ff61 	bl	8002490 <__NVIC_GetPriorityGrouping>
 80025ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	6978      	ldr	r0, [r7, #20]
 80025d6:	f7ff ffb1 	bl	800253c <NVIC_EncodePriority>
 80025da:	4602      	mov	r2, r0
 80025dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e0:	4611      	mov	r1, r2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff80 	bl	80024e8 <__NVIC_SetPriority>
}
 80025e8:	bf00      	nop
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff54 	bl	80024ac <__NVIC_EnableIRQ>
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	@ 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e165      	b.n	80028f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002628:	2201      	movs	r2, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	429a      	cmp	r2, r3
 8002642:	f040 8154 	bne.w	80028ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d005      	beq.n	800265e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	2b02      	cmp	r3, #2
 800265c:	d130      	bne.n	80026c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0201 	and.w	r2, r3, #1
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d017      	beq.n	80026fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d123      	bne.n	8002750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	220f      	movs	r2, #15
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	691a      	ldr	r2, [r3, #16]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	08da      	lsrs	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3208      	adds	r2, #8
 800274a:	69b9      	ldr	r1, [r7, #24]
 800274c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	2203      	movs	r2, #3
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0203 	and.w	r2, r3, #3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80ae 	beq.w	80028ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b5d      	ldr	r3, [pc, #372]	@ (800290c <HAL_GPIO_Init+0x300>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	4a5c      	ldr	r2, [pc, #368]	@ (800290c <HAL_GPIO_Init+0x300>)
 800279c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027a2:	4b5a      	ldr	r3, [pc, #360]	@ (800290c <HAL_GPIO_Init+0x300>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ae:	4a58      	ldr	r2, [pc, #352]	@ (8002910 <HAL_GPIO_Init+0x304>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	220f      	movs	r2, #15
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002914 <HAL_GPIO_Init+0x308>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d025      	beq.n	8002826 <HAL_GPIO_Init+0x21a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a4e      	ldr	r2, [pc, #312]	@ (8002918 <HAL_GPIO_Init+0x30c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01f      	beq.n	8002822 <HAL_GPIO_Init+0x216>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a4d      	ldr	r2, [pc, #308]	@ (800291c <HAL_GPIO_Init+0x310>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d019      	beq.n	800281e <HAL_GPIO_Init+0x212>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a4c      	ldr	r2, [pc, #304]	@ (8002920 <HAL_GPIO_Init+0x314>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <HAL_GPIO_Init+0x20e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002924 <HAL_GPIO_Init+0x318>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00d      	beq.n	8002816 <HAL_GPIO_Init+0x20a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_GPIO_Init+0x31c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <HAL_GPIO_Init+0x206>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a49      	ldr	r2, [pc, #292]	@ (800292c <HAL_GPIO_Init+0x320>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d101      	bne.n	800280e <HAL_GPIO_Init+0x202>
 800280a:	2306      	movs	r3, #6
 800280c:	e00c      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 800280e:	2307      	movs	r3, #7
 8002810:	e00a      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 8002812:	2305      	movs	r3, #5
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 8002816:	2304      	movs	r3, #4
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x21c>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	@ (8002910 <HAL_GPIO_Init+0x304>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b3a      	ldr	r3, [pc, #232]	@ (8002930 <HAL_GPIO_Init+0x324>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a31      	ldr	r2, [pc, #196]	@ (8002930 <HAL_GPIO_Init+0x324>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b2f      	ldr	r3, [pc, #188]	@ (8002930 <HAL_GPIO_Init+0x324>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a26      	ldr	r2, [pc, #152]	@ (8002930 <HAL_GPIO_Init+0x324>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289a:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_GPIO_Init+0x324>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028be:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <HAL_GPIO_Init+0x324>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_GPIO_Init+0x324>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e8:	4a11      	ldr	r2, [pc, #68]	@ (8002930 <HAL_GPIO_Init+0x324>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f ae96 	bls.w	8002628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40013c00 	.word	0x40013c00

08002934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
 8002950:	e001      	b.n	8002956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002980:	e003      	b.n	800298a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_RCC_GetHCLKFreq+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029b4:	f7ff fff0 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	0a9b      	lsrs	r3, r3, #10
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	@ (80029d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40023800 	.word	0x40023800
 80029d4:	08007c04 	.word	0x08007c04

080029d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	220f      	movs	r2, #15
 80029e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a0c:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <HAL_RCC_GetClockConfig+0x60>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 020f 	and.w	r2, r3, #15
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	601a      	str	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e041      	b.n	8002ad2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f839 	bl	8002ada <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f000 f9c0 	bl	8002e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d001      	beq.n	8002b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04e      	b.n	8002ba6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a23      	ldr	r2, [pc, #140]	@ (8002bb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b32:	d01d      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	@ (8002bbc <HAL_TIM_Base_Start_IT+0xcc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a19      	ldr	r2, [pc, #100]	@ (8002bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x80>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d111      	bne.n	8002b94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b06      	cmp	r3, #6
 8002b80:	d010      	beq.n	8002ba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	e007      	b.n	8002ba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40010400 	.word	0x40010400
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40001800 	.word	0x40001800

08002bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d020      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01b      	beq.n	8002c34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0202 	mvn.w	r2, #2
 8002c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8d2 	bl	8002dc4 <HAL_TIM_IC_CaptureCallback>
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8c4 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f8d5 	bl	8002dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d020      	beq.n	8002c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01b      	beq.n	8002c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0204 	mvn.w	r2, #4
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8ac 	bl	8002dc4 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f89e 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8af 	bl	8002dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d020      	beq.n	8002ccc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0208 	mvn.w	r2, #8
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f886 	bl	8002dc4 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f878 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f889 	bl	8002dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d020      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01b      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0210 	mvn.w	r2, #16
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2208      	movs	r2, #8
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f860 	bl	8002dc4 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f852 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f863 	bl	8002dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0201 	mvn.w	r2, #1
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd fe1a 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f906 	bl	8002f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00c      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f834 	bl	8002dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d007      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0220 	mvn.w	r2, #32
 8002da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f8d8 	bl	8002f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a46      	ldr	r2, [pc, #280]	@ (8002f2c <TIM_Base_SetConfig+0x12c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d013      	beq.n	8002e40 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1e:	d00f      	beq.n	8002e40 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a43      	ldr	r2, [pc, #268]	@ (8002f30 <TIM_Base_SetConfig+0x130>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a42      	ldr	r2, [pc, #264]	@ (8002f34 <TIM_Base_SetConfig+0x134>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <TIM_Base_SetConfig+0x40>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <TIM_Base_SetConfig+0x138>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <TIM_Base_SetConfig+0x40>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a40      	ldr	r2, [pc, #256]	@ (8002f3c <TIM_Base_SetConfig+0x13c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d108      	bne.n	8002e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a35      	ldr	r2, [pc, #212]	@ (8002f2c <TIM_Base_SetConfig+0x12c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02b      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e60:	d027      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a32      	ldr	r2, [pc, #200]	@ (8002f30 <TIM_Base_SetConfig+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d023      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a31      	ldr	r2, [pc, #196]	@ (8002f34 <TIM_Base_SetConfig+0x134>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01f      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a30      	ldr	r2, [pc, #192]	@ (8002f38 <TIM_Base_SetConfig+0x138>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01b      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f3c <TIM_Base_SetConfig+0x13c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d017      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <TIM_Base_SetConfig+0x140>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f44 <TIM_Base_SetConfig+0x144>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00f      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2c      	ldr	r2, [pc, #176]	@ (8002f48 <TIM_Base_SetConfig+0x148>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00b      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f4c <TIM_Base_SetConfig+0x14c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d007      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8002f50 <TIM_Base_SetConfig+0x150>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d003      	beq.n	8002eb2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a29      	ldr	r2, [pc, #164]	@ (8002f54 <TIM_Base_SetConfig+0x154>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d108      	bne.n	8002ec4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a10      	ldr	r2, [pc, #64]	@ (8002f2c <TIM_Base_SetConfig+0x12c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_Base_SetConfig+0xf8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a12      	ldr	r2, [pc, #72]	@ (8002f3c <TIM_Base_SetConfig+0x13c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d103      	bne.n	8002f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d105      	bne.n	8002f1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f023 0201 	bic.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	611a      	str	r2, [r3, #16]
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010000 	.word	0x40010000
 8002f30:	40000400 	.word	0x40000400
 8002f34:	40000800 	.word	0x40000800
 8002f38:	40000c00 	.word	0x40000c00
 8002f3c:	40010400 	.word	0x40010400
 8002f40:	40014000 	.word	0x40014000
 8002f44:	40014400 	.word	0x40014400
 8002f48:	40014800 	.word	0x40014800
 8002f4c:	40001800 	.word	0x40001800
 8002f50:	40001c00 	.word	0x40001c00
 8002f54:	40002000 	.word	0x40002000

08002f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <__NVIC_SetPriority>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <SysTick_Handler+0x1c>)
 8002fda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002fdc:	f001 fd90 	bl	8004b00 <xTaskGetSchedulerState>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d001      	beq.n	8002fea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002fe6:	f002 fb87 	bl	80056f8 <xPortSysTickHandler>
  }
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010

08002ff4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f06f 0004 	mvn.w	r0, #4
 8002ffe:	f7ff ffbf 	bl	8002f80 <__NVIC_SetPriority>
#endif
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800300e:	f3ef 8305 	mrs	r3, IPSR
 8003012:	603b      	str	r3, [r7, #0]
  return(result);
 8003014:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800301a:	f06f 0305 	mvn.w	r3, #5
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	e00c      	b.n	800303c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003022:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <osKernelInitialize+0x44>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800302a:	4b08      	ldr	r3, [pc, #32]	@ (800304c <osKernelInitialize+0x44>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003030:	2300      	movs	r3, #0
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	e002      	b.n	800303c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295
 800303a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800303c:	687b      	ldr	r3, [r7, #4]
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	200001c0 	.word	0x200001c0

08003050 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003056:	f3ef 8305 	mrs	r3, IPSR
 800305a:	603b      	str	r3, [r7, #0]
  return(result);
 800305c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003062:	f06f 0305 	mvn.w	r3, #5
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	e010      	b.n	800308c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800306a:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <osKernelStart+0x48>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d109      	bne.n	8003086 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003072:	f7ff ffbf 	bl	8002ff4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003076:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <osKernelStart+0x48>)
 8003078:	2202      	movs	r2, #2
 800307a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800307c:	f001 f892 	bl	80041a4 <vTaskStartScheduler>
      stat = osOK;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	e002      	b.n	800308c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200001c0 	.word	0x200001c0

0800309c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b08e      	sub	sp, #56	@ 0x38
 80030a0:	af04      	add	r7, sp, #16
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ac:	f3ef 8305 	mrs	r3, IPSR
 80030b0:	617b      	str	r3, [r7, #20]
  return(result);
 80030b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d17e      	bne.n	80031b6 <osThreadNew+0x11a>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07b      	beq.n	80031b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030c2:	2318      	movs	r3, #24
 80030c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80030ca:	f04f 33ff 	mov.w	r3, #4294967295
 80030ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d045      	beq.n	8003162 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <osThreadNew+0x48>
        name = attr->name;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <osThreadNew+0x6e>
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b38      	cmp	r3, #56	@ 0x38
 80030fc:	d805      	bhi.n	800310a <osThreadNew+0x6e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <osThreadNew+0x72>
        return (NULL);
 800310a:	2300      	movs	r3, #0
 800310c:	e054      	b.n	80031b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	089b      	lsrs	r3, r3, #2
 800311c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00e      	beq.n	8003144 <osThreadNew+0xa8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2ba7      	cmp	r3, #167	@ 0xa7
 800312c:	d90a      	bls.n	8003144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003132:	2b00      	cmp	r3, #0
 8003134:	d006      	beq.n	8003144 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <osThreadNew+0xa8>
        mem = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	e010      	b.n	8003166 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <osThreadNew+0xca>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d108      	bne.n	8003166 <osThreadNew+0xca>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <osThreadNew+0xca>
          mem = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e001      	b.n	8003166 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d110      	bne.n	800318e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003174:	9202      	str	r2, [sp, #8]
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fe1a 	bl	8003dbc <xTaskCreateStatic>
 8003188:	4603      	mov	r3, r0
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	e013      	b.n	80031b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d110      	bne.n	80031b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	b29a      	uxth	r2, r3
 8003198:	f107 0310 	add.w	r3, r7, #16
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 fe68 	bl	8003e7c <xTaskCreate>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <osThreadNew+0x11a>
            hTask = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031b6:	693b      	ldr	r3, [r7, #16]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	@ 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031c8:	f3ef 8305 	mrs	r3, IPSR
 80031cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80031ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <osDelay+0x1c>
    stat = osErrorISR;
 80031d4:	f06f 0305 	mvn.w	r3, #5
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e007      	b.n	80031ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031dc:	2300      	movs	r3, #0
 80031de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 ffa6 	bl	8004138 <vTaskDelay>
    }
  }

  return (stat);
 80031ec:	68fb      	ldr	r3, [r7, #12]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a07      	ldr	r2, [pc, #28]	@ (8003224 <vApplicationGetIdleTaskMemory+0x2c>)
 8003208:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4a06      	ldr	r2, [pc, #24]	@ (8003228 <vApplicationGetIdleTaskMemory+0x30>)
 800320e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2280      	movs	r2, #128	@ 0x80
 8003214:	601a      	str	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	200001c4 	.word	0x200001c4
 8003228:	2000026c 	.word	0x2000026c

0800322c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a07      	ldr	r2, [pc, #28]	@ (8003258 <vApplicationGetTimerTaskMemory+0x2c>)
 800323c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4a06      	ldr	r2, [pc, #24]	@ (800325c <vApplicationGetTimerTaskMemory+0x30>)
 8003242:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800324a:	601a      	str	r2, [r3, #0]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	2000046c 	.word	0x2000046c
 800325c:	20000514 	.word	0x20000514

08003260 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f103 0208 	add.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f103 0208 	add.w	r2, r3, #8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f103 0208 	add.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003318:	d103      	bne.n	8003322 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e00c      	b.n	800333c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3308      	adds	r3, #8
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	e002      	b.n	8003330 <vListInsert+0x2e>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d2f6      	bcs.n	800332a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	601a      	str	r2, [r3, #0]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6892      	ldr	r2, [r2, #8]
 800338a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6852      	ldr	r2, [r2, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d103      	bne.n	80033a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033f4:	f002 f8f0 	bl	80055d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	68f9      	ldr	r1, [r7, #12]
 8003402:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	441a      	add	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	3b01      	subs	r3, #1
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	22ff      	movs	r2, #255	@ 0xff
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	22ff      	movs	r2, #255	@ 0xff
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d114      	bne.n	8003474 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d01a      	beq.n	8003488 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3310      	adds	r3, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f001 f954 	bl	8004704 <xTaskRemoveFromEventList>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d012      	beq.n	8003488 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <xQueueGenericReset+0xd0>)
 8003464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	e009      	b.n	8003488 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3310      	adds	r3, #16
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fef1 	bl	8003260 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	3324      	adds	r3, #36	@ 0x24
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff feec 	bl	8003260 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003488:	f002 f8d8 	bl	800563c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800348c:	2301      	movs	r3, #1
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000ed04 	.word	0xe000ed04

0800349c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08e      	sub	sp, #56	@ 0x38
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034c2:	bf00      	nop
 80034c4:	bf00      	nop
 80034c6:	e7fd      	b.n	80034c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	e7fd      	b.n	80034e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <xQueueGenericCreateStatic+0x56>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <xQueueGenericCreateStatic+0x5a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericCreateStatic+0x5c>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	623b      	str	r3, [r7, #32]
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <xQueueGenericCreateStatic+0x84>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <xQueueGenericCreateStatic+0x88>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <xQueueGenericCreateStatic+0x8a>
 8003524:	2300      	movs	r3, #0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10b      	bne.n	8003542 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	61fb      	str	r3, [r7, #28]
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	e7fd      	b.n	800353e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003542:	2350      	movs	r3, #80	@ 0x50
 8003544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b50      	cmp	r3, #80	@ 0x50
 800354a:	d00b      	beq.n	8003564 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800354c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	61bb      	str	r3, [r7, #24]
}
 800355e:	bf00      	nop
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003564:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003578:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800357c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f805 	bl	8003596 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800358e:	4618      	mov	r0, r3
 8003590:	3730      	adds	r7, #48	@ 0x30
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e002      	b.n	80035b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035c4:	2101      	movs	r1, #1
 80035c6:	69b8      	ldr	r0, [r7, #24]
 80035c8:	f7ff fefe 	bl	80033c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08e      	sub	sp, #56	@ 0x38
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80035ea:	2300      	movs	r3, #0
 80035ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <xQueueGenericSend+0x34>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d103      	bne.n	800361e <xQueueGenericSend+0x42>
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <xQueueGenericSend+0x46>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <xQueueGenericSend+0x48>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xQueueGenericSend+0x64>
	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d103      	bne.n	800364e <xQueueGenericSend+0x72>
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <xQueueGenericSend+0x76>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <xQueueGenericSend+0x78>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <xQueueGenericSend+0x94>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	623b      	str	r3, [r7, #32]
}
 800366a:	bf00      	nop
 800366c:	bf00      	nop
 800366e:	e7fd      	b.n	800366c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003670:	f001 fa46 	bl	8004b00 <xTaskGetSchedulerState>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d102      	bne.n	8003680 <xQueueGenericSend+0xa4>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <xQueueGenericSend+0xa8>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <xQueueGenericSend+0xaa>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	61fb      	str	r3, [r7, #28]
}
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	e7fd      	b.n	800369e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036a2:	f001 ff99 	bl	80055d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <xQueueGenericSend+0xdc>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d129      	bne.n	800370c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036be:	f000 fa0f 	bl	8003ae0 <prvCopyDataToQueue>
 80036c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d010      	beq.n	80036ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	3324      	adds	r3, #36	@ 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f817 	bl	8004704 <xTaskRemoveFromEventList>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d013      	beq.n	8003704 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036dc:	4b3f      	ldr	r3, [pc, #252]	@ (80037dc <xQueueGenericSend+0x200>)
 80036de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	e00a      	b.n	8003704 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d007      	beq.n	8003704 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036f4:	4b39      	ldr	r3, [pc, #228]	@ (80037dc <xQueueGenericSend+0x200>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003704:	f001 ff9a 	bl	800563c <vPortExitCritical>
				return pdPASS;
 8003708:	2301      	movs	r3, #1
 800370a:	e063      	b.n	80037d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003712:	f001 ff93 	bl	800563c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003716:	2300      	movs	r3, #0
 8003718:	e05c      	b.n	80037d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800371a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371c:	2b00      	cmp	r3, #0
 800371e:	d106      	bne.n	800372e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4618      	mov	r0, r3
 8003726:	f001 f851 	bl	80047cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800372e:	f001 ff85 	bl	800563c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003732:	f000 fda7 	bl	8004284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003736:	f001 ff4f 	bl	80055d8 <vPortEnterCritical>
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003740:	b25b      	sxtb	r3, r3
 8003742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003746:	d103      	bne.n	8003750 <xQueueGenericSend+0x174>
 8003748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003756:	b25b      	sxtb	r3, r3
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d103      	bne.n	8003766 <xQueueGenericSend+0x18a>
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003766:	f001 ff69 	bl	800563c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800376a:	1d3a      	adds	r2, r7, #4
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f840 	bl	80047f8 <xTaskCheckForTimeOut>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d124      	bne.n	80037c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800377e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003780:	f000 faa6 	bl	8003cd0 <prvIsQueueFull>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	3310      	adds	r3, #16
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f000 ff64 	bl	8004660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800379a:	f000 fa31 	bl	8003c00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800379e:	f000 fd7f 	bl	80042a0 <xTaskResumeAll>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f47f af7c 	bne.w	80036a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <xQueueGenericSend+0x200>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	e772      	b.n	80036a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037be:	f000 fa1f 	bl	8003c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037c2:	f000 fd6d 	bl	80042a0 <xTaskResumeAll>
 80037c6:	e76c      	b.n	80036a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037ca:	f000 fa19 	bl	8003c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037ce:	f000 fd67 	bl	80042a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3738      	adds	r7, #56	@ 0x38
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b090      	sub	sp, #64	@ 0x40
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <xQueueGenericSendFromISR+0x3e>
 8003816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <xQueueGenericSendFromISR+0x42>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <xQueueGenericSendFromISR+0x44>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	e7fd      	b.n	800383c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <xQueueGenericSendFromISR+0x6e>
 8003846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <xQueueGenericSendFromISR+0x72>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueGenericSendFromISR+0x74>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
}
 800386a:	bf00      	nop
 800386c:	bf00      	nop
 800386e:	e7fd      	b.n	800386c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003870:	f001 ff92 	bl	8005798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003874:	f3ef 8211 	mrs	r2, BASEPRI
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	f383 8811 	msr	BASEPRI, r3
 8003880:	f3bf 8f6f 	isb	sy
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	61fa      	str	r2, [r7, #28]
 800388a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800388c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800388e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <xQueueGenericSendFromISR+0xc2>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d12f      	bne.n	8003902 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80038b8:	f000 f912 	bl	8003ae0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d112      	bne.n	80038ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d0:	3324      	adds	r3, #36	@ 0x24
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 ff16 	bl	8004704 <xTaskRemoveFromEventList>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00e      	beq.n	80038fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e007      	b.n	80038fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038f0:	3301      	adds	r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	b25a      	sxtb	r2, r3
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038fc:	2301      	movs	r3, #1
 80038fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003900:	e001      	b.n	8003906 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003902:	2300      	movs	r3, #0
 8003904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003910:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003914:	4618      	mov	r0, r3
 8003916:	3740      	adds	r7, #64	@ 0x40
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	@ 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <xQueueReceive+0x32>
	__asm volatile
 8003936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	623b      	str	r3, [r7, #32]
}
 8003948:	bf00      	nop
 800394a:	bf00      	nop
 800394c:	e7fd      	b.n	800394a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <xQueueReceive+0x40>
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <xQueueReceive+0x44>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <xQueueReceive+0x46>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <xQueueReceive+0x62>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	61fb      	str	r3, [r7, #28]
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	e7fd      	b.n	800397a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397e:	f001 f8bf 	bl	8004b00 <xTaskGetSchedulerState>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <xQueueReceive+0x72>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xQueueReceive+0x76>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueReceive+0x78>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <xQueueReceive+0x94>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039b0:	f001 fe12 	bl	80055d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01f      	beq.n	8003a00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039c4:	f000 f8f6 	bl	8003bb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	1e5a      	subs	r2, r3, #1
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00f      	beq.n	80039f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039da:	3310      	adds	r3, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 fe91 	bl	8004704 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b3c      	ldr	r3, [pc, #240]	@ (8003adc <xQueueReceive+0x1c0>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039f8:	f001 fe20 	bl	800563c <vPortExitCritical>
				return pdPASS;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e069      	b.n	8003ad4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d103      	bne.n	8003a0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a06:	f001 fe19 	bl	800563c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e062      	b.n	8003ad4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d106      	bne.n	8003a22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fed7 	bl	80047cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a22:	f001 fe0b 	bl	800563c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a26:	f000 fc2d 	bl	8004284 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a2a:	f001 fdd5 	bl	80055d8 <vPortEnterCritical>
 8003a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3a:	d103      	bne.n	8003a44 <xQueueReceive+0x128>
 8003a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d103      	bne.n	8003a5a <xQueueReceive+0x13e>
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a5a:	f001 fdef 	bl	800563c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5e:	1d3a      	adds	r2, r7, #4
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fec6 	bl	80047f8 <xTaskCheckForTimeOut>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d123      	bne.n	8003aba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a74:	f000 f916 	bl	8003ca4 <prvIsQueueEmpty>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a80:	3324      	adds	r3, #36	@ 0x24
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fdea 	bl	8004660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a8e:	f000 f8b7 	bl	8003c00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a92:	f000 fc05 	bl	80042a0 <xTaskResumeAll>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d189      	bne.n	80039b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <xQueueReceive+0x1c0>)
 8003a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	e780      	b.n	80039b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ab0:	f000 f8a6 	bl	8003c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab4:	f000 fbf4 	bl	80042a0 <xTaskResumeAll>
 8003ab8:	e77a      	b.n	80039b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003aba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003abc:	f000 f8a0 	bl	8003c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ac0:	f000 fbee 	bl	80042a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ac6:	f000 f8ed 	bl	8003ca4 <prvIsQueueEmpty>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f43f af6f 	beq.w	80039b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ad2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	@ 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d14d      	bne.n	8003ba2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f816 	bl	8004b3c <xTaskPriorityDisinherit>
 8003b10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	e043      	b.n	8003ba2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d119      	bne.n	8003b54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6858      	ldr	r0, [r3, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	f003 fb76 	bl	800721c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	441a      	add	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d32b      	bcc.n	8003ba2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	e026      	b.n	8003ba2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68d8      	ldr	r0, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	f003 fb5c 	bl	800721c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d207      	bcs.n	8003b90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b88:	425b      	negs	r3, r3
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d105      	bne.n	8003ba2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003baa:	697b      	ldr	r3, [r7, #20]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d303      	bcc.n	8003be8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6838      	ldr	r0, [r7, #0]
 8003bf4:	f003 fb12 	bl	800721c <memcpy>
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c08:	f001 fce6 	bl	80055d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c14:	e011      	b.n	8003c3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	@ 0x24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fd6e 	bl	8004704 <xTaskRemoveFromEventList>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c2e:	f000 fe47 	bl	80048c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dce9      	bgt.n	8003c16 <prvUnlockQueue+0x16>
 8003c42:	e000      	b.n	8003c46 <prvUnlockQueue+0x46>
					break;
 8003c44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	22ff      	movs	r2, #255	@ 0xff
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003c4e:	f001 fcf5 	bl	800563c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c52:	f001 fcc1 	bl	80055d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c5e:	e011      	b.n	8003c84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3310      	adds	r3, #16
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fd49 	bl	8004704 <xTaskRemoveFromEventList>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c78:	f000 fe22 	bl	80048c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c7c:	7bbb      	ldrb	r3, [r7, #14]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	dce9      	bgt.n	8003c60 <prvUnlockQueue+0x60>
 8003c8c:	e000      	b.n	8003c90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	22ff      	movs	r2, #255	@ 0xff
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003c98:	f001 fcd0 	bl	800563c <vPortExitCritical>
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cac:	f001 fc94 	bl	80055d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e001      	b.n	8003cc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cc2:	f001 fcbb 	bl	800563c <vPortExitCritical>

	return xReturn;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd8:	f001 fc7e 	bl	80055d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d102      	bne.n	8003cee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f001 fca3 	bl	800563c <vPortExitCritical>

	return xReturn;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e014      	b.n	8003d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d10:	4a0f      	ldr	r2, [pc, #60]	@ (8003d50 <vQueueAddToRegistry+0x50>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d1c:	490c      	ldr	r1, [pc, #48]	@ (8003d50 <vQueueAddToRegistry+0x50>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <vQueueAddToRegistry+0x50>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d32:	e006      	b.n	8003d42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d9e7      	bls.n	8003d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20000914 	.word	0x20000914

08003d54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d64:	f001 fc38 	bl	80055d8 <vPortEnterCritical>
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d74:	d103      	bne.n	8003d7e <vQueueWaitForMessageRestricted+0x2a>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d84:	b25b      	sxtb	r3, r3
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d103      	bne.n	8003d94 <vQueueWaitForMessageRestricted+0x40>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d94:	f001 fc52 	bl	800563c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	3324      	adds	r3, #36	@ 0x24
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc7f 	bl	80046ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff26 	bl	8003c00 <prvUnlockQueue>
	}
 8003db4:	bf00      	nop
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08e      	sub	sp, #56	@ 0x38
 8003dc0:	af04      	add	r7, sp, #16
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	623b      	str	r3, [r7, #32]
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	61fb      	str	r3, [r7, #28]
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e06:	23a8      	movs	r3, #168	@ 0xa8
 8003e08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003e0e:	d00b      	beq.n	8003e28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	61bb      	str	r3, [r7, #24]
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	e7fd      	b.n	8003e24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01e      	beq.n	8003e6e <xTaskCreateStatic+0xb2>
 8003e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01b      	beq.n	8003e6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e48:	2300      	movs	r3, #0
 8003e4a:	9303      	str	r3, [sp, #12]
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	9302      	str	r3, [sp, #8]
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f851 	bl	8003f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e68:	f000 f8f6 	bl	8004058 <prvAddNewTaskToReadyList>
 8003e6c:	e001      	b.n	8003e72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e72:	697b      	ldr	r3, [r7, #20]
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3728      	adds	r7, #40	@ 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	@ 0x30
 8003e80:	af04      	add	r7, sp, #16
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fcc3 	bl	800581c <pvPortMalloc>
 8003e96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00e      	beq.n	8003ebc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e9e:	20a8      	movs	r0, #168	@ 0xa8
 8003ea0:	f001 fcbc 	bl	800581c <pvPortMalloc>
 8003ea4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eb2:	e005      	b.n	8003ec0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003eb4:	6978      	ldr	r0, [r7, #20]
 8003eb6:	f001 fd7f 	bl	80059b8 <vPortFree>
 8003eba:	e001      	b.n	8003ec0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d017      	beq.n	8003ef6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	9302      	str	r3, [sp, #8]
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f80f 	bl	8003f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eea:	69f8      	ldr	r0, [r7, #28]
 8003eec:	f000 f8b4 	bl	8004058 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e002      	b.n	8003efc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003efc:	69bb      	ldr	r3, [r7, #24]
	}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	461a      	mov	r2, r3
 8003f20:	21a5      	movs	r1, #165	@ 0xa5
 8003f22:	f003 f8f1 	bl	8007108 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f30:	3b01      	subs	r3, #1
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f023 0307 	bic.w	r3, r3, #7
 8003f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	617b      	str	r3, [r7, #20]
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	e7fd      	b.n	8003f5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01f      	beq.n	8003fa8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	e012      	b.n	8003f94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	7819      	ldrb	r1, [r3, #0]
 8003f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3334      	adds	r3, #52	@ 0x34
 8003f7e:	460a      	mov	r2, r1
 8003f80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d006      	beq.n	8003f9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	d9e9      	bls.n	8003f6e <prvInitialiseNewTask+0x66>
 8003f9a:	e000      	b.n	8003f9e <prvInitialiseNewTask+0x96>
			{
				break;
 8003f9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fa6:	e003      	b.n	8003fb0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb2:	2b37      	cmp	r3, #55	@ 0x37
 8003fb4:	d901      	bls.n	8003fba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fb6:	2337      	movs	r3, #55	@ 0x37
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc8:	2200      	movs	r2, #0
 8003fca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff f965 	bl	80032a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	3318      	adds	r3, #24
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f960 	bl	80032a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fe4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ff4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004000:	2200      	movs	r2, #0
 8004002:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	3354      	adds	r3, #84	@ 0x54
 800400a:	224c      	movs	r2, #76	@ 0x4c
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f003 f87a 	bl	8007108 <memset>
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	4a0d      	ldr	r2, [pc, #52]	@ (800404c <prvInitialiseNewTask+0x144>)
 8004018:	659a      	str	r2, [r3, #88]	@ 0x58
 800401a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401c:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <prvInitialiseNewTask+0x148>)
 800401e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004022:	4a0c      	ldr	r2, [pc, #48]	@ (8004054 <prvInitialiseNewTask+0x14c>)
 8004024:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	69b8      	ldr	r0, [r7, #24]
 800402c:	f001 f9a4 	bl	8005378 <pxPortInitialiseStack>
 8004030:	4602      	mov	r2, r0
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800403c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004040:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004042:	bf00      	nop
 8004044:	3720      	adds	r7, #32
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20007220 	.word	0x20007220
 8004050:	20007288 	.word	0x20007288
 8004054:	200072f0 	.word	0x200072f0

08004058 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004060:	f001 faba 	bl	80055d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004064:	4b2d      	ldr	r3, [pc, #180]	@ (800411c <prvAddNewTaskToReadyList+0xc4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a2c      	ldr	r2, [pc, #176]	@ (800411c <prvAddNewTaskToReadyList+0xc4>)
 800406c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800406e:	4b2c      	ldr	r3, [pc, #176]	@ (8004120 <prvAddNewTaskToReadyList+0xc8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004076:	4a2a      	ldr	r2, [pc, #168]	@ (8004120 <prvAddNewTaskToReadyList+0xc8>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800407c:	4b27      	ldr	r3, [pc, #156]	@ (800411c <prvAddNewTaskToReadyList+0xc4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d110      	bne.n	80040a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004084:	f000 fc40 	bl	8004908 <prvInitialiseTaskLists>
 8004088:	e00d      	b.n	80040a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800408a:	4b26      	ldr	r3, [pc, #152]	@ (8004124 <prvAddNewTaskToReadyList+0xcc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <prvAddNewTaskToReadyList+0xc8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	429a      	cmp	r2, r3
 800409e:	d802      	bhi.n	80040a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <prvAddNewTaskToReadyList+0xc8>)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040a6:	4b20      	ldr	r3, [pc, #128]	@ (8004128 <prvAddNewTaskToReadyList+0xd0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <prvAddNewTaskToReadyList+0xd0>)
 80040ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80040b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004128 <prvAddNewTaskToReadyList+0xd0>)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040bc:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <prvAddNewTaskToReadyList+0xd4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d903      	bls.n	80040cc <prvAddNewTaskToReadyList+0x74>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	4a18      	ldr	r2, [pc, #96]	@ (800412c <prvAddNewTaskToReadyList+0xd4>)
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <prvAddNewTaskToReadyList+0xd8>)
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3304      	adds	r3, #4
 80040e0:	4619      	mov	r1, r3
 80040e2:	4610      	mov	r0, r2
 80040e4:	f7ff f8e9 	bl	80032ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040e8:	f001 faa8 	bl	800563c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <prvAddNewTaskToReadyList+0xcc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <prvAddNewTaskToReadyList+0xc8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	429a      	cmp	r2, r3
 8004100:	d207      	bcs.n	8004112 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004102:	4b0c      	ldr	r3, [pc, #48]	@ (8004134 <prvAddNewTaskToReadyList+0xdc>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	20000e28 	.word	0x20000e28
 8004120:	20000954 	.word	0x20000954
 8004124:	20000e34 	.word	0x20000e34
 8004128:	20000e44 	.word	0x20000e44
 800412c:	20000e30 	.word	0x20000e30
 8004130:	20000958 	.word	0x20000958
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d018      	beq.n	800417c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800414a:	4b14      	ldr	r3, [pc, #80]	@ (800419c <vTaskDelay+0x64>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <vTaskDelay+0x32>
	__asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800416a:	f000 f88b 	bl	8004284 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800416e:	2100      	movs	r1, #0
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fd53 	bl	8004c1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004176:	f000 f893 	bl	80042a0 <xTaskResumeAll>
 800417a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d107      	bne.n	8004192 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004182:	4b07      	ldr	r3, [pc, #28]	@ (80041a0 <vTaskDelay+0x68>)
 8004184:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000e50 	.word	0x20000e50
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	@ 0x28
 80041a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041b2:	463a      	mov	r2, r7
 80041b4:	1d39      	adds	r1, r7, #4
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f81c 	bl	80031f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041c0:	6839      	ldr	r1, [r7, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	9202      	str	r2, [sp, #8]
 80041c8:	9301      	str	r3, [sp, #4]
 80041ca:	2300      	movs	r3, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2300      	movs	r3, #0
 80041d0:	460a      	mov	r2, r1
 80041d2:	4924      	ldr	r1, [pc, #144]	@ (8004264 <vTaskStartScheduler+0xc0>)
 80041d4:	4824      	ldr	r0, [pc, #144]	@ (8004268 <vTaskStartScheduler+0xc4>)
 80041d6:	f7ff fdf1 	bl	8003dbc <xTaskCreateStatic>
 80041da:	4603      	mov	r3, r0
 80041dc:	4a23      	ldr	r2, [pc, #140]	@ (800426c <vTaskStartScheduler+0xc8>)
 80041de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041e0:	4b22      	ldr	r3, [pc, #136]	@ (800426c <vTaskStartScheduler+0xc8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d002      	beq.n	80041ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041e8:	2301      	movs	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e001      	b.n	80041f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d102      	bne.n	80041fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041f8:	f000 fd64 	bl	8004cc4 <xTimerCreateTimerTask>
 80041fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d11b      	bne.n	800423c <vTaskStartScheduler+0x98>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	613b      	str	r3, [r7, #16]
}
 8004216:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004218:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <vTaskStartScheduler+0xcc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3354      	adds	r3, #84	@ 0x54
 800421e:	4a15      	ldr	r2, [pc, #84]	@ (8004274 <vTaskStartScheduler+0xd0>)
 8004220:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004222:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <vTaskStartScheduler+0xd4>)
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800422a:	4b14      	ldr	r3, [pc, #80]	@ (800427c <vTaskStartScheduler+0xd8>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <vTaskStartScheduler+0xdc>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004236:	f001 f92b 	bl	8005490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800423a:	e00f      	b.n	800425c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d10b      	bne.n	800425c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	60fb      	str	r3, [r7, #12]
}
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <vTaskStartScheduler+0xb4>
}
 800425c:	bf00      	nop
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	08007b00 	.word	0x08007b00
 8004268:	080048d9 	.word	0x080048d9
 800426c:	20000e4c 	.word	0x20000e4c
 8004270:	20000954 	.word	0x20000954
 8004274:	20000014 	.word	0x20000014
 8004278:	20000e48 	.word	0x20000e48
 800427c:	20000e34 	.word	0x20000e34
 8004280:	20000e2c 	.word	0x20000e2c

08004284 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004288:	4b04      	ldr	r3, [pc, #16]	@ (800429c <vTaskSuspendAll+0x18>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a03      	ldr	r2, [pc, #12]	@ (800429c <vTaskSuspendAll+0x18>)
 8004290:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004292:	bf00      	nop
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	20000e50 	.word	0x20000e50

080042a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042ae:	4b42      	ldr	r3, [pc, #264]	@ (80043b8 <xTaskResumeAll+0x118>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <xTaskResumeAll+0x2e>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	603b      	str	r3, [r7, #0]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042ce:	f001 f983 	bl	80055d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042d2:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <xTaskResumeAll+0x118>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	4a37      	ldr	r2, [pc, #220]	@ (80043b8 <xTaskResumeAll+0x118>)
 80042da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042dc:	4b36      	ldr	r3, [pc, #216]	@ (80043b8 <xTaskResumeAll+0x118>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d162      	bne.n	80043aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042e4:	4b35      	ldr	r3, [pc, #212]	@ (80043bc <xTaskResumeAll+0x11c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05e      	beq.n	80043aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ec:	e02f      	b.n	800434e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ee:	4b34      	ldr	r3, [pc, #208]	@ (80043c0 <xTaskResumeAll+0x120>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3318      	adds	r3, #24
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f83a 	bl	8003374 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3304      	adds	r3, #4
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff f835 	bl	8003374 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430e:	4b2d      	ldr	r3, [pc, #180]	@ (80043c4 <xTaskResumeAll+0x124>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d903      	bls.n	800431e <xTaskResumeAll+0x7e>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	4a2a      	ldr	r2, [pc, #168]	@ (80043c4 <xTaskResumeAll+0x124>)
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a27      	ldr	r2, [pc, #156]	@ (80043c8 <xTaskResumeAll+0x128>)
 800432c:	441a      	add	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fe ffc0 	bl	80032ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800433e:	4b23      	ldr	r3, [pc, #140]	@ (80043cc <xTaskResumeAll+0x12c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	429a      	cmp	r2, r3
 8004346:	d302      	bcc.n	800434e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004348:	4b21      	ldr	r3, [pc, #132]	@ (80043d0 <xTaskResumeAll+0x130>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800434e:	4b1c      	ldr	r3, [pc, #112]	@ (80043c0 <xTaskResumeAll+0x120>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1cb      	bne.n	80042ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800435c:	f000 fbb0 	bl	8004ac0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004360:	4b1c      	ldr	r3, [pc, #112]	@ (80043d4 <xTaskResumeAll+0x134>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800436c:	f000 f858 	bl	8004420 <xTaskIncrementTick>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004376:	4b16      	ldr	r3, [pc, #88]	@ (80043d0 <xTaskResumeAll+0x130>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1f1      	bne.n	800436c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004388:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <xTaskResumeAll+0x134>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800438e:	4b10      	ldr	r3, [pc, #64]	@ (80043d0 <xTaskResumeAll+0x130>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004396:	2301      	movs	r3, #1
 8004398:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800439a:	4b0f      	ldr	r3, [pc, #60]	@ (80043d8 <xTaskResumeAll+0x138>)
 800439c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043aa:	f001 f947 	bl	800563c <vPortExitCritical>

	return xAlreadyYielded;
 80043ae:	68bb      	ldr	r3, [r7, #8]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000e50 	.word	0x20000e50
 80043bc:	20000e28 	.word	0x20000e28
 80043c0:	20000de8 	.word	0x20000de8
 80043c4:	20000e30 	.word	0x20000e30
 80043c8:	20000958 	.word	0x20000958
 80043cc:	20000954 	.word	0x20000954
 80043d0:	20000e3c 	.word	0x20000e3c
 80043d4:	20000e38 	.word	0x20000e38
 80043d8:	e000ed04 	.word	0xe000ed04

080043dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043e2:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <xTaskGetTickCount+0x1c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043e8:	687b      	ldr	r3, [r7, #4]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000e2c 	.word	0x20000e2c

080043fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004402:	f001 f9c9 	bl	8005798 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800440a:	4b04      	ldr	r3, [pc, #16]	@ (800441c <xTaskGetTickCountFromISR+0x20>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004410:	683b      	ldr	r3, [r7, #0]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000e2c 	.word	0x20000e2c

08004420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442a:	4b4f      	ldr	r3, [pc, #316]	@ (8004568 <xTaskIncrementTick+0x148>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 8090 	bne.w	8004554 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004434:	4b4d      	ldr	r3, [pc, #308]	@ (800456c <xTaskIncrementTick+0x14c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	3301      	adds	r3, #1
 800443a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800443c:	4a4b      	ldr	r2, [pc, #300]	@ (800456c <xTaskIncrementTick+0x14c>)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d121      	bne.n	800448c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004448:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <xTaskIncrementTick+0x150>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xTaskIncrementTick+0x46>
 800446a:	4b41      	ldr	r3, [pc, #260]	@ (8004570 <xTaskIncrementTick+0x150>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	4b40      	ldr	r3, [pc, #256]	@ (8004574 <xTaskIncrementTick+0x154>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3e      	ldr	r2, [pc, #248]	@ (8004570 <xTaskIncrementTick+0x150>)
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4a3e      	ldr	r2, [pc, #248]	@ (8004574 <xTaskIncrementTick+0x154>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <xTaskIncrementTick+0x158>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	4a3c      	ldr	r2, [pc, #240]	@ (8004578 <xTaskIncrementTick+0x158>)
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	f000 fb1a 	bl	8004ac0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800448c:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <xTaskIncrementTick+0x15c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	429a      	cmp	r2, r3
 8004494:	d349      	bcc.n	800452a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004496:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <xTaskIncrementTick+0x150>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	4b36      	ldr	r3, [pc, #216]	@ (800457c <xTaskIncrementTick+0x15c>)
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	601a      	str	r2, [r3, #0]
					break;
 80044a8:	e03f      	b.n	800452a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <xTaskIncrementTick+0x150>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d203      	bcs.n	80044ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044c2:	4a2e      	ldr	r2, [pc, #184]	@ (800457c <xTaskIncrementTick+0x15c>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044c8:	e02f      	b.n	800452a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe ff50 	bl	8003374 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	3318      	adds	r3, #24
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7fe ff47 	bl	8003374 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ea:	4b25      	ldr	r3, [pc, #148]	@ (8004580 <xTaskIncrementTick+0x160>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d903      	bls.n	80044fa <xTaskIncrementTick+0xda>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	4a22      	ldr	r2, [pc, #136]	@ (8004580 <xTaskIncrementTick+0x160>)
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <xTaskIncrementTick+0x164>)
 8004508:	441a      	add	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3304      	adds	r3, #4
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fe fed2 	bl	80032ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4b1b      	ldr	r3, [pc, #108]	@ (8004588 <xTaskIncrementTick+0x168>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	429a      	cmp	r2, r3
 8004522:	d3b8      	bcc.n	8004496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004528:	e7b5      	b.n	8004496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800452a:	4b17      	ldr	r3, [pc, #92]	@ (8004588 <xTaskIncrementTick+0x168>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004530:	4914      	ldr	r1, [pc, #80]	@ (8004584 <xTaskIncrementTick+0x164>)
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d901      	bls.n	8004546 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004542:	2301      	movs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004546:	4b11      	ldr	r3, [pc, #68]	@ (800458c <xTaskIncrementTick+0x16c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d007      	beq.n	800455e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800454e:	2301      	movs	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e004      	b.n	800455e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004554:	4b0e      	ldr	r3, [pc, #56]	@ (8004590 <xTaskIncrementTick+0x170>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a0d      	ldr	r2, [pc, #52]	@ (8004590 <xTaskIncrementTick+0x170>)
 800455c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800455e:	697b      	ldr	r3, [r7, #20]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000e50 	.word	0x20000e50
 800456c:	20000e2c 	.word	0x20000e2c
 8004570:	20000de0 	.word	0x20000de0
 8004574:	20000de4 	.word	0x20000de4
 8004578:	20000e40 	.word	0x20000e40
 800457c:	20000e48 	.word	0x20000e48
 8004580:	20000e30 	.word	0x20000e30
 8004584:	20000958 	.word	0x20000958
 8004588:	20000954 	.word	0x20000954
 800458c:	20000e3c 	.word	0x20000e3c
 8004590:	20000e38 	.word	0x20000e38

08004594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800459a:	4b2b      	ldr	r3, [pc, #172]	@ (8004648 <vTaskSwitchContext+0xb4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045a2:	4b2a      	ldr	r3, [pc, #168]	@ (800464c <vTaskSwitchContext+0xb8>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045a8:	e047      	b.n	800463a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80045aa:	4b28      	ldr	r3, [pc, #160]	@ (800464c <vTaskSwitchContext+0xb8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b0:	4b27      	ldr	r3, [pc, #156]	@ (8004650 <vTaskSwitchContext+0xbc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	e011      	b.n	80045dc <vTaskSwitchContext+0x48>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	607b      	str	r3, [r7, #4]
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	e7fd      	b.n	80045d2 <vTaskSwitchContext+0x3e>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3b01      	subs	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	491d      	ldr	r1, [pc, #116]	@ (8004654 <vTaskSwitchContext+0xc0>)
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0e3      	beq.n	80045b8 <vTaskSwitchContext+0x24>
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a16      	ldr	r2, [pc, #88]	@ (8004654 <vTaskSwitchContext+0xc0>)
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	3308      	adds	r3, #8
 8004612:	429a      	cmp	r2, r3
 8004614:	d104      	bne.n	8004620 <vTaskSwitchContext+0x8c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	605a      	str	r2, [r3, #4]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	4a0c      	ldr	r2, [pc, #48]	@ (8004658 <vTaskSwitchContext+0xc4>)
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4a09      	ldr	r2, [pc, #36]	@ (8004650 <vTaskSwitchContext+0xbc>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004630:	4b09      	ldr	r3, [pc, #36]	@ (8004658 <vTaskSwitchContext+0xc4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3354      	adds	r3, #84	@ 0x54
 8004636:	4a09      	ldr	r2, [pc, #36]	@ (800465c <vTaskSwitchContext+0xc8>)
 8004638:	6013      	str	r3, [r2, #0]
}
 800463a:	bf00      	nop
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000e50 	.word	0x20000e50
 800464c:	20000e3c 	.word	0x20000e3c
 8004650:	20000e30 	.word	0x20000e30
 8004654:	20000958 	.word	0x20000958
 8004658:	20000954 	.word	0x20000954
 800465c:	20000014 	.word	0x20000014

08004660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004688:	4b07      	ldr	r3, [pc, #28]	@ (80046a8 <vTaskPlaceOnEventList+0x48>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3318      	adds	r3, #24
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fe fe36 	bl	8003302 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004696:	2101      	movs	r1, #1
 8004698:	6838      	ldr	r0, [r7, #0]
 800469a:	f000 fabf 	bl	8004c1c <prvAddCurrentTaskToDelayedList>
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000954 	.word	0x20000954

080046ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10b      	bne.n	80046d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	617b      	str	r3, [r7, #20]
}
 80046d0:	bf00      	nop
 80046d2:	bf00      	nop
 80046d4:	e7fd      	b.n	80046d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <vTaskPlaceOnEventListRestricted+0x54>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3318      	adds	r3, #24
 80046dc:	4619      	mov	r1, r3
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7fe fdeb 	bl	80032ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f000 fa92 	bl	8004c1c <prvAddCurrentTaskToDelayedList>
	}
 80046f8:	bf00      	nop
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000954 	.word	0x20000954

08004704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800471a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	60fb      	str	r3, [r7, #12]
}
 800472c:	bf00      	nop
 800472e:	bf00      	nop
 8004730:	e7fd      	b.n	800472e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3318      	adds	r3, #24
 8004736:	4618      	mov	r0, r3
 8004738:	f7fe fe1c 	bl	8003374 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800473c:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <xTaskRemoveFromEventList+0xb0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d11d      	bne.n	8004780 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	3304      	adds	r3, #4
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fe13 	bl	8003374 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004752:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <xTaskRemoveFromEventList+0xb4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d903      	bls.n	8004762 <xTaskRemoveFromEventList+0x5e>
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	4a16      	ldr	r2, [pc, #88]	@ (80047b8 <xTaskRemoveFromEventList+0xb4>)
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4a13      	ldr	r2, [pc, #76]	@ (80047bc <xTaskRemoveFromEventList+0xb8>)
 8004770:	441a      	add	r2, r3
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3304      	adds	r3, #4
 8004776:	4619      	mov	r1, r3
 8004778:	4610      	mov	r0, r2
 800477a:	f7fe fd9e 	bl	80032ba <vListInsertEnd>
 800477e:	e005      	b.n	800478c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3318      	adds	r3, #24
 8004784:	4619      	mov	r1, r3
 8004786:	480e      	ldr	r0, [pc, #56]	@ (80047c0 <xTaskRemoveFromEventList+0xbc>)
 8004788:	f7fe fd97 	bl	80032ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004790:	4b0c      	ldr	r3, [pc, #48]	@ (80047c4 <xTaskRemoveFromEventList+0xc0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	429a      	cmp	r2, r3
 8004798:	d905      	bls.n	80047a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <xTaskRemoveFromEventList+0xc4>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e001      	b.n	80047aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000e50 	.word	0x20000e50
 80047b8:	20000e30 	.word	0x20000e30
 80047bc:	20000958 	.word	0x20000958
 80047c0:	20000de8 	.word	0x20000de8
 80047c4:	20000954 	.word	0x20000954
 80047c8:	20000e3c 	.word	0x20000e3c

080047cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <vTaskInternalSetTimeOutState+0x24>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <vTaskInternalSetTimeOutState+0x28>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	605a      	str	r2, [r3, #4]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000e40 	.word	0x20000e40
 80047f4:	20000e2c 	.word	0x20000e2c

080047f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10b      	bne.n	8004820 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	613b      	str	r3, [r7, #16]
}
 800481a:	bf00      	nop
 800481c:	bf00      	nop
 800481e:	e7fd      	b.n	800481c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800483e:	f000 fecb 	bl	80055d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004842:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <xTaskCheckForTimeOut+0xc0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d102      	bne.n	8004862 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800485c:	2300      	movs	r3, #0
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e023      	b.n	80048aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b15      	ldr	r3, [pc, #84]	@ (80048bc <xTaskCheckForTimeOut+0xc4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d007      	beq.n	800487e <xTaskCheckForTimeOut+0x86>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	429a      	cmp	r2, r3
 8004876:	d302      	bcc.n	800487e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004878:	2301      	movs	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e015      	b.n	80048aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	429a      	cmp	r2, r3
 8004886:	d20b      	bcs.n	80048a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	1ad2      	subs	r2, r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff ff99 	bl	80047cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	e004      	b.n	80048aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048a6:	2301      	movs	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048aa:	f000 fec7 	bl	800563c <vPortExitCritical>

	return xReturn;
 80048ae:	69fb      	ldr	r3, [r7, #28]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000e2c 	.word	0x20000e2c
 80048bc:	20000e40 	.word	0x20000e40

080048c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048c4:	4b03      	ldr	r3, [pc, #12]	@ (80048d4 <vTaskMissedYield+0x14>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	601a      	str	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	20000e3c 	.word	0x20000e3c

080048d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048e0:	f000 f852 	bl	8004988 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048e4:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <prvIdleTask+0x28>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d9f9      	bls.n	80048e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <prvIdleTask+0x2c>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048fc:	e7f0      	b.n	80048e0 <prvIdleTask+0x8>
 80048fe:	bf00      	nop
 8004900:	20000958 	.word	0x20000958
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800490e:	2300      	movs	r3, #0
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	e00c      	b.n	800492e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4a12      	ldr	r2, [pc, #72]	@ (8004968 <prvInitialiseTaskLists+0x60>)
 8004920:	4413      	add	r3, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fc9c 	bl	8003260 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3301      	adds	r3, #1
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b37      	cmp	r3, #55	@ 0x37
 8004932:	d9ef      	bls.n	8004914 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004934:	480d      	ldr	r0, [pc, #52]	@ (800496c <prvInitialiseTaskLists+0x64>)
 8004936:	f7fe fc93 	bl	8003260 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800493a:	480d      	ldr	r0, [pc, #52]	@ (8004970 <prvInitialiseTaskLists+0x68>)
 800493c:	f7fe fc90 	bl	8003260 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004940:	480c      	ldr	r0, [pc, #48]	@ (8004974 <prvInitialiseTaskLists+0x6c>)
 8004942:	f7fe fc8d 	bl	8003260 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004946:	480c      	ldr	r0, [pc, #48]	@ (8004978 <prvInitialiseTaskLists+0x70>)
 8004948:	f7fe fc8a 	bl	8003260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800494c:	480b      	ldr	r0, [pc, #44]	@ (800497c <prvInitialiseTaskLists+0x74>)
 800494e:	f7fe fc87 	bl	8003260 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004952:	4b0b      	ldr	r3, [pc, #44]	@ (8004980 <prvInitialiseTaskLists+0x78>)
 8004954:	4a05      	ldr	r2, [pc, #20]	@ (800496c <prvInitialiseTaskLists+0x64>)
 8004956:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <prvInitialiseTaskLists+0x7c>)
 800495a:	4a05      	ldr	r2, [pc, #20]	@ (8004970 <prvInitialiseTaskLists+0x68>)
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000958 	.word	0x20000958
 800496c:	20000db8 	.word	0x20000db8
 8004970:	20000dcc 	.word	0x20000dcc
 8004974:	20000de8 	.word	0x20000de8
 8004978:	20000dfc 	.word	0x20000dfc
 800497c:	20000e14 	.word	0x20000e14
 8004980:	20000de0 	.word	0x20000de0
 8004984:	20000de4 	.word	0x20000de4

08004988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800498e:	e019      	b.n	80049c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004990:	f000 fe22 	bl	80055d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004994:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <prvCheckTasksWaitingTermination+0x50>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3304      	adds	r3, #4
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fe fce7 	bl	8003374 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049a6:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <prvCheckTasksWaitingTermination+0x54>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	4a0b      	ldr	r2, [pc, #44]	@ (80049dc <prvCheckTasksWaitingTermination+0x54>)
 80049ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <prvCheckTasksWaitingTermination+0x58>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <prvCheckTasksWaitingTermination+0x58>)
 80049b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ba:	f000 fe3f 	bl	800563c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f848 	bl	8004a54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <prvCheckTasksWaitingTermination+0x58>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e1      	bne.n	8004990 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000dfc 	.word	0x20000dfc
 80049dc:	20000e28 	.word	0x20000e28
 80049e0:	20000e10 	.word	0x20000e10

080049e4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80049f0:	e005      	b.n	80049fe <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3301      	adds	r3, #1
 80049f6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2ba5      	cmp	r3, #165	@ 0xa5
 8004a04:	d0f5      	beq.n	80049f2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	089b      	lsrs	r3, r3, #2
 8004a0a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	b29b      	uxth	r3, r3
	}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <uxTaskGetStackHighWaterMark+0x14>
 8004a2a:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <uxTaskGetStackHighWaterMark+0x34>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	e000      	b.n	8004a32 <uxTaskGetStackHighWaterMark+0x16>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a38:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f7ff ffd2 	bl	80049e4 <prvTaskCheckFreeStackSpace>
 8004a40:	4603      	mov	r3, r0
 8004a42:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004a44:	68fb      	ldr	r3, [r7, #12]
	}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000954 	.word	0x20000954

08004a54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3354      	adds	r3, #84	@ 0x54
 8004a60:	4618      	mov	r0, r3
 8004a62:	f002 fb59 	bl	8007118 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d108      	bne.n	8004a82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 ff9f 	bl	80059b8 <vPortFree>
				vPortFree( pxTCB );
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 ff9c 	bl	80059b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a80:	e019      	b.n	8004ab6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d103      	bne.n	8004a94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 ff93 	bl	80059b8 <vPortFree>
	}
 8004a92:	e010      	b.n	8004ab6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d00b      	beq.n	8004ab6 <prvDeleteTCB+0x62>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60fb      	str	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <prvDeleteTCB+0x5e>
	}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8004af8 <prvResetNextTaskUnblockTime+0x38>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d104      	bne.n	8004ada <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <prvResetNextTaskUnblockTime+0x3c>)
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ad8:	e008      	b.n	8004aec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ada:	4b07      	ldr	r3, [pc, #28]	@ (8004af8 <prvResetNextTaskUnblockTime+0x38>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a04      	ldr	r2, [pc, #16]	@ (8004afc <prvResetNextTaskUnblockTime+0x3c>)
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000de0 	.word	0x20000de0
 8004afc:	20000e48 	.word	0x20000e48

08004b00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b06:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <xTaskGetSchedulerState+0x34>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	607b      	str	r3, [r7, #4]
 8004b12:	e008      	b.n	8004b26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <xTaskGetSchedulerState+0x38>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e001      	b.n	8004b26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b26:	687b      	ldr	r3, [r7, #4]
	}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	20000e34 	.word	0x20000e34
 8004b38:	20000e50 	.word	0x20000e50

08004b3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d058      	beq.n	8004c04 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b52:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <xTaskPriorityDisinherit+0xd4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d00b      	beq.n	8004b74 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	60fb      	str	r3, [r7, #12]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60bb      	str	r3, [r7, #8]
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	e7fd      	b.n	8004b90 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d02c      	beq.n	8004c04 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d128      	bne.n	8004c04 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fe fbdc 	bl	8003374 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c14 <xTaskPriorityDisinherit+0xd8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d903      	bls.n	8004be4 <xTaskPriorityDisinherit+0xa8>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	4a0c      	ldr	r2, [pc, #48]	@ (8004c14 <xTaskPriorityDisinherit+0xd8>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be8:	4613      	mov	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <xTaskPriorityDisinherit+0xdc>)
 8004bf2:	441a      	add	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fe fb5d 	bl	80032ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c00:	2301      	movs	r3, #1
 8004c02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c04:	697b      	ldr	r3, [r7, #20]
	}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000954 	.word	0x20000954
 8004c14:	20000e30 	.word	0x20000e30
 8004c18:	20000958 	.word	0x20000958

08004c1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c26:	4b21      	ldr	r3, [pc, #132]	@ (8004cac <prvAddCurrentTaskToDelayedList+0x90>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c2c:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fb9e 	bl	8003374 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d10a      	bne.n	8004c56 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c46:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4819      	ldr	r0, [pc, #100]	@ (8004cb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c50:	f7fe fb33 	bl	80032ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c54:	e026      	b.n	8004ca4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c5e:	4b14      	ldr	r3, [pc, #80]	@ (8004cb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d209      	bcs.n	8004c82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe fb41 	bl	8003302 <vListInsert>
}
 8004c80:	e010      	b.n	8004ca4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c82:	4b0e      	ldr	r3, [pc, #56]	@ (8004cbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7fe fb37 	bl	8003302 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d202      	bcs.n	8004ca4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c9e:	4a08      	ldr	r2, [pc, #32]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	20000e2c 	.word	0x20000e2c
 8004cb0:	20000954 	.word	0x20000954
 8004cb4:	20000e14 	.word	0x20000e14
 8004cb8:	20000de4 	.word	0x20000de4
 8004cbc:	20000de0 	.word	0x20000de0
 8004cc0:	20000e48 	.word	0x20000e48

08004cc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	@ 0x28
 8004cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cce:	f000 fb13 	bl	80052f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d48 <xTimerCreateTimerTask+0x84>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d021      	beq.n	8004d1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ce2:	1d3a      	adds	r2, r7, #4
 8004ce4:	f107 0108 	add.w	r1, r7, #8
 8004ce8:	f107 030c 	add.w	r3, r7, #12
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe fa9d 	bl	800322c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	9202      	str	r2, [sp, #8]
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	2300      	movs	r3, #0
 8004d02:	460a      	mov	r2, r1
 8004d04:	4911      	ldr	r1, [pc, #68]	@ (8004d4c <xTimerCreateTimerTask+0x88>)
 8004d06:	4812      	ldr	r0, [pc, #72]	@ (8004d50 <xTimerCreateTimerTask+0x8c>)
 8004d08:	f7ff f858 	bl	8003dbc <xTaskCreateStatic>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a11      	ldr	r2, [pc, #68]	@ (8004d54 <xTimerCreateTimerTask+0x90>)
 8004d10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <xTimerCreateTimerTask+0x90>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	613b      	str	r3, [r7, #16]
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	e7fd      	b.n	8004d38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d3c:	697b      	ldr	r3, [r7, #20]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000e84 	.word	0x20000e84
 8004d4c:	08007b08 	.word	0x08007b08
 8004d50:	08004e91 	.word	0x08004e91
 8004d54:	20000e88 	.word	0x20000e88

08004d58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	@ 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <xTimerGenericCommand+0x30>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	623b      	str	r3, [r7, #32]
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d88:	4b19      	ldr	r3, [pc, #100]	@ (8004df0 <xTimerGenericCommand+0x98>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d02a      	beq.n	8004de6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b05      	cmp	r3, #5
 8004da0:	dc18      	bgt.n	8004dd4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004da2:	f7ff fead 	bl	8004b00 <xTaskGetSchedulerState>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d109      	bne.n	8004dc0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dac:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <xTimerGenericCommand+0x98>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	f107 0110 	add.w	r1, r7, #16
 8004db4:	2300      	movs	r3, #0
 8004db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db8:	f7fe fc10 	bl	80035dc <xQueueGenericSend>
 8004dbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dbe:	e012      	b.n	8004de6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <xTimerGenericCommand+0x98>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	f107 0110 	add.w	r1, r7, #16
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f7fe fc06 	bl	80035dc <xQueueGenericSend>
 8004dd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dd2:	e008      	b.n	8004de6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <xTimerGenericCommand+0x98>)
 8004dd6:	6818      	ldr	r0, [r3, #0]
 8004dd8:	f107 0110 	add.w	r1, r7, #16
 8004ddc:	2300      	movs	r3, #0
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	f7fe fcfe 	bl	80037e0 <xQueueGenericSendFromISR>
 8004de4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	@ 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000e84 	.word	0x20000e84

08004df4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfe:	4b23      	ldr	r3, [pc, #140]	@ (8004e8c <prvProcessExpiredTimer+0x98>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fe fab1 	bl	8003374 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d023      	beq.n	8004e68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	18d1      	adds	r1, r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f000 f8d5 	bl	8004fdc <prvInsertTimerInActiveList>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e38:	2300      	movs	r3, #0
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	2100      	movs	r1, #0
 8004e42:	6978      	ldr	r0, [r7, #20]
 8004e44:	f7ff ff88 	bl	8004d58 <xTimerGenericCommand>
 8004e48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d114      	bne.n	8004e7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	6978      	ldr	r0, [r7, #20]
 8004e80:	4798      	blx	r3
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000e7c 	.word	0x20000e7c

08004e90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e98:	f107 0308 	add.w	r3, r7, #8
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f859 	bl	8004f54 <prvGetNextExpireTime>
 8004ea2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 f805 	bl	8004eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004eae:	f000 f8d7 	bl	8005060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004eb2:	bf00      	nop
 8004eb4:	e7f0      	b.n	8004e98 <prvTimerTask+0x8>
	...

08004eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ec2:	f7ff f9df 	bl	8004284 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ec6:	f107 0308 	add.w	r3, r7, #8
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 f866 	bl	8004f9c <prvSampleTimeNow>
 8004ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d130      	bne.n	8004f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <prvProcessTimerOrBlockTask+0x3c>
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d806      	bhi.n	8004ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ee6:	f7ff f9db 	bl	80042a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff ff81 	bl	8004df4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ef2:	e024      	b.n	8004f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004efa:	4b13      	ldr	r3, [pc, #76]	@ (8004f48 <prvProcessTimerOrBlockTask+0x90>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <prvProcessTimerOrBlockTask+0x50>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <prvProcessTimerOrBlockTask+0x52>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <prvProcessTimerOrBlockTask+0x94>)
 8004f0e:	6818      	ldr	r0, [r3, #0]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f7fe ff1b 	bl	8003d54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f1e:	f7ff f9bf 	bl	80042a0 <xTaskResumeAll>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f28:	4b09      	ldr	r3, [pc, #36]	@ (8004f50 <prvProcessTimerOrBlockTask+0x98>)
 8004f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	f3bf 8f6f 	isb	sy
}
 8004f38:	e001      	b.n	8004f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f3a:	f7ff f9b1 	bl	80042a0 <xTaskResumeAll>
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000e80 	.word	0x20000e80
 8004f4c:	20000e84 	.word	0x20000e84
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f98 <prvGetNextExpireTime+0x44>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <prvGetNextExpireTime+0x16>
 8004f66:	2201      	movs	r2, #1
 8004f68:	e000      	b.n	8004f6c <prvGetNextExpireTime+0x18>
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f78:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <prvGetNextExpireTime+0x44>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e001      	b.n	8004f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f88:	68fb      	ldr	r3, [r7, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20000e7c 	.word	0x20000e7c

08004f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fa4:	f7ff fa1a 	bl	80043dc <xTaskGetTickCount>
 8004fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <prvSampleTimeNow+0x3c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d205      	bcs.n	8004fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fb4:	f000 f93a 	bl	800522c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e002      	b.n	8004fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fc6:	4a04      	ldr	r2, [pc, #16]	@ (8004fd8 <prvSampleTimeNow+0x3c>)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000e8c 	.word	0x20000e8c

08004fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d812      	bhi.n	8005028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	429a      	cmp	r2, r3
 800500e:	d302      	bcc.n	8005016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005010:	2301      	movs	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e01b      	b.n	800504e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005016:	4b10      	ldr	r3, [pc, #64]	@ (8005058 <prvInsertTimerInActiveList+0x7c>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3304      	adds	r3, #4
 800501e:	4619      	mov	r1, r3
 8005020:	4610      	mov	r0, r2
 8005022:	f7fe f96e 	bl	8003302 <vListInsert>
 8005026:	e012      	b.n	800504e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d206      	bcs.n	800503e <prvInsertTimerInActiveList+0x62>
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d302      	bcc.n	800503e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e007      	b.n	800504e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <prvInsertTimerInActiveList+0x80>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	3304      	adds	r3, #4
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7fe f95a 	bl	8003302 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800504e:	697b      	ldr	r3, [r7, #20]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000e80 	.word	0x20000e80
 800505c:	20000e7c 	.word	0x20000e7c

08005060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08e      	sub	sp, #56	@ 0x38
 8005064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005066:	e0ce      	b.n	8005206 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	da19      	bge.n	80050a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	3304      	adds	r3, #4
 8005072:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10b      	bne.n	8005092 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61fb      	str	r3, [r7, #28]
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	e7fd      	b.n	800508e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005098:	6850      	ldr	r0, [r2, #4]
 800509a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800509c:	6892      	ldr	r2, [r2, #8]
 800509e:	4611      	mov	r1, r2
 80050a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f2c0 80ae 	blt.w	8005206 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b8:	3304      	adds	r3, #4
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe f95a 	bl	8003374 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050c0:	463b      	mov	r3, r7
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff ff6a 	bl	8004f9c <prvSampleTimeNow>
 80050c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b09      	cmp	r3, #9
 80050ce:	f200 8097 	bhi.w	8005200 <prvProcessReceivedCommands+0x1a0>
 80050d2:	a201      	add	r2, pc, #4	@ (adr r2, 80050d8 <prvProcessReceivedCommands+0x78>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	08005101 	.word	0x08005101
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005101 	.word	0x08005101
 80050e4:	08005177 	.word	0x08005177
 80050e8:	0800518b 	.word	0x0800518b
 80050ec:	080051d7 	.word	0x080051d7
 80050f0:	08005101 	.word	0x08005101
 80050f4:	08005101 	.word	0x08005101
 80050f8:	08005177 	.word	0x08005177
 80050fc:	0800518b 	.word	0x0800518b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005106:	f043 0301 	orr.w	r3, r3, #1
 800510a:	b2da      	uxtb	r2, r3
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	18d1      	adds	r1, r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005120:	f7ff ff5c 	bl	8004fdc <prvInsertTimerInActiveList>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06c      	beq.n	8005204 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d061      	beq.n	8005204 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	441a      	add	r2, r3
 8005148:	2300      	movs	r3, #0
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2300      	movs	r3, #0
 800514e:	2100      	movs	r1, #0
 8005150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005152:	f7ff fe01 	bl	8004d58 <xTimerGenericCommand>
 8005156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d152      	bne.n	8005204 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	61bb      	str	r3, [r7, #24]
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	e7fd      	b.n	8005172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005184:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005188:	e03d      	b.n	8005206 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	617b      	str	r3, [r7, #20]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	18d1      	adds	r1, r2, r3
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051d0:	f7ff ff04 	bl	8004fdc <prvInsertTimerInActiveList>
					break;
 80051d4:	e017      	b.n	8005206 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80051e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051e6:	f000 fbe7 	bl	80059b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051ea:	e00c      	b.n	8005206 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80051fe:	e002      	b.n	8005206 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005200:	bf00      	nop
 8005202:	e000      	b.n	8005206 <prvProcessReceivedCommands+0x1a6>
					break;
 8005204:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005206:	4b08      	ldr	r3, [pc, #32]	@ (8005228 <prvProcessReceivedCommands+0x1c8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	1d39      	adds	r1, r7, #4
 800520c:	2200      	movs	r2, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fb84 	bl	800391c <xQueueReceive>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f47f af26 	bne.w	8005068 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	3730      	adds	r7, #48	@ 0x30
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000e84 	.word	0x20000e84

0800522c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005232:	e049      	b.n	80052c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005234:	4b2e      	ldr	r3, [pc, #184]	@ (80052f0 <prvSwitchTimerLists+0xc4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800523e:	4b2c      	ldr	r3, [pc, #176]	@ (80052f0 <prvSwitchTimerLists+0xc4>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3304      	adds	r3, #4
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe f891 	bl	8003374 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02f      	beq.n	80052c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d90e      	bls.n	8005298 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005286:	4b1a      	ldr	r3, [pc, #104]	@ (80052f0 <prvSwitchTimerLists+0xc4>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7fe f836 	bl	8003302 <vListInsert>
 8005296:	e017      	b.n	80052c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005298:	2300      	movs	r3, #0
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2300      	movs	r3, #0
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	2100      	movs	r1, #0
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f7ff fd58 	bl	8004d58 <xTimerGenericCommand>
 80052a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	603b      	str	r3, [r7, #0]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052c8:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <prvSwitchTimerLists+0xc4>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1b0      	bne.n	8005234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052d2:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <prvSwitchTimerLists+0xc4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <prvSwitchTimerLists+0xc8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <prvSwitchTimerLists+0xc4>)
 80052de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052e0:	4a04      	ldr	r2, [pc, #16]	@ (80052f4 <prvSwitchTimerLists+0xc8>)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000e7c 	.word	0x20000e7c
 80052f4:	20000e80 	.word	0x20000e80

080052f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052fe:	f000 f96b 	bl	80055d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <prvCheckForValidListAndQueue+0x60>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d120      	bne.n	800534c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800530a:	4814      	ldr	r0, [pc, #80]	@ (800535c <prvCheckForValidListAndQueue+0x64>)
 800530c:	f7fd ffa8 	bl	8003260 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005310:	4813      	ldr	r0, [pc, #76]	@ (8005360 <prvCheckForValidListAndQueue+0x68>)
 8005312:	f7fd ffa5 	bl	8003260 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005316:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <prvCheckForValidListAndQueue+0x6c>)
 8005318:	4a10      	ldr	r2, [pc, #64]	@ (800535c <prvCheckForValidListAndQueue+0x64>)
 800531a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800531c:	4b12      	ldr	r3, [pc, #72]	@ (8005368 <prvCheckForValidListAndQueue+0x70>)
 800531e:	4a10      	ldr	r2, [pc, #64]	@ (8005360 <prvCheckForValidListAndQueue+0x68>)
 8005320:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005322:	2300      	movs	r3, #0
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	4b11      	ldr	r3, [pc, #68]	@ (800536c <prvCheckForValidListAndQueue+0x74>)
 8005328:	4a11      	ldr	r2, [pc, #68]	@ (8005370 <prvCheckForValidListAndQueue+0x78>)
 800532a:	2110      	movs	r1, #16
 800532c:	200a      	movs	r0, #10
 800532e:	f7fe f8b5 	bl	800349c <xQueueGenericCreateStatic>
 8005332:	4603      	mov	r3, r0
 8005334:	4a08      	ldr	r2, [pc, #32]	@ (8005358 <prvCheckForValidListAndQueue+0x60>)
 8005336:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005338:	4b07      	ldr	r3, [pc, #28]	@ (8005358 <prvCheckForValidListAndQueue+0x60>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005340:	4b05      	ldr	r3, [pc, #20]	@ (8005358 <prvCheckForValidListAndQueue+0x60>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	490b      	ldr	r1, [pc, #44]	@ (8005374 <prvCheckForValidListAndQueue+0x7c>)
 8005346:	4618      	mov	r0, r3
 8005348:	f7fe fcda 	bl	8003d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800534c:	f000 f976 	bl	800563c <vPortExitCritical>
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20000e84 	.word	0x20000e84
 800535c:	20000e54 	.word	0x20000e54
 8005360:	20000e68 	.word	0x20000e68
 8005364:	20000e7c 	.word	0x20000e7c
 8005368:	20000e80 	.word	0x20000e80
 800536c:	20000f30 	.word	0x20000f30
 8005370:	20000e90 	.word	0x20000e90
 8005374:	08007b10 	.word	0x08007b10

08005378 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b04      	subs	r3, #4
 8005388:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3b04      	subs	r3, #4
 8005396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f023 0201 	bic.w	r2, r3, #1
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053a8:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <pxPortInitialiseStack+0x64>)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3b14      	subs	r3, #20
 80053b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3b04      	subs	r3, #4
 80053be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f06f 0202 	mvn.w	r2, #2
 80053c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	3b20      	subs	r3, #32
 80053cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	080053e1 	.word	0x080053e1

080053e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053ea:	4b13      	ldr	r3, [pc, #76]	@ (8005438 <prvTaskExitError+0x58>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f2:	d00b      	beq.n	800540c <prvTaskExitError+0x2c>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	60fb      	str	r3, [r7, #12]
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <prvTaskExitError+0x28>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	60bb      	str	r3, [r7, #8]
}
 800541e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005420:	bf00      	nop
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0fc      	beq.n	8005422 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000010 	.word	0x20000010
 800543c:	00000000 	.word	0x00000000

08005440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005440:	4b07      	ldr	r3, [pc, #28]	@ (8005460 <pxCurrentTCBConst2>)
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	6808      	ldr	r0, [r1, #0]
 8005446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	f380 8809 	msr	PSP, r0
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f380 8811 	msr	BASEPRI, r0
 800545a:	4770      	bx	lr
 800545c:	f3af 8000 	nop.w

08005460 <pxCurrentTCBConst2>:
 8005460:	20000954 	.word	0x20000954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005468:	4808      	ldr	r0, [pc, #32]	@ (800548c <prvPortStartFirstTask+0x24>)
 800546a:	6800      	ldr	r0, [r0, #0]
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f380 8808 	msr	MSP, r0
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8814 	msr	CONTROL, r0
 800547a:	b662      	cpsie	i
 800547c:	b661      	cpsie	f
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	df00      	svc	0
 8005488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800548a:	bf00      	nop
 800548c:	e000ed08 	.word	0xe000ed08

08005490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005496:	4b47      	ldr	r3, [pc, #284]	@ (80055b4 <xPortStartScheduler+0x124>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a47      	ldr	r2, [pc, #284]	@ (80055b8 <xPortStartScheduler+0x128>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d10b      	bne.n	80054b8 <xPortStartScheduler+0x28>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
}
 80054b2:	bf00      	nop
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054b8:	4b3e      	ldr	r3, [pc, #248]	@ (80055b4 <xPortStartScheduler+0x124>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3f      	ldr	r2, [pc, #252]	@ (80055bc <xPortStartScheduler+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d10b      	bne.n	80054da <xPortStartScheduler+0x4a>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60fb      	str	r3, [r7, #12]
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054da:	4b39      	ldr	r3, [pc, #228]	@ (80055c0 <xPortStartScheduler+0x130>)
 80054dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	22ff      	movs	r2, #255	@ 0xff
 80054ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	4b31      	ldr	r3, [pc, #196]	@ (80055c4 <xPortStartScheduler+0x134>)
 8005500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005502:	4b31      	ldr	r3, [pc, #196]	@ (80055c8 <xPortStartScheduler+0x138>)
 8005504:	2207      	movs	r2, #7
 8005506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005508:	e009      	b.n	800551e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800550a:	4b2f      	ldr	r3, [pc, #188]	@ (80055c8 <xPortStartScheduler+0x138>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3b01      	subs	r3, #1
 8005510:	4a2d      	ldr	r2, [pc, #180]	@ (80055c8 <xPortStartScheduler+0x138>)
 8005512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005526:	2b80      	cmp	r3, #128	@ 0x80
 8005528:	d0ef      	beq.n	800550a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800552a:	4b27      	ldr	r3, [pc, #156]	@ (80055c8 <xPortStartScheduler+0x138>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1c3 0307 	rsb	r3, r3, #7
 8005532:	2b04      	cmp	r3, #4
 8005534:	d00b      	beq.n	800554e <xPortStartScheduler+0xbe>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	60bb      	str	r3, [r7, #8]
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	e7fd      	b.n	800554a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800554e:	4b1e      	ldr	r3, [pc, #120]	@ (80055c8 <xPortStartScheduler+0x138>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	4a1c      	ldr	r2, [pc, #112]	@ (80055c8 <xPortStartScheduler+0x138>)
 8005556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005558:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <xPortStartScheduler+0x138>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005560:	4a19      	ldr	r2, [pc, #100]	@ (80055c8 <xPortStartScheduler+0x138>)
 8005562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	b2da      	uxtb	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800556c:	4b17      	ldr	r3, [pc, #92]	@ (80055cc <xPortStartScheduler+0x13c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a16      	ldr	r2, [pc, #88]	@ (80055cc <xPortStartScheduler+0x13c>)
 8005572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005578:	4b14      	ldr	r3, [pc, #80]	@ (80055cc <xPortStartScheduler+0x13c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a13      	ldr	r2, [pc, #76]	@ (80055cc <xPortStartScheduler+0x13c>)
 800557e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005584:	f000 f8da 	bl	800573c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005588:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <xPortStartScheduler+0x140>)
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800558e:	f000 f8f9 	bl	8005784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005592:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <xPortStartScheduler+0x144>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a0f      	ldr	r2, [pc, #60]	@ (80055d4 <xPortStartScheduler+0x144>)
 8005598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800559c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800559e:	f7ff ff63 	bl	8005468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055a2:	f7fe fff7 	bl	8004594 <vTaskSwitchContext>
	prvTaskExitError();
 80055a6:	f7ff ff1b 	bl	80053e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	e000ed00 	.word	0xe000ed00
 80055b8:	410fc271 	.word	0x410fc271
 80055bc:	410fc270 	.word	0x410fc270
 80055c0:	e000e400 	.word	0xe000e400
 80055c4:	20000f80 	.word	0x20000f80
 80055c8:	20000f84 	.word	0x20000f84
 80055cc:	e000ed20 	.word	0xe000ed20
 80055d0:	20000010 	.word	0x20000010
 80055d4:	e000ef34 	.word	0xe000ef34

080055d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
	__asm volatile
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	607b      	str	r3, [r7, #4]
}
 80055f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055f2:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <vPortEnterCritical+0x5c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3301      	adds	r3, #1
 80055f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005634 <vPortEnterCritical+0x5c>)
 80055fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <vPortEnterCritical+0x5c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d110      	bne.n	8005626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005604:	4b0c      	ldr	r3, [pc, #48]	@ (8005638 <vPortEnterCritical+0x60>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <vPortEnterCritical+0x4e>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	603b      	str	r3, [r7, #0]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <vPortEnterCritical+0x4a>
	}
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000010 	.word	0x20000010
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005642:	4b12      	ldr	r3, [pc, #72]	@ (800568c <vPortExitCritical+0x50>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10b      	bne.n	8005662 <vPortExitCritical+0x26>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	607b      	str	r3, [r7, #4]
}
 800565c:	bf00      	nop
 800565e:	bf00      	nop
 8005660:	e7fd      	b.n	800565e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005662:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <vPortExitCritical+0x50>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3b01      	subs	r3, #1
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <vPortExitCritical+0x50>)
 800566a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800566c:	4b07      	ldr	r3, [pc, #28]	@ (800568c <vPortExitCritical+0x50>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <vPortExitCritical+0x44>
 8005674:	2300      	movs	r3, #0
 8005676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	f383 8811 	msr	BASEPRI, r3
}
 800567e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000010 	.word	0x20000010

08005690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005690:	f3ef 8009 	mrs	r0, PSP
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4b15      	ldr	r3, [pc, #84]	@ (80056f0 <pxCurrentTCBConst>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	f01e 0f10 	tst.w	lr, #16
 80056a0:	bf08      	it	eq
 80056a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	6010      	str	r0, [r2, #0]
 80056ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056b4:	f380 8811 	msr	BASEPRI, r0
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f7fe ff68 	bl	8004594 <vTaskSwitchContext>
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f380 8811 	msr	BASEPRI, r0
 80056cc:	bc09      	pop	{r0, r3}
 80056ce:	6819      	ldr	r1, [r3, #0]
 80056d0:	6808      	ldr	r0, [r1, #0]
 80056d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d6:	f01e 0f10 	tst.w	lr, #16
 80056da:	bf08      	it	eq
 80056dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056e0:	f380 8809 	msr	PSP, r0
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst>:
 80056f0:	20000954 	.word	0x20000954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	607b      	str	r3, [r7, #4]
}
 8005710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005712:	f7fe fe85 	bl	8004420 <xTaskIncrementTick>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800571c:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <xPortSysTickHandler+0x40>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f383 8811 	msr	BASEPRI, r3
}
 800572e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005740:	4b0b      	ldr	r3, [pc, #44]	@ (8005770 <vPortSetupTimerInterrupt+0x34>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005746:	4b0b      	ldr	r3, [pc, #44]	@ (8005774 <vPortSetupTimerInterrupt+0x38>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800574c:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <vPortSetupTimerInterrupt+0x3c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a0a      	ldr	r2, [pc, #40]	@ (800577c <vPortSetupTimerInterrupt+0x40>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	099b      	lsrs	r3, r3, #6
 8005758:	4a09      	ldr	r2, [pc, #36]	@ (8005780 <vPortSetupTimerInterrupt+0x44>)
 800575a:	3b01      	subs	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800575e:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <vPortSetupTimerInterrupt+0x34>)
 8005760:	2207      	movs	r2, #7
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	e000e010 	.word	0xe000e010
 8005774:	e000e018 	.word	0xe000e018
 8005778:	20000004 	.word	0x20000004
 800577c:	10624dd3 	.word	0x10624dd3
 8005780:	e000e014 	.word	0xe000e014

08005784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005794 <vPortEnableVFP+0x10>
 8005788:	6801      	ldr	r1, [r0, #0]
 800578a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800578e:	6001      	str	r1, [r0, #0]
 8005790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005792:	bf00      	nop
 8005794:	e000ed88 	.word	0xe000ed88

08005798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800579e:	f3ef 8305 	mrs	r3, IPSR
 80057a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d915      	bls.n	80057d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057aa:	4a18      	ldr	r2, [pc, #96]	@ (800580c <vPortValidateInterruptPriority+0x74>)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057b4:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <vPortValidateInterruptPriority+0x78>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	7afa      	ldrb	r2, [r7, #11]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d20b      	bcs.n	80057d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	607b      	str	r3, [r7, #4]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005814 <vPortValidateInterruptPriority+0x7c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <vPortValidateInterruptPriority+0x80>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d90b      	bls.n	80057fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	603b      	str	r3, [r7, #0]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <vPortValidateInterruptPriority+0x62>
	}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	e000e3f0 	.word	0xe000e3f0
 8005810:	20000f80 	.word	0x20000f80
 8005814:	e000ed0c 	.word	0xe000ed0c
 8005818:	20000f84 	.word	0x20000f84

0800581c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	@ 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005828:	f7fe fd2c 	bl	8004284 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800582c:	4b5c      	ldr	r3, [pc, #368]	@ (80059a0 <pvPortMalloc+0x184>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005834:	f000 f924 	bl	8005a80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005838:	4b5a      	ldr	r3, [pc, #360]	@ (80059a4 <pvPortMalloc+0x188>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 8095 	bne.w	8005970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01e      	beq.n	800588a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800584c:	2208      	movs	r2, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d015      	beq.n	800588a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	3308      	adds	r3, #8
 8005866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <pvPortMalloc+0x6e>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	617b      	str	r3, [r7, #20]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d06f      	beq.n	8005970 <pvPortMalloc+0x154>
 8005890:	4b45      	ldr	r3, [pc, #276]	@ (80059a8 <pvPortMalloc+0x18c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d86a      	bhi.n	8005970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800589a:	4b44      	ldr	r3, [pc, #272]	@ (80059ac <pvPortMalloc+0x190>)
 800589c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800589e:	4b43      	ldr	r3, [pc, #268]	@ (80059ac <pvPortMalloc+0x190>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a4:	e004      	b.n	80058b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d903      	bls.n	80058c2 <pvPortMalloc+0xa6>
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058c2:	4b37      	ldr	r3, [pc, #220]	@ (80059a0 <pvPortMalloc+0x184>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d051      	beq.n	8005970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2208      	movs	r2, #8
 80058d2:	4413      	add	r3, r2
 80058d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1ad2      	subs	r2, r2, r3
 80058e6:	2308      	movs	r3, #8
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d920      	bls.n	8005930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4413      	add	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <pvPortMalloc+0xfc>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	613b      	str	r3, [r7, #16]
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	e7fd      	b.n	8005914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad2      	subs	r2, r2, r3
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800592a:	69b8      	ldr	r0, [r7, #24]
 800592c:	f000 f90a 	bl	8005b44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005930:	4b1d      	ldr	r3, [pc, #116]	@ (80059a8 <pvPortMalloc+0x18c>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	4a1b      	ldr	r2, [pc, #108]	@ (80059a8 <pvPortMalloc+0x18c>)
 800593c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800593e:	4b1a      	ldr	r3, [pc, #104]	@ (80059a8 <pvPortMalloc+0x18c>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b1b      	ldr	r3, [pc, #108]	@ (80059b0 <pvPortMalloc+0x194>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d203      	bcs.n	8005952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800594a:	4b17      	ldr	r3, [pc, #92]	@ (80059a8 <pvPortMalloc+0x18c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a18      	ldr	r2, [pc, #96]	@ (80059b0 <pvPortMalloc+0x194>)
 8005950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b13      	ldr	r3, [pc, #76]	@ (80059a4 <pvPortMalloc+0x188>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	431a      	orrs	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	2200      	movs	r2, #0
 8005964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <pvPortMalloc+0x198>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3301      	adds	r3, #1
 800596c:	4a11      	ldr	r2, [pc, #68]	@ (80059b4 <pvPortMalloc+0x198>)
 800596e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005970:	f7fe fc96 	bl	80042a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00b      	beq.n	8005996 <pvPortMalloc+0x17a>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
}
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <pvPortMalloc+0x176>
	return pvReturn;
 8005996:	69fb      	ldr	r3, [r7, #28]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	@ 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20004b90 	.word	0x20004b90
 80059a4:	20004ba4 	.word	0x20004ba4
 80059a8:	20004b94 	.word	0x20004b94
 80059ac:	20004b88 	.word	0x20004b88
 80059b0:	20004b98 	.word	0x20004b98
 80059b4:	20004b9c 	.word	0x20004b9c

080059b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d04f      	beq.n	8005a6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059ca:	2308      	movs	r3, #8
 80059cc:	425b      	negs	r3, r3
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <vPortFree+0xbc>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10b      	bne.n	80059fe <vPortFree+0x46>
	__asm volatile
 80059e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	60fb      	str	r3, [r7, #12]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <vPortFree+0x66>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	60bb      	str	r3, [r7, #8]
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	e7fd      	b.n	8005a1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b14      	ldr	r3, [pc, #80]	@ (8005a74 <vPortFree+0xbc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01e      	beq.n	8005a6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d11a      	bne.n	8005a6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4b0e      	ldr	r3, [pc, #56]	@ (8005a74 <vPortFree+0xbc>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	401a      	ands	r2, r3
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a44:	f7fe fc1e 	bl	8004284 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <vPortFree+0xc0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4413      	add	r3, r2
 8005a52:	4a09      	ldr	r2, [pc, #36]	@ (8005a78 <vPortFree+0xc0>)
 8005a54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f000 f874 	bl	8005b44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a5c:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <vPortFree+0xc4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	4a06      	ldr	r2, [pc, #24]	@ (8005a7c <vPortFree+0xc4>)
 8005a64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a66:	f7fe fc1b 	bl	80042a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a6a:	bf00      	nop
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20004ba4 	.word	0x20004ba4
 8005a78:	20004b94 	.word	0x20004b94
 8005a7c:	20004ba0 	.word	0x20004ba0

08005a80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a8c:	4b27      	ldr	r3, [pc, #156]	@ (8005b2c <prvHeapInit+0xac>)
 8005a8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3307      	adds	r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0307 	bic.w	r3, r3, #7
 8005aa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	4a1f      	ldr	r2, [pc, #124]	@ (8005b2c <prvHeapInit+0xac>)
 8005ab0:	4413      	add	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b30 <prvHeapInit+0xb0>)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005abe:	4b1c      	ldr	r3, [pc, #112]	@ (8005b30 <prvHeapInit+0xb0>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4413      	add	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005acc:	2208      	movs	r2, #8
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4a15      	ldr	r2, [pc, #84]	@ (8005b34 <prvHeapInit+0xb4>)
 8005ae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ae2:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <prvHeapInit+0xb4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aea:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <prvHeapInit+0xb4>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b00:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <prvHeapInit+0xb4>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b38 <prvHeapInit+0xb8>)
 8005b0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4a09      	ldr	r2, [pc, #36]	@ (8005b3c <prvHeapInit+0xbc>)
 8005b16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b18:	4b09      	ldr	r3, [pc, #36]	@ (8005b40 <prvHeapInit+0xc0>)
 8005b1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b1e:	601a      	str	r2, [r3, #0]
}
 8005b20:	bf00      	nop
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	20000f88 	.word	0x20000f88
 8005b30:	20004b88 	.word	0x20004b88
 8005b34:	20004b90 	.word	0x20004b90
 8005b38:	20004b98 	.word	0x20004b98
 8005b3c:	20004b94 	.word	0x20004b94
 8005b40:	20004ba4 	.word	0x20004ba4

08005b44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b4c:	4b28      	ldr	r3, [pc, #160]	@ (8005bf0 <prvInsertBlockIntoFreeList+0xac>)
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	e002      	b.n	8005b58 <prvInsertBlockIntoFreeList+0x14>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d8f7      	bhi.n	8005b52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d108      	bne.n	8005b86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	441a      	add	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d118      	bne.n	8005bcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4b15      	ldr	r3, [pc, #84]	@ (8005bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d00d      	beq.n	8005bc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	e008      	b.n	8005bd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <prvInsertBlockIntoFreeList+0xb0>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e003      	b.n	8005bd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d002      	beq.n	8005be2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20004b88 	.word	0x20004b88
 8005bf4:	20004b90 	.word	0x20004b90

08005bf8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005bfc:	4803      	ldr	r0, [pc, #12]	@ (8005c0c <_cbSendSystemDesc+0x14>)
 8005bfe:	f001 f89f 	bl	8006d40 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005c02:	4803      	ldr	r0, [pc, #12]	@ (8005c10 <_cbSendSystemDesc+0x18>)
 8005c04:	f001 f89c 	bl	8006d40 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005c08:	bf00      	nop
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	08007b18 	.word	0x08007b18
 8005c10:	08007b5c 	.word	0x08007b5c

08005c14 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005c18:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <SEGGER_SYSVIEW_Conf+0x20>)
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <SEGGER_SYSVIEW_Conf+0x20>)
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <SEGGER_SYSVIEW_Conf+0x24>)
 8005c22:	4a06      	ldr	r2, [pc, #24]	@ (8005c3c <SEGGER_SYSVIEW_Conf+0x28>)
 8005c24:	f000 fd12 	bl	800664c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005c28:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8005c2c:	f000 fd52 	bl	80066d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000004 	.word	0x20000004
 8005c38:	08005bf9 	.word	0x08005bf9
 8005c3c:	08007c0c 	.word	0x08007c0c

08005c40 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005c46:	2300      	movs	r3, #0
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	e048      	b.n	8005cde <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8005c4c:	4929      	ldr	r1, [pc, #164]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fedd 	bl	8004a1c <uxTaskGetStackHighWaterMark>
 8005c62:	4601      	mov	r1, r0
 8005c64:	4823      	ldr	r0, [pc, #140]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4403      	add	r3, r0
 8005c72:	3310      	adds	r3, #16
 8005c74:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005c76:	491f      	ldr	r1, [pc, #124]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	491b      	ldr	r1, [pc, #108]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	3304      	adds	r3, #4
 8005c96:	6819      	ldr	r1, [r3, #0]
 8005c98:	4c16      	ldr	r4, [pc, #88]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4423      	add	r3, r4
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	681c      	ldr	r4, [r3, #0]
 8005caa:	4d12      	ldr	r5, [pc, #72]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	442b      	add	r3, r5
 8005cb8:	330c      	adds	r3, #12
 8005cba:	681d      	ldr	r5, [r3, #0]
 8005cbc:	4e0d      	ldr	r6, [pc, #52]	@ (8005cf4 <_cbSendTaskList+0xb4>)
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4433      	add	r3, r6
 8005cca:	3310      	adds	r3, #16
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	462b      	mov	r3, r5
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	f000 f855 	bl	8005d82 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <_cbSendTaskList+0xb8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3b1      	bcc.n	8005c4c <_cbSendTaskList+0xc>
  }
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20004ba8 	.word	0x20004ba8
 8005cf8:	20004c48 	.word	0x20004c48

08005cfc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8005d04:	f7fe fb7a 	bl	80043fc <xTaskGetTickCountFromISR>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	469a      	mov	sl, r3
 8005d0e:	4693      	mov	fp, r2
 8005d10:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8005d14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	f04f 0a00 	mov.w	sl, #0
 8005d20:	f04f 0b00 	mov.w	fp, #0
 8005d24:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8005d28:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8005d2c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005d30:	4652      	mov	r2, sl
 8005d32:	465b      	mov	r3, fp
 8005d34:	1a14      	subs	r4, r2, r0
 8005d36:	eb63 0501 	sbc.w	r5, r3, r1
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	00ab      	lsls	r3, r5, #2
 8005d44:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005d48:	00a2      	lsls	r2, r4, #2
 8005d4a:	4614      	mov	r4, r2
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	eb14 0800 	adds.w	r8, r4, r0
 8005d52:	eb45 0901 	adc.w	r9, r5, r1
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d6a:	4690      	mov	r8, r2
 8005d6c:	4699      	mov	r9, r3
 8005d6e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005d72:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005d76:	4610      	mov	r0, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d82 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b08a      	sub	sp, #40	@ 0x28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	2218      	movs	r2, #24
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 f9b5 	bl	8007108 <memset>
  TaskInfo.TaskID     = TaskID;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005db2:	f107 0310 	add.w	r3, r7, #16
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 feca 	bl	8006b50 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005dbc:	bf00      	nop
 8005dbe:	3728      	adds	r7, #40	@ 0x28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005dca:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <_DoInit+0xa0>)
 8005dcc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005dce:	22a8      	movs	r2, #168	@ 0xa8
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	6838      	ldr	r0, [r7, #0]
 8005dd4:	f001 f998 	bl	8007108 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2203      	movs	r2, #3
 8005ddc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2203      	movs	r2, #3
 8005de2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	4a20      	ldr	r2, [pc, #128]	@ (8005e68 <_DoInit+0xa4>)
 8005de8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	4a1f      	ldr	r2, [pc, #124]	@ (8005e6c <_DoInit+0xa8>)
 8005dee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005df6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2200      	movs	r2, #0
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <_DoInit+0xa4>)
 8005e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	4a17      	ldr	r2, [pc, #92]	@ (8005e70 <_DoInit+0xac>)
 8005e14:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2210      	movs	r2, #16
 8005e1a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2200      	movs	r2, #0
 8005e26:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005e2e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]
 8005e36:	e00c      	b.n	8005e52 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f1c3 030f 	rsb	r3, r3, #15
 8005e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8005e74 <_DoInit+0xb0>)
 8005e40:	5cd1      	ldrb	r1, [r2, r3]
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4413      	add	r3, r2
 8005e48:	460a      	mov	r2, r1
 8005e4a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b0f      	cmp	r3, #15
 8005e56:	d9ef      	bls.n	8005e38 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005e58:	f3bf 8f5f 	dmb	sy
}
 8005e5c:	bf00      	nop
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	20004c4c 	.word	0x20004c4c
 8005e68:	08007b6c 	.word	0x08007b6c
 8005e6c:	20004cf4 	.word	0x20004cf4
 8005e70:	200050f4 	.word	0x200050f4
 8005e74:	08007c14 	.word	0x08007c14

08005e78 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08c      	sub	sp, #48	@ 0x30
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005e84:	4b3e      	ldr	r3, [pc, #248]	@ (8005f80 <SEGGER_RTT_ReadNoLock+0x108>)
 8005e86:	623b      	str	r3, [r7, #32]
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b53      	cmp	r3, #83	@ 0x53
 8005e90:	d001      	beq.n	8005e96 <SEGGER_RTT_ReadNoLock+0x1e>
 8005e92:	f7ff ff97 	bl	8005dc4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3360      	adds	r3, #96	@ 0x60
 8005ea2:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d92b      	bls.n	8005f1c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	bf28      	it	cs
 8005ed6:	4613      	movcs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	4413      	add	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	6939      	ldr	r1, [r7, #16]
 8005ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005eea:	f001 f997 	bl	800721c <memcpy>
    NumBytesRead += NumBytesRem;
 8005eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4413      	add	r3, r2
 8005efc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d101      	bne.n	8005f1c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	bf28      	it	cs
 8005f2c:	4613      	movcs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	4413      	add	r3, r2
 8005f3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	6939      	ldr	r1, [r7, #16]
 8005f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f46:	f001 f969 	bl	800721c <memcpy>
    NumBytesRead += NumBytesRem;
 8005f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	4413      	add	r3, r2
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f74:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3730      	adds	r7, #48	@ 0x30
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20004c4c 	.word	0x20004c4c

08005f84 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005f92:	4b3d      	ldr	r3, [pc, #244]	@ (8006088 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005f94:	61bb      	str	r3, [r7, #24]
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b53      	cmp	r3, #83	@ 0x53
 8005f9e:	d001      	beq.n	8005fa4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005fa0:	f7ff ff10 	bl	8005dc4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa8:	f04f 0120 	mov.w	r1, #32
 8005fac:	f381 8811 	msr	BASEPRI, r1
 8005fb0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fb2:	4b35      	ldr	r3, [pc, #212]	@ (8006088 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005fb4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005fba:	6939      	ldr	r1, [r7, #16]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	3304      	adds	r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d008      	beq.n	8005fe4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	dbeb      	blt.n	8005fba <SEGGER_RTT_AllocUpBuffer+0x36>
 8005fe2:	e000      	b.n	8005fe6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005fe4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	da3f      	bge.n	8006070 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005ff0:	6939      	ldr	r1, [r7, #16]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	440b      	add	r3, r1
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006004:	6939      	ldr	r1, [r7, #16]
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	4613      	mov	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	4413      	add	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	440b      	add	r3, r1
 8006014:	3304      	adds	r3, #4
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800601a:	6939      	ldr	r1, [r7, #16]
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	4613      	mov	r3, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4413      	add	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	440b      	add	r3, r1
 8006028:	3320      	adds	r3, #32
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800602e:	6939      	ldr	r1, [r7, #16]
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	440b      	add	r3, r1
 800603c:	3328      	adds	r3, #40	@ 0x28
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006042:	6939      	ldr	r1, [r7, #16]
 8006044:	69fa      	ldr	r2, [r7, #28]
 8006046:	4613      	mov	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4413      	add	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	440b      	add	r3, r1
 8006050:	3324      	adds	r3, #36	@ 0x24
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006056:	6939      	ldr	r1, [r7, #16]
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	4613      	mov	r3, r2
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	4413      	add	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	440b      	add	r3, r1
 8006064:	332c      	adds	r3, #44	@ 0x2c
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800606a:	f3bf 8f5f 	dmb	sy
 800606e:	e002      	b.n	8006076 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
 8006074:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800607c:	69fb      	ldr	r3, [r7, #28]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20004c4c 	.word	0x20004c4c

0800608c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	@ 0x28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800609a:	4b21      	ldr	r3, [pc, #132]	@ (8006120 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b53      	cmp	r3, #83	@ 0x53
 80060a6:	d001      	beq.n	80060ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80060a8:	f7ff fe8c 	bl	8005dc4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80060ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006120 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80060ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d82c      	bhi.n	8006110 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80060b6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ba:	f04f 0120 	mov.w	r1, #32
 80060be:	f381 8811 	msr	BASEPRI, r1
 80060c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4613      	mov	r3, r2
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	4413      	add	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	3360      	adds	r3, #96	@ 0x60
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	4413      	add	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00e      	beq.n	80060fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	68ba      	ldr	r2, [r7, #8]
 80060e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2200      	movs	r2, #0
 80060f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006100:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800610a:	2300      	movs	r3, #0
 800610c:	627b      	str	r3, [r7, #36]	@ 0x24
 800610e:	e002      	b.n	8006116 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006118:	4618      	mov	r0, r3
 800611a:	3728      	adds	r7, #40	@ 0x28
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20004c4c 	.word	0x20004c4c

08006124 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	60fa      	str	r2, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e022      	b.n	8006188 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	60fa      	str	r2, [r7, #12]
 800614c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b80      	cmp	r3, #128	@ 0x80
 8006152:	d90a      	bls.n	800616a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8006154:	2380      	movs	r3, #128	@ 0x80
 8006156:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8006158:	e007      	b.n	800616a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	1c53      	adds	r3, r2, #1
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1c59      	adds	r1, r3, #1
 8006164:	60f9      	str	r1, [r7, #12]
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	1e5a      	subs	r2, r3, #1
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <_EncodeStr+0x58>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1ee      	bne.n	800615a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	b2da      	uxtb	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8006188:	68fb      	ldr	r3, [r7, #12]
}
 800618a:	4618      	mov	r0, r3
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	3307      	adds	r3, #7
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061b6:	4b34      	ldr	r3, [pc, #208]	@ (8006288 <_HandleIncomingPacket+0xd8>)
 80061b8:	7e1b      	ldrb	r3, [r3, #24]
 80061ba:	4618      	mov	r0, r3
 80061bc:	1cfb      	adds	r3, r7, #3
 80061be:	2201      	movs	r2, #1
 80061c0:	4619      	mov	r1, r3
 80061c2:	f7ff fe59 	bl	8005e78 <SEGGER_RTT_ReadNoLock>
 80061c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d057      	beq.n	800627e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	2b80      	cmp	r3, #128	@ 0x80
 80061d2:	d031      	beq.n	8006238 <_HandleIncomingPacket+0x88>
 80061d4:	2b80      	cmp	r3, #128	@ 0x80
 80061d6:	dc40      	bgt.n	800625a <_HandleIncomingPacket+0xaa>
 80061d8:	2b07      	cmp	r3, #7
 80061da:	dc15      	bgt.n	8006208 <_HandleIncomingPacket+0x58>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd3c      	ble.n	800625a <_HandleIncomingPacket+0xaa>
 80061e0:	3b01      	subs	r3, #1
 80061e2:	2b06      	cmp	r3, #6
 80061e4:	d839      	bhi.n	800625a <_HandleIncomingPacket+0xaa>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <_HandleIncomingPacket+0x3c>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	0800620f 	.word	0x0800620f
 80061f0:	08006215 	.word	0x08006215
 80061f4:	0800621b 	.word	0x0800621b
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006227 	.word	0x08006227
 8006200:	0800622d 	.word	0x0800622d
 8006204:	08006233 	.word	0x08006233
 8006208:	2b7f      	cmp	r3, #127	@ 0x7f
 800620a:	d033      	beq.n	8006274 <_HandleIncomingPacket+0xc4>
 800620c:	e025      	b.n	800625a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800620e:	f000 fb25 	bl	800685c <SEGGER_SYSVIEW_Start>
      break;
 8006212:	e034      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006214:	f000 fbdc 	bl	80069d0 <SEGGER_SYSVIEW_Stop>
      break;
 8006218:	e031      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800621a:	f000 fdb5 	bl	8006d88 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800621e:	e02e      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006220:	f000 fd7a 	bl	8006d18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006224:	e02b      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006226:	f000 fbf9 	bl	8006a1c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800622a:	e028      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800622c:	f000 fe86 	bl	8006f3c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006230:	e025      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006232:	f000 fe65 	bl	8006f00 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006236:	e022      	b.n	800627e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <_HandleIncomingPacket+0xd8>)
 800623a:	7e1b      	ldrb	r3, [r3, #24]
 800623c:	4618      	mov	r0, r3
 800623e:	1cfb      	adds	r3, r7, #3
 8006240:	2201      	movs	r2, #1
 8006242:	4619      	mov	r1, r3
 8006244:	f7ff fe18 	bl	8005e78 <SEGGER_RTT_ReadNoLock>
 8006248:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	4618      	mov	r0, r3
 8006254:	f000 fdca 	bl	8006dec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006258:	e00e      	b.n	8006278 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800625a:	78fb      	ldrb	r3, [r7, #3]
 800625c:	b25b      	sxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	da0c      	bge.n	800627c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006262:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <_HandleIncomingPacket+0xd8>)
 8006264:	7e1b      	ldrb	r3, [r3, #24]
 8006266:	4618      	mov	r0, r3
 8006268:	1cfb      	adds	r3, r7, #3
 800626a:	2201      	movs	r2, #1
 800626c:	4619      	mov	r1, r3
 800626e:	f7ff fe03 	bl	8005e78 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006272:	e003      	b.n	800627c <_HandleIncomingPacket+0xcc>
      break;
 8006274:	bf00      	nop
 8006276:	e002      	b.n	800627e <_HandleIncomingPacket+0xce>
      break;
 8006278:	bf00      	nop
 800627a:	e000      	b.n	800627e <_HandleIncomingPacket+0xce>
      break;
 800627c:	bf00      	nop
    }
  }
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000710c 	.word	0x2000710c

0800628c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b08c      	sub	sp, #48	@ 0x30
 8006290:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006292:	2301      	movs	r3, #1
 8006294:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	3301      	adds	r3, #1
 800629a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a0:	4b31      	ldr	r3, [pc, #196]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062a6:	e00b      	b.n	80062c0 <_TrySendOverflowPacket+0x34>
 80062a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	1c59      	adds	r1, r3, #1
 80062b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	09db      	lsrs	r3, r3, #7
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c4:	d8f0      	bhi.n	80062a8 <_TrySendOverflowPacket+0x1c>
 80062c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062d6:	4b25      	ldr	r3, [pc, #148]	@ (800636c <_TrySendOverflowPacket+0xe0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80062dc:	4b22      	ldr	r3, [pc, #136]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	e00b      	b.n	8006308 <_TrySendOverflowPacket+0x7c>
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	1c59      	adds	r1, r3, #1
 80062f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80062fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062fe:	b2d2      	uxtb	r2, r2
 8006300:	701a      	strb	r2, [r3, #0]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	09db      	lsrs	r3, r3, #7
 8006306:	623b      	str	r3, [r7, #32]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2b7f      	cmp	r3, #127	@ 0x7f
 800630c:	d8f0      	bhi.n	80062f0 <_TrySendOverflowPacket+0x64>
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	627a      	str	r2, [r7, #36]	@ 0x24
 8006314:	6a3a      	ldr	r2, [r7, #32]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800631e:	4b12      	ldr	r3, [pc, #72]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	4618      	mov	r0, r3
 8006324:	1d3b      	adds	r3, r7, #4
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	461a      	mov	r2, r3
 800632c:	1d3b      	adds	r3, r7, #4
 800632e:	4619      	mov	r1, r3
 8006330:	f7f9 ff6e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006334:	4603      	mov	r3, r0
 8006336:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800633e:	4a0a      	ldr	r2, [pc, #40]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006344:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	e004      	b.n	800635c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006352:	4b05      	ldr	r3, [pc, #20]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	3301      	adds	r3, #1
 8006358:	4a03      	ldr	r2, [pc, #12]	@ (8006368 <_TrySendOverflowPacket+0xdc>)
 800635a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800635c:	693b      	ldr	r3, [r7, #16]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3730      	adds	r7, #48	@ 0x30
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	2000710c 	.word	0x2000710c
 800636c:	e0001004 	.word	0xe0001004

08006370 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	@ 0x28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800637c:	4b98      	ldr	r3, [pc, #608]	@ (80065e0 <_SendPacket+0x270>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d010      	beq.n	80063a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006384:	4b96      	ldr	r3, [pc, #600]	@ (80065e0 <_SendPacket+0x270>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 812d 	beq.w	80065e8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800638e:	4b94      	ldr	r3, [pc, #592]	@ (80065e0 <_SendPacket+0x270>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d109      	bne.n	80063aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006396:	f7ff ff79 	bl	800628c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800639a:	4b91      	ldr	r3, [pc, #580]	@ (80065e0 <_SendPacket+0x270>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	f040 8124 	bne.w	80065ec <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80063a4:	e001      	b.n	80063aa <_SendPacket+0x3a>
    goto Send;
 80063a6:	bf00      	nop
 80063a8:	e000      	b.n	80063ac <_SendPacket+0x3c>
Send:
 80063aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b1f      	cmp	r3, #31
 80063b0:	d809      	bhi.n	80063c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80063b2:	4b8b      	ldr	r3, [pc, #556]	@ (80065e0 <_SendPacket+0x270>)
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	fa22 f303 	lsr.w	r3, r2, r3
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f040 8115 	bne.w	80065f0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b17      	cmp	r3, #23
 80063ca:	d807      	bhi.n	80063dc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	e0c4      	b.n	8006566 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e8:	d912      	bls.n	8006410 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	09da      	lsrs	r2, r3, #7
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	3a01      	subs	r2, #1
 8006402:	60fa      	str	r2, [r7, #12]
 8006404:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e006      	b.n	800641e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3b01      	subs	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b7e      	cmp	r3, #126	@ 0x7e
 8006422:	d807      	bhi.n	8006434 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3b01      	subs	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	b2da      	uxtb	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e098      	b.n	8006566 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800643a:	d212      	bcs.n	8006462 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	09da      	lsrs	r2, r3, #7
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3b01      	subs	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	3a01      	subs	r2, #1
 8006454:	60fa      	str	r2, [r7, #12]
 8006456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e081      	b.n	8006566 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006468:	d21d      	bcs.n	80064a6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0b9a      	lsrs	r2, r3, #14
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3b01      	subs	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	09db      	lsrs	r3, r3, #7
 800647e:	b2db      	uxtb	r3, r3
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	3a01      	subs	r2, #1
 8006484:	60fa      	str	r2, [r7, #12]
 8006486:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	3a01      	subs	r2, #1
 8006498:	60fa      	str	r2, [r7, #12]
 800649a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e05f      	b.n	8006566 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ac:	d228      	bcs.n	8006500 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	0d5a      	lsrs	r2, r3, #21
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0b9b      	lsrs	r3, r3, #14
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	3a01      	subs	r2, #1
 80064c8:	60fa      	str	r2, [r7, #12]
 80064ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	3a01      	subs	r2, #1
 80064de:	60fa      	str	r2, [r7, #12]
 80064e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	3a01      	subs	r2, #1
 80064f2:	60fa      	str	r2, [r7, #12]
 80064f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e032      	b.n	8006566 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	0f1a      	lsrs	r2, r3, #28
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3b01      	subs	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0d5b      	lsrs	r3, r3, #21
 8006514:	b2db      	uxtb	r3, r3
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	3a01      	subs	r2, #1
 800651a:	60fa      	str	r2, [r7, #12]
 800651c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006520:	b2da      	uxtb	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0b9b      	lsrs	r3, r3, #14
 800652a:	b2db      	uxtb	r3, r3
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	3a01      	subs	r2, #1
 8006530:	60fa      	str	r2, [r7, #12]
 8006532:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006536:	b2da      	uxtb	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	09db      	lsrs	r3, r3, #7
 8006540:	b2db      	uxtb	r3, r3
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	3a01      	subs	r2, #1
 8006546:	60fa      	str	r2, [r7, #12]
 8006548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800654c:	b2da      	uxtb	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	3a01      	subs	r2, #1
 800655a:	60fa      	str	r2, [r7, #12]
 800655c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006560:	b2da      	uxtb	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006566:	4b1f      	ldr	r3, [pc, #124]	@ (80065e4 <_SendPacket+0x274>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800656c:	4b1c      	ldr	r3, [pc, #112]	@ (80065e0 <_SendPacket+0x270>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	e00b      	b.n	8006598 <_SendPacket+0x228>
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	6279      	str	r1, [r7, #36]	@ 0x24
 800658a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	09db      	lsrs	r3, r3, #7
 8006596:	623b      	str	r3, [r7, #32]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	2b7f      	cmp	r3, #127	@ 0x7f
 800659c:	d8f0      	bhi.n	8006580 <_SendPacket+0x210>
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80065ae:	4b0c      	ldr	r3, [pc, #48]	@ (80065e0 <_SendPacket+0x270>)
 80065b0:	785b      	ldrb	r3, [r3, #1]
 80065b2:	4618      	mov	r0, r3
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	461a      	mov	r2, r3
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	f7f9 fe27 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80065c2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80065ca:	4a05      	ldr	r2, [pc, #20]	@ (80065e0 <_SendPacket+0x270>)
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	60d3      	str	r3, [r2, #12]
 80065d0:	e00f      	b.n	80065f2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80065d2:	4b03      	ldr	r3, [pc, #12]	@ (80065e0 <_SendPacket+0x270>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	3301      	adds	r3, #1
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4b01      	ldr	r3, [pc, #4]	@ (80065e0 <_SendPacket+0x270>)
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e008      	b.n	80065f2 <_SendPacket+0x282>
 80065e0:	2000710c 	.word	0x2000710c
 80065e4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80065e8:	bf00      	nop
 80065ea:	e002      	b.n	80065f2 <_SendPacket+0x282>
      goto SendDone;
 80065ec:	bf00      	nop
 80065ee:	e000      	b.n	80065f2 <_SendPacket+0x282>
      goto SendDone;
 80065f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80065f2:	4b14      	ldr	r3, [pc, #80]	@ (8006644 <_SendPacket+0x2d4>)
 80065f4:	7e1b      	ldrb	r3, [r3, #24]
 80065f6:	4619      	mov	r1, r3
 80065f8:	4a13      	ldr	r2, [pc, #76]	@ (8006648 <_SendPacket+0x2d8>)
 80065fa:	460b      	mov	r3, r1
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	440b      	add	r3, r1
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	4413      	add	r3, r2
 8006604:	336c      	adds	r3, #108	@ 0x6c
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	4b0e      	ldr	r3, [pc, #56]	@ (8006644 <_SendPacket+0x2d4>)
 800660a:	7e1b      	ldrb	r3, [r3, #24]
 800660c:	4618      	mov	r0, r3
 800660e:	490e      	ldr	r1, [pc, #56]	@ (8006648 <_SendPacket+0x2d8>)
 8006610:	4603      	mov	r3, r0
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	4403      	add	r3, r0
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	440b      	add	r3, r1
 800661a:	3370      	adds	r3, #112	@ 0x70
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d00b      	beq.n	800663a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006622:	4b08      	ldr	r3, [pc, #32]	@ (8006644 <_SendPacket+0x2d4>)
 8006624:	789b      	ldrb	r3, [r3, #2]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d107      	bne.n	800663a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800662a:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <_SendPacket+0x2d4>)
 800662c:	2201      	movs	r2, #1
 800662e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006630:	f7ff fdbe 	bl	80061b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006634:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <_SendPacket+0x2d4>)
 8006636:	2200      	movs	r2, #0
 8006638:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800663a:	bf00      	nop
 800663c:	3728      	adds	r7, #40	@ 0x28
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	2000710c 	.word	0x2000710c
 8006648:	20004c4c 	.word	0x20004c4c

0800664c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800665a:	2300      	movs	r3, #0
 800665c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006660:	4917      	ldr	r1, [pc, #92]	@ (80066c0 <SEGGER_SYSVIEW_Init+0x74>)
 8006662:	4818      	ldr	r0, [pc, #96]	@ (80066c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006664:	f7ff fc8e 	bl	8005f84 <SEGGER_RTT_AllocUpBuffer>
 8006668:	4603      	mov	r3, r0
 800666a:	b2da      	uxtb	r2, r3
 800666c:	4b16      	ldr	r3, [pc, #88]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800666e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006670:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006672:	785a      	ldrb	r2, [r3, #1]
 8006674:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006676:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006678:	4b13      	ldr	r3, [pc, #76]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800667a:	7e1b      	ldrb	r3, [r3, #24]
 800667c:	4618      	mov	r0, r3
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	2308      	movs	r3, #8
 8006684:	4a11      	ldr	r2, [pc, #68]	@ (80066cc <SEGGER_SYSVIEW_Init+0x80>)
 8006686:	490f      	ldr	r1, [pc, #60]	@ (80066c4 <SEGGER_SYSVIEW_Init+0x78>)
 8006688:	f7ff fd00 	bl	800608c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800668c:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006692:	4b0f      	ldr	r3, [pc, #60]	@ (80066d0 <SEGGER_SYSVIEW_Init+0x84>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0c      	ldr	r2, [pc, #48]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8006698:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800669a:	4a0b      	ldr	r2, [pc, #44]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80066a0:	4a09      	ldr	r2, [pc, #36]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80066a6:	4a08      	ldr	r2, [pc, #32]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80066ac:	4a06      	ldr	r2, [pc, #24]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80066b8:	bf00      	nop
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20005104 	.word	0x20005104
 80066c4:	08007b80 	.word	0x08007b80
 80066c8:	2000710c 	.word	0x2000710c
 80066cc:	20007104 	.word	0x20007104
 80066d0:	e0001004 	.word	0xe0001004

080066d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80066dc:	4a04      	ldr	r2, [pc, #16]	@ (80066f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6113      	str	r3, [r2, #16]
}
 80066e2:	bf00      	nop
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	2000710c 	.word	0x2000710c

080066f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	f04f 0120 	mov.w	r1, #32
 8006704:	f381 8811 	msr	BASEPRI, r1
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4808      	ldr	r0, [pc, #32]	@ (800672c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800670c:	f7ff fd43 	bl	8006196 <_PreparePacket>
 8006710:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	68b8      	ldr	r0, [r7, #8]
 8006718:	f7ff fe2a 	bl	8006370 <_SendPacket>
  RECORD_END();
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f383 8811 	msr	BASEPRI, r3
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	2000713c 	.word	0x2000713c

08006730 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800673a:	f3ef 8311 	mrs	r3, BASEPRI
 800673e:	f04f 0120 	mov.w	r1, #32
 8006742:	f381 8811 	msr	BASEPRI, r1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	4816      	ldr	r0, [pc, #88]	@ (80067a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800674a:	f7ff fd24 	bl	8006196 <_PreparePacket>
 800674e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e00b      	b.n	8006776 <SEGGER_SYSVIEW_RecordU32+0x46>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	b2da      	uxtb	r2, r3
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	1c59      	adds	r1, r3, #1
 8006766:	61f9      	str	r1, [r7, #28]
 8006768:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	09db      	lsrs	r3, r3, #7
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	2b7f      	cmp	r3, #127	@ 0x7f
 800677a:	d8f0      	bhi.n	800675e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	61fa      	str	r2, [r7, #28]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	68f9      	ldr	r1, [r7, #12]
 8006790:	6938      	ldr	r0, [r7, #16]
 8006792:	f7ff fded 	bl	8006370 <_SendPacket>
  RECORD_END();
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f383 8811 	msr	BASEPRI, r3
}
 800679c:	bf00      	nop
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	2000713c 	.word	0x2000713c

080067a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	@ 0x30
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067b4:	f3ef 8311 	mrs	r3, BASEPRI
 80067b8:	f04f 0120 	mov.w	r1, #32
 80067bc:	f381 8811 	msr	BASEPRI, r1
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	4825      	ldr	r0, [pc, #148]	@ (8006858 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80067c4:	f7ff fce7 	bl	8006196 <_PreparePacket>
 80067c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d6:	e00b      	b.n	80067f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	1c59      	adds	r1, r3, #1
 80067e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80067e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	09db      	lsrs	r3, r3, #7
 80067ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067f4:	d8f0      	bhi.n	80067d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80067f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006804:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	623b      	str	r3, [r7, #32]
 800680e:	e00b      	b.n	8006828 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	6279      	str	r1, [r7, #36]	@ 0x24
 800681a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	09db      	lsrs	r3, r3, #7
 8006826:	623b      	str	r3, [r7, #32]
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	2b7f      	cmp	r3, #127	@ 0x7f
 800682c:	d8f0      	bhi.n	8006810 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	627a      	str	r2, [r7, #36]	@ 0x24
 8006834:	6a3a      	ldr	r2, [r7, #32]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	6979      	ldr	r1, [r7, #20]
 8006842:	69b8      	ldr	r0, [r7, #24]
 8006844:	f7ff fd94 	bl	8006370 <_SendPacket>
  RECORD_END();
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
 8006850:	3730      	adds	r7, #48	@ 0x30
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	2000713c 	.word	0x2000713c

0800685c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b08c      	sub	sp, #48	@ 0x30
 8006860:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006862:	4b58      	ldr	r3, [pc, #352]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006868:	f3ef 8311 	mrs	r3, BASEPRI
 800686c:	f04f 0120 	mov.w	r1, #32
 8006870:	f381 8811 	msr	BASEPRI, r1
 8006874:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006876:	4b53      	ldr	r3, [pc, #332]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	220a      	movs	r2, #10
 800687c:	4952      	ldr	r1, [pc, #328]	@ (80069c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800687e:	4618      	mov	r0, r3
 8006880:	f7f9 fcc6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800688a:	200a      	movs	r0, #10
 800688c:	f7ff ff32 	bl	80066f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006890:	f3ef 8311 	mrs	r3, BASEPRI
 8006894:	f04f 0120 	mov.w	r1, #32
 8006898:	f381 8811 	msr	BASEPRI, r1
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	484b      	ldr	r0, [pc, #300]	@ (80069cc <SEGGER_SYSVIEW_Start+0x170>)
 80068a0:	f7ff fc79 	bl	8006196 <_PreparePacket>
 80068a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ae:	4b45      	ldr	r3, [pc, #276]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068b4:	e00b      	b.n	80068ce <SEGGER_SYSVIEW_Start+0x72>
 80068b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068bc:	1c59      	adds	r1, r3, #1
 80068be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	09db      	lsrs	r3, r3, #7
 80068cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80068d2:	d8f0      	bhi.n	80068b6 <SEGGER_SYSVIEW_Start+0x5a>
 80068d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068dc:	b2d2      	uxtb	r2, r2
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e8:	4b36      	ldr	r3, [pc, #216]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	e00b      	b.n	8006908 <SEGGER_SYSVIEW_Start+0xac>
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80068fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	09db      	lsrs	r3, r3, #7
 8006906:	623b      	str	r3, [r7, #32]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	2b7f      	cmp	r3, #127	@ 0x7f
 800690c:	d8f0      	bhi.n	80068f0 <SEGGER_SYSVIEW_Start+0x94>
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	627a      	str	r2, [r7, #36]	@ 0x24
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	61fb      	str	r3, [r7, #28]
 8006922:	4b28      	ldr	r3, [pc, #160]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e00b      	b.n	8006942 <SEGGER_SYSVIEW_Start+0xe6>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	1c59      	adds	r1, r3, #1
 8006932:	61f9      	str	r1, [r7, #28]
 8006934:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	09db      	lsrs	r3, r3, #7
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b7f      	cmp	r3, #127	@ 0x7f
 8006946:	d8f0      	bhi.n	800692a <SEGGER_SYSVIEW_Start+0xce>
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	61fa      	str	r2, [r7, #28]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	e00b      	b.n	800697a <SEGGER_SYSVIEW_Start+0x11e>
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	b2da      	uxtb	r2, r3
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	6179      	str	r1, [r7, #20]
 800696c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	09db      	lsrs	r3, r3, #7
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b7f      	cmp	r3, #127	@ 0x7f
 800697e:	d8f0      	bhi.n	8006962 <SEGGER_SYSVIEW_Start+0x106>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	617a      	str	r2, [r7, #20]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006990:	2218      	movs	r2, #24
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fceb 	bl	8006370 <_SendPacket>
      RECORD_END();
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069a0:	4b08      	ldr	r3, [pc, #32]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80069a8:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <SEGGER_SYSVIEW_Start+0x168>)
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80069ae:	f000 f9eb 	bl	8006d88 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80069b2:	f000 f9b1 	bl	8006d18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80069b6:	f000 fac1 	bl	8006f3c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80069ba:	bf00      	nop
 80069bc:	3730      	adds	r7, #48	@ 0x30
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	2000710c 	.word	0x2000710c
 80069c8:	08007c28 	.word	0x08007c28
 80069cc:	2000713c 	.word	0x2000713c

080069d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069d6:	f3ef 8311 	mrs	r3, BASEPRI
 80069da:	f04f 0120 	mov.w	r1, #32
 80069de:	f381 8811 	msr	BASEPRI, r1
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	480b      	ldr	r0, [pc, #44]	@ (8006a14 <SEGGER_SYSVIEW_Stop+0x44>)
 80069e6:	f7ff fbd6 	bl	8006196 <_PreparePacket>
 80069ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80069ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006a18 <SEGGER_SYSVIEW_Stop+0x48>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80069f4:	220b      	movs	r2, #11
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6838      	ldr	r0, [r7, #0]
 80069fa:	f7ff fcb9 	bl	8006370 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80069fe:	4b06      	ldr	r3, [pc, #24]	@ (8006a18 <SEGGER_SYSVIEW_Stop+0x48>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f383 8811 	msr	BASEPRI, r3
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2000713c 	.word	0x2000713c
 8006a18:	2000710c 	.word	0x2000710c

08006a1c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08c      	sub	sp, #48	@ 0x30
 8006a20:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a22:	f3ef 8311 	mrs	r3, BASEPRI
 8006a26:	f04f 0120 	mov.w	r1, #32
 8006a2a:	f381 8811 	msr	BASEPRI, r1
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	4845      	ldr	r0, [pc, #276]	@ (8006b48 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006a32:	f7ff fbb0 	bl	8006196 <_PreparePacket>
 8006a36:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a40:	4b42      	ldr	r3, [pc, #264]	@ (8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a46:	e00b      	b.n	8006a60 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	1c59      	adds	r1, r3, #1
 8006a50:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	09db      	lsrs	r3, r3, #7
 8006a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a64:	d8f0      	bhi.n	8006a48 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a7a:	4b34      	ldr	r3, [pc, #208]	@ (8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006a8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	623b      	str	r3, [r7, #32]
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006aa6:	6a3a      	ldr	r2, [r7, #32]
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	4b25      	ldr	r3, [pc, #148]	@ (8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	61f9      	str	r1, [r7, #28]
 8006ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	61fa      	str	r2, [r7, #28]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	e00b      	b.n	8006b0c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	6179      	str	r1, [r7, #20]
 8006afe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b10:	d8f0      	bhi.n	8006af4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	617a      	str	r2, [r7, #20]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b22:	2218      	movs	r2, #24
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f7ff fc22 	bl	8006370 <_SendPacket>
  RECORD_END();
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b32:	4b06      	ldr	r3, [pc, #24]	@ (8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006b3a:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	4798      	blx	r3
  }
}
 8006b40:	bf00      	nop
 8006b42:	3730      	adds	r7, #48	@ 0x30
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	2000713c 	.word	0x2000713c
 8006b4c:	2000710c 	.word	0x2000710c

08006b50 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b092      	sub	sp, #72	@ 0x48
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006b58:	f3ef 8311 	mrs	r3, BASEPRI
 8006b5c:	f04f 0120 	mov.w	r1, #32
 8006b60:	f381 8811 	msr	BASEPRI, r1
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	486a      	ldr	r0, [pc, #424]	@ (8006d10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006b68:	f7ff fb15 	bl	8006196 <_PreparePacket>
 8006b6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b66      	ldr	r3, [pc, #408]	@ (8006d14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b82:	e00b      	b.n	8006b9c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	6479      	str	r1, [r7, #68]	@ 0x44
 8006b8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b98:	09db      	lsrs	r3, r3, #7
 8006b9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ba0:	d8f0      	bhi.n	8006b84 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ba8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bbc:	e00b      	b.n	8006bd6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc4:	1c59      	adds	r1, r3, #1
 8006bc6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006bc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	09db      	lsrs	r3, r3, #7
 8006bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bda:	d8f0      	bhi.n	8006bbe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff fa95 	bl	8006124 <_EncodeStr>
 8006bfa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006bfc:	2209      	movs	r2, #9
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	6938      	ldr	r0, [r7, #16]
 8006c02:	f7ff fbb5 	bl	8006370 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4b40      	ldr	r3, [pc, #256]	@ (8006d14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c1a:	e00b      	b.n	8006c34 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	1c59      	adds	r1, r3, #1
 8006c24:	6379      	str	r1, [r7, #52]	@ 0x34
 8006c26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c2a:	b2d2      	uxtb	r2, r2
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	09db      	lsrs	r3, r3, #7
 8006c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c38:	d8f0      	bhi.n	8006c1c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c54:	e00b      	b.n	8006c6e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	1c59      	adds	r1, r3, #1
 8006c5e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006c60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	701a      	strb	r2, [r3, #0]
 8006c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6a:	09db      	lsrs	r3, r3, #7
 8006c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c70:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c72:	d8f0      	bhi.n	8006c56 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	623b      	str	r3, [r7, #32]
 8006c8e:	e00b      	b.n	8006ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c96:	1c59      	adds	r1, r3, #1
 8006c98:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	09db      	lsrs	r3, r3, #7
 8006ca6:	623b      	str	r3, [r7, #32]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cac:	d8f0      	bhi.n	8006c90 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cb4:	6a3a      	ldr	r2, [r7, #32]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	e00b      	b.n	8006ce2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	1c59      	adds	r1, r3, #1
 8006cd2:	61f9      	str	r1, [r7, #28]
 8006cd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	09db      	lsrs	r3, r3, #7
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce6:	d8f0      	bhi.n	8006cca <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	61fa      	str	r2, [r7, #28]
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006cf8:	2215      	movs	r2, #21
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	6938      	ldr	r0, [r7, #16]
 8006cfe:	f7ff fb37 	bl	8006370 <_SendPacket>
  RECORD_END();
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f383 8811 	msr	BASEPRI, r3
}
 8006d08:	bf00      	nop
 8006d0a:	3748      	adds	r7, #72	@ 0x48
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	2000713c 	.word	0x2000713c
 8006d14:	2000710c 	.word	0x2000710c

08006d18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d1c:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006d2e:	4b03      	ldr	r3, [pc, #12]	@ (8006d3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	4798      	blx	r3
  }
}
 8006d36:	bf00      	nop
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	2000710c 	.word	0x2000710c

08006d40 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d48:	f3ef 8311 	mrs	r3, BASEPRI
 8006d4c:	f04f 0120 	mov.w	r1, #32
 8006d50:	f381 8811 	msr	BASEPRI, r1
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	480b      	ldr	r0, [pc, #44]	@ (8006d84 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006d58:	f7ff fa1d 	bl	8006196 <_PreparePacket>
 8006d5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d5e:	2280      	movs	r2, #128	@ 0x80
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7ff f9de 	bl	8006124 <_EncodeStr>
 8006d68:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006d6a:	220e      	movs	r2, #14
 8006d6c:	68f9      	ldr	r1, [r7, #12]
 8006d6e:	6938      	ldr	r0, [r7, #16]
 8006d70:	f7ff fafe 	bl	8006370 <_SendPacket>
  RECORD_END();
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f383 8811 	msr	BASEPRI, r3
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	2000713c 	.word	0x2000713c

08006d88 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d88:	b590      	push	{r4, r7, lr}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d8e:	4b15      	ldr	r3, [pc, #84]	@ (8006de4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01a      	beq.n	8006dcc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d96:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d015      	beq.n	8006dcc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006da0:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4798      	blx	r3
 8006da8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006dac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	000a      	movs	r2, r1
 8006dbc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	200d      	movs	r0, #13
 8006dc6:	f7ff fcef 	bl	80067a8 <SEGGER_SYSVIEW_RecordU32x2>
 8006dca:	e006      	b.n	8006dda <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006dcc:	4b06      	ldr	r3, [pc, #24]	@ (8006de8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	200c      	movs	r0, #12
 8006dd4:	f7ff fcac 	bl	8006730 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd90      	pop	{r4, r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2000710c 	.word	0x2000710c
 8006de8:	e0001004 	.word	0xe0001004

08006dec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	@ 0x30
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006df6:	4b40      	ldr	r3, [pc, #256]	@ (8006ef8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d077      	beq.n	8006eee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e04:	2300      	movs	r3, #0
 8006e06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e08:	e008      	b.n	8006e1c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e18:	3301      	adds	r3, #1
 8006e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d3f2      	bcc.n	8006e0a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006e24:	e000      	b.n	8006e28 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006e26:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d055      	beq.n	8006eda <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e2e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e32:	f04f 0120 	mov.w	r1, #32
 8006e36:	f381 8811 	msr	BASEPRI, r1
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	482f      	ldr	r0, [pc, #188]	@ (8006efc <SEGGER_SYSVIEW_SendModule+0x110>)
 8006e3e:	f7ff f9aa 	bl	8006196 <_PreparePacket>
 8006e42:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e4c:	79fb      	ldrb	r3, [r7, #7]
 8006e4e:	623b      	str	r3, [r7, #32]
 8006e50:	e00b      	b.n	8006e6a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	1c59      	adds	r1, r3, #1
 8006e5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	09db      	lsrs	r3, r3, #7
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e6e:	d8f0      	bhi.n	8006e52 <SEGGER_SYSVIEW_SendModule+0x66>
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e76:	6a3a      	ldr	r2, [r7, #32]
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	61fb      	str	r3, [r7, #28]
 8006e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	e00b      	b.n	8006ea4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	1c59      	adds	r1, r3, #1
 8006e94:	61f9      	str	r1, [r7, #28]
 8006e96:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	09db      	lsrs	r3, r3, #7
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ea8:	d8f0      	bhi.n	8006e8c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	61fa      	str	r2, [r7, #28]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	b2d2      	uxtb	r2, r2
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2280      	movs	r2, #128	@ 0x80
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff f92e 	bl	8006124 <_EncodeStr>
 8006ec8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006eca:	2216      	movs	r2, #22
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	6938      	ldr	r0, [r7, #16]
 8006ed0:	f7ff fa4e 	bl	8006370 <_SendPacket>
      RECORD_END();
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d006      	beq.n	8006eee <SEGGER_SYSVIEW_SendModule+0x102>
 8006ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	4798      	blx	r3
    }
  }
}
 8006eee:	bf00      	nop
 8006ef0:	3730      	adds	r7, #48	@ 0x30
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20007134 	.word	0x20007134
 8006efc:	2000713c 	.word	0x2000713c

08006f00 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f06:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00f      	beq.n	8006f2e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f38 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f2      	bne.n	8006f14 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20007134 	.word	0x20007134

08006f3c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006f42:	f3ef 8311 	mrs	r3, BASEPRI
 8006f46:	f04f 0120 	mov.w	r1, #32
 8006f4a:	f381 8811 	msr	BASEPRI, r1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	4817      	ldr	r0, [pc, #92]	@ (8006fb0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006f52:	f7ff f920 	bl	8006196 <_PreparePacket>
 8006f56:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	4b14      	ldr	r3, [pc, #80]	@ (8006fb4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	e00b      	b.n	8006f80 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	6179      	str	r1, [r7, #20]
 8006f72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	09db      	lsrs	r3, r3, #7
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f84:	d8f0      	bhi.n	8006f68 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	617a      	str	r2, [r7, #20]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f96:	221b      	movs	r2, #27
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	f7ff f9e8 	bl	8006370 <_SendPacket>
  RECORD_END();
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f383 8811 	msr	BASEPRI, r3
}
 8006fa6:	bf00      	nop
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	2000713c 	.word	0x2000713c
 8006fb4:	20007138 	.word	0x20007138

08006fb8 <atoi>:
 8006fb8:	220a      	movs	r2, #10
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f000 b87a 	b.w	80070b4 <strtol>

08006fc0 <_strtol_l.constprop.0>:
 8006fc0:	2b24      	cmp	r3, #36	@ 0x24
 8006fc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc6:	4686      	mov	lr, r0
 8006fc8:	4690      	mov	r8, r2
 8006fca:	d801      	bhi.n	8006fd0 <_strtol_l.constprop.0+0x10>
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d106      	bne.n	8006fde <_strtol_l.constprop.0+0x1e>
 8006fd0:	f000 f8f8 	bl	80071c4 <__errno>
 8006fd4:	2316      	movs	r3, #22
 8006fd6:	6003      	str	r3, [r0, #0]
 8006fd8:	2000      	movs	r0, #0
 8006fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fde:	4834      	ldr	r0, [pc, #208]	@ (80070b0 <_strtol_l.constprop.0+0xf0>)
 8006fe0:	460d      	mov	r5, r1
 8006fe2:	462a      	mov	r2, r5
 8006fe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fe8:	5d06      	ldrb	r6, [r0, r4]
 8006fea:	f016 0608 	ands.w	r6, r6, #8
 8006fee:	d1f8      	bne.n	8006fe2 <_strtol_l.constprop.0+0x22>
 8006ff0:	2c2d      	cmp	r4, #45	@ 0x2d
 8006ff2:	d12d      	bne.n	8007050 <_strtol_l.constprop.0+0x90>
 8006ff4:	782c      	ldrb	r4, [r5, #0]
 8006ff6:	2601      	movs	r6, #1
 8006ff8:	1c95      	adds	r5, r2, #2
 8006ffa:	f033 0210 	bics.w	r2, r3, #16
 8006ffe:	d109      	bne.n	8007014 <_strtol_l.constprop.0+0x54>
 8007000:	2c30      	cmp	r4, #48	@ 0x30
 8007002:	d12a      	bne.n	800705a <_strtol_l.constprop.0+0x9a>
 8007004:	782a      	ldrb	r2, [r5, #0]
 8007006:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800700a:	2a58      	cmp	r2, #88	@ 0x58
 800700c:	d125      	bne.n	800705a <_strtol_l.constprop.0+0x9a>
 800700e:	786c      	ldrb	r4, [r5, #1]
 8007010:	2310      	movs	r3, #16
 8007012:	3502      	adds	r5, #2
 8007014:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007018:	f10c 3cff 	add.w	ip, ip, #4294967295
 800701c:	2200      	movs	r2, #0
 800701e:	fbbc f9f3 	udiv	r9, ip, r3
 8007022:	4610      	mov	r0, r2
 8007024:	fb03 ca19 	mls	sl, r3, r9, ip
 8007028:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800702c:	2f09      	cmp	r7, #9
 800702e:	d81b      	bhi.n	8007068 <_strtol_l.constprop.0+0xa8>
 8007030:	463c      	mov	r4, r7
 8007032:	42a3      	cmp	r3, r4
 8007034:	dd27      	ble.n	8007086 <_strtol_l.constprop.0+0xc6>
 8007036:	1c57      	adds	r7, r2, #1
 8007038:	d007      	beq.n	800704a <_strtol_l.constprop.0+0x8a>
 800703a:	4581      	cmp	r9, r0
 800703c:	d320      	bcc.n	8007080 <_strtol_l.constprop.0+0xc0>
 800703e:	d101      	bne.n	8007044 <_strtol_l.constprop.0+0x84>
 8007040:	45a2      	cmp	sl, r4
 8007042:	db1d      	blt.n	8007080 <_strtol_l.constprop.0+0xc0>
 8007044:	fb00 4003 	mla	r0, r0, r3, r4
 8007048:	2201      	movs	r2, #1
 800704a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800704e:	e7eb      	b.n	8007028 <_strtol_l.constprop.0+0x68>
 8007050:	2c2b      	cmp	r4, #43	@ 0x2b
 8007052:	bf04      	itt	eq
 8007054:	782c      	ldrbeq	r4, [r5, #0]
 8007056:	1c95      	addeq	r5, r2, #2
 8007058:	e7cf      	b.n	8006ffa <_strtol_l.constprop.0+0x3a>
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1da      	bne.n	8007014 <_strtol_l.constprop.0+0x54>
 800705e:	2c30      	cmp	r4, #48	@ 0x30
 8007060:	bf0c      	ite	eq
 8007062:	2308      	moveq	r3, #8
 8007064:	230a      	movne	r3, #10
 8007066:	e7d5      	b.n	8007014 <_strtol_l.constprop.0+0x54>
 8007068:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800706c:	2f19      	cmp	r7, #25
 800706e:	d801      	bhi.n	8007074 <_strtol_l.constprop.0+0xb4>
 8007070:	3c37      	subs	r4, #55	@ 0x37
 8007072:	e7de      	b.n	8007032 <_strtol_l.constprop.0+0x72>
 8007074:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007078:	2f19      	cmp	r7, #25
 800707a:	d804      	bhi.n	8007086 <_strtol_l.constprop.0+0xc6>
 800707c:	3c57      	subs	r4, #87	@ 0x57
 800707e:	e7d8      	b.n	8007032 <_strtol_l.constprop.0+0x72>
 8007080:	f04f 32ff 	mov.w	r2, #4294967295
 8007084:	e7e1      	b.n	800704a <_strtol_l.constprop.0+0x8a>
 8007086:	1c53      	adds	r3, r2, #1
 8007088:	d108      	bne.n	800709c <_strtol_l.constprop.0+0xdc>
 800708a:	2322      	movs	r3, #34	@ 0x22
 800708c:	f8ce 3000 	str.w	r3, [lr]
 8007090:	4660      	mov	r0, ip
 8007092:	f1b8 0f00 	cmp.w	r8, #0
 8007096:	d0a0      	beq.n	8006fda <_strtol_l.constprop.0+0x1a>
 8007098:	1e69      	subs	r1, r5, #1
 800709a:	e006      	b.n	80070aa <_strtol_l.constprop.0+0xea>
 800709c:	b106      	cbz	r6, 80070a0 <_strtol_l.constprop.0+0xe0>
 800709e:	4240      	negs	r0, r0
 80070a0:	f1b8 0f00 	cmp.w	r8, #0
 80070a4:	d099      	beq.n	8006fda <_strtol_l.constprop.0+0x1a>
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	d1f6      	bne.n	8007098 <_strtol_l.constprop.0+0xd8>
 80070aa:	f8c8 1000 	str.w	r1, [r8]
 80070ae:	e794      	b.n	8006fda <_strtol_l.constprop.0+0x1a>
 80070b0:	08007c33 	.word	0x08007c33

080070b4 <strtol>:
 80070b4:	4613      	mov	r3, r2
 80070b6:	460a      	mov	r2, r1
 80070b8:	4601      	mov	r1, r0
 80070ba:	4802      	ldr	r0, [pc, #8]	@ (80070c4 <strtol+0x10>)
 80070bc:	6800      	ldr	r0, [r0, #0]
 80070be:	f7ff bf7f 	b.w	8006fc0 <_strtol_l.constprop.0>
 80070c2:	bf00      	nop
 80070c4:	20000014 	.word	0x20000014

080070c8 <siprintf>:
 80070c8:	b40e      	push	{r1, r2, r3}
 80070ca:	b500      	push	{lr}
 80070cc:	b09c      	sub	sp, #112	@ 0x70
 80070ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80070d0:	9002      	str	r0, [sp, #8]
 80070d2:	9006      	str	r0, [sp, #24]
 80070d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070d8:	4809      	ldr	r0, [pc, #36]	@ (8007100 <siprintf+0x38>)
 80070da:	9107      	str	r1, [sp, #28]
 80070dc:	9104      	str	r1, [sp, #16]
 80070de:	4909      	ldr	r1, [pc, #36]	@ (8007104 <siprintf+0x3c>)
 80070e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e4:	9105      	str	r1, [sp, #20]
 80070e6:	6800      	ldr	r0, [r0, #0]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	a902      	add	r1, sp, #8
 80070ec:	f000 f9f8 	bl	80074e0 <_svfiprintf_r>
 80070f0:	9b02      	ldr	r3, [sp, #8]
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	b01c      	add	sp, #112	@ 0x70
 80070f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070fc:	b003      	add	sp, #12
 80070fe:	4770      	bx	lr
 8007100:	20000014 	.word	0x20000014
 8007104:	ffff0208 	.word	0xffff0208

08007108 <memset>:
 8007108:	4402      	add	r2, r0
 800710a:	4603      	mov	r3, r0
 800710c:	4293      	cmp	r3, r2
 800710e:	d100      	bne.n	8007112 <memset+0xa>
 8007110:	4770      	bx	lr
 8007112:	f803 1b01 	strb.w	r1, [r3], #1
 8007116:	e7f9      	b.n	800710c <memset+0x4>

08007118 <_reclaim_reent>:
 8007118:	4b29      	ldr	r3, [pc, #164]	@ (80071c0 <_reclaim_reent+0xa8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4283      	cmp	r3, r0
 800711e:	b570      	push	{r4, r5, r6, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	d04b      	beq.n	80071bc <_reclaim_reent+0xa4>
 8007124:	69c3      	ldr	r3, [r0, #28]
 8007126:	b1ab      	cbz	r3, 8007154 <_reclaim_reent+0x3c>
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	b16b      	cbz	r3, 8007148 <_reclaim_reent+0x30>
 800712c:	2500      	movs	r5, #0
 800712e:	69e3      	ldr	r3, [r4, #28]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	5959      	ldr	r1, [r3, r5]
 8007134:	2900      	cmp	r1, #0
 8007136:	d13b      	bne.n	80071b0 <_reclaim_reent+0x98>
 8007138:	3504      	adds	r5, #4
 800713a:	2d80      	cmp	r5, #128	@ 0x80
 800713c:	d1f7      	bne.n	800712e <_reclaim_reent+0x16>
 800713e:	69e3      	ldr	r3, [r4, #28]
 8007140:	4620      	mov	r0, r4
 8007142:	68d9      	ldr	r1, [r3, #12]
 8007144:	f000 f878 	bl	8007238 <_free_r>
 8007148:	69e3      	ldr	r3, [r4, #28]
 800714a:	6819      	ldr	r1, [r3, #0]
 800714c:	b111      	cbz	r1, 8007154 <_reclaim_reent+0x3c>
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f872 	bl	8007238 <_free_r>
 8007154:	6961      	ldr	r1, [r4, #20]
 8007156:	b111      	cbz	r1, 800715e <_reclaim_reent+0x46>
 8007158:	4620      	mov	r0, r4
 800715a:	f000 f86d 	bl	8007238 <_free_r>
 800715e:	69e1      	ldr	r1, [r4, #28]
 8007160:	b111      	cbz	r1, 8007168 <_reclaim_reent+0x50>
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f868 	bl	8007238 <_free_r>
 8007168:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800716a:	b111      	cbz	r1, 8007172 <_reclaim_reent+0x5a>
 800716c:	4620      	mov	r0, r4
 800716e:	f000 f863 	bl	8007238 <_free_r>
 8007172:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007174:	b111      	cbz	r1, 800717c <_reclaim_reent+0x64>
 8007176:	4620      	mov	r0, r4
 8007178:	f000 f85e 	bl	8007238 <_free_r>
 800717c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800717e:	b111      	cbz	r1, 8007186 <_reclaim_reent+0x6e>
 8007180:	4620      	mov	r0, r4
 8007182:	f000 f859 	bl	8007238 <_free_r>
 8007186:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007188:	b111      	cbz	r1, 8007190 <_reclaim_reent+0x78>
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f854 	bl	8007238 <_free_r>
 8007190:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007192:	b111      	cbz	r1, 800719a <_reclaim_reent+0x82>
 8007194:	4620      	mov	r0, r4
 8007196:	f000 f84f 	bl	8007238 <_free_r>
 800719a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800719c:	b111      	cbz	r1, 80071a4 <_reclaim_reent+0x8c>
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 f84a 	bl	8007238 <_free_r>
 80071a4:	6a23      	ldr	r3, [r4, #32]
 80071a6:	b14b      	cbz	r3, 80071bc <_reclaim_reent+0xa4>
 80071a8:	4620      	mov	r0, r4
 80071aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071ae:	4718      	bx	r3
 80071b0:	680e      	ldr	r6, [r1, #0]
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f840 	bl	8007238 <_free_r>
 80071b8:	4631      	mov	r1, r6
 80071ba:	e7bb      	b.n	8007134 <_reclaim_reent+0x1c>
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	bf00      	nop
 80071c0:	20000014 	.word	0x20000014

080071c4 <__errno>:
 80071c4:	4b01      	ldr	r3, [pc, #4]	@ (80071cc <__errno+0x8>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000014 	.word	0x20000014

080071d0 <__libc_init_array>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	4d0d      	ldr	r5, [pc, #52]	@ (8007208 <__libc_init_array+0x38>)
 80071d4:	4c0d      	ldr	r4, [pc, #52]	@ (800720c <__libc_init_array+0x3c>)
 80071d6:	1b64      	subs	r4, r4, r5
 80071d8:	10a4      	asrs	r4, r4, #2
 80071da:	2600      	movs	r6, #0
 80071dc:	42a6      	cmp	r6, r4
 80071de:	d109      	bne.n	80071f4 <__libc_init_array+0x24>
 80071e0:	4d0b      	ldr	r5, [pc, #44]	@ (8007210 <__libc_init_array+0x40>)
 80071e2:	4c0c      	ldr	r4, [pc, #48]	@ (8007214 <__libc_init_array+0x44>)
 80071e4:	f000 fc66 	bl	8007ab4 <_init>
 80071e8:	1b64      	subs	r4, r4, r5
 80071ea:	10a4      	asrs	r4, r4, #2
 80071ec:	2600      	movs	r6, #0
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	d105      	bne.n	80071fe <__libc_init_array+0x2e>
 80071f2:	bd70      	pop	{r4, r5, r6, pc}
 80071f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f8:	4798      	blx	r3
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7ee      	b.n	80071dc <__libc_init_array+0xc>
 80071fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007202:	4798      	blx	r3
 8007204:	3601      	adds	r6, #1
 8007206:	e7f2      	b.n	80071ee <__libc_init_array+0x1e>
 8007208:	08007d70 	.word	0x08007d70
 800720c:	08007d70 	.word	0x08007d70
 8007210:	08007d70 	.word	0x08007d70
 8007214:	08007d74 	.word	0x08007d74

08007218 <__retarget_lock_acquire_recursive>:
 8007218:	4770      	bx	lr

0800721a <__retarget_lock_release_recursive>:
 800721a:	4770      	bx	lr

0800721c <memcpy>:
 800721c:	440a      	add	r2, r1
 800721e:	4291      	cmp	r1, r2
 8007220:	f100 33ff 	add.w	r3, r0, #4294967295
 8007224:	d100      	bne.n	8007228 <memcpy+0xc>
 8007226:	4770      	bx	lr
 8007228:	b510      	push	{r4, lr}
 800722a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007232:	4291      	cmp	r1, r2
 8007234:	d1f9      	bne.n	800722a <memcpy+0xe>
 8007236:	bd10      	pop	{r4, pc}

08007238 <_free_r>:
 8007238:	b538      	push	{r3, r4, r5, lr}
 800723a:	4605      	mov	r5, r0
 800723c:	2900      	cmp	r1, #0
 800723e:	d041      	beq.n	80072c4 <_free_r+0x8c>
 8007240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007244:	1f0c      	subs	r4, r1, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	bfb8      	it	lt
 800724a:	18e4      	addlt	r4, r4, r3
 800724c:	f000 f8e0 	bl	8007410 <__malloc_lock>
 8007250:	4a1d      	ldr	r2, [pc, #116]	@ (80072c8 <_free_r+0x90>)
 8007252:	6813      	ldr	r3, [r2, #0]
 8007254:	b933      	cbnz	r3, 8007264 <_free_r+0x2c>
 8007256:	6063      	str	r3, [r4, #4]
 8007258:	6014      	str	r4, [r2, #0]
 800725a:	4628      	mov	r0, r5
 800725c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007260:	f000 b8dc 	b.w	800741c <__malloc_unlock>
 8007264:	42a3      	cmp	r3, r4
 8007266:	d908      	bls.n	800727a <_free_r+0x42>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	1821      	adds	r1, r4, r0
 800726c:	428b      	cmp	r3, r1
 800726e:	bf01      	itttt	eq
 8007270:	6819      	ldreq	r1, [r3, #0]
 8007272:	685b      	ldreq	r3, [r3, #4]
 8007274:	1809      	addeq	r1, r1, r0
 8007276:	6021      	streq	r1, [r4, #0]
 8007278:	e7ed      	b.n	8007256 <_free_r+0x1e>
 800727a:	461a      	mov	r2, r3
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b10b      	cbz	r3, 8007284 <_free_r+0x4c>
 8007280:	42a3      	cmp	r3, r4
 8007282:	d9fa      	bls.n	800727a <_free_r+0x42>
 8007284:	6811      	ldr	r1, [r2, #0]
 8007286:	1850      	adds	r0, r2, r1
 8007288:	42a0      	cmp	r0, r4
 800728a:	d10b      	bne.n	80072a4 <_free_r+0x6c>
 800728c:	6820      	ldr	r0, [r4, #0]
 800728e:	4401      	add	r1, r0
 8007290:	1850      	adds	r0, r2, r1
 8007292:	4283      	cmp	r3, r0
 8007294:	6011      	str	r1, [r2, #0]
 8007296:	d1e0      	bne.n	800725a <_free_r+0x22>
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	4408      	add	r0, r1
 80072a0:	6010      	str	r0, [r2, #0]
 80072a2:	e7da      	b.n	800725a <_free_r+0x22>
 80072a4:	d902      	bls.n	80072ac <_free_r+0x74>
 80072a6:	230c      	movs	r3, #12
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	e7d6      	b.n	800725a <_free_r+0x22>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	1821      	adds	r1, r4, r0
 80072b0:	428b      	cmp	r3, r1
 80072b2:	bf04      	itt	eq
 80072b4:	6819      	ldreq	r1, [r3, #0]
 80072b6:	685b      	ldreq	r3, [r3, #4]
 80072b8:	6063      	str	r3, [r4, #4]
 80072ba:	bf04      	itt	eq
 80072bc:	1809      	addeq	r1, r1, r0
 80072be:	6021      	streq	r1, [r4, #0]
 80072c0:	6054      	str	r4, [r2, #4]
 80072c2:	e7ca      	b.n	800725a <_free_r+0x22>
 80072c4:	bd38      	pop	{r3, r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20007364 	.word	0x20007364

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0f      	ldr	r6, [pc, #60]	@ (800730c <sbrk_aligned+0x40>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 fba6 	bl	8007a28 <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fba1 	bl	8007a28 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d103      	bne.n	80072f2 <sbrk_aligned+0x26>
 80072ea:	f04f 34ff 	mov.w	r4, #4294967295
 80072ee:	4620      	mov	r0, r4
 80072f0:	bd70      	pop	{r4, r5, r6, pc}
 80072f2:	1cc4      	adds	r4, r0, #3
 80072f4:	f024 0403 	bic.w	r4, r4, #3
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d0f8      	beq.n	80072ee <sbrk_aligned+0x22>
 80072fc:	1a21      	subs	r1, r4, r0
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fb92 	bl	8007a28 <_sbrk_r>
 8007304:	3001      	adds	r0, #1
 8007306:	d1f2      	bne.n	80072ee <sbrk_aligned+0x22>
 8007308:	e7ef      	b.n	80072ea <sbrk_aligned+0x1e>
 800730a:	bf00      	nop
 800730c:	20007360 	.word	0x20007360

08007310 <_malloc_r>:
 8007310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007314:	1ccd      	adds	r5, r1, #3
 8007316:	f025 0503 	bic.w	r5, r5, #3
 800731a:	3508      	adds	r5, #8
 800731c:	2d0c      	cmp	r5, #12
 800731e:	bf38      	it	cc
 8007320:	250c      	movcc	r5, #12
 8007322:	2d00      	cmp	r5, #0
 8007324:	4606      	mov	r6, r0
 8007326:	db01      	blt.n	800732c <_malloc_r+0x1c>
 8007328:	42a9      	cmp	r1, r5
 800732a:	d904      	bls.n	8007336 <_malloc_r+0x26>
 800732c:	230c      	movs	r3, #12
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	2000      	movs	r0, #0
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800740c <_malloc_r+0xfc>
 800733a:	f000 f869 	bl	8007410 <__malloc_lock>
 800733e:	f8d8 3000 	ldr.w	r3, [r8]
 8007342:	461c      	mov	r4, r3
 8007344:	bb44      	cbnz	r4, 8007398 <_malloc_r+0x88>
 8007346:	4629      	mov	r1, r5
 8007348:	4630      	mov	r0, r6
 800734a:	f7ff ffbf 	bl	80072cc <sbrk_aligned>
 800734e:	1c43      	adds	r3, r0, #1
 8007350:	4604      	mov	r4, r0
 8007352:	d158      	bne.n	8007406 <_malloc_r+0xf6>
 8007354:	f8d8 4000 	ldr.w	r4, [r8]
 8007358:	4627      	mov	r7, r4
 800735a:	2f00      	cmp	r7, #0
 800735c:	d143      	bne.n	80073e6 <_malloc_r+0xd6>
 800735e:	2c00      	cmp	r4, #0
 8007360:	d04b      	beq.n	80073fa <_malloc_r+0xea>
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	4639      	mov	r1, r7
 8007366:	4630      	mov	r0, r6
 8007368:	eb04 0903 	add.w	r9, r4, r3
 800736c:	f000 fb5c 	bl	8007a28 <_sbrk_r>
 8007370:	4581      	cmp	r9, r0
 8007372:	d142      	bne.n	80073fa <_malloc_r+0xea>
 8007374:	6821      	ldr	r1, [r4, #0]
 8007376:	1a6d      	subs	r5, r5, r1
 8007378:	4629      	mov	r1, r5
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ffa6 	bl	80072cc <sbrk_aligned>
 8007380:	3001      	adds	r0, #1
 8007382:	d03a      	beq.n	80073fa <_malloc_r+0xea>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	442b      	add	r3, r5
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	f8d8 3000 	ldr.w	r3, [r8]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	bb62      	cbnz	r2, 80073ec <_malloc_r+0xdc>
 8007392:	f8c8 7000 	str.w	r7, [r8]
 8007396:	e00f      	b.n	80073b8 <_malloc_r+0xa8>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	1b52      	subs	r2, r2, r5
 800739c:	d420      	bmi.n	80073e0 <_malloc_r+0xd0>
 800739e:	2a0b      	cmp	r2, #11
 80073a0:	d917      	bls.n	80073d2 <_malloc_r+0xc2>
 80073a2:	1961      	adds	r1, r4, r5
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	6025      	str	r5, [r4, #0]
 80073a8:	bf18      	it	ne
 80073aa:	6059      	strne	r1, [r3, #4]
 80073ac:	6863      	ldr	r3, [r4, #4]
 80073ae:	bf08      	it	eq
 80073b0:	f8c8 1000 	streq.w	r1, [r8]
 80073b4:	5162      	str	r2, [r4, r5]
 80073b6:	604b      	str	r3, [r1, #4]
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 f82f 	bl	800741c <__malloc_unlock>
 80073be:	f104 000b 	add.w	r0, r4, #11
 80073c2:	1d23      	adds	r3, r4, #4
 80073c4:	f020 0007 	bic.w	r0, r0, #7
 80073c8:	1ac2      	subs	r2, r0, r3
 80073ca:	bf1c      	itt	ne
 80073cc:	1a1b      	subne	r3, r3, r0
 80073ce:	50a3      	strne	r3, [r4, r2]
 80073d0:	e7af      	b.n	8007332 <_malloc_r+0x22>
 80073d2:	6862      	ldr	r2, [r4, #4]
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	bf0c      	ite	eq
 80073d8:	f8c8 2000 	streq.w	r2, [r8]
 80073dc:	605a      	strne	r2, [r3, #4]
 80073de:	e7eb      	b.n	80073b8 <_malloc_r+0xa8>
 80073e0:	4623      	mov	r3, r4
 80073e2:	6864      	ldr	r4, [r4, #4]
 80073e4:	e7ae      	b.n	8007344 <_malloc_r+0x34>
 80073e6:	463c      	mov	r4, r7
 80073e8:	687f      	ldr	r7, [r7, #4]
 80073ea:	e7b6      	b.n	800735a <_malloc_r+0x4a>
 80073ec:	461a      	mov	r2, r3
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d1fb      	bne.n	80073ec <_malloc_r+0xdc>
 80073f4:	2300      	movs	r3, #0
 80073f6:	6053      	str	r3, [r2, #4]
 80073f8:	e7de      	b.n	80073b8 <_malloc_r+0xa8>
 80073fa:	230c      	movs	r3, #12
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	4630      	mov	r0, r6
 8007400:	f000 f80c 	bl	800741c <__malloc_unlock>
 8007404:	e794      	b.n	8007330 <_malloc_r+0x20>
 8007406:	6005      	str	r5, [r0, #0]
 8007408:	e7d6      	b.n	80073b8 <_malloc_r+0xa8>
 800740a:	bf00      	nop
 800740c:	20007364 	.word	0x20007364

08007410 <__malloc_lock>:
 8007410:	4801      	ldr	r0, [pc, #4]	@ (8007418 <__malloc_lock+0x8>)
 8007412:	f7ff bf01 	b.w	8007218 <__retarget_lock_acquire_recursive>
 8007416:	bf00      	nop
 8007418:	2000735c 	.word	0x2000735c

0800741c <__malloc_unlock>:
 800741c:	4801      	ldr	r0, [pc, #4]	@ (8007424 <__malloc_unlock+0x8>)
 800741e:	f7ff befc 	b.w	800721a <__retarget_lock_release_recursive>
 8007422:	bf00      	nop
 8007424:	2000735c 	.word	0x2000735c

08007428 <__ssputs_r>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	688e      	ldr	r6, [r1, #8]
 800742e:	461f      	mov	r7, r3
 8007430:	42be      	cmp	r6, r7
 8007432:	680b      	ldr	r3, [r1, #0]
 8007434:	4682      	mov	sl, r0
 8007436:	460c      	mov	r4, r1
 8007438:	4690      	mov	r8, r2
 800743a:	d82d      	bhi.n	8007498 <__ssputs_r+0x70>
 800743c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007440:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007444:	d026      	beq.n	8007494 <__ssputs_r+0x6c>
 8007446:	6965      	ldr	r5, [r4, #20]
 8007448:	6909      	ldr	r1, [r1, #16]
 800744a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800744e:	eba3 0901 	sub.w	r9, r3, r1
 8007452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007456:	1c7b      	adds	r3, r7, #1
 8007458:	444b      	add	r3, r9
 800745a:	106d      	asrs	r5, r5, #1
 800745c:	429d      	cmp	r5, r3
 800745e:	bf38      	it	cc
 8007460:	461d      	movcc	r5, r3
 8007462:	0553      	lsls	r3, r2, #21
 8007464:	d527      	bpl.n	80074b6 <__ssputs_r+0x8e>
 8007466:	4629      	mov	r1, r5
 8007468:	f7ff ff52 	bl	8007310 <_malloc_r>
 800746c:	4606      	mov	r6, r0
 800746e:	b360      	cbz	r0, 80074ca <__ssputs_r+0xa2>
 8007470:	6921      	ldr	r1, [r4, #16]
 8007472:	464a      	mov	r2, r9
 8007474:	f7ff fed2 	bl	800721c <memcpy>
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800747e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	6126      	str	r6, [r4, #16]
 8007486:	6165      	str	r5, [r4, #20]
 8007488:	444e      	add	r6, r9
 800748a:	eba5 0509 	sub.w	r5, r5, r9
 800748e:	6026      	str	r6, [r4, #0]
 8007490:	60a5      	str	r5, [r4, #8]
 8007492:	463e      	mov	r6, r7
 8007494:	42be      	cmp	r6, r7
 8007496:	d900      	bls.n	800749a <__ssputs_r+0x72>
 8007498:	463e      	mov	r6, r7
 800749a:	6820      	ldr	r0, [r4, #0]
 800749c:	4632      	mov	r2, r6
 800749e:	4641      	mov	r1, r8
 80074a0:	f000 faa8 	bl	80079f4 <memmove>
 80074a4:	68a3      	ldr	r3, [r4, #8]
 80074a6:	1b9b      	subs	r3, r3, r6
 80074a8:	60a3      	str	r3, [r4, #8]
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	4433      	add	r3, r6
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	2000      	movs	r0, #0
 80074b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b6:	462a      	mov	r2, r5
 80074b8:	f000 fac6 	bl	8007a48 <_realloc_r>
 80074bc:	4606      	mov	r6, r0
 80074be:	2800      	cmp	r0, #0
 80074c0:	d1e0      	bne.n	8007484 <__ssputs_r+0x5c>
 80074c2:	6921      	ldr	r1, [r4, #16]
 80074c4:	4650      	mov	r0, sl
 80074c6:	f7ff feb7 	bl	8007238 <_free_r>
 80074ca:	230c      	movs	r3, #12
 80074cc:	f8ca 3000 	str.w	r3, [sl]
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	e7e9      	b.n	80074b2 <__ssputs_r+0x8a>
	...

080074e0 <_svfiprintf_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	4698      	mov	r8, r3
 80074e6:	898b      	ldrh	r3, [r1, #12]
 80074e8:	061b      	lsls	r3, r3, #24
 80074ea:	b09d      	sub	sp, #116	@ 0x74
 80074ec:	4607      	mov	r7, r0
 80074ee:	460d      	mov	r5, r1
 80074f0:	4614      	mov	r4, r2
 80074f2:	d510      	bpl.n	8007516 <_svfiprintf_r+0x36>
 80074f4:	690b      	ldr	r3, [r1, #16]
 80074f6:	b973      	cbnz	r3, 8007516 <_svfiprintf_r+0x36>
 80074f8:	2140      	movs	r1, #64	@ 0x40
 80074fa:	f7ff ff09 	bl	8007310 <_malloc_r>
 80074fe:	6028      	str	r0, [r5, #0]
 8007500:	6128      	str	r0, [r5, #16]
 8007502:	b930      	cbnz	r0, 8007512 <_svfiprintf_r+0x32>
 8007504:	230c      	movs	r3, #12
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	f04f 30ff 	mov.w	r0, #4294967295
 800750c:	b01d      	add	sp, #116	@ 0x74
 800750e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007512:	2340      	movs	r3, #64	@ 0x40
 8007514:	616b      	str	r3, [r5, #20]
 8007516:	2300      	movs	r3, #0
 8007518:	9309      	str	r3, [sp, #36]	@ 0x24
 800751a:	2320      	movs	r3, #32
 800751c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007520:	f8cd 800c 	str.w	r8, [sp, #12]
 8007524:	2330      	movs	r3, #48	@ 0x30
 8007526:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076c4 <_svfiprintf_r+0x1e4>
 800752a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800752e:	f04f 0901 	mov.w	r9, #1
 8007532:	4623      	mov	r3, r4
 8007534:	469a      	mov	sl, r3
 8007536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753a:	b10a      	cbz	r2, 8007540 <_svfiprintf_r+0x60>
 800753c:	2a25      	cmp	r2, #37	@ 0x25
 800753e:	d1f9      	bne.n	8007534 <_svfiprintf_r+0x54>
 8007540:	ebba 0b04 	subs.w	fp, sl, r4
 8007544:	d00b      	beq.n	800755e <_svfiprintf_r+0x7e>
 8007546:	465b      	mov	r3, fp
 8007548:	4622      	mov	r2, r4
 800754a:	4629      	mov	r1, r5
 800754c:	4638      	mov	r0, r7
 800754e:	f7ff ff6b 	bl	8007428 <__ssputs_r>
 8007552:	3001      	adds	r0, #1
 8007554:	f000 80a7 	beq.w	80076a6 <_svfiprintf_r+0x1c6>
 8007558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800755a:	445a      	add	r2, fp
 800755c:	9209      	str	r2, [sp, #36]	@ 0x24
 800755e:	f89a 3000 	ldrb.w	r3, [sl]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 809f 	beq.w	80076a6 <_svfiprintf_r+0x1c6>
 8007568:	2300      	movs	r3, #0
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007572:	f10a 0a01 	add.w	sl, sl, #1
 8007576:	9304      	str	r3, [sp, #16]
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800757e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007580:	4654      	mov	r4, sl
 8007582:	2205      	movs	r2, #5
 8007584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007588:	484e      	ldr	r0, [pc, #312]	@ (80076c4 <_svfiprintf_r+0x1e4>)
 800758a:	f7f8 fe91 	bl	80002b0 <memchr>
 800758e:	9a04      	ldr	r2, [sp, #16]
 8007590:	b9d8      	cbnz	r0, 80075ca <_svfiprintf_r+0xea>
 8007592:	06d0      	lsls	r0, r2, #27
 8007594:	bf44      	itt	mi
 8007596:	2320      	movmi	r3, #32
 8007598:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800759c:	0711      	lsls	r1, r2, #28
 800759e:	bf44      	itt	mi
 80075a0:	232b      	movmi	r3, #43	@ 0x2b
 80075a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075a6:	f89a 3000 	ldrb.w	r3, [sl]
 80075aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ac:	d015      	beq.n	80075da <_svfiprintf_r+0xfa>
 80075ae:	9a07      	ldr	r2, [sp, #28]
 80075b0:	4654      	mov	r4, sl
 80075b2:	2000      	movs	r0, #0
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4621      	mov	r1, r4
 80075ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075be:	3b30      	subs	r3, #48	@ 0x30
 80075c0:	2b09      	cmp	r3, #9
 80075c2:	d94b      	bls.n	800765c <_svfiprintf_r+0x17c>
 80075c4:	b1b0      	cbz	r0, 80075f4 <_svfiprintf_r+0x114>
 80075c6:	9207      	str	r2, [sp, #28]
 80075c8:	e014      	b.n	80075f4 <_svfiprintf_r+0x114>
 80075ca:	eba0 0308 	sub.w	r3, r0, r8
 80075ce:	fa09 f303 	lsl.w	r3, r9, r3
 80075d2:	4313      	orrs	r3, r2
 80075d4:	9304      	str	r3, [sp, #16]
 80075d6:	46a2      	mov	sl, r4
 80075d8:	e7d2      	b.n	8007580 <_svfiprintf_r+0xa0>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	1d19      	adds	r1, r3, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	9103      	str	r1, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfbb      	ittet	lt
 80075e6:	425b      	neglt	r3, r3
 80075e8:	f042 0202 	orrlt.w	r2, r2, #2
 80075ec:	9307      	strge	r3, [sp, #28]
 80075ee:	9307      	strlt	r3, [sp, #28]
 80075f0:	bfb8      	it	lt
 80075f2:	9204      	strlt	r2, [sp, #16]
 80075f4:	7823      	ldrb	r3, [r4, #0]
 80075f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80075f8:	d10a      	bne.n	8007610 <_svfiprintf_r+0x130>
 80075fa:	7863      	ldrb	r3, [r4, #1]
 80075fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80075fe:	d132      	bne.n	8007666 <_svfiprintf_r+0x186>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9203      	str	r2, [sp, #12]
 8007608:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800760c:	3402      	adds	r4, #2
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076d4 <_svfiprintf_r+0x1f4>
 8007614:	7821      	ldrb	r1, [r4, #0]
 8007616:	2203      	movs	r2, #3
 8007618:	4650      	mov	r0, sl
 800761a:	f7f8 fe49 	bl	80002b0 <memchr>
 800761e:	b138      	cbz	r0, 8007630 <_svfiprintf_r+0x150>
 8007620:	9b04      	ldr	r3, [sp, #16]
 8007622:	eba0 000a 	sub.w	r0, r0, sl
 8007626:	2240      	movs	r2, #64	@ 0x40
 8007628:	4082      	lsls	r2, r0
 800762a:	4313      	orrs	r3, r2
 800762c:	3401      	adds	r4, #1
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007634:	4824      	ldr	r0, [pc, #144]	@ (80076c8 <_svfiprintf_r+0x1e8>)
 8007636:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800763a:	2206      	movs	r2, #6
 800763c:	f7f8 fe38 	bl	80002b0 <memchr>
 8007640:	2800      	cmp	r0, #0
 8007642:	d036      	beq.n	80076b2 <_svfiprintf_r+0x1d2>
 8007644:	4b21      	ldr	r3, [pc, #132]	@ (80076cc <_svfiprintf_r+0x1ec>)
 8007646:	bb1b      	cbnz	r3, 8007690 <_svfiprintf_r+0x1b0>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	3307      	adds	r3, #7
 800764c:	f023 0307 	bic.w	r3, r3, #7
 8007650:	3308      	adds	r3, #8
 8007652:	9303      	str	r3, [sp, #12]
 8007654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007656:	4433      	add	r3, r6
 8007658:	9309      	str	r3, [sp, #36]	@ 0x24
 800765a:	e76a      	b.n	8007532 <_svfiprintf_r+0x52>
 800765c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007660:	460c      	mov	r4, r1
 8007662:	2001      	movs	r0, #1
 8007664:	e7a8      	b.n	80075b8 <_svfiprintf_r+0xd8>
 8007666:	2300      	movs	r3, #0
 8007668:	3401      	adds	r4, #1
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	4619      	mov	r1, r3
 800766e:	f04f 0c0a 	mov.w	ip, #10
 8007672:	4620      	mov	r0, r4
 8007674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007678:	3a30      	subs	r2, #48	@ 0x30
 800767a:	2a09      	cmp	r2, #9
 800767c:	d903      	bls.n	8007686 <_svfiprintf_r+0x1a6>
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0c6      	beq.n	8007610 <_svfiprintf_r+0x130>
 8007682:	9105      	str	r1, [sp, #20]
 8007684:	e7c4      	b.n	8007610 <_svfiprintf_r+0x130>
 8007686:	fb0c 2101 	mla	r1, ip, r1, r2
 800768a:	4604      	mov	r4, r0
 800768c:	2301      	movs	r3, #1
 800768e:	e7f0      	b.n	8007672 <_svfiprintf_r+0x192>
 8007690:	ab03      	add	r3, sp, #12
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	462a      	mov	r2, r5
 8007696:	4b0e      	ldr	r3, [pc, #56]	@ (80076d0 <_svfiprintf_r+0x1f0>)
 8007698:	a904      	add	r1, sp, #16
 800769a:	4638      	mov	r0, r7
 800769c:	f3af 8000 	nop.w
 80076a0:	1c42      	adds	r2, r0, #1
 80076a2:	4606      	mov	r6, r0
 80076a4:	d1d6      	bne.n	8007654 <_svfiprintf_r+0x174>
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	065b      	lsls	r3, r3, #25
 80076aa:	f53f af2d 	bmi.w	8007508 <_svfiprintf_r+0x28>
 80076ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076b0:	e72c      	b.n	800750c <_svfiprintf_r+0x2c>
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	462a      	mov	r2, r5
 80076b8:	4b05      	ldr	r3, [pc, #20]	@ (80076d0 <_svfiprintf_r+0x1f0>)
 80076ba:	a904      	add	r1, sp, #16
 80076bc:	4638      	mov	r0, r7
 80076be:	f000 f879 	bl	80077b4 <_printf_i>
 80076c2:	e7ed      	b.n	80076a0 <_svfiprintf_r+0x1c0>
 80076c4:	08007d33 	.word	0x08007d33
 80076c8:	08007d3d 	.word	0x08007d3d
 80076cc:	00000000 	.word	0x00000000
 80076d0:	08007429 	.word	0x08007429
 80076d4:	08007d39 	.word	0x08007d39

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4616      	mov	r6, r2
 80076de:	4698      	mov	r8, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfb8      	it	lt
 80076ec:	4613      	movlt	r3, r2
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076f4:	4607      	mov	r7, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	b10a      	cbz	r2, 80076fe <_printf_common+0x26>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	6833      	ldrmi	r3, [r6, #0]
 8007706:	3302      	addmi	r3, #2
 8007708:	6033      	strmi	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f015 0506 	ands.w	r5, r5, #6
 8007710:	d106      	bne.n	8007720 <_printf_common+0x48>
 8007712:	f104 0a19 	add.w	sl, r4, #25
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	6832      	ldr	r2, [r6, #0]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ab      	cmp	r3, r5
 800771e:	dc26      	bgt.n	800776e <_printf_common+0x96>
 8007720:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	3b00      	subs	r3, #0
 8007728:	bf18      	it	ne
 800772a:	2301      	movne	r3, #1
 800772c:	0692      	lsls	r2, r2, #26
 800772e:	d42b      	bmi.n	8007788 <_printf_common+0xb0>
 8007730:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007734:	4641      	mov	r1, r8
 8007736:	4638      	mov	r0, r7
 8007738:	47c8      	blx	r9
 800773a:	3001      	adds	r0, #1
 800773c:	d01e      	beq.n	800777c <_printf_common+0xa4>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	6922      	ldr	r2, [r4, #16]
 8007742:	f003 0306 	and.w	r3, r3, #6
 8007746:	2b04      	cmp	r3, #4
 8007748:	bf02      	ittt	eq
 800774a:	68e5      	ldreq	r5, [r4, #12]
 800774c:	6833      	ldreq	r3, [r6, #0]
 800774e:	1aed      	subeq	r5, r5, r3
 8007750:	68a3      	ldr	r3, [r4, #8]
 8007752:	bf0c      	ite	eq
 8007754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007758:	2500      	movne	r5, #0
 800775a:	4293      	cmp	r3, r2
 800775c:	bfc4      	itt	gt
 800775e:	1a9b      	subgt	r3, r3, r2
 8007760:	18ed      	addgt	r5, r5, r3
 8007762:	2600      	movs	r6, #0
 8007764:	341a      	adds	r4, #26
 8007766:	42b5      	cmp	r5, r6
 8007768:	d11a      	bne.n	80077a0 <_printf_common+0xc8>
 800776a:	2000      	movs	r0, #0
 800776c:	e008      	b.n	8007780 <_printf_common+0xa8>
 800776e:	2301      	movs	r3, #1
 8007770:	4652      	mov	r2, sl
 8007772:	4641      	mov	r1, r8
 8007774:	4638      	mov	r0, r7
 8007776:	47c8      	blx	r9
 8007778:	3001      	adds	r0, #1
 800777a:	d103      	bne.n	8007784 <_printf_common+0xac>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007784:	3501      	adds	r5, #1
 8007786:	e7c6      	b.n	8007716 <_printf_common+0x3e>
 8007788:	18e1      	adds	r1, r4, r3
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	2030      	movs	r0, #48	@ 0x30
 800778e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007792:	4422      	add	r2, r4
 8007794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007798:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800779c:	3302      	adds	r3, #2
 800779e:	e7c7      	b.n	8007730 <_printf_common+0x58>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4622      	mov	r2, r4
 80077a4:	4641      	mov	r1, r8
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c8      	blx	r9
 80077aa:	3001      	adds	r0, #1
 80077ac:	d0e6      	beq.n	800777c <_printf_common+0xa4>
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7d9      	b.n	8007766 <_printf_common+0x8e>
	...

080077b4 <_printf_i>:
 80077b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	7e0f      	ldrb	r7, [r1, #24]
 80077ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077bc:	2f78      	cmp	r7, #120	@ 0x78
 80077be:	4691      	mov	r9, r2
 80077c0:	4680      	mov	r8, r0
 80077c2:	460c      	mov	r4, r1
 80077c4:	469a      	mov	sl, r3
 80077c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077ca:	d807      	bhi.n	80077dc <_printf_i+0x28>
 80077cc:	2f62      	cmp	r7, #98	@ 0x62
 80077ce:	d80a      	bhi.n	80077e6 <_printf_i+0x32>
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f000 80d2 	beq.w	800797a <_printf_i+0x1c6>
 80077d6:	2f58      	cmp	r7, #88	@ 0x58
 80077d8:	f000 80b9 	beq.w	800794e <_printf_i+0x19a>
 80077dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077e4:	e03a      	b.n	800785c <_printf_i+0xa8>
 80077e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077ea:	2b15      	cmp	r3, #21
 80077ec:	d8f6      	bhi.n	80077dc <_printf_i+0x28>
 80077ee:	a101      	add	r1, pc, #4	@ (adr r1, 80077f4 <_printf_i+0x40>)
 80077f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	08007861 	.word	0x08007861
 80077fc:	080077dd 	.word	0x080077dd
 8007800:	080077dd 	.word	0x080077dd
 8007804:	080077dd 	.word	0x080077dd
 8007808:	080077dd 	.word	0x080077dd
 800780c:	08007861 	.word	0x08007861
 8007810:	080077dd 	.word	0x080077dd
 8007814:	080077dd 	.word	0x080077dd
 8007818:	080077dd 	.word	0x080077dd
 800781c:	080077dd 	.word	0x080077dd
 8007820:	08007961 	.word	0x08007961
 8007824:	0800788b 	.word	0x0800788b
 8007828:	0800791b 	.word	0x0800791b
 800782c:	080077dd 	.word	0x080077dd
 8007830:	080077dd 	.word	0x080077dd
 8007834:	08007983 	.word	0x08007983
 8007838:	080077dd 	.word	0x080077dd
 800783c:	0800788b 	.word	0x0800788b
 8007840:	080077dd 	.word	0x080077dd
 8007844:	080077dd 	.word	0x080077dd
 8007848:	08007923 	.word	0x08007923
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6032      	str	r2, [r6, #0]
 8007854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800785c:	2301      	movs	r3, #1
 800785e:	e09d      	b.n	800799c <_printf_i+0x1e8>
 8007860:	6833      	ldr	r3, [r6, #0]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1d19      	adds	r1, r3, #4
 8007866:	6031      	str	r1, [r6, #0]
 8007868:	0606      	lsls	r6, r0, #24
 800786a:	d501      	bpl.n	8007870 <_printf_i+0xbc>
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	e003      	b.n	8007878 <_printf_i+0xc4>
 8007870:	0645      	lsls	r5, r0, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0xb8>
 8007874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007878:	2d00      	cmp	r5, #0
 800787a:	da03      	bge.n	8007884 <_printf_i+0xd0>
 800787c:	232d      	movs	r3, #45	@ 0x2d
 800787e:	426d      	negs	r5, r5
 8007880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007884:	4859      	ldr	r0, [pc, #356]	@ (80079ec <_printf_i+0x238>)
 8007886:	230a      	movs	r3, #10
 8007888:	e011      	b.n	80078ae <_printf_i+0xfa>
 800788a:	6821      	ldr	r1, [r4, #0]
 800788c:	6833      	ldr	r3, [r6, #0]
 800788e:	0608      	lsls	r0, r1, #24
 8007890:	f853 5b04 	ldr.w	r5, [r3], #4
 8007894:	d402      	bmi.n	800789c <_printf_i+0xe8>
 8007896:	0649      	lsls	r1, r1, #25
 8007898:	bf48      	it	mi
 800789a:	b2ad      	uxthmi	r5, r5
 800789c:	2f6f      	cmp	r7, #111	@ 0x6f
 800789e:	4853      	ldr	r0, [pc, #332]	@ (80079ec <_printf_i+0x238>)
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	bf14      	ite	ne
 80078a4:	230a      	movne	r3, #10
 80078a6:	2308      	moveq	r3, #8
 80078a8:	2100      	movs	r1, #0
 80078aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078ae:	6866      	ldr	r6, [r4, #4]
 80078b0:	60a6      	str	r6, [r4, #8]
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	bfa2      	ittt	ge
 80078b6:	6821      	ldrge	r1, [r4, #0]
 80078b8:	f021 0104 	bicge.w	r1, r1, #4
 80078bc:	6021      	strge	r1, [r4, #0]
 80078be:	b90d      	cbnz	r5, 80078c4 <_printf_i+0x110>
 80078c0:	2e00      	cmp	r6, #0
 80078c2:	d04b      	beq.n	800795c <_printf_i+0x1a8>
 80078c4:	4616      	mov	r6, r2
 80078c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80078ca:	fb03 5711 	mls	r7, r3, r1, r5
 80078ce:	5dc7      	ldrb	r7, [r0, r7]
 80078d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078d4:	462f      	mov	r7, r5
 80078d6:	42bb      	cmp	r3, r7
 80078d8:	460d      	mov	r5, r1
 80078da:	d9f4      	bls.n	80078c6 <_printf_i+0x112>
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d10b      	bne.n	80078f8 <_printf_i+0x144>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	07df      	lsls	r7, r3, #31
 80078e4:	d508      	bpl.n	80078f8 <_printf_i+0x144>
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	6861      	ldr	r1, [r4, #4]
 80078ea:	4299      	cmp	r1, r3
 80078ec:	bfde      	ittt	le
 80078ee:	2330      	movle	r3, #48	@ 0x30
 80078f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078f8:	1b92      	subs	r2, r2, r6
 80078fa:	6122      	str	r2, [r4, #16]
 80078fc:	f8cd a000 	str.w	sl, [sp]
 8007900:	464b      	mov	r3, r9
 8007902:	aa03      	add	r2, sp, #12
 8007904:	4621      	mov	r1, r4
 8007906:	4640      	mov	r0, r8
 8007908:	f7ff fee6 	bl	80076d8 <_printf_common>
 800790c:	3001      	adds	r0, #1
 800790e:	d14a      	bne.n	80079a6 <_printf_i+0x1f2>
 8007910:	f04f 30ff 	mov.w	r0, #4294967295
 8007914:	b004      	add	sp, #16
 8007916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	f043 0320 	orr.w	r3, r3, #32
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	4833      	ldr	r0, [pc, #204]	@ (80079f0 <_printf_i+0x23c>)
 8007924:	2778      	movs	r7, #120	@ 0x78
 8007926:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	6831      	ldr	r1, [r6, #0]
 800792e:	061f      	lsls	r7, r3, #24
 8007930:	f851 5b04 	ldr.w	r5, [r1], #4
 8007934:	d402      	bmi.n	800793c <_printf_i+0x188>
 8007936:	065f      	lsls	r7, r3, #25
 8007938:	bf48      	it	mi
 800793a:	b2ad      	uxthmi	r5, r5
 800793c:	6031      	str	r1, [r6, #0]
 800793e:	07d9      	lsls	r1, r3, #31
 8007940:	bf44      	itt	mi
 8007942:	f043 0320 	orrmi.w	r3, r3, #32
 8007946:	6023      	strmi	r3, [r4, #0]
 8007948:	b11d      	cbz	r5, 8007952 <_printf_i+0x19e>
 800794a:	2310      	movs	r3, #16
 800794c:	e7ac      	b.n	80078a8 <_printf_i+0xf4>
 800794e:	4827      	ldr	r0, [pc, #156]	@ (80079ec <_printf_i+0x238>)
 8007950:	e7e9      	b.n	8007926 <_printf_i+0x172>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	f023 0320 	bic.w	r3, r3, #32
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	e7f6      	b.n	800794a <_printf_i+0x196>
 800795c:	4616      	mov	r6, r2
 800795e:	e7bd      	b.n	80078dc <_printf_i+0x128>
 8007960:	6833      	ldr	r3, [r6, #0]
 8007962:	6825      	ldr	r5, [r4, #0]
 8007964:	6961      	ldr	r1, [r4, #20]
 8007966:	1d18      	adds	r0, r3, #4
 8007968:	6030      	str	r0, [r6, #0]
 800796a:	062e      	lsls	r6, r5, #24
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	d501      	bpl.n	8007974 <_printf_i+0x1c0>
 8007970:	6019      	str	r1, [r3, #0]
 8007972:	e002      	b.n	800797a <_printf_i+0x1c6>
 8007974:	0668      	lsls	r0, r5, #25
 8007976:	d5fb      	bpl.n	8007970 <_printf_i+0x1bc>
 8007978:	8019      	strh	r1, [r3, #0]
 800797a:	2300      	movs	r3, #0
 800797c:	6123      	str	r3, [r4, #16]
 800797e:	4616      	mov	r6, r2
 8007980:	e7bc      	b.n	80078fc <_printf_i+0x148>
 8007982:	6833      	ldr	r3, [r6, #0]
 8007984:	1d1a      	adds	r2, r3, #4
 8007986:	6032      	str	r2, [r6, #0]
 8007988:	681e      	ldr	r6, [r3, #0]
 800798a:	6862      	ldr	r2, [r4, #4]
 800798c:	2100      	movs	r1, #0
 800798e:	4630      	mov	r0, r6
 8007990:	f7f8 fc8e 	bl	80002b0 <memchr>
 8007994:	b108      	cbz	r0, 800799a <_printf_i+0x1e6>
 8007996:	1b80      	subs	r0, r0, r6
 8007998:	6060      	str	r0, [r4, #4]
 800799a:	6863      	ldr	r3, [r4, #4]
 800799c:	6123      	str	r3, [r4, #16]
 800799e:	2300      	movs	r3, #0
 80079a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a4:	e7aa      	b.n	80078fc <_printf_i+0x148>
 80079a6:	6923      	ldr	r3, [r4, #16]
 80079a8:	4632      	mov	r2, r6
 80079aa:	4649      	mov	r1, r9
 80079ac:	4640      	mov	r0, r8
 80079ae:	47d0      	blx	sl
 80079b0:	3001      	adds	r0, #1
 80079b2:	d0ad      	beq.n	8007910 <_printf_i+0x15c>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	079b      	lsls	r3, r3, #30
 80079b8:	d413      	bmi.n	80079e2 <_printf_i+0x22e>
 80079ba:	68e0      	ldr	r0, [r4, #12]
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	4298      	cmp	r0, r3
 80079c0:	bfb8      	it	lt
 80079c2:	4618      	movlt	r0, r3
 80079c4:	e7a6      	b.n	8007914 <_printf_i+0x160>
 80079c6:	2301      	movs	r3, #1
 80079c8:	4632      	mov	r2, r6
 80079ca:	4649      	mov	r1, r9
 80079cc:	4640      	mov	r0, r8
 80079ce:	47d0      	blx	sl
 80079d0:	3001      	adds	r0, #1
 80079d2:	d09d      	beq.n	8007910 <_printf_i+0x15c>
 80079d4:	3501      	adds	r5, #1
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	9903      	ldr	r1, [sp, #12]
 80079da:	1a5b      	subs	r3, r3, r1
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dcf2      	bgt.n	80079c6 <_printf_i+0x212>
 80079e0:	e7eb      	b.n	80079ba <_printf_i+0x206>
 80079e2:	2500      	movs	r5, #0
 80079e4:	f104 0619 	add.w	r6, r4, #25
 80079e8:	e7f5      	b.n	80079d6 <_printf_i+0x222>
 80079ea:	bf00      	nop
 80079ec:	08007d44 	.word	0x08007d44
 80079f0:	08007d55 	.word	0x08007d55

080079f4 <memmove>:
 80079f4:	4288      	cmp	r0, r1
 80079f6:	b510      	push	{r4, lr}
 80079f8:	eb01 0402 	add.w	r4, r1, r2
 80079fc:	d902      	bls.n	8007a04 <memmove+0x10>
 80079fe:	4284      	cmp	r4, r0
 8007a00:	4623      	mov	r3, r4
 8007a02:	d807      	bhi.n	8007a14 <memmove+0x20>
 8007a04:	1e43      	subs	r3, r0, #1
 8007a06:	42a1      	cmp	r1, r4
 8007a08:	d008      	beq.n	8007a1c <memmove+0x28>
 8007a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a12:	e7f8      	b.n	8007a06 <memmove+0x12>
 8007a14:	4402      	add	r2, r0
 8007a16:	4601      	mov	r1, r0
 8007a18:	428a      	cmp	r2, r1
 8007a1a:	d100      	bne.n	8007a1e <memmove+0x2a>
 8007a1c:	bd10      	pop	{r4, pc}
 8007a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a26:	e7f7      	b.n	8007a18 <memmove+0x24>

08007a28 <_sbrk_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	@ (8007a44 <_sbrk_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7f9 f92e 	bl	8000c94 <_sbrk>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_sbrk_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_sbrk_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	20007358 	.word	0x20007358

08007a48 <_realloc_r>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	4615      	mov	r5, r2
 8007a50:	460c      	mov	r4, r1
 8007a52:	b921      	cbnz	r1, 8007a5e <_realloc_r+0x16>
 8007a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a58:	4611      	mov	r1, r2
 8007a5a:	f7ff bc59 	b.w	8007310 <_malloc_r>
 8007a5e:	b92a      	cbnz	r2, 8007a6c <_realloc_r+0x24>
 8007a60:	f7ff fbea 	bl	8007238 <_free_r>
 8007a64:	2400      	movs	r4, #0
 8007a66:	4620      	mov	r0, r4
 8007a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a6c:	f000 f81a 	bl	8007aa4 <_malloc_usable_size_r>
 8007a70:	4285      	cmp	r5, r0
 8007a72:	4606      	mov	r6, r0
 8007a74:	d802      	bhi.n	8007a7c <_realloc_r+0x34>
 8007a76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007a7a:	d8f4      	bhi.n	8007a66 <_realloc_r+0x1e>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4640      	mov	r0, r8
 8007a80:	f7ff fc46 	bl	8007310 <_malloc_r>
 8007a84:	4607      	mov	r7, r0
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d0ec      	beq.n	8007a64 <_realloc_r+0x1c>
 8007a8a:	42b5      	cmp	r5, r6
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	4621      	mov	r1, r4
 8007a90:	bf28      	it	cs
 8007a92:	4632      	movcs	r2, r6
 8007a94:	f7ff fbc2 	bl	800721c <memcpy>
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4640      	mov	r0, r8
 8007a9c:	f7ff fbcc 	bl	8007238 <_free_r>
 8007aa0:	463c      	mov	r4, r7
 8007aa2:	e7e0      	b.n	8007a66 <_realloc_r+0x1e>

08007aa4 <_malloc_usable_size_r>:
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f18      	subs	r0, r3, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfbc      	itt	lt
 8007aae:	580b      	ldrlt	r3, [r1, r0]
 8007ab0:	18c0      	addlt	r0, r0, r3
 8007ab2:	4770      	bx	lr

08007ab4 <_init>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr

08007ac0 <_fini>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr
